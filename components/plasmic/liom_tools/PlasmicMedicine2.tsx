/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: a29y6B-hca5R

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Backgrond from "../../Backgrond"; // plasmic-import: nqaGqDTn_cay/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LoadingConclusion from "../../LoadingConclusion"; // plasmic-import: 4McqJ57YwWl3/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import LineClomp from "../../LineClomp"; // plasmic-import: VHAYS5YHy7AC/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import ImageOpload from "../../ImageOpload"; // plasmic-import: -SoKEb6qZYKB/component
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: jcOa6bt_bLwO/codeComponent
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant
import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicMedicine2.module.css"; // plasmic-import: a29y6B-hca5R/css

import XIcon from "../hamdast_sdk/icons/PlasmicIcon__X"; // plasmic-import: S0M2VMEAEs7X/icon
import Icon189Icon from "./icons/PlasmicIcon__Icon189"; // plasmic-import: WQxcDyZpj2MT/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import Icon118Icon from "./icons/PlasmicIcon__Icon118"; // plasmic-import: DnG_0B8ScC9o/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: 3GJi3NV2X6Zg/icon
import Icon117Icon from "./icons/PlasmicIcon__Icon117"; // plasmic-import: v74DW-fSFwuD/icon
import Icon212Icon from "./icons/PlasmicIcon__Icon212"; // plasmic-import: qu0_vn04sR3f/icon
import Icon207Icon from "./icons/PlasmicIcon__Icon207"; // plasmic-import: oF8KcKzq4Vx6/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon214Icon from "./icons/PlasmicIcon__Icon214"; // plasmic-import: Z2VM7o85ZA5W/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon210Icon from "./icons/PlasmicIcon__Icon210"; // plasmic-import: lXiR3SAmtr5y/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: CIGrIuwcL9LP/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicMedicine2__VariantMembers = {
  upload2: "upload2";
};
export type PlasmicMedicine2__VariantsArgs = {
  upload2?: SingleBooleanChoiceArg<"upload2">;
};
type VariantPropType = keyof PlasmicMedicine2__VariantsArgs;
export const PlasmicMedicine2__VariantProps = new Array<VariantPropType>(
  "upload2"
);

export type PlasmicMedicine2__ArgsType = {};
type ArgPropType = keyof PlasmicMedicine2__ArgsType;
export const PlasmicMedicine2__ArgProps = new Array<ArgPropType>();

export type PlasmicMedicine2__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  modal?: Flex__<typeof AntdModal>;
  backgrond?: Flex__<typeof Backgrond>;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  lineClomp?: Flex__<typeof LineClomp>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  imageOpload?: Flex__<typeof ImageOpload>;
  upload?: Flex__<typeof ButtonLiom>;
  modal2?: Flex__<typeof AntdModal>;
  backHandler?: Flex__<typeof BackHandler>;
  antdInput?: Flex__<typeof Input>;
};

export interface DefaultMedicine2Props {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMedicine2__RenderFunc(props: {
  variants: PlasmicMedicine2__VariantsArgs;
  args: PlasmicMedicine2__ArgsType;
  overrides: PlasmicMedicine2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loadingConclusion",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
        ]
      },
      {
        path: "level",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 3
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "action",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "rate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "resultlist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const details = $state.apiRequest.data.details;
                const maxScore = Math.max(
                  ...details.map(item => parseInt(item.score) || 0)
                );
                const filteredItems =
                  details.filter(item => item.score > 80).length > 0
                    ? details.filter(item => item.score > 80)
                    : details.filter(item => item.score > 70).length > 0
                    ? details.filter(item => item.score > 70)
                    : details.filter(item => item.score > 60).length > 0
                    ? details.filter(item => item.score > 60)
                    : details.filter(item => item.score > 50).length > 0
                    ? details.filter(item => item.score > 50)
                    : details.filter(item => parseInt(item.score) === maxScore);
                return filteredItems;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "todo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                var a = $state.apiRequest.data.details.filter(
                  item => item.advice_text != null && item.task !== ""
                );
                var newItem = [];
                a.forEach(item => {
                  let result = $state.apiRequest.data.extras.find(
                    a => a.type === item.option_metric
                  );
                  if (
                    result &&
                    result.isDone !== undefined &&
                    result.isDone !== 1
                  ) {
                    newItem.push({
                      ...item,
                      task: `برای اطمینان بیشتر، تست تکمیلی ${item.option_metric_fa} را انجام دهید`,
                      option_metric: item.option_metric + "1"
                    });
                  }
                });
                newItem.forEach(item => {
                  a.unshift(item);
                });
                return a;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "questionList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.answers.length > 1
                ? $state.apiRequest.data.answers.splice(0, 2)
                : JSON.parse($state.apiRequest.data.answers).splice(0, 2);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "info",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "upload.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "upload.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "buttonLiom2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "imageLoad",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  "blob:https://tools.liom.app/dd5146e0-a8cd-45f9-8487-2b936b6dc9fd",
                  "blob:https://tools.liom.app/e442f9be-2415-46f8-98f6-6eeaae789ba0",
                  "blob:https://tools.liom.app/99798361-2130-49d2-8dda-10b58d871b91",
                  "blob:https://tools.liom.app/315b4939-9b73-4894-9032-7e9dbf8070ea"
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentImag",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "imageOpload[].upload",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "images",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                var photos = [];
                var found = $state.info.p.find(
                  item =>
                    item?.json?.test_photo != "" &&
                    item?.json?.test_photo != "[]"
                );
                if (found) {
                  photos = JSON.parse(found.json.test_photo);
                }
                return photos;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "lineClomp[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "upload2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.images.length != 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.upload2
      },
      {
        path: "resultTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.info.p.find(
                item => item?.json?.request_p == "بر اساس نتیجه آزمایش"
              )
                ? true
                : false;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMedicine2.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMedicine2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMedicine2.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant_global_theme_dark]:
                hasVariant(globalVariants, "theme", "dark") &&
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootupload2]: hasVariant($state, "upload2", "upload2")
            }
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var fileInput =
                            window.document.getElementById("fileInput");
                          fileInput.accept = "image/*,application/pdf";
                          fileInput.multiple = true;
                          window.filess = [];
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/user/prescription/upload",
                        (() => {
                          try {
                            return {
                              userId: $state.paramsObject.user_id,
                              session_id: $state.paramsObject.session_id
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateInfo"] = $steps.invokeGlobalAction?.data
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["info"]
                      },
                      operation: 0,
                      value: $steps.invokeGlobalAction.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateInfo"] != null &&
                typeof $steps["updateInfo"] === "object" &&
                typeof $steps["updateInfo"].then === "function"
              ) {
                $steps["updateInfo"] = await $steps["updateInfo"];
              }

              $steps["updateLoading"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loading"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoading"] != null &&
                typeof $steps["updateLoading"] === "object" &&
                typeof $steps["updateLoading"].then === "function"
              ) {
                $steps["updateLoading"] = await $steps["updateLoading"];
              }
            }}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            closeIcon={null}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              plasmic_hamdast_sdk_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_2l_LVwkQl5b5"]]: true
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
            width={"100vw"}
          >
            <Backgrond
              data-plasmic-name={"backgrond"}
              data-plasmic-override={overrides.backgrond}
              className={classNames("__wab_instance", sty.backgrond)}
              liom={(() => {
                try {
                  return $ctx.query.app == "liom";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__bw8ME)}>
                <div className={classNames(projectcss.all, sty.freeBox__lQb7Z)}>
                  {(() => {
                    try {
                      return (
                        new URLSearchParams(
                          new URL(window.location.href).search
                        ).get("Share") != "true"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Reveal
                      big={false}
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__w23Bd
                      )}
                      direction={"up"}
                      effect={"fade"}
                      triggerOnce={false}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.loadingConclusion;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LoadingConclusion
                            className={classNames(
                              "__wab_instance",
                              sty.loadingConclusion__tOi26
                            )}
                            fouse={(() => {
                              try {
                                return currentIndex == $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            selected={(() => {
                              try {
                                return currentIndex < $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pqGnv
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "..";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LoadingConclusion>
                        );
                      })}
                    </Reveal>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        new URLSearchParams(
                          new URL(window.location.href).search
                        ).get("Share") == "true"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Reveal
                      big={false}
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__qQuBr
                      )}
                      direction={"up"}
                      effect={"fade"}
                      triggerOnce={false}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return ["درحال بازیابی اطلاعات"];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LoadingConclusion
                            className={classNames(
                              "__wab_instance",
                              sty.loadingConclusion__gWIgE
                            )}
                            fouse={(() => {
                              try {
                                return currentIndex == $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            selected={(() => {
                              try {
                                return currentIndex < $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gNy2
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "..";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LoadingConclusion>
                        );
                      })}
                    </Reveal>
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wf4LK)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d0PIv
                    )}
                  >
                    {
                      "\u0644\u0637\u0641\u0627 \u06a9\u0645\u06cc \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hcaSg,
                      "dots"
                    )}
                  >
                    {""}
                  </div>
                </div>
              </div>
            </Backgrond>
          </AntdModal>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___1UlHn,
                "header"
              )}
            >
              {(() => {
                try {
                  return (
                    // new URLSearchParams(window.location.search).get("inApp")!="true"
                    true
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <HeaderLiom
                  data-plasmic-name={"headerLiom"}
                  data-plasmic-override={overrides.headerLiom}
                  className={classNames("__wab_instance", sty.headerLiom)}
                  slot={
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            window.sessionStorage.getItem("home-page") != null
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <XIcon
                          className={classNames(projectcss.all, sty.svg__zjZao)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return window.open(
                                        window.sessionStorage.getItem(
                                          "home-page"
                                        ),
                                        "_self"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          role={"img"}
                        />
                      ) : null}
                      <Paziresh24Avatar
                        data-plasmic-name={"paziresh24Avatar"}
                        data-plasmic-override={overrides.paziresh24Avatar}
                        className={classNames(
                          "__wab_instance",
                          sty.paziresh24Avatar
                        )}
                        src={(() => {
                          try {
                            return "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </React.Fragment>
                  }
                  slot2={null}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Xtvz
                    )}
                  >
                    {
                      "\u0622\u067e\u0644\u0648\u062f \u0646\u062a\u06cc\u062c\u0647 \u0622\u0632\u0645\u0627\u06cc\u0634"
                    }
                  </div>
                </HeaderLiom>
              ) : null}
            </div>
          </section>
          {(() => {
            try {
              return Object.keys($state.info).length > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__neEi9)}>
              <div className={classNames(projectcss.all, sty.freeBox__bJxWk)}>
                <div className={classNames(projectcss.all, sty.freeBox__r1YVa)}>
                  <div className={classNames(projectcss.all, sty.freeBox__kX7)}>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vvihb
                      )}
                    >
                      {"\u062a\u0627\u0631\u06cc\u062e \u062b\u0628\u062a :"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5MaCh
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              return new Date(
                                $state.info.p[0].json.timestamp
                              ).toLocaleDateString("fa-IR");
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062a\u0627\u0631\u06cc\u062e \u062b\u0628\u062a";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jxIwr)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__pOfu)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "45px"
                          : "55px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "45px"
                          : "55px"
                      }
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.info.d.image;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/liom_tools/images/photo20250501134141Jpg.jpg",
                              fullWidth: 640,
                              fullHeight: 640,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__xnafF)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0NV1N
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.info.d.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062f\u06a9\u062a\u0631 \u0641\u0644\u0627\u0646\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___959TW
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.info.d.expert;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u062a\u062e\u0635\u0635 \u0641\u0644\u0627\u0646";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__npzHp)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return $$.copyToClipboard(
                                  $state.info.p.doctor_tracking_code
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u06a9\u062f \u06a9\u067e\u06cc \u0634\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jRjS
                      )}
                    >
                      {
                        "\u06a9\u062f \u0622\u0632\u0645\u0627\u06cc\u0634 \u0634\u0645\u0627"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hu6Lt
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.info.p.find(
                              i => i.json.request_p == "آزمایش"
                            ).json.doctor_tracking_code;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Icon189Icon
                      className={classNames(projectcss.all, sty.svg__sgBDn)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4AHxh
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "لطفاً در صورت انجام آزمایش و دریافت نتیجه، آن را از طریق سامانه بارگذاری کنید تا دکتر نتیجه آزمایش شما را بررسی کند.";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0646\u0633\u062e\u0647\u200c\u06cc \u0634\u0645\u0627 \u062a\u0648\u0633\u0637 \u062f\u06a9\u062a\u0631 \u0641\u0644\u0627\u0646\u06cc \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f\u0647 \u0648 \u0628\u0627 \u06a9\u062f \u0632\u06cc\u0631 \u062f\u0631 \u0633\u0627\u0645\u0627\u0646\u0647 \u0642\u0627\u0628\u0644 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u0627\u0633\u062a.";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___7SZrd)}>
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg___3Tumr)}
                role={"img"}
              />
            </div>
          ) : null}
          {(() => {
            try {
              return Object.keys($state.info).length == 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___0CFi0)}>
              <div className={classNames(projectcss.all, sty.freeBox___7FSlE)}>
                <Icon118Icon
                  className={classNames(projectcss.all, sty.svg__pbnz)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d8H
                  )}
                >
                  {
                    "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </div>
              <Paziresh24Button
                data-plasmic-name={"paziresh24Button"}
                data-plasmic-override={overrides.paziresh24Button}
                children2={
                  "\u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0645\u062c\u062f\u062f"
                }
                className={classNames("__wab_instance", sty.paziresh24Button)}
                color={"softGreen"}
                endIcon={
                  <Icon117Icon
                    className={classNames(projectcss.all, sty.svg__cLjBk)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.location.reload();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                shape={"rounded"}
                showEndIcon={true}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__whV7G)}
                    role={"img"}
                  />
                }
              />
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $state.info?.p?.some(
                  item => item.json.request_p === "آزمایش"
                ) && Object.keys($state.info).length != 0
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__iEcEj, {
                [sty.freeBoxupload2__iEcEjghZli]: hasVariant(
                  $state,
                  "upload2",
                  "upload2"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3Hnuj,
                  {
                    [sty.textupload2___3HnujghZli]: hasVariant(
                      $state,
                      "upload2",
                      "upload2"
                    )
                  }
                )}
              >
                {
                  "\u0622\u067e\u0644\u0648\u062f \u0646\u062a\u06cc\u062c\u0647 \u0622\u0632\u0645\u0627\u06cc\u0634"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vzoEq)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.images;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__briDl)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1Xcvw
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      if (currentItem.includes(".pdf")) {
                                        return window.open(currentItem);
                                      } else {
                                        $state.currentImag = currentItem;
                                        return ($state.modal2.open = true);
                                      }
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nqxGl)}
                          displayHeight={"50px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"50px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return (() => {
                                if (currentItem.includes(".pdf")) {
                                  return "https://cdn-icons-png.flaticon.com/512/4208/4208479.png";
                                } else {
                                  return currentItem;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <LineClomp
                          data-plasmic-name={"lineClomp"}
                          data-plasmic-override={overrides.lineClomp}
                          className={classNames(
                            "__wab_instance",
                            sty.lineClomp
                          )}
                          numberOfLine={1}
                          onLineChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "lineClomp",
                              __plasmic_idx_0,
                              "line"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__awGy
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.split("/").pop();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </LineClomp>
                      </div>
                      <Icon212Icon
                        className={classNames(projectcss.all, sty.svg__kGbHw)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $state.images.splice(
                                      currentIndex,
                                      1
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/test-result",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          images: JSON.stringify($state.images),
                                          session_id:
                                            $state.paramsObject.session_id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                        role={"img"}
                      />
                    </div>
                  );
                })}
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__ffgz9, {
                  [sty.freeBoxupload2__ffgz9GhZli]: hasVariant(
                    $state,
                    "upload2",
                    "upload2"
                  )
                })}
                onClick={async event => {
                  const $steps = {};
                }}
              >
                {(() => {
                  try {
                    return $state.imageLoad.length == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__unVVv, {
                      [sty.freeBoxupload2__unVVvghZli]: hasVariant(
                        $state,
                        "upload2",
                        "upload2"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return window.document
                                    .getElementById("fileInput")
                                    .click();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    <Icon207Icon
                      className={classNames(projectcss.all, sty.svg__ilrzi, {
                        [sty.svgupload2__ilrzighZli]: hasVariant(
                          $state,
                          "upload2",
                          "upload2"
                        )
                      })}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b3HiE,
                        {
                          [sty.textupload2__b3HiEghZli]: hasVariant(
                            $state,
                            "upload2",
                            "upload2"
                          )
                        }
                      )}
                    >
                      {
                        "\u0646\u062a\u06cc\u062c\u0647 \u0622\u0632\u0645\u0627\u06cc\u0634 \u062e\u0648\u062f \u0631\u0627 \u0628\u0631\u0627\u06cc \u0628\u0631\u0631\u0633\u06cc \u067e\u0632\u0634\u06a9 \u0622\u067e\u0644\u0648\u062f \u06a9\u0646\u06cc\u062f"
                      }
                    </div>
                    <ButtonLiom
                      data-plasmic-name={"buttonLiom2"}
                      data-plasmic-override={overrides.buttonLiom2}
                      className={classNames("__wab_instance", sty.buttonLiom2, {
                        [sty.buttonLiom2upload2]: hasVariant(
                          $state,
                          "upload2",
                          "upload2"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "buttonLiom2",
                        "color"
                      ])}
                      load={generateStateValueProp($state, [
                        "buttonLiom2",
                        "load"
                      ])}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom2",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom2",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      showStartIcon={
                        hasVariant($state, "upload2", "upload2")
                          ? true
                          : undefined
                      }
                      size={"compact"}
                      startIcon={
                        <PlasmicIcon__
                          PlasmicIconType={
                            hasVariant($state, "upload2", "upload2")
                              ? Icon214Icon
                              : CheckSvgIcon
                          }
                          className={classNames(
                            projectcss.all,
                            sty.svg__w1PyH,
                            {
                              [sty.svgupload2__w1PyHghZli]: hasVariant(
                                $state,
                                "upload2",
                                "upload2"
                              )
                            }
                          )}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g8SEu,
                          {
                            [sty.textupload2__g8SEughZli]: hasVariant(
                              $state,
                              "upload2",
                              "upload2"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "upload2", "upload2")
                          ? "\u0627\u0641\u0632\u0648\u062f\u0646 \u062a\u0635\u0627\u0648\u06cc\u0631 \u0628\u06cc\u0634\u062a\u0631"
                          : "\u0627\u0646\u062a\u062e\u0627\u0628 \u062a\u0635\u0627\u0648\u06cc\u0631"}
                      </div>
                    </ButtonLiom>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.imageLoad != 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___983QN)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.imageLoad;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          _delete: async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          $state.files[currentIndex] &&
                                          $state.imageLoad[currentIndex]
                                        ) {
                                          $state.imageLoad.splice(
                                            currentIndex,
                                            1
                                          );
                                        }
                                        $state.files.splice(currentIndex, 1);
                                        return window.filess.splice(
                                          currentIndex,
                                          1
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          className: classNames(
                            "__wab_instance",
                            sty.imageOpload
                          ),
                          currentItem: currentItem,

                          key: currentIndex,
                          onClick: async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          $state.files[currentIndex] ==
                                          "application/pdf"
                                        )
                                          return window.open(currentItem);
                                        else {
                                          $state.currentImag = currentItem;
                                          return ($state.modal2.open = true);
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          onUploadChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "imageOpload",
                              __plasmic_idx_0,
                              "upload"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          type: (() => {
                            try {
                              return $state.files[currentIndex];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          upload: generateStateValueProp($state, [
                            "imageOpload",
                            __plasmic_idx_0,
                            "upload"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "imageOpload[].upload",
                              initFunc: ({ $props, $state, $queries }) => false
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <ImageOpload
                            data-plasmic-name={"imageOpload"}
                            data-plasmic-override={overrides.imageOpload}
                            {...child$Props}
                          />
                        );
                      })();
                    })}
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0MpcY
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return window.document
                                      .getElementById("fileInput")
                                      .click();
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                    >
                      <Icon210Icon
                        className={classNames(projectcss.all, sty.svg__n5Us8)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0InfM
                        )}
                      >
                        {"\u0627\u0641\u0632\u0648\u062f\u0646"}
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
              {(() => {
                try {
                  return $state.imageLoad.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__vls9Z)}>
                  <ButtonLiom
                    data-plasmic-name={"upload"}
                    data-plasmic-override={overrides.upload}
                    className={classNames("__wab_instance", sty.upload)}
                    color={generateStateValueProp($state, ["upload", "color"])}
                    load={generateStateValueProp($state, ["upload", "load"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalOpen2"] = !$state.resultTest
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PUT",
                                "https://n8n.staas.ir/webhook/selfTestUser",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      user_id: $state.info.p[0].json.userId,
                                      session_id:
                                        $state.info.p[0].json.session_id,
                                      name: $state.info.p[0].json.name,
                                      email: $state.info.p[0].json.email,
                                      mobile: $state.info.p[0].json.mobile,
                                      nationalCode:
                                        $state.info.p[0].json.nationalCode,
                                      gender: $state.info.p[0].json.Gender,
                                      type: $state.info.p[0].json.test_type,
                                      insurance:
                                        $state.info.p[0].json.insurance,
                                      description: "",
                                      user: "true",
                                      request_p: "بر اساس نتیجه آزمایش"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen2"] != null &&
                        typeof $steps["updateModalOpen2"] === "object" &&
                        typeof $steps["updateModalOpen2"].then === "function"
                      ) {
                        $steps["updateModalOpen2"] = await $steps[
                          "updateModalOpen2"
                        ];
                      }

                      $steps["updateModalOpen4"] = (
                        $state.paramsObject?.taskId
                          ? true
                          : false && !$state.resultTest
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/rest/user/task/done",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      taskId: $state.paramsObject.taskId,
                                      Authorization: $state.paramsObject.token
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen4"] != null &&
                        typeof $steps["updateModalOpen4"] === "object" &&
                        typeof $steps["updateModalOpen4"].then === "function"
                      ) {
                        $steps["updateModalOpen4"] = await $steps[
                          "updateModalOpen4"
                        ];
                      }

                      $steps["updateModalOpen3"] = $steps.updateModalOpen2?.data
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0628\u0631\u0631\u0633\u06cc \u0646\u062a\u06cc\u062c\u0647 \u0622\u0632\u0645\u0627\u06cc\u0634 \u0634\u0645\u0627 \u0628\u0647 \u062f\u06a9\u062a\u0631 \u0627\u0631\u0633\u0627\u0644 \u0634\u062f."
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen3"] != null &&
                        typeof $steps["updateModalOpen3"] === "object" &&
                        typeof $steps["updateModalOpen3"].then === "function"
                      ) {
                        $steps["updateModalOpen3"] = await $steps[
                          "updateModalOpen3"
                        ];
                      }

                      $steps["updateUploadLoad"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["upload", "load"]
                              },
                              operation: 4,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUploadLoad"] != null &&
                        typeof $steps["updateUploadLoad"] === "object" &&
                        typeof $steps["updateUploadLoad"].then === "function"
                      ) {
                        $steps["updateUploadLoad"] = await $steps[
                          "updateUploadLoad"
                        ];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (async () => {
                                  $state.resultTest = true;
                                  async function uploadFiles() {
                                    for (let [
                                      index,
                                      f
                                    ] of window.filess.entries()) {
                                      try {
                                        const formData = new FormData();
                                        formData.append("file", f);
                                        formData.append("path", "test-result");
                                        formData.append("index", index);
                                        const response = await fetch(
                                          "https://api.liom.app/upload",
                                          {
                                            method: "POST",
                                            body: formData
                                          }
                                        );
                                        const data = await response.json();
                                        console.log(
                                          "Response status:",
                                          response.status
                                        );
                                        console.log("Response data:", data);
                                        if (!response.ok) {
                                          console.error(
                                            "Response not OK:",
                                            data
                                          );
                                        }
                                        if (data.status === false) {
                                          console.error(
                                            "Server error:",
                                            data.result
                                          );
                                        } else {
                                          $state.imageOpload[index].upload =
                                            true;
                                          $state.images.push(data.result);
                                        }
                                      } catch (error) {
                                        console.error(
                                          `Fetch error for file index ${index}:`,
                                          error
                                        );
                                      }
                                    }
                                    console.log("All uploads completed!");
                                  }
                                  return uploadFiles().then(() => {
                                    console.log("Do other things now");
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["testResult"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/test-result",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      images: JSON.stringify($state.images),
                                      session_id: $state.paramsObject.session_id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["testResult"] != null &&
                        typeof $steps["testResult"] === "object" &&
                        typeof $steps["testResult"].then === "function"
                      ) {
                        $steps["testResult"] = await $steps["testResult"];
                      }

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }

                      $steps["runCode2"] =
                        $steps.testResult?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.imageLoad = [];
                                    $state.files = [];
                                    return (window.filess = []);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["updateUploadLoad2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["upload", "load"]
                              },
                              operation: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUploadLoad2"] != null &&
                        typeof $steps["updateUploadLoad2"] === "object" &&
                        typeof $steps["updateUploadLoad2"].then === "function"
                      ) {
                        $steps["updateUploadLoad2"] = await $steps[
                          "updateUploadLoad2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["upload", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["upload", "load"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__j706G
                      )}
                    >
                      {
                        "\u0622\u067e\u0644\u0648\u062f \u062a\u0635\u0627\u0648\u06cc\u0631"
                      }
                    </div>
                  </ButtonLiom>
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.upload.load;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__hVd)} />
              ) : null}
            </div>
          ) : null}
          <AntdModal
            data-plasmic-name={"modal2"}
            data-plasmic-override={overrides.modal2}
            className={classNames("__wab_instance", sty.modal2)}
            closeIcon={null}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              plasmic_hamdast_sdk_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={true}
            modalContentClassName={classNames({
              [sty["pcls_tTn2QCQaytGC"]]: true
            })}
            modalScopeClassName={sty["modal2__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal2", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal2", "open"])}
            title={null}
            trigger={null}
            width={"100vh"}
            wrapClassName={classNames({ [sty["pcls_Qh1E8WzYW_Zh"]]: true })}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__tv8Y)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "350px"
                  : "100%"
              }
              loading={"lazy"}
              src={(() => {
                try {
                  return $state.currentImag;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />

            <div className={classNames(projectcss.all, sty.freeBox__kwYlG)}>
              <Icon22Icon
                className={classNames(projectcss.all, sty.svg__cenX7)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateModal2Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal2", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModal2Open"] != null &&
                    typeof $steps["updateModal2Open"] === "object" &&
                    typeof $steps["updateModal2Open"].then === "function"
                  ) {
                    $steps["updateModal2Open"] = await $steps[
                      "updateModal2Open"
                    ];
                  }
                }}
                role={"img"}
              />
            </div>
            <BackHandler
              data-plasmic-name={"backHandler"}
              data-plasmic-override={overrides.backHandler}
              active={(() => {
                try {
                  return $state.modal2.open;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.backHandler)}
              onBack={async () => {
                const $steps = {};

                $steps["updateModal2Open"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["modal2", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateModal2Open"] != null &&
                  typeof $steps["updateModal2Open"] === "object" &&
                  typeof $steps["updateModal2Open"].then === "function"
                ) {
                  $steps["updateModal2Open"] = await $steps["updateModal2Open"];
                }
              }}
            />
          </AntdModal>
          {(() => {
            const child$Props = {
              allowClear: false,
              bordered: false,
              className: classNames("__wab_instance", sty.antdInput),
              id: "fileInput",
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["antdInput", "value"],
                  Input_Helpers
                ).apply(null, eventArgs);

                (async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              function isAccepted(type) {
                                return [
                                  "image/jpeg",
                                  "image/png",
                                  "application/pdf"
                                ].includes(type);
                              }
                              function addFiles(newFiles) {
                                for (var f of newFiles) {
                                  if (!isAccepted(f.type)) continue;
                                  $state.files.push(f.type);
                                  window.filess.push(f);
                                  $state.imageLoad.push(URL.createObjectURL(f));
                                  console.log($state.files);
                                  console.log($state.imageLoad);
                                }
                              }
                              return addFiles(event.currentTarget.files);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }).apply(null, eventArgs);
              },
              type: "file",
              value: generateStateValueProp($state, ["antdInput", "value"])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "antdInput.value"
                }
              ],
              [],
              Input_Helpers ?? {},
              child$Props
            );

            return (
              <Input
                data-plasmic-name={"antdInput"}
                data-plasmic-override={overrides.antdInput}
                {...child$Props}
              />
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "modal",
    "backgrond",
    "section",
    "headerLiom",
    "paziresh24Avatar",
    "paziresh24Button",
    "lineClomp",
    "buttonLiom2",
    "imageOpload",
    "upload",
    "modal2",
    "backHandler",
    "antdInput"
  ],
  sideEffect: ["sideEffect"],
  modal: ["modal", "backgrond"],
  backgrond: ["backgrond"],
  section: ["section", "headerLiom", "paziresh24Avatar"],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  paziresh24Button: ["paziresh24Button"],
  lineClomp: ["lineClomp"],
  buttonLiom2: ["buttonLiom2"],
  imageOpload: ["imageOpload"],
  upload: ["upload"],
  modal2: ["modal2", "backHandler"],
  backHandler: ["backHandler"],
  antdInput: ["antdInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  modal: typeof AntdModal;
  backgrond: typeof Backgrond;
  section: "section";
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  paziresh24Button: typeof Paziresh24Button;
  lineClomp: typeof LineClomp;
  buttonLiom2: typeof ButtonLiom;
  imageOpload: typeof ImageOpload;
  upload: typeof ButtonLiom;
  modal2: typeof AntdModal;
  backHandler: typeof BackHandler;
  antdInput: typeof Input;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMedicine2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMedicine2__VariantsArgs;
    args?: PlasmicMedicine2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMedicine2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMedicine2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMedicine2__ArgProps,
          internalVariantPropNames: PlasmicMedicine2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMedicine2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMedicine2";
  } else {
    func.displayName = `PlasmicMedicine2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMedicine2 = Object.assign(
  // Top-level PlasmicMedicine2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    modal: makeNodeComponent("modal"),
    backgrond: makeNodeComponent("backgrond"),
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    lineClomp: makeNodeComponent("lineClomp"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    imageOpload: makeNodeComponent("imageOpload"),
    upload: makeNodeComponent("upload"),
    modal2: makeNodeComponent("modal2"),
    backHandler: makeNodeComponent("backHandler"),
    antdInput: makeNodeComponent("antdInput"),

    // Metadata about props expected for PlasmicMedicine2
    internalVariantProps: PlasmicMedicine2__VariantProps,
    internalArgProps: PlasmicMedicine2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | گزارش عملکرد",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMedicine2;
/* prettier-ignore-end */
