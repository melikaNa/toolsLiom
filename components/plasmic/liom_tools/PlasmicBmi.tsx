/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 8CUbLIj-ur8O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import { Input } from "@/fragment/components/input"; // plasmic-import: 31QElsfd4yPt/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import Dialog3 from "../../Dialog3"; // plasmic-import: UHX61U1xmtjA/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicBmi.module.css"; // plasmic-import: 8CUbLIj-ur8O/css

import XIcon from "../hamdast_sdk/icons/PlasmicIcon__X"; // plasmic-import: S0M2VMEAEs7X/icon
import Icon174Icon from "./icons/PlasmicIcon__Icon174"; // plasmic-import: WwQTGVCpIZB2/icon
import Icon173Icon from "./icons/PlasmicIcon__Icon173"; // plasmic-import: GZmJZz95gKQL/icon
import Icon181Icon from "./icons/PlasmicIcon__Icon181"; // plasmic-import: DFNX_NnNVzM8/icon
import Icon177Icon from "./icons/PlasmicIcon__Icon177"; // plasmic-import: ld4RWktjVN-_/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon115Icon from "./icons/PlasmicIcon__Icon115"; // plasmic-import: sKUeDF21ImIk/icon
import ChevronRightIcon from "../hamdast_sdk/icons/PlasmicIcon__ChevronRight"; // plasmic-import: ehuYANk-vbAX/icon
import ChevronLeftIcon from "../hamdast_sdk/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: TyihT0qbU5hB/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: d7z2iEn8tiSD/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 7vleC7ixE4k4/icon

createPlasmicElementProxy;

export type PlasmicBmi__VariantMembers = {
  resalt: "resalt";
};
export type PlasmicBmi__VariantsArgs = {
  resalt?: SingleBooleanChoiceArg<"resalt">;
};
type VariantPropType = keyof PlasmicBmi__VariantsArgs;
export const PlasmicBmi__VariantProps = new Array<VariantPropType>("resalt");

export type PlasmicBmi__ArgsType = {};
type ArgPropType = keyof PlasmicBmi__ArgsType;
export const PlasmicBmi__ArgProps = new Array<ArgPropType>();

export type PlasmicBmi__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  higth?: Flex__<typeof Input>;
  lastWeight?: Flex__<typeof Input>;
  week?: Flex__<typeof Input>;
  weight2?: Flex__<typeof Input>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  glo?: Flex__<typeof Input>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  buttonLiom6?: Flex__<typeof ButtonLiom>;
  buttonLiom3?: Flex__<typeof ButtonLiom>;
  buttonLiom7?: Flex__<typeof ButtonLiom>;
  buttonLiom8?: Flex__<typeof ButtonLiom>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  buttonLiom4?: Flex__<typeof ButtonLiom>;
  buttonLiom5?: Flex__<typeof ButtonLiom>;
  dialog3?: Flex__<typeof Dialog3>;
  apiRequest?: Flex__<typeof ApiRequest>;
  dialogTitle?: Flex__<typeof DialogTitle>;
  h5?: Flex__<"h5">;
  input?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof ButtonLiom>;
  button2?: Flex__<typeof ButtonLiom>;
  favicon?: Flex__<typeof Embed>;
};

export interface DefaultBmiProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBmi__RenderFunc(props: {
  variants: PlasmicBmi__VariantsArgs;
  args: PlasmicBmi__ArgsType;
  overrides: PlasmicBmi__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "testChat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                // if ($ctx.query.nextQuesion_id == "" || $ctx.query.nextQuesion_id == null) {
                //   []
                // } else {
                //   JSON.parse(localStorage.getItem("test"))
                // }
                // [
                //     {
                //         "text": "سلام👋\n  لیوم هستم، دستیار سلامت .",
                //         "from": "system"
                //     },
                //     {
                //         "text": "اگر درباره زودانزالی نگرانی داری، این تست بهت کمک می‌کنه تا وضعیت خودت رو بهتر بسنجی.",
                //         "from": "system"
                //     },
                //     {
                //         "text": " با پاسخ به چند سوال، می‌تونید در کمتر از ۵ دقیقه از اینکه آیا دچار زودانزالی هستید یا خیر مطلع شوید",
                //         "from": "system"
                //     },
                //     {
                //         "text": "آماده ای شروع کنیم؟",
                //         "question": {
                //             "lock": 0
                //         },
                //         "from": "system",
                //         "btnText": "شروع کنیم",
                //         "options": [
                //             {
                //                 "id": 1,
                //                 "text": "شروع کنیم"
                //             }
                //         ]
                //     }
                // ]
                []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\u0633\u0644\u0627\u0645\ud83d\udc4b\n  \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645\u060c \u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a .",
                    from: "system"
                  },
                  {
                    text: "\u0627\u06af\u0631 \u062f\u0631\u0628\u0627\u0631\u0647 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0646\u06af\u0631\u0627\u0646\u06cc \u062f\u0627\u0631\u06cc\u060c \u0627\u06cc\u0646 \u062a\u0633\u062a \u0628\u0647\u062a \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u062a\u0627 \u0648\u0636\u0639\u06cc\u062a \u062e\u0648\u062f\u062a \u0631\u0648 \u0628\u0647\u062a\u0631 \u0628\u0633\u0646\u062c\u06cc.",
                    from: "system"
                  },
                  {
                    text: " \u0628\u0627 \u067e\u0627\u0633\u062e \u0628\u0647 \u0686\u0646\u062f \u0633\u0648\u0627\u0644\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u062f\u0631 \u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f5 \u062f\u0642\u06cc\u0642\u0647 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0622\u06cc\u0627 \u062f\u0686\u0627\u0631 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0647\u0633\u062a\u06cc\u062f \u06cc\u0627 \u062e\u06cc\u0631 \u0645\u0637\u0644\u0639 \u0634\u0648\u06cc\u062f",
                    from: "system"
                  },
                  {
                    text: "\u0622\u0645\u0627\u062f\u0647 \u0627\u06cc \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645\u061f",
                    question: { lock: 0 },
                    from: "system",
                    btnText:
                      "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",
                    options: [
                      {
                        id: 1,
                        text: "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645"
                      }
                    ]
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "ferst",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.nextQuesion_id == null ||
                $ctx.query.nextQuesion_id == ""
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextQuesionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.testChat
                  .slice()
                  .reverse()
                  .find(item => item.question);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lock",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadinkBotten",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "totalTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 35
      },
      {
        path: "retestTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.nextQuesion_id == "" ||
                $ctx.query.nextQuesion_id == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "edit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "buy",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showgreen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "authCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "data",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "infoTest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "a0becceb-8ca9-49c0-a9d3-7c192f85129c"
      },
      {
        path: "free",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://tools.liom.app/chat-bot/?origin_user_id=${$ctx.query.origin_user_id}&app=${$ctx.query.app}&topic=${$ctx.query.topic}&origin=${$ctx.query.origin}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "botSessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sessions",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "indexchat",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasMore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "infoChat",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "text",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tokenliom",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "higth.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastWeight.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "weight2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "week.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.week2 == 0 ? "" : $state.week2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "resalt",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.resalt
      },
      {
        path: "weight",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          [
            {
              BMIGroup: 0,
              weeks: [
                { week: 1, gain: 0, minGain: 0, maxGain: 0 },
                { week: 2, gain: 0.2, minGain: 0.04, maxGain: 0.2 },
                { week: 3, gain: 0.3, minGain: 0.08, maxGain: 0.3 },
                { week: 4, gain: 0.5, minGain: 0.1, maxGain: 0.5 },
                { week: 5, gain: 0.7, minGain: 0.2, maxGain: 0.7 },
                { week: 6, gain: 0.8, minGain: 0.2, maxGain: 0.8 },
                { week: 7, gain: 1, minGain: 0.2, maxGain: 1 },
                { week: 8, gain: 1.2, minGain: 0.3, maxGain: 1.2 },
                { week: 9, gain: 1.3, minGain: 0.3, maxGain: 1.3 },
                { week: 10, gain: 1.5, minGain: 0.4, maxGain: 1.5 },
                { week: 11, gain: 1.7, minGain: 0.4, maxGain: 1.7 },
                { week: 12, gain: 1.8, minGain: 0.5, maxGain: 1.8 },
                { week: 13, gain: 2, minGain: 0.5, maxGain: 2 },
                { week: 14, gain: 2.6, minGain: 1, maxGain: 2.6 },
                { week: 15, gain: 3.2, minGain: 1.4, maxGain: 3.2 },
                { week: 16, gain: 3.8, minGain: 1.9, maxGain: 3.8 },
                { week: 17, gain: 4.4, minGain: 2.3, maxGain: 4.4 },
                { week: 18, gain: 5, minGain: 2.8, maxGain: 5 },
                { week: 19, gain: 5.6, minGain: 3.2, maxGain: 5.6 },
                { week: 20, gain: 6.2, minGain: 3.7, maxGain: 6.2 },
                { week: 21, gain: 6.8, minGain: 4.1, maxGain: 6.8 },
                { week: 22, gain: 7.4, minGain: 4.6, maxGain: 7.4 },
                { week: 23, gain: 8, minGain: 5, maxGain: 8 },
                { week: 24, gain: 8.6, minGain: 5.5, maxGain: 8.6 },
                { week: 25, gain: 9.2, minGain: 5.9, maxGain: 9.2 },
                { week: 26, gain: 9.8, minGain: 6.4, maxGain: 9.8 },
                { week: 27, gain: 10.4, minGain: 6.8, maxGain: 10.4 },
                { week: 28, gain: 11, minGain: 7.3, maxGain: 11 },
                { week: 29, gain: 11.6, minGain: 7.7, maxGain: 11.6 },
                { week: 30, gain: 12.2, minGain: 8.2, maxGain: 12.2 },
                { week: 31, gain: 12.8, minGain: 8.6, maxGain: 12.8 },
                { week: 32, gain: 13.4, minGain: 9.1, maxGain: 13.4 },
                { week: 33, gain: 14, minGain: 9.5, maxGain: 14 },
                { week: 34, gain: 14.6, minGain: 10, maxGain: 14.6 },
                { week: 35, gain: 15.2, minGain: 10.4, maxGain: 15.2 },
                { week: 36, gain: 15.8, minGain: 10.9, maxGain: 15.8 },
                { week: 37, gain: 16.3, minGain: 11.3, maxGain: 16.3 },
                { week: 38, gain: 16.9, minGain: 11.8, maxGain: 16.9 },
                { week: 39, gain: 17.5, minGain: 12.2, maxGain: 17.5 },
                { week: 40, gain: 18.1, minGain: 12.7, maxGain: 18.1 }
              ]
            },
            {
              BMIGroup: 1,
              weeks: [
                { week: 1, gain: 0, minGain: 0, maxGain: 0 },
                { week: 2, gain: 0.2, minGain: 0.04, maxGain: 0.2 },
                { week: 3, gain: 0.3, minGain: 0.08, maxGain: 0.3 },
                { week: 4, gain: 0.5, minGain: 0.1, maxGain: 0.5 },
                { week: 5, gain: 0.7, minGain: 0.2, maxGain: 0.7 },
                { week: 6, gain: 0.8, minGain: 0.2, maxGain: 0.8 },
                { week: 7, gain: 1, minGain: 0.2, maxGain: 1 },
                { week: 8, gain: 1.2, minGain: 0.3, maxGain: 1.2 },
                { week: 9, gain: 1.3, minGain: 0.3, maxGain: 1.3 },
                { week: 10, gain: 1.5, minGain: 0.4, maxGain: 1.5 },
                { week: 11, gain: 1.7, minGain: 0.4, maxGain: 1.7 },
                { week: 12, gain: 1.8, minGain: 0.5, maxGain: 1.8 },
                { week: 13, gain: 2, minGain: 0.5, maxGain: 2 },
                { week: 14, gain: 2.5, minGain: 0.9, maxGain: 2.5 },
                { week: 15, gain: 3, minGain: 1.3, maxGain: 3 },
                { week: 16, gain: 3.5, minGain: 1.7, maxGain: 3.5 },
                { week: 17, gain: 4.1, minGain: 2.1, maxGain: 4.1 },
                { week: 18, gain: 4.6, minGain: 2.5, maxGain: 4.6 },
                { week: 19, gain: 5.1, minGain: 2.9, maxGain: 5.1 },
                { week: 20, gain: 5.6, minGain: 3.3, maxGain: 5.6 },
                { week: 21, gain: 6.1, minGain: 3.7, maxGain: 6.1 },
                { week: 22, gain: 6.6, minGain: 4.1, maxGain: 6.6 },
                { week: 23, gain: 7.1, minGain: 4.5, maxGain: 7.1 },
                { week: 24, gain: 7.7, minGain: 4.9, maxGain: 7.7 },
                { week: 25, gain: 8.2, minGain: 5.3, maxGain: 8.2 },
                { week: 26, gain: 8.7, minGain: 5.7, maxGain: 8.7 },
                { week: 27, gain: 9.2, minGain: 6.1, maxGain: 9.2 },
                { week: 28, gain: 9.7, minGain: 6.5, maxGain: 9.7 },
                { week: 29, gain: 10.2, minGain: 6.9, maxGain: 10.2 },
                { week: 30, gain: 10.7, minGain: 7.3, maxGain: 10.7 },
                { week: 31, gain: 11.2, minGain: 7.7, maxGain: 11.2 },
                { week: 32, gain: 11.8, minGain: 8.1, maxGain: 11.8 },
                { week: 33, gain: 12.3, minGain: 8.5, maxGain: 12.3 },
                { week: 34, gain: 12.8, minGain: 8.9, maxGain: 12.8 },
                { week: 35, gain: 13.3, minGain: 9.3, maxGain: 13.3 },
                { week: 36, gain: 13.8, minGain: 9.7, maxGain: 13.8 },
                { week: 37, gain: 14.3, minGain: 10.1, maxGain: 14.3 },
                { week: 38, gain: 14.8, minGain: 10.5, maxGain: 14.8 },
                { week: 39, gain: 15.4, minGain: 10.9, maxGain: 15.4 },
                { week: 40, gain: 15.9, minGain: 11.3, maxGain: 15.9 }
              ]
            },
            {
              BMIGroup: 2,
              weeks: [
                { week: 1, gain: 0, minGain: 0, maxGain: 0 },
                { week: 2, gain: 0.2, minGain: 0.04, maxGain: 0.2 },
                { week: 3, gain: 0.3, minGain: 0.08, maxGain: 0.3 },
                { week: 4, gain: 0.5, minGain: 0.1, maxGain: 0.5 },
                { week: 5, gain: 0.7, minGain: 0.2, maxGain: 0.7 },
                { week: 6, gain: 0.8, minGain: 0.2, maxGain: 0.8 },
                { week: 7, gain: 1, minGain: 0.2, maxGain: 1 },
                { week: 8, gain: 1.2, minGain: 0.3, maxGain: 1.2 },
                { week: 9, gain: 1.3, minGain: 0.3, maxGain: 1.3 },
                { week: 10, gain: 1.5, minGain: 0.4, maxGain: 1.5 },
                { week: 11, gain: 1.7, minGain: 0.4, maxGain: 1.7 },
                { week: 12, gain: 1.8, minGain: 0.5, maxGain: 1.8 },
                { week: 13, gain: 2, minGain: 0.5, maxGain: 2 },
                { week: 14, gain: 2.3, minGain: 0.7, maxGain: 2.3 },
                { week: 15, gain: 2.7, minGain: 1, maxGain: 2.7 },
                { week: 16, gain: 3, minGain: 1.2, maxGain: 3 },
                { week: 17, gain: 3.4, minGain: 1.4, maxGain: 3.4 },
                { week: 18, gain: 3.7, minGain: 1.7, maxGain: 3.7 },
                { week: 19, gain: 4.1, minGain: 1.9, maxGain: 4.1 },
                { week: 20, gain: 4.4, minGain: 2.1, maxGain: 4.4 },
                { week: 21, gain: 4.8, minGain: 2.4, maxGain: 4.8 },
                { week: 22, gain: 5.1, minGain: 2.6, maxGain: 5.1 },
                { week: 23, gain: 5.5, minGain: 2.8, maxGain: 5.5 },
                { week: 24, gain: 5.8, minGain: 3.1, maxGain: 5.8 },
                { week: 25, gain: 6.1, minGain: 3.3, maxGain: 6.1 },
                { week: 26, gain: 6.5, minGain: 3.5, maxGain: 6.5 },
                { week: 27, gain: 6.8, minGain: 3.8, maxGain: 6.8 },
                { week: 28, gain: 7.2, minGain: 4, maxGain: 7.2 },
                { week: 29, gain: 7.5, minGain: 4.2, maxGain: 7.5 },
                { week: 30, gain: 7.9, minGain: 4.5, maxGain: 7.9 },
                { week: 31, gain: 8.2, minGain: 4.7, maxGain: 8.2 },
                { week: 32, gain: 8.6, minGain: 4.9, maxGain: 8.6 },
                { week: 33, gain: 8.9, minGain: 5.2, maxGain: 8.9 },
                { week: 34, gain: 9.3, minGain: 5.4, maxGain: 9.3 },
                { week: 35, gain: 9.6, minGain: 5.6, maxGain: 9.6 },
                { week: 36, gain: 10, minGain: 5.9, maxGain: 10 },
                { week: 37, gain: 10.3, minGain: 6.1, maxGain: 10.3 },
                { week: 38, gain: 10.6, minGain: 6.3, maxGain: 10.6 },
                { week: 39, gain: 11, minGain: 6.6, maxGain: 11 },
                { week: 40, gain: 11.3, minGain: 6.8, maxGain: 11.3 }
              ]
            },
            {
              BMIGroup: 3,
              weeks: [
                { week: 1, gain: 0, minGain: 0, maxGain: 0 },
                { week: 2, gain: 0.2, minGain: 0.04, maxGain: 0.2 },
                { week: 3, gain: 0.3, minGain: 0.08, maxGain: 0.3 },
                { week: 4, gain: 0.5, minGain: 0.1, maxGain: 0.5 },
                { week: 5, gain: 0.7, minGain: 0.2, maxGain: 0.7 },
                { week: 6, gain: 0.8, minGain: 0.2, maxGain: 0.8 },
                { week: 7, gain: 1, minGain: 0.2, maxGain: 1 },
                { week: 8, gain: 1.2, minGain: 0.3, maxGain: 1.2 },
                { week: 9, gain: 1.3, minGain: 0.3, maxGain: 1.3 },
                { week: 10, gain: 1.5, minGain: 0.4, maxGain: 1.5 },
                { week: 11, gain: 1.7, minGain: 0.4, maxGain: 1.7 },
                { week: 12, gain: 1.8, minGain: 0.5, maxGain: 1.8 },
                { week: 13, gain: 2, minGain: 0.5, maxGain: 2 },
                { week: 14, gain: 2.3, minGain: 0.7, maxGain: 2.3 },
                { week: 15, gain: 2.5, minGain: 0.8, maxGain: 2.5 },
                { week: 16, gain: 2.8, minGain: 1, maxGain: 2.8 },
                { week: 17, gain: 3, minGain: 1.2, maxGain: 3 },
                { week: 18, gain: 3.3, minGain: 1.3, maxGain: 3.3 },
                { week: 19, gain: 3.6, minGain: 1.5, maxGain: 3.6 },
                { week: 20, gain: 3.8, minGain: 1.7, maxGain: 3.8 },
                { week: 21, gain: 4.1, minGain: 1.8, maxGain: 4.1 },
                { week: 22, gain: 4.4, minGain: 2, maxGain: 4.4 },
                { week: 23, gain: 4.6, minGain: 2.2, maxGain: 4.6 },
                { week: 24, gain: 4.9, minGain: 2.3, maxGain: 4.9 },
                { week: 25, gain: 5.1, minGain: 2.5, maxGain: 5.1 },
                { week: 26, gain: 5.4, minGain: 2.7, maxGain: 5.4 },
                { week: 27, gain: 5.7, minGain: 2.8, maxGain: 5.7 },
                { week: 28, gain: 5.9, minGain: 3, maxGain: 5.9 },
                { week: 29, gain: 6.2, minGain: 3.2, maxGain: 6.2 },
                { week: 30, gain: 6.5, minGain: 3.3, maxGain: 6.5 },
                { week: 31, gain: 6.7, minGain: 3.5, maxGain: 6.7 },
                { week: 32, gain: 7, minGain: 3.7, maxGain: 7 },
                { week: 33, gain: 7.2, minGain: 3.8, maxGain: 7.2 },
                { week: 34, gain: 7.5, minGain: 4, maxGain: 7.5 },
                { week: 35, gain: 7.8, minGain: 4.2, maxGain: 7.8 },
                { week: 36, gain: 8, minGain: 4.3, maxGain: 8 },
                { week: 37, gain: 8.3, minGain: 4.5, maxGain: 8.3 },
                { week: 38, gain: 8.5, minGain: 4.7, maxGain: 8.5 },
                { week: 39, gain: 8.8, minGain: 4.8, maxGain: 8.8 },
                { week: 40, gain: 9.1, minGain: 5, maxGain: 9.1 }
              ]
            }
          ],
          [
            {
              BMIGroup: 0,
              weeks: [
                { week: 1, gain: 0, minGain: 0, maxGain: 0 },
                { week: 2, gain: 0.2, minGain: 0.04, maxGain: 0.2 },
                { week: 3, gain: 0.3, minGain: 0.08, maxGain: 0.3 },
                { week: 4, gain: 0.5, minGain: 0.1, maxGain: 0.5 },
                { week: 5, gain: 0.7, minGain: 0.2, maxGain: 0.7 },
                { week: 6, gain: 0.8, minGain: 0.2, maxGain: 0.8 },
                { week: 7, gain: 1, minGain: 0.2, maxGain: 1 },
                { week: 8, gain: 1.2, minGain: 0.3, maxGain: 1.2 },
                { week: 9, gain: 1.3, minGain: 0.3, maxGain: 1.3 },
                { week: 10, gain: 1.5, minGain: 0.4, maxGain: 1.5 },
                { week: 11, gain: 1.7, minGain: 0.4, maxGain: 1.7 },
                { week: 12, gain: 1.8, minGain: 0.5, maxGain: 1.8 },
                { week: 13, gain: 2, minGain: 0.5, maxGain: 2 },
                { week: 14, gain: 2.8, minGain: 1.1, maxGain: 2.8 },
                { week: 15, gain: 3.7, minGain: 1.7, maxGain: 3.7 },
                { week: 16, gain: 4.5, minGain: 2.3, maxGain: 4.5 },
                { week: 17, gain: 5.3, minGain: 2.9, maxGain: 5.3 },
                { week: 18, gain: 6.2, minGain: 3.5, maxGain: 6.2 },
                { week: 19, gain: 7, minGain: 4.1, maxGain: 7 },
                { week: 20, gain: 7.8, minGain: 4.7, maxGain: 7.8 },
                { week: 21, gain: 8.7, minGain: 5.3, maxGain: 8.7 },
                { week: 22, gain: 9.5, minGain: 5.9, maxGain: 9.5 },
                { week: 23, gain: 10.3, minGain: 6.5, maxGain: 10.3 },
                { week: 24, gain: 11.2, minGain: 7.1, maxGain: 11.2 },
                { week: 25, gain: 12, minGain: 7.7, maxGain: 12 },
                { week: 26, gain: 12.8, minGain: 8.3, maxGain: 12.8 },
                { week: 27, gain: 13.7, minGain: 8.9, maxGain: 13.7 },
                { week: 28, gain: 14.5, minGain: 9.5, maxGain: 14.5 },
                { week: 29, gain: 15.3, minGain: 10.1, maxGain: 15.3 },
                { week: 30, gain: 16.2, minGain: 10.8, maxGain: 16.2 },
                { week: 31, gain: 17, minGain: 11.4, maxGain: 17 },
                { week: 32, gain: 17.8, minGain: 12, maxGain: 17.8 },
                { week: 33, gain: 18.7, minGain: 12.6, maxGain: 18.7 },
                { week: 34, gain: 19.5, minGain: 13.2, maxGain: 19.5 },
                { week: 35, gain: 20.3, minGain: 13.8, maxGain: 20.3 },
                { week: 36, gain: 21.2, minGain: 14.4, maxGain: 21.2 },
                { week: 37, gain: 22, minGain: 15, maxGain: 22 },
                { week: 38, gain: 22.8, minGain: 15.6, maxGain: 22.8 },
                { week: 39, gain: 23.7, minGain: 16.2, maxGain: 23.7 },
                { week: 40, gain: 24.5, minGain: 16.8, maxGain: 24.5 }
              ]
            },
            {
              BMIGroup: 1,
              weeks: [
                { week: 1, gain: 0, minGain: 0, maxGain: 0 },
                { week: 2, gain: 0.2, minGain: 0.04, maxGain: 0.2 },
                { week: 3, gain: 0.3, minGain: 0.08, maxGain: 0.3 },
                { week: 4, gain: 0.5, minGain: 0.1, maxGain: 0.5 },
                { week: 5, gain: 0.7, minGain: 0.2, maxGain: 0.7 },
                { week: 6, gain: 0.8, minGain: 0.2, maxGain: 0.8 },
                { week: 7, gain: 1, minGain: 0.2, maxGain: 1 },
                { week: 8, gain: 1.2, minGain: 0.3, maxGain: 1.2 },
                { week: 9, gain: 1.3, minGain: 0.3, maxGain: 1.3 },
                { week: 10, gain: 1.5, minGain: 0.4, maxGain: 1.5 },
                { week: 11, gain: 1.7, minGain: 0.4, maxGain: 1.7 },
                { week: 12, gain: 1.8, minGain: 0.5, maxGain: 1.8 },
                { week: 13, gain: 2, minGain: 0.5, maxGain: 2 },
                { week: 14, gain: 2.8, minGain: 1.1, maxGain: 2.8 },
                { week: 15, gain: 3.7, minGain: 1.7, maxGain: 3.7 },
                { week: 16, gain: 4.5, minGain: 2.3, maxGain: 4.5 },
                { week: 17, gain: 5.3, minGain: 2.9, maxGain: 5.3 },
                { week: 18, gain: 6.2, minGain: 3.5, maxGain: 6.2 },
                { week: 19, gain: 7, minGain: 4.1, maxGain: 7 },
                { week: 20, gain: 7.8, minGain: 4.7, maxGain: 7.8 },
                { week: 21, gain: 8.7, minGain: 5.3, maxGain: 8.7 },
                { week: 22, gain: 9.5, minGain: 5.9, maxGain: 9.5 },
                { week: 23, gain: 10.3, minGain: 6.5, maxGain: 10.3 },
                { week: 24, gain: 11.2, minGain: 7.1, maxGain: 11.2 },
                { week: 25, gain: 12, minGain: 7.7, maxGain: 12 },
                { week: 26, gain: 12.8, minGain: 8.3, maxGain: 12.8 },
                { week: 27, gain: 13.7, minGain: 8.9, maxGain: 13.7 },
                { week: 28, gain: 14.5, minGain: 9.5, maxGain: 14.5 },
                { week: 29, gain: 15.3, minGain: 10.1, maxGain: 15.3 },
                { week: 30, gain: 16.2, minGain: 10.8, maxGain: 16.2 },
                { week: 31, gain: 17, minGain: 11.4, maxGain: 17 },
                { week: 32, gain: 17.8, minGain: 12, maxGain: 17.8 },
                { week: 33, gain: 18.7, minGain: 12.6, maxGain: 18.7 },
                { week: 34, gain: 19.5, minGain: 13.2, maxGain: 19.5 },
                { week: 35, gain: 20.3, minGain: 13.8, maxGain: 20.3 },
                { week: 36, gain: 21.2, minGain: 14.4, maxGain: 21.2 },
                { week: 37, gain: 22, minGain: 15, maxGain: 22 },
                { week: 38, gain: 22.8, minGain: 15.6, maxGain: 22.8 },
                { week: 39, gain: 23.7, minGain: 16.2, maxGain: 23.7 },
                { week: 40, gain: 24.5, minGain: 16.8, maxGain: 24.5 }
              ]
            },
            {
              BMIGroup: 2,
              weeks: [
                { week: 1, gain: 0, minGain: 0, maxGain: 0 },
                { week: 2, gain: 0.2, minGain: 0.04, maxGain: 0.2 },
                { week: 3, gain: 0.3, minGain: 0.08, maxGain: 0.3 },
                { week: 4, gain: 0.5, minGain: 0.1, maxGain: 0.5 },
                { week: 5, gain: 0.7, minGain: 0.2, maxGain: 0.7 },
                { week: 6, gain: 0.8, minGain: 0.2, maxGain: 0.8 },
                { week: 7, gain: 1, minGain: 0.2, maxGain: 1 },
                { week: 8, gain: 1.2, minGain: 0.3, maxGain: 1.2 },
                { week: 9, gain: 1.3, minGain: 0.3, maxGain: 1.3 },
                { week: 10, gain: 1.5, minGain: 0.4, maxGain: 1.5 },
                { week: 11, gain: 1.7, minGain: 0.4, maxGain: 1.7 },
                { week: 12, gain: 1.8, minGain: 0.5, maxGain: 1.8 },
                { week: 13, gain: 2, minGain: 0.5, maxGain: 2 },
                { week: 14, gain: 2.8, minGain: 1, maxGain: 2.8 },
                { week: 15, gain: 3.5, minGain: 1.5, maxGain: 3.5 },
                { week: 16, gain: 4.3, minGain: 2, maxGain: 4.3 },
                { week: 17, gain: 5.1, minGain: 2.5, maxGain: 5.1 },
                { week: 18, gain: 5.8, minGain: 3, maxGain: 5.8 },
                { week: 19, gain: 6.6, minGain: 3.5, maxGain: 6.6 },
                { week: 20, gain: 7.4, minGain: 4, maxGain: 7.4 },
                { week: 21, gain: 8.1, minGain: 4.5, maxGain: 8.1 },
                { week: 22, gain: 8.9, minGain: 5, maxGain: 8.9 },
                { week: 23, gain: 9.7, minGain: 5.5, maxGain: 9.7 },
                { week: 24, gain: 10.4, minGain: 6, maxGain: 10.4 },
                { week: 25, gain: 11.2, minGain: 6.5, maxGain: 11.2 },
                { week: 26, gain: 12, minGain: 7, maxGain: 12 },
                { week: 27, gain: 12.7, minGain: 7.5, maxGain: 12.7 },
                { week: 28, gain: 13.5, minGain: 8, maxGain: 13.5 },
                { week: 29, gain: 14.3, minGain: 8.5, maxGain: 14.3 },
                { week: 30, gain: 15, minGain: 9, maxGain: 15 },
                { week: 31, gain: 15.8, minGain: 9.5, maxGain: 15.8 },
                { week: 32, gain: 16.6, minGain: 10, maxGain: 16.6 },
                { week: 33, gain: 17.3, minGain: 10.5, maxGain: 17.3 },
                { week: 34, gain: 18.1, minGain: 11, maxGain: 18.1 },
                { week: 35, gain: 18.8, minGain: 11.5, maxGain: 18.8 },
                { week: 36, gain: 19.6, minGain: 12.1, maxGain: 19.6 },
                { week: 37, gain: 20.4, minGain: 12.6, maxGain: 20.4 },
                { week: 38, gain: 21.1, minGain: 13.1, maxGain: 21.1 },
                { week: 39, gain: 21.9, minGain: 13.6, maxGain: 21.9 },
                { week: 40, gain: 22.7, minGain: 14.1, maxGain: 22.7 }
              ]
            },
            {
              BMIGroup: 3,
              weeks: [
                { week: 1, gain: 0, minGain: 0, maxGain: 0 },
                { week: 2, gain: 0.2, minGain: 0.04, maxGain: 0.2 },
                { week: 3, gain: 0.3, minGain: 0.08, maxGain: 0.3 },
                { week: 4, gain: 0.5, minGain: 0.1, maxGain: 0.5 },
                { week: 5, gain: 0.7, minGain: 0.2, maxGain: 0.7 },
                { week: 6, gain: 0.8, minGain: 0.2, maxGain: 0.8 },
                { week: 7, gain: 1, minGain: 0.2, maxGain: 1 },
                { week: 8, gain: 1.2, minGain: 0.3, maxGain: 1.2 },
                { week: 9, gain: 1.3, minGain: 0.3, maxGain: 1.3 },
                { week: 10, gain: 1.5, minGain: 0.4, maxGain: 1.5 },
                { week: 11, gain: 1.7, minGain: 0.4, maxGain: 1.7 },
                { week: 12, gain: 1.8, minGain: 0.5, maxGain: 1.8 },
                { week: 13, gain: 2, minGain: 0.5, maxGain: 2 },
                { week: 14, gain: 2.6, minGain: 0.9, maxGain: 2.6 },
                { week: 15, gain: 3.3, minGain: 1.3, maxGain: 3.3 },
                { week: 16, gain: 3.9, minGain: 1.7, maxGain: 3.9 },
                { week: 17, gain: 4.5, minGain: 2.1, maxGain: 4.5 },
                { week: 18, gain: 5.2, minGain: 2.5, maxGain: 5.2 },
                { week: 19, gain: 5.8, minGain: 2.9, maxGain: 5.8 },
                { week: 20, gain: 6.4, minGain: 3.3, maxGain: 6.4 },
                { week: 21, gain: 7, minGain: 3.7, maxGain: 7 },
                { week: 22, gain: 7.7, minGain: 4.1, maxGain: 7.7 },
                { week: 23, gain: 8.3, minGain: 4.5, maxGain: 8.3 },
                { week: 24, gain: 8.9, minGain: 4.9, maxGain: 8.9 },
                { week: 25, gain: 9.6, minGain: 5.3, maxGain: 9.6 },
                { week: 26, gain: 10.2, minGain: 5.7, maxGain: 10.2 },
                { week: 27, gain: 10.8, minGain: 6.1, maxGain: 10.8 },
                { week: 28, gain: 11.5, minGain: 6.5, maxGain: 11.5 },
                { week: 29, gain: 12.1, minGain: 6.9, maxGain: 12.1 },
                { week: 30, gain: 12.7, minGain: 7.3, maxGain: 12.7 },
                { week: 31, gain: 13.4, minGain: 7.7, maxGain: 13.4 },
                { week: 32, gain: 14, minGain: 8.1, maxGain: 14 },
                { week: 33, gain: 14.6, minGain: 8.5, maxGain: 14.6 },
                { week: 34, gain: 15.3, minGain: 8.9, maxGain: 15.3 },
                { week: 35, gain: 15.9, minGain: 9.3, maxGain: 15.9 },
                { week: 36, gain: 16.5, minGain: 9.7, maxGain: 16.5 },
                { week: 37, gain: 17.2, minGain: 10.1, maxGain: 17.2 },
                { week: 38, gain: 17.8, minGain: 10.5, maxGain: 17.8 },
                { week: 39, gain: 18.4, minGain: 10.9, maxGain: 18.4 },
                { week: 40, gain: 19.1, minGain: 11.3, maxGain: 19.1 }
              ]
            }
          ]
        ]
      },
      {
        path: "bmi",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "bmiCategories",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            min: 0,
            max: 18.5,
            status: "\u06a9\u0645\u0628\u0648\u062f \u0648\u0632\u0646",
            color: "#FFD700"
          },
          {
            min: 18.5,
            max: 24.9,
            status: "\u0648\u0632\u0646 \u0646\u0631\u0645\u0627\u0644",
            color: "#4CAF50"
          },
          {
            min: 25,
            max: 29.9,
            status: "\u0627\u0636\u0627\u0641\u0647 \u0648\u0632\u0646",
            color: "#FFA500"
          },
          {
            min: 30,
            max: 100,
            status: "\u0686\u0627\u0642\u06cc",
            color: "#F44336"
          }
        ]
      },
      {
        path: "glo.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "gain",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            status: "\u06a9\u0645\u0628\u0648\u062f \u0648\u0632\u0646",
            color: "#FFD700"
          },
          {
            status: "\u0648\u0632\u0646 \u0646\u0631\u0645\u0627\u0644",
            color: "#4CAF50"
          },
          {
            status: "\u0627\u0636\u0627\u0641\u0647 \u0648\u0632\u0646",
            color: "#FFA500"
          }
        ]
      },
      {
        path: "week2",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "buttonLiom2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "link"
      },
      {
        path: "buttonLiom4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "buttonLiom5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "buttonLiom3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "link"
      },
      {
        path: "buttonLiom6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "link"
      },
      {
        path: "buttonLiom7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "buttonLiom8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "buttonLiom.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom6.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom7.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom8.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicBmi.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBmi.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBmi.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicBmi.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicBmi.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicBmi.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicBmi.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicBmi.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_hamdast_sdk,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootresalt]: hasVariant($state, "resalt", "resalt")
            }
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect, {
              [sty.sideEffectresalt]: hasVariant($state, "resalt", "resalt")
            })}
            deps={undefined}
            onMount={async () => {
              const $steps = {};

              $steps["params"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["params"] != null &&
                typeof $steps["params"] === "object" &&
                typeof $steps["params"].then === "function"
              ) {
                $steps["params"] = await $steps["params"];
              }

              $steps["updateWeek2"] = $state.paramsObject.week
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["week2"]
                      },
                      operation: 0,
                      value: parseInt($state.paramsObject.week) || 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWeek2"] != null &&
                typeof $steps["updateWeek2"] === "object" &&
                typeof $steps["updateWeek2"].then === "function"
              ) {
                $steps["updateWeek2"] = await $steps["updateWeek2"];
              }

              $steps["clearParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }
            }}
          />

          {(() => {
            try {
              return (
                new window.URLSearchParams(window.location.search).get(
                  "inApp"
                ) != "true"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section
              className={classNames(projectcss.all, sty.section__tslw4, {
                [sty.sectionresalt__tslw4CpkCp]: hasVariant(
                  $state,
                  "resalt",
                  "resalt"
                )
              })}
            >
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom, {
                  [sty.headerLiomresalt]: hasVariant($state, "resalt", "resalt")
                })}
                slot={null}
                slot2={
                  <XIcon
                    className={classNames(projectcss.all, sty.svg__npI53, {
                      [sty.svgresalt__npI53CpkCp]: hasVariant(
                        $state,
                        "resalt",
                        "resalt"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return window.history.back();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cwybi
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u06a9\u0646\u062a\u0631\u0644 \u0627\u0636\u0627\u0641\u0647\u200c\u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                    : "\u06a9\u0646\u062a\u0631\u0644 \u0627\u0636\u0627\u0641\u0647\u200c\u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"}
                </div>
              </HeaderLiom>
            </section>
          ) : null}
          <section
            className={classNames(projectcss.all, sty.section__lNvTd, {
              [sty.sectionresalt__lNvTdCpkCp]: hasVariant(
                $state,
                "resalt",
                "resalt"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__jm5S, {
                [sty.freeBoxresalt__jm5SCpkCp]: hasVariant(
                  $state,
                  "resalt",
                  "resalt"
                )
              })}
              style={(() => {
                try {
                  return {
                    "padding-top":
                      new window.URLSearchParams(window.location.search).get(
                        "inApp"
                      ) == "true"
                        ? "16px"
                        : "68px"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__onWzc)}>
                <div className={classNames(projectcss.all, sty.freeBox__kcXag)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yrvB)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__edM9
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return ` <p>
    این ابزار به شما کمک می‌کنه   <strong>  افزایش وزن بارداری‌تون رو بررسی و کنترل کنید.</strong>
    با وارد کردن <strong>قد، وزن و هفته بارداری</strong>، می‌تونید ببینید آیا 
    <strong>وزن‌گیری‌تون سالم هست یا نه</strong>.
  </p>`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631 \u0628\u0647 \u0634\u0645\u0627 \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u200c\u062a\u0648\u0646 \u0631\u0648 \u0628\u0631\u0631\u0633\u06cc \u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u06cc\u062f. \u0628\u0627 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0646 \u0642\u062f\u060c \u0648\u0632\u0646 \u0648 \u0647\u0641\u062a\u0647 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u0628\u0628\u06cc\u0646\u06cc\u062f \u0622\u06cc\u0627 \u0648\u0632\u0646\u200c\u06af\u06cc\u0631\u06cc\u200c\u062a\u0648\u0646 \u0633\u0627\u0644\u0645 \u0647\u0633\u062a \u06cc\u0627 \u0646\u0647.";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dhMCp
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0633\u0644\u0627\u0645\u062a\u06cc"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4LagW)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4PsNr
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iOweJ
                        )}
                      >
                        {"\u0642\u062f"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__d01ZG
                        )}
                      >
                        <Input
                          data-plasmic-name={"higth"}
                          data-plasmic-override={overrides.higth}
                          className={classNames("__wab_instance", sty.higth, {
                            [sty.higthresalt]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "higth",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          placeholder={"160 cm :\u0645\u062b\u0644\u0627"}
                          type={"number"}
                          value={generateStateValueProp($state, [
                            "higth",
                            "value"
                          ])}
                        />

                        <Icon174Icon
                          className={classNames(projectcss.all, sty.svg__gs59Z)}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__y7Z75)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9YMl6
                        )}
                      >
                        {
                          "\u0648\u0632\u0646  \u0642\u0628\u0644 \u0627\u0632 \u0628\u0631\u062f\u0627\u0631\u06cc"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nGezH
                        )}
                      >
                        <Input
                          data-plasmic-name={"lastWeight"}
                          data-plasmic-override={overrides.lastWeight}
                          className={classNames(
                            "__wab_instance",
                            sty.lastWeight,
                            {
                              [sty.lastWeightresalt]: hasVariant(
                                $state,
                                "resalt",
                                "resalt"
                              )
                            }
                          )}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "lastWeight",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          placeholder={"55 kg :\u0645\u062b\u0644\u0627"}
                          type={"number"}
                          value={generateStateValueProp($state, [
                            "lastWeight",
                            "value"
                          ])}
                        />

                        <Icon173Icon
                          className={classNames(projectcss.all, sty.svg__re0X6)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__eWwLh
                    )}
                    code={"<hr></hr>"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mkof
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                    }
                  </div>
                  <div className={classNames(projectcss.all, sty.freeBox__zuT)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wzr4M)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tnTgd
                        )}
                      >
                        {
                          "\u0647\u0641\u062a\u0647 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vjbLz
                        )}
                      >
                        <Input
                          data-plasmic-name={"week"}
                          data-plasmic-override={overrides.week}
                          className={classNames("__wab_instance", sty.week, {
                            [sty.weekresalt]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "week",
                              "value"
                            ]).apply(null, eventArgs);

                            (async value => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return ($state.week2 =
                                          parseInt($state.week.value) > 40
                                            ? 40
                                            : parseInt($state.week.value) < 1
                                            ? 1
                                            : parseInt($state.week.value) || 0);
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }).apply(null, eventArgs);
                          }}
                          placeholder={
                            "\u0645\u062b\u0644\u0627: \u0647\u0641\u062a\u0647 10"
                          }
                          type={"number"}
                          value={generateStateValueProp($state, [
                            "week",
                            "value"
                          ])}
                        />

                        <Icon181Icon
                          className={classNames(projectcss.all, sty.svg__ctBZ)}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vRky0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aaE4P
                        )}
                      >
                        {"\u0648\u0632\u0646  \u0641\u0639\u0644\u06cc"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sjiy2
                        )}
                      >
                        <Input
                          data-plasmic-name={"weight2"}
                          data-plasmic-override={overrides.weight2}
                          className={classNames("__wab_instance", sty.weight2, {
                            [sty.weight2resalt]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "weight2",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          placeholder={"60 kg :\u0645\u062b\u0644\u0627"}
                          type={"number"}
                          value={generateStateValueProp($state, [
                            "weight2",
                            "value"
                          ])}
                        />

                        <Icon173Icon
                          className={classNames(projectcss.all, sty.svg__hFdQ0)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h6WtR)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___46TXg
                      )}
                    >
                      {
                        "\u0622\u06cc\u0627 \u062f\u0648\u0642\u0644\u0648 \u062f\u0627\u0631\u06cc\u061f"
                      }
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mmkZj)}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__meewi
                          )}
                        >
                          <Icon177Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zUji1
                            )}
                            role={"img"}
                          />

                          <AntdRadioGroup
                            data-plasmic-name={"radioGroup"}
                            data-plasmic-override={overrides.radioGroup}
                            className={classNames(
                              "__wab_instance",
                              sty.radioGroup
                            )}
                            defaultValue={"1"}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "radioGroup",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            options={(() => {
                              const __composite = [
                                { value: null, label: null },
                                { value: null, label: null }
                              ];
                              __composite["0"]["value"] = "1";
                              __composite["0"]["label"] = "\u062e\u06cc\u0631";
                              __composite["1"]["value"] = "2";
                              __composite["1"]["label"] = "\u0628\u0644\u0647";
                              return __composite;
                            })()}
                            value={generateStateValueProp($state, [
                              "radioGroup",
                              "value"
                            ])}
                          >
                            <AntdRadio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__geeP9
                              )}
                              value={"op1"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kOJ
                                )}
                              >
                                {"Option 1"}
                              </div>
                            </AntdRadio>
                            <AntdRadio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__zOvB0
                              )}
                              value={"op2"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3FHwO
                                )}
                              >
                                {"Option 2"}
                              </div>
                            </AntdRadio>
                          </AntdRadioGroup>
                          <Input
                            data-plasmic-name={"glo"}
                            data-plasmic-override={overrides.glo}
                            className={classNames("__wab_instance", sty.glo)}
                            disabled={false}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "glo",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            placeholder={"1"}
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "glo",
                              "value"
                            ])}
                          />
                        </div>
                      ) : null}
                    </div>
                  </div>
                </div>
              </div>
              <section
                className={classNames(projectcss.all, sty.section___8G5Tq, {
                  [sty.sectionresalt___8G5TqCpkCp]: hasVariant(
                    $state,
                    "resalt",
                    "resalt"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__aXAcS)}>
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom"}
                    data-plasmic-override={overrides.buttonLiom}
                    className={classNames("__wab_instance", sty.buttonLiom, {
                      [sty.buttonLiomresalt]: hasVariant(
                        $state,
                        "resalt",
                        "resalt"
                      )
                    })}
                    color={generateStateValueProp($state, [
                      "buttonLiom",
                      "color"
                    ])}
                    load={generateStateValueProp($state, [
                      "buttonLiom",
                      "load"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] =
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var higth =
                                      parseInt($state.higth.value) / 100;
                                    var lastWeight = parseInt(
                                      $state.lastWeight.value
                                    );
                                    var weight2 = parseInt(
                                      $state.weight2.value
                                    );
                                    var week = $state.week2;
                                    var gol = parseInt($state.radioGroup.value);
                                    var lastbmi = lastWeight / (higth * higth);
                                    var bmiRanges =
                                      $state.bmiCategories.findIndex(
                                        range =>
                                          lastbmi >= range.min &&
                                          lastbmi < range.max
                                      );
                                    var w = $state.weight[gol - 1][
                                      bmiRanges
                                    ].weeks.find(
                                      item => item.week == week
                                    ).gain;
                                    var bmi = (weight2 - w) / (higth * higth);
                                    var add = weight2 - lastWeight;
                                    var min = $state.weight[gol - 1][
                                      bmiRanges
                                    ].weeks.find(
                                      item => item.week == week
                                    ).minGain;
                                    var max = $state.weight[gol - 1][
                                      bmiRanges
                                    ].weeks.find(
                                      item => item.week == week
                                    ).maxGain;
                                    var type =
                                      add >= min && add <= max
                                        ? 1
                                        : add < min
                                        ? 0
                                        : 2;
                                    return ($state.bmi = {
                                      gol: gol,
                                      bmiRanges: bmiRanges,
                                      week: week,
                                      lastbmi: Math.fround(lastbmi),
                                      bmi: Math.fround(bmi),
                                      w: w,
                                      type: type,
                                      min: min,
                                      max: max,
                                      weight: lastWeight,
                                      add: add
                                    });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateResalt"] =
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value
                          ? (() => {
                              const actionArgs = {
                                vgroup: "resalt",
                                operation: 2,
                                value: "resalt"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                const oldValue = $stateGet($state, vgroup);
                                $stateSet($state, vgroup, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateResalt"] != null &&
                        typeof $steps["updateResalt"] === "object" &&
                        typeof $steps["updateResalt"].then === "function"
                      ) {
                        $steps["updateResalt"] = await $steps["updateResalt"];
                      }

                      $steps["invokeGlobalAction"] = !(
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                                "bottom-center",
                                3000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom",
                          "load"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0KLbb
                      )}
                    >
                      {
                        "\u0628\u0631\u0631\u0633\u06cc \u0648\u0636\u0639\u06cc\u062a \u0648\u0632\u0646"
                      }
                    </div>
                  </ButtonLiom>
                </div>
              </section>
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__e8Ta, {
              [sty.sectionresalt__e8TaCpkCp]: hasVariant(
                $state,
                "resalt",
                "resalt"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__y6RhQ, {
                [sty.freeBoxresalt__y6RhQCpkCp]: hasVariant(
                  $state,
                  "resalt",
                  "resalt"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__cce33)}>
                <div className={classNames(projectcss.all, sty.freeBox__oWYi)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lMkSc
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return `بررسی وزن در <span style="font-weight: bold; font-size: 24px;"> هفته ${$state.week2}</span> بارداری`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u062f\u0631 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                  {(
                    hasVariant($state, "resalt", "resalt")
                      ? (() => {
                          try {
                            return $state.bmi.week != $state.week2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <ButtonLiom
                      data-plasmic-name={"buttonLiom6"}
                      data-plasmic-override={overrides.buttonLiom6}
                      className={classNames("__wab_instance", sty.buttonLiom6, {
                        [sty.buttonLiom6resalt]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "buttonLiom6",
                        "color"
                      ])}
                      load={generateStateValueProp($state, [
                        "buttonLiom6",
                        "load"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateWeek2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["week2"]
                                },
                                operation: 0,
                                value: $state.bmi.week
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWeek2"] != null &&
                          typeof $steps["updateWeek2"] === "object" &&
                          typeof $steps["updateWeek2"].then === "function"
                        ) {
                          $steps["updateWeek2"] = await $steps["updateWeek2"];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var higth =
                                      parseInt($state.higth.value) / 100;
                                    var lastWeight = parseInt(
                                      $state.lastWeight.value
                                    );
                                    var weight2 = parseInt(
                                      $state.weight2.value
                                    );
                                    var week = $state.week2;
                                    var gol = parseInt($state.radioGroup.value);
                                    var lastbmi = lastWeight / (higth * higth);
                                    var bmiRanges =
                                      $state.bmiCategories.findIndex(
                                        range =>
                                          lastbmi >= range.min &&
                                          lastbmi < range.max
                                      );
                                    var w = $state.weight[gol - 1][
                                      bmiRanges
                                    ].weeks.find(
                                      item => item.week == week
                                    ).gain;
                                    var bmi = (weight2 - w) / (higth * higth);
                                    var add = weight2 - lastWeight;
                                    var min = $state.weight[gol - 1][
                                      bmiRanges
                                    ].weeks.find(
                                      item => item.week == week
                                    ).minGain;
                                    var max = $state.weight[gol - 1][
                                      bmiRanges
                                    ].weeks.find(
                                      item => item.week == week
                                    ).maxGain;
                                    var type =
                                      add >= min && add <= max
                                        ? 1
                                        : add < min
                                        ? 0
                                        : 2;
                                    return ($state.bmi = {
                                      week: $state.bmi.week,
                                      lastbmi: Math.fround(lastbmi),
                                      bmi: $state.bmi.bmi,
                                      w: w,
                                      type: type,
                                      min: min,
                                      max: max,
                                      weight: lastWeight,
                                      add: add
                                    });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction"] = !(
                          $state.higth.value &&
                          $state.lastWeight.value &&
                          $state.weight2.value &&
                          $state.week.value
                        )
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                                  "bottom-center",
                                  3000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom6",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom6",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      size={"compact"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pof5V,
                          {
                            [sty.textresalt__pof5VCpkCp]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "resalt", "resalt") ? (
                          "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0647\u0641\u062a\u0647 \u062c\u0627\u0631\u06cc"
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.week2 == $state.bmi.week;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0647\u0641\u062a\u0647 \u062c\u0627\u0631\u06cc";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    </ButtonLiom>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__j1DUo)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__g4RiL)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zBiGv,
                          {
                            [sty.textresalt__zBiGvCpkCp]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          }
                        )}
                      >
                        {"BMI \u0634\u0645\u0627 "}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__edLsG,
                          {
                            [sty.textresalt__edLsGCpkCp]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          }
                        )}
                        style={(() => {
                          try {
                            return {
                              color: $state.bmiCategories.find(
                                item =>
                                  $state.bmi.bmi >= item.min &&
                                  $state.bmi.bmi <= item.max
                              ).color
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.bmi.bmi.toFixed(2);
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pD9O
                        )}
                      >
                        {"\u0647\u0633\u062a."}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iQb4A,
                        {
                          [sty.textresalt__iQb4ACpkCp]: hasVariant(
                            $state,
                            "resalt",
                            "resalt"
                          )
                        }
                      )}
                      style={(() => {
                        try {
                          return {
                            color: $state.bmiCategories.find(
                              item =>
                                $state.bmi.bmi >= item.min &&
                                $state.bmi.bmi <= item.max
                            ).color
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.bmiCategories.find(
                              item =>
                                $state.bmi.bmi >= item.min &&
                                $state.bmi.bmi <= item.max
                            ).status;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0648\u0636\u0639\u06cc\u062a \u0646\u0631\u0645\u0627\u0644";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__tiDzh,
                        {
                          [sty.freeBoxresalt__tiDzhCpkCp]: hasVariant(
                            $state,
                            "resalt",
                            "resalt"
                          )
                        }
                      )}
                    >
                      <Icon115Icon
                        className={classNames(projectcss.all, sty.svg___4JEiy, {
                          [sty.svgresalt___4JEiyCpkCp]: hasVariant(
                            $state,
                            "resalt",
                            "resalt"
                          )
                        })}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Cwl,
                          {
                            [sty.textresalt___2CwlCpkCp]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          }
                        )}
                      >
                        {
                          "\u0627\u06cc\u0646 BMI \u0628\u0631 \u0627\u0633\u0627\u0633 \u0648\u0632\u0646 \u0648\u0631\u0648\u062f\u06cc \u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u06cc \u0634\u0648\u062f \u0648 \u0645\u0646\u0627\u0633\u0628 \u0647\u0641\u062a\u0647 \u062c\u0627\u0631\u06cc \u0627\u0633\u062a."
                        }
                      </div>
                    </div>
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml__x9ORd
                      )}
                      code={(() => {
                        try {
                          return `
  <style>

    .sidebar h2 {
      text-align: center;
      font-size: 22px;
      margin-bottom: 20px;
      color: #333;
    }

    .menu-item {
      background-color: #ffffffcc;
      border-radius: 10px;
      padding: 10px 15px;
      margin-bottom: 15px;
      font-weight: bold;
      display: flex;
      align-items: center;
    }
    .slider-container {
      direction: ltr !important;
      margin-top: 20px;
    }
    label {
      font-weight: bold;
      margin-bottom: 5px;
      display: block;
      color: #444;
    }
    .slider-container {
  margin-top: 20px;
}

.slider-container input[type="range"] {
  direction: ltr;
}


    input[type="range"] {
      -webkit-appearance: none;
      width: 100%;
      height: 10px;
      border-radius: 5px;
background: linear-gradient(to right,
  #FFD700 0%,     /* کمبود وزن - زرد */
  #4CAF50 33%,    /* وزن نرمال - سبز */
  #FFA500 66%,    /* اضافه وزن - نارنجی */
  #F44336 100%    /* چاقی - قرمز */
);      outline: none;
    }

    input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: ${
        $state.bmiCategories.find(
          item => $state.bmi.bmi >= item.min && $state.bmi.bmi <= item.max
        ).color
      };
      cursor: pointer;
      border: 2px solid white;
      box-shadow: 0 0 4px rgba(0,0,0,0.3);
    }

    .value-output {
      text-align: center;
      margin-top: 10px;
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
    }
  </style>
</head>

  <div class="sidebar" style="direction: ltr !important;">
    <div class="slider-container">
      <input type="range" id="weekSlider" name="weekSlider" min="1" max="40" value="${
        $state.bmi.bmi
      }" disabled> 
    </div>
  </div>

  <script>
    const slider = document.getElementById("weekSlider");
    const valueOutput = document.getElementById("weekValue");
  </script>`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return '\r\n  <style>\r\n\r\n    .sidebar h2 {\r\n      text-align: center;\r\n      font-size: 22px;\r\n      margin-bottom: 20px;\r\n      color: #333;\r\n    }\r\n\r\n    .menu-item {\r\n      background-color: #ffffffcc;\r\n      border-radius: 10px;\r\n      padding: 10px 15px;\r\n      margin-bottom: 15px;\r\n      font-weight: bold;\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n\r\n    .slider-container {\r\n      direcshen: ltr;\r\n      margin-top: 20px;\r\n    }\r\n\r\n    label {\r\n      font-weight: bold;\r\n      margin-bottom: 5px;\r\n      display: block;\r\n      color: #444;\r\n    }\r\n\r\n    input[type="range"] {\r\n      -webkit-appearance: none;\r\n      width: 100%;\r\n      height: 10px;\r\n      border-radius: 5px;\r\nbackground: linear-gradient(to right,\r\n  #FFD700 0%,     /* \u06a9\u0645\u0628\u0648\u062f \u0648\u0632\u0646 - \u0632\u0631\u062f */\r\n  #4CAF50 33%,    /* \u0648\u0632\u0646 \u0646\u0631\u0645\u0627\u0644 - \u0633\u0628\u0632 */\r\n  #FFA500 66%,    /* \u0627\u0636\u0627\u0641\u0647 \u0648\u0632\u0646 - \u0646\u0627\u0631\u0646\u062c\u06cc */\r\n  #F44336 100%    /* \u0686\u0627\u0642\u06cc - \u0642\u0631\u0645\u0632 */\r\n);      outline: none;\r\n    }\r\n\r\n    input[type="range"]::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      appearance: none;\r\n      width: 20px;\r\n      height: 20px;\r\n      border-radius: 50%;\r\n      background: #333;\r\n      cursor: pointer;\r\n      border: 2px solid white;\r\n      box-shadow: 0 0 4px rgba(0,0,0,0.3);\r\n    }\r\n\r\n    .value-output {\r\n      text-align: center;\r\n      margin-top: 10px;\r\n      font-size: 16px;\r\n      font-weight: bold;\r\n      color: #ffffff;\r\n    }\r\n  </style>\r\n</head>\r\n\r\n  <div class="sidebar">\r\n    <div class="slider-container">\r\n      <input type="range" id="weekSlider" name="weekSlider" min="1" max="40" value="20" disabled> \r\n    </div>\r\n  </div>\r\n\r\n  <script>\r\n    const slider = document.getElementById("weekSlider");\r\n    const valueOutput = document.getElementById("weekValue");\r\n\r\n    slider.oninput = function () {\r\n      valueOutput.innerText = `\u0647\u0641\u062a\u0647 ${this.value}`;\r\n    };\r\n  </script>';
                          }
                          throw e;
                        }
                      })()}
                    />

                    <ButtonLiom
                      data-plasmic-name={"buttonLiom3"}
                      data-plasmic-override={overrides.buttonLiom3}
                      className={classNames("__wab_instance", sty.buttonLiom3, {
                        [sty.buttonLiom3resalt]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      })}
                      color={generateStateValueProp($state, [
                        "buttonLiom3",
                        "color"
                      ])}
                      load={generateStateValueProp($state, [
                        "buttonLiom3",
                        "load"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateWeek2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["week2"]
                                },
                                operation: 0,
                                value: $state.bmi.week
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWeek2"] != null &&
                          typeof $steps["updateWeek2"] === "object" &&
                          typeof $steps["updateWeek2"].then === "function"
                        ) {
                          $steps["updateWeek2"] = await $steps["updateWeek2"];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var higth =
                                      parseInt($state.higth.value) / 100;
                                    var lastWeight = parseInt(
                                      $state.lastWeight.value
                                    );
                                    var weight2 = parseInt(
                                      $state.weight2.value
                                    );
                                    var week = $state.week2;
                                    var gol = parseInt($state.glo.value);
                                    var lastbmi = lastWeight / (higth * higth);
                                    var w = $state.weight[gol - 1].find(
                                      item => item.week == week
                                    ).gain;
                                    var bmi = (weight2 - w) / (higth * higth);
                                    var add = weight2 - lastWeight;
                                    var min = $state.weight[gol - 1].find(
                                      item => item.week == week
                                    ).minGain;
                                    var max = $state.weight[gol - 1].find(
                                      item => item.week == week
                                    ).maxGain;
                                    var type =
                                      add >= min && add <= max
                                        ? 1
                                        : add < min
                                        ? 0
                                        : 2;
                                    return ($state.bmi = {
                                      week: week,
                                      lastbmi: lastbmi,
                                      bmi: bmi,
                                      w: w,
                                      type: type,
                                      min: min,
                                      max: max,
                                      weight: lastWeight,
                                      add: add
                                    });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction"] = !(
                          $state.higth.value &&
                          $state.lastWeight.value &&
                          $state.weight2.value &&
                          $state.week.value &&
                          $state.glo.value
                        )
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                                  "bottom-center",
                                  3000
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom3",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom3",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__plgRk
                        )}
                      >
                        {
                          "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0647\u0641\u062a\u0647 \u062c\u0627\u0631\u06cc"
                        }
                      </div>
                    </ButtonLiom>
                  </div>
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom7"}
                    data-plasmic-override={overrides.buttonLiom7}
                    className={classNames("__wab_instance", sty.buttonLiom7, {
                      [sty.buttonLiom7resalt]: hasVariant(
                        $state,
                        "resalt",
                        "resalt"
                      )
                    })}
                    color={generateStateValueProp($state, [
                      "buttonLiom7",
                      "color"
                    ])}
                    load={generateStateValueProp($state, [
                      "buttonLiom7",
                      "load"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWeek2"] =
                        $state.week2 > 1
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["week2"]
                                },
                                operation: 0,
                                value: $state.week2 - 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateWeek2"] != null &&
                        typeof $steps["updateWeek2"] === "object" &&
                        typeof $steps["updateWeek2"].then === "function"
                      ) {
                        $steps["updateWeek2"] = await $steps["updateWeek2"];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var higth =
                                    parseInt($state.higth.value) / 100;
                                  var lastWeight = parseInt(
                                    $state.lastWeight.value
                                  );
                                  var weight2 = parseInt($state.weight2.value);
                                  var week = $state.week2;
                                  var gol = parseInt($state.radioGroup.value);
                                  var lastbmi = lastWeight / (higth * higth);
                                  var bmiRanges =
                                    $state.bmiCategories.findIndex(
                                      range =>
                                        lastbmi >= range.min &&
                                        lastbmi < range.max
                                    );
                                  var w = $state.weight[gol - 1][
                                    bmiRanges
                                  ].weeks.find(item => item.week == week).gain;
                                  var bmi = (weight2 - w) / (higth * higth);
                                  var add = weight2 - lastWeight;
                                  var min = $state.weight[gol - 1][
                                    bmiRanges
                                  ].weeks.find(
                                    item => item.week == week
                                  ).minGain;
                                  var max = $state.weight[gol - 1][
                                    bmiRanges
                                  ].weeks.find(
                                    item => item.week == week
                                  ).maxGain;
                                  var type =
                                    add >= min && add <= max
                                      ? 1
                                      : add < min
                                      ? 0
                                      : 2;
                                  return ($state.bmi = {
                                    week: $state.bmi.week,
                                    lastbmi: Math.fround(lastbmi),
                                    bmi: $state.bmi.bmi,
                                    w: w,
                                    type: type,
                                    min: min,
                                    max: max,
                                    weight: lastWeight,
                                    add: add
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = !(
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value &&
                        $state.glo.value
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                                "bottom-center",
                                3000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom7",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom7",
                          "load"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    shape={"round"}
                    size={"compact"}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__eQlk)}
                        role={"img"}
                      />
                    }
                  >
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__teEsa, {
                        [sty.svgresalt__teEsaCpkCp]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      })}
                      role={"img"}
                    />
                  </ButtonLiom>
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom8"}
                    data-plasmic-override={overrides.buttonLiom8}
                    className={classNames("__wab_instance", sty.buttonLiom8, {
                      [sty.buttonLiom8resalt]: hasVariant(
                        $state,
                        "resalt",
                        "resalt"
                      )
                    })}
                    color={generateStateValueProp($state, [
                      "buttonLiom8",
                      "color"
                    ])}
                    load={generateStateValueProp($state, [
                      "buttonLiom8",
                      "load"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWeek2"] =
                        $state.week2 < 40
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["week2"]
                                },
                                operation: 0,
                                value: $state.week2 + 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateWeek2"] != null &&
                        typeof $steps["updateWeek2"] === "object" &&
                        typeof $steps["updateWeek2"].then === "function"
                      ) {
                        $steps["updateWeek2"] = await $steps["updateWeek2"];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var higth =
                                    parseInt($state.higth.value) / 100;
                                  var lastWeight = parseInt(
                                    $state.lastWeight.value
                                  );
                                  var weight2 = parseInt($state.weight2.value);
                                  var week = $state.week2;
                                  var gol = parseInt($state.radioGroup.value);
                                  var lastbmi = lastWeight / (higth * higth);
                                  var bmiRanges =
                                    $state.bmiCategories.findIndex(
                                      range =>
                                        lastbmi >= range.min &&
                                        lastbmi < range.max
                                    );
                                  var w = $state.weight[gol - 1][
                                    bmiRanges
                                  ].weeks.find(item => item.week == week).gain;
                                  var bmi = (weight2 - w) / (higth * higth);
                                  var add = weight2 - lastWeight;
                                  var min = $state.weight[gol - 1][
                                    bmiRanges
                                  ].weeks.find(
                                    item => item.week == week
                                  ).minGain;
                                  var max = $state.weight[gol - 1][
                                    bmiRanges
                                  ].weeks.find(
                                    item => item.week == week
                                  ).maxGain;
                                  var type =
                                    add >= min && add <= max
                                      ? 1
                                      : add < min
                                      ? 0
                                      : 2;
                                  return ($state.bmi = {
                                    week: $state.bmi.week,
                                    lastbmi: Math.fround(lastbmi),
                                    bmi: $state.bmi.bmi,
                                    w: w,
                                    type: type,
                                    min: min,
                                    max: max,
                                    weight: lastWeight,
                                    add: add
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = !(
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value &&
                        $state.glo.value
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                                "bottom-center",
                                3000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom8",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom8",
                          "load"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    shape={"round"}
                    size={"compact"}
                    startIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__zOoj)}
                        role={"img"}
                      />
                    }
                  >
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__gLpZu, {
                        [sty.svgresalt__gLpZuCpkCp]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      })}
                      role={"img"}
                    />
                  </ButtonLiom>
                </div>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox___2ZcCh, {
                  [sty.freeBoxresalt___2ZcChCpkCp]: hasVariant(
                    $state,
                    "resalt",
                    "resalt"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__ocfdq, {
                    [sty.freeBoxresalt__ocfdqCpkCp]: hasVariant(
                      $state,
                      "resalt",
                      "resalt"
                    )
                  })}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hZahh, {
                      [sty.freeBoxresalt__hZahhCpkCp]: hasVariant(
                        $state,
                        "resalt",
                        "resalt"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zz0HJ,
                        {
                          [sty.textresalt__zz0HJCpkCp]: hasVariant(
                            $state,
                            "resalt",
                            "resalt"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "resalt", "resalt") ? (
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return `<span style="color: #FFA500;">حداقل</span> وزن مناسب هفته <strong>${$state.week2}</strong> : `;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return '"\u062d\u062f\u0627\u0642\u0644 \u0648\u0632\u0646 \u0634\u0645\u0627\u062a\u0627 \u0647\u0641\u062a\u0647 10:';
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      ) : (
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return `<span style="color: #FFA500;">حداقل</span> وزن مناسب هفته : `;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return '"\u062d\u062f\u0627\u0642\u0644 \u0648\u0632\u0646 \u0634\u0645\u0627\u062a\u0627 \u0647\u0641\u062a\u0647 10:';
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      )}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rrkin,
                        {
                          [sty.textresalt__rrkinCpkCp]: hasVariant(
                            $state,
                            "resalt",
                            "resalt"
                          )
                        }
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `
${parseInt($state.bmi.weight) + $state.bmi.min} کیلوگرم `;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1KN2Z, {
                      [sty.freeBoxresalt___1KN2ZCpkCp]: hasVariant(
                        $state,
                        "resalt",
                        "resalt"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rAhzW,
                        {
                          [sty.textresalt__rAhzWCpkCp]: hasVariant(
                            $state,
                            "resalt",
                            "resalt"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "resalt", "resalt") ? (
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return `<span style="color:#F44336;">حداکثر</span> وزن مناسب هفته <strong>${$state.week2}</strong> : `;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u062d\u062f\u0627\u06a9\u062b\u0631 \u0648\u0632\u0646 \u0645\u0646\u0627\u0633\u0628 \u0647\u0641\u062a\u0647";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      ) : (
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return `<span style="color:#F44336;">حداکثر</span> وزن مناسب هفته <strong>${$state.week2}</strong> : `;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u062d\u062f\u0627\u06a9\u062b\u0631 \u0648\u0632\u0646 \u0645\u0646\u0627\u0633\u0628 \u0647\u0641\u062a\u0647";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      )}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__etuXx
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `
${parseInt($state.bmi.weight) + $state.bmi.max} کیلوگرم `;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__oxfqf, {
                    [sty.freeBoxresalt__oxfqfCpkCp]: hasVariant(
                      $state,
                      "resalt",
                      "resalt"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y3N,
                      {
                        [sty.textresalt__y3NCpkCp]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      }
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return `BMI شما پیش از بارداری 
<span style="color: ${
                              $state.bmiCategories.find(
                                item =>
                                  $state.bmi.lastbmi >= item.min &&
                                  $state.bmi.lastbmi <= item.max
                              ).color
                            }; font-weight: bold;">
  ${$state.bmi.lastbmi.toFixed(2)}
</span> 
بوده که در محدوده 
<span style="color: ${
                              $state.bmiCategories.find(
                                item =>
                                  $state.bmi.lastbmi >= item.min &&
                                  $state.bmi.lastbmi <= item.max
                              ).color
                            }; font-weight: bold;">
  ${
    $state.bmiCategories.find(
      item => $state.bmi.lastbmi >= item.min && $state.bmi.lastbmi <= item.max
    ).status
  }
</span> 
قرار دارد.`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__scRuV,
                      {
                        [sty.textresalt__scRuVCpkCp]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "resalt", "resalt") ? (
                      "\u0645\u062d\u062f\u0648\u062f\u0647 \u0648\u0632\u0646 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc \u0634\u0645\u0627"
                    ) : (
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `BMI شما پیش از بارداری 
<span style="color: ${
                                $state.bmiCategories.find(
                                  item =>
                                    $state.bmi.lastbmi >= item.min &&
                                    $state.bmi.lastbmi <= item.max
                                ).color
                              }; font-weight: bold;">
  ${$state.bmi.lastbmi.toFixed(2)}
</span> 
بوده که در محدوده 
<span style="color: ${
                                $state.bmiCategories.find(
                                  item =>
                                    $state.bmi.lastbmi >= item.min &&
                                    $state.bmi.lastbmi <= item.max
                                ).color
                              }; font-weight: bold;">
  ${
    $state.bmiCategories.find(
      item => $state.bmi.lastbmi >= item.min && $state.bmi.lastbmi <= item.max
    ).status
  }
</span> 
قرار دارد.`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    )}
                  </div>
                  {(
                    hasVariant($state, "resalt", "resalt")
                      ? (() => {
                          try {
                            return $state.bmi.week == $state.week2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Hvl,
                        {
                          [sty.textresalt___4HvlCpkCp]: hasVariant(
                            $state,
                            "resalt",
                            "resalt"
                          )
                        }
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `شما تا هفته ${$state.week2}  بارداری
<span style="font-weight: bold;">
${$state.bmi.add}  کیلوگرم 
  ${
    $state.bmi.add < 0
      ? "کاهش وزن"
      : $state.bmi.add >= 0
      ? "افزایش وزن"
      : "هیچ تغییری"
  }
</span>
داشته اید. که در محدوده
<span style="color: ${$state.gain[$state.bmi.type].color}; font-weight: bold;">
  ${$state.gain[$state.bmi.type].status}
</span>
قرار دارد.
`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x0O7L,
                      {
                        [sty.textresalt__x0O7LCpkCp]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      }
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return `حداقل وزن شماتا هفته ${$state.week2}      
       ...
<span style="font-weight: bold;">
${parseInt($state.bmi.weight) + $state.bmi.min}  کیلوگرم  ...
</span>
و حداکثر وزن شما در این هفته ... 
<span style="font-weight: bold;">
${parseInt($state.bmi.weight) + $state.bmi.max} کیلوگرم  ...
</span> است.`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__b2S5G,
                      {
                        [sty.embedHtmlresalt__b2S5GCpkCp]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      }
                    )}
                    code={
                      hasVariant($state, "resalt", "resalt")
                        ? (() => {
                            try {
                              return `<style>
  #chart {
    width: 100%;
    height: auto;
    display: block;
    position: relative;
  }
  #tooltip {
    position: absolute;
    background: #fff;
    border: 1px solid #999;
    padding: 6px 10px;
    border-radius: 5px;
    font-size: 14px;
    pointer-events: none;
    box-shadow: 0 2px 5px rgba(0,0,0,0.15);
    display: none;
    z-index: 10;
  }
</style>

<div style="position: relative;">
  <canvas id="chart"></canvas>
  <div id="tooltip"></div>
</div>

<script>
  const data = ${JSON.stringify(
    $state.weight[$state.bmi.gol - 1][$state.bmi.bmiRanges].weeks
  )};
  const userPoint = { week: 20, gain: 5 };

  const canvas = document.getElementById('chart');
  const tooltip = document.getElementById('tooltip');
  const ctx = canvas.getContext('2d');

  function drawChart() {
    canvas.width = canvas.clientWidth;
    canvas.height = 400;

    const padding = 50;
    const width = canvas.width - padding * 2;
    const height = canvas.height - padding * 2;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const allY = data.flatMap(d => [d.minGain, d.maxGain, userPoint.gain]);
    const allX = data.map(d => d.week);

    const minY = Math.min(...allY) - 2;
    const maxY = Math.max(...allY) + 2;
    const minX = Math.min(...allX);
    const maxX = Math.max(...allX);

    const scaleX = width / (maxX - minX);
    const scaleY = height / (maxY - minY);

    const toCanvasCoords = (x, y) => ({
      x: padding + (x - minX) * scaleX,
      y: canvas.height - padding - (y - minY) * scaleY
    });

    const fromCanvasCoords = (x, y) => ({
      week: Math.round((x - padding) / scaleX + minX),
      gain: ((canvas.height - padding - y) / scaleY + minY)
    });

    // shaded area
    ctx.beginPath();
    let p0 = toCanvasCoords(data[0].week, data[0].minGain);
    ctx.moveTo(p0.x, p0.y);
    for (let i = 1; i < data.length; i++) {
      const p = toCanvasCoords(data[i].week, data[i].minGain);
      ctx.lineTo(p.x, p.y);
    }
    for (let i = data.length - 1; i >= 0; i--) {
      const p = toCanvasCoords(data[i].week, data[i].maxGain);
      ctx.lineTo(p.x, p.y);
    }
    ctx.closePath();
    ctx.fillStyle = "#E4D1FF";
    ctx.fill();

    // user point
    const user = toCanvasCoords(userPoint.week, userPoint.gain);
    ctx.beginPath();
    ctx.arc(user.x, user.y, 6, 0, 2 * Math.PI);
    ctx.fillStyle = '#7444BC';
    ctx.fill();

    // grid lines
    ctx.strokeStyle = "#ddd";
    ctx.lineWidth = 1;
    const stepY = 5;
    for (let y = Math.ceil(minY); y <= maxY; y += stepY) {
      const cy = toCanvasCoords(minX, y).y;
      ctx.beginPath();
      ctx.moveTo(padding, cy);
      ctx.lineTo(canvas.width - padding, cy);
      ctx.stroke();
      ctx.fillStyle = "#333";
      ctx.font = "bold 14px sans-serif"; // بزرگ‌تر شده
      ctx.fillText(y + 'kg', canvas.width - padding + 10, cy + 4);
    }

    const stepX = 5;
    for (let x = minX; x <= maxX; x += stepX) {
      const cx = toCanvasCoords(x, minY).x;
      ctx.beginPath();
      ctx.moveTo(cx, canvas.height - padding);
      ctx.lineTo(cx, canvas.height - padding + 5);
      ctx.stroke();
      ctx.fillText(x, cx - 5, canvas.height - padding + 20);
    }

    // axis labels
    ctx.save();
    ctx.font = "bold 16px sans-serif"; // بزرگ‌تر شده
    ctx.fillStyle = "#004";
    ctx.fillText("هفته", canvas.width / 2 - 20, canvas.height - 10);

    ctx.restore();
    ctx.save();
    ctx.translate(canvas.width - 20, canvas.height / 2 + 40); // به سمت راست منتقل شد
    ctx.rotate(-Math.PI / 2);
    ctx.fillText("وزن (kgs)", 0, 0);
    ctx.restore();
  }

  function showTooltip(evt) {
    const rect = canvas.getBoundingClientRect();
    const x = evt.clientX - rect.left;
    const y = evt.clientY - rect.top;

    const { week, gain } = fromCanvasCoords(x, y);

    if (
      x < 50 || x > canvas.width - 50 ||
      y < 50 || y > canvas.height - 50
    ) {
      tooltip.style.display = "none";
      return;
    }

    tooltip.innerHTML =" هفته:"+ Math.round(week)+"<br>وزن:" +gain.toFixed(1) "kg";
    tooltip.style.left = (evt.clientX + 10) + 'px';
    tooltip.style.top = (evt.clientY + 10) + 'px';
    tooltip.style.display = "block";
  }

  canvas.addEventListener('mousemove', showTooltip);
  canvas.addEventListener('mouseleave', () => {
    tooltip.style.display = "none";
  });

  window.addEventListener('resize', drawChart);
  drawChart();
</script>
`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return '\r\n  <style>\r\n\r\n    #chart {\r\n      width: 100%;\r\n      height: auto;\r\n      display: block;\r\n    }\r\n  </style>\r\n</head>\r\n\r\n<h3>Your Recommended Body Weight Range</h3>\r\n<canvas id="chart"></canvas>\r\n\r\n<script>\r\n  const data = [\r\n    { week: 0, min: 50, max: 52 },\r\n    { week: 5, min: 50.5, max: 54 },\r\n    { week: 10, min: 51.5, max: 56 },\r\n    { week: 15, min: 52, max: 58 },\r\n    { week: 20, min: 54, max: 60 },\r\n    { week: 25, min: 56, max: 62 },\r\n    { week: 30, min: 58, max: 64 },\r\n    { week: 35, min: 60, max: 66 },\r\n    { week: 40, min: 62, max: 68 }\r\n  ];\r\n\r\n  const userPoint = { week: 20, weight: 56 };\r\n  const canvas = document.getElementById(\'chart\');\r\n  const ctx = canvas.getContext(\'2d\');\r\n\r\n  function drawChart() {\r\n    // Resize canvas to match CSS width\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = 400;\r\n\r\n    const padding = 50;\r\n    const width = canvas.width - padding * 2;\r\n    const height = canvas.height - padding * 2;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const allY = data.flatMap(d => [d.min, d.max, userPoint.weight]);\r\n    const allX = data.map(d => d.week);\r\n\r\n    const minY = Math.min(...allY) - 2;\r\n    const maxY = Math.max(...allY) + 2;\r\n    const minX = Math.min(...allX);\r\n    const maxX = Math.max(...allX);\r\n\r\n    const scaleX = width / (maxX - minX);\r\n    const scaleY = height / (maxY - minY);\r\n\r\n    const toCanvasCoords = (x, y) => ({\r\n      x: padding + (x - minX) * scaleX,\r\n      y: canvas.height - padding - (y - minY) * scaleY\r\n    });\r\n\r\n    // shaded area\r\n    ctx.beginPath();\r\n    let p0 = toCanvasCoords(data[0].week, data[0].min);\r\n    ctx.moveTo(p0.x, p0.y);\r\n\r\n    for (let i = 1; i < data.length; i++) {\r\n      const p = toCanvasCoords(data[i].week, data[i].min);\r\n      ctx.lineTo(p.x, p.y);\r\n    }\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n      const p = toCanvasCoords(data[i].week, data[i].max);\r\n      ctx.lineTo(p.x, p.y);\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fillStyle = \'rgba(0, 123, 255, 0.2)\';\r\n    ctx.fill();\r\n\r\n    // user point\r\n    const user = toCanvasCoords(userPoint.week, userPoint.weight);\r\n    ctx.beginPath();\r\n    ctx.arc(user.x, user.y, 6, 0, 2 * Math.PI);\r\n    ctx.fillStyle = \'green\';\r\n    ctx.fill();\r\n\r\n    // grid lines\r\n    ctx.strokeStyle = "#ddd";\r\n    ctx.lineWidth = 1;\r\n    const stepY = 5;\r\n    for (let y = Math.ceil(minY); y <= maxY; y += stepY) {\r\n      const cy = toCanvasCoords(minX, y).y;\r\n      ctx.beginPath();\r\n      ctx.moveTo(padding, cy);\r\n      ctx.lineTo(canvas.width - padding, cy);\r\n      ctx.stroke();\r\n      ctx.fillStyle = "#333";\r\n      ctx.font = "12px sans-serif";\r\n      ctx.fillText(`${y} kg`, padding - 40, cy + 4);\r\n    }\r\n\r\n    const stepX = 5;\r\n    for (let x = minX; x <= maxX; x += stepX) {\r\n      const cx = toCanvasCoords(x, minY).x;\r\n      ctx.beginPath();\r\n      ctx.moveTo(cx, canvas.height - padding);\r\n      ctx.lineTo(cx, canvas.height - padding + 5);\r\n      ctx.stroke();\r\n      ctx.fillText(`${x}`, cx - 5, canvas.height - padding + 20);\r\n    }\r\n\r\n    // axis labels\r\n    ctx.save();\r\n    ctx.font = "14px sans-serif";\r\n    ctx.fillStyle = "#004";\r\n    ctx.fillText("Weeks", canvas.width / 2 - 20, canvas.height - 10);\r\n\r\n    ctx.translate(15, canvas.height / 2 + 40);\r\n    ctx.rotate(-Math.PI / 2);\r\n    ctx.fillText("Weight (kgs)", 0, 0);\r\n    ctx.restore();\r\n  }\r\n\r\n  // Draw on load and resize\r\n  window.addEventListener(\'resize\', drawChart);\r\n  drawChart();\r\n</script>';
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return ` <style>

    #chart {
      width: 100%;
      height: auto;
      display: block;
    }
  </style>
</head>

<h3>Your Recommended Body Weight Range</h3>
<canvas id="chart"></canvas>

<script>
  const data = ${$state.weight[1 - 1][0].weeks}

  const userPoint = { week: 20, weight: 56 };
  const canvas = document.getElementById('chart');
  const ctx = canvas.getContext('2d');

  function drawChart() {
    // Resize canvas to match CSS width
    canvas.width = canvas.clientWidth;
    canvas.height = 400;

    const padding = 50;
    const width = canvas.width - padding * 2;
    const height = canvas.height - padding * 2;

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const allY = data.flatMap(d => [d.min, d.max, userPoint.weight]);
    const allX = data.map(d => d.week);

    const minY = Math.min(...allY) - 2;
    const maxY = Math.max(...allY) + 2;
    const minX = Math.min(...allX);
    const maxX = Math.max(...allX);

    const scaleX = width / (maxX - minX);
    const scaleY = height / (maxY - minY);

    const toCanvasCoords = (x, y) => ({
      x: padding + (x - minX) * scaleX,
      y: canvas.height - padding - (y - minY) * scaleY
    });

    // shaded area
    ctx.beginPath();
    let p0 = toCanvasCoords(data[0].week, data[0].min);
    ctx.moveTo(p0.x, p0.y);

    for (let i = 1; i < data.length; i++) {
      const p = toCanvasCoords(data[i].week, data[i].min);
      ctx.lineTo(p.x, p.y);
    }
    for (let i = data.length - 1; i >= 0; i--) {
      const p = toCanvasCoords(data[i].week, data[i].max);
      ctx.lineTo(p.x, p.y);
    }

    ctx.closePath();
    ctx.fillStyle = 'rgba(0, 123, 255, 0.2)';
    ctx.fill();

    // user point
    const user = toCanvasCoords(userPoint.week, userPoint.weight);
    ctx.beginPath();
    ctx.arc(user.x, user.y, 6, 0, 2 * Math.PI);
    ctx.fillStyle = 'green';
    ctx.fill();

    // grid lines
    ctx.strokeStyle = "#ddd";
    ctx.lineWidth = 1;
    const stepY = 5;
    for (let y = Math.ceil(minY); y <= maxY; y += stepY) {
      const cy = toCanvasCoords(minX, y).y;
      ctx.beginPath();
      ctx.moveTo(padding, cy);
      ctx.lineTo(canvas.width - padding, cy);
      ctx.stroke();
      ctx.fillStyle = "#333";
      ctx.font = "12px sans-serif";
      ctx.fillText(y+ 'kg', padding - 40, cy + 4);
    }

    const stepX = 5;
    for (let x = minX; x <= maxX; x += stepX) {
      const cx = toCanvasCoords(x, minY).x;
      ctx.beginPath();
      ctx.moveTo(cx, canvas.height - padding);
      ctx.lineTo(cx, canvas.height - padding + 5);
      ctx.stroke();
      ctx.fillText(x, cx - 5, canvas.height - padding + 20);
    }

    // axis labels
    ctx.save();
    ctx.font = "14px sans-serif";
    ctx.fillStyle = "#004";
    ctx.fillText("Weeks", canvas.width / 2 - 20, canvas.height - 10);

    ctx.translate(15, canvas.height / 2 + 40);
    ctx.rotate(-Math.PI / 2);
    ctx.fillText("Weight (kgs)", 0, 0);
    ctx.restore();
  }

  // Draw on load and resize
  window.addEventListener('resize', drawChart);
  drawChart();
</script>`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return '\r\n  <style>\r\n\r\n    #chart {\r\n      width: 100%;\r\n      height: auto;\r\n      display: block;\r\n    }\r\n  </style>\r\n</head>\r\n\r\n<h3>Your Recommended Body Weight Range</h3>\r\n<canvas id="chart"></canvas>\r\n\r\n<script>\r\n  const data = [\r\n    { week: 0, min: 50, max: 52 },\r\n    { week: 5, min: 50.5, max: 54 },\r\n    { week: 10, min: 51.5, max: 56 },\r\n    { week: 15, min: 52, max: 58 },\r\n    { week: 20, min: 54, max: 60 },\r\n    { week: 25, min: 56, max: 62 },\r\n    { week: 30, min: 58, max: 64 },\r\n    { week: 35, min: 60, max: 66 },\r\n    { week: 40, min: 62, max: 68 }\r\n  ];\r\n\r\n  const userPoint = { week: 20, weight: 56 };\r\n  const canvas = document.getElementById(\'chart\');\r\n  const ctx = canvas.getContext(\'2d\');\r\n\r\n  function drawChart() {\r\n    // Resize canvas to match CSS width\r\n    canvas.width = canvas.clientWidth;\r\n    canvas.height = 400;\r\n\r\n    const padding = 50;\r\n    const width = canvas.width - padding * 2;\r\n    const height = canvas.height - padding * 2;\r\n\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const allY = data.flatMap(d => [d.min, d.max, userPoint.weight]);\r\n    const allX = data.map(d => d.week);\r\n\r\n    const minY = Math.min(...allY) - 2;\r\n    const maxY = Math.max(...allY) + 2;\r\n    const minX = Math.min(...allX);\r\n    const maxX = Math.max(...allX);\r\n\r\n    const scaleX = width / (maxX - minX);\r\n    const scaleY = height / (maxY - minY);\r\n\r\n    const toCanvasCoords = (x, y) => ({\r\n      x: padding + (x - minX) * scaleX,\r\n      y: canvas.height - padding - (y - minY) * scaleY\r\n    });\r\n\r\n    // shaded area\r\n    ctx.beginPath();\r\n    let p0 = toCanvasCoords(data[0].week, data[0].min);\r\n    ctx.moveTo(p0.x, p0.y);\r\n\r\n    for (let i = 1; i < data.length; i++) {\r\n      const p = toCanvasCoords(data[i].week, data[i].min);\r\n      ctx.lineTo(p.x, p.y);\r\n    }\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n      const p = toCanvasCoords(data[i].week, data[i].max);\r\n      ctx.lineTo(p.x, p.y);\r\n    }\r\n\r\n    ctx.closePath();\r\n    ctx.fillStyle = \'rgba(0, 123, 255, 0.2)\';\r\n    ctx.fill();\r\n\r\n    // user point\r\n    const user = toCanvasCoords(userPoint.week, userPoint.weight);\r\n    ctx.beginPath();\r\n    ctx.arc(user.x, user.y, 6, 0, 2 * Math.PI);\r\n    ctx.fillStyle = \'green\';\r\n    ctx.fill();\r\n\r\n    // grid lines\r\n    ctx.strokeStyle = "#ddd";\r\n    ctx.lineWidth = 1;\r\n    const stepY = 5;\r\n    for (let y = Math.ceil(minY); y <= maxY; y += stepY) {\r\n      const cy = toCanvasCoords(minX, y).y;\r\n      ctx.beginPath();\r\n      ctx.moveTo(padding, cy);\r\n      ctx.lineTo(canvas.width - padding, cy);\r\n      ctx.stroke();\r\n      ctx.fillStyle = "#333";\r\n      ctx.font = "12px sans-serif";\r\n      ctx.fillText(`${y} kg`, padding - 40, cy + 4);\r\n    }\r\n\r\n    const stepX = 5;\r\n    for (let x = minX; x <= maxX; x += stepX) {\r\n      const cx = toCanvasCoords(x, minY).x;\r\n      ctx.beginPath();\r\n      ctx.moveTo(cx, canvas.height - padding);\r\n      ctx.lineTo(cx, canvas.height - padding + 5);\r\n      ctx.stroke();\r\n      ctx.fillText(`${x}`, cx - 5, canvas.height - padding + 20);\r\n    }\r\n\r\n    // axis labels\r\n    ctx.save();\r\n    ctx.font = "14px sans-serif";\r\n    ctx.fillStyle = "#004";\r\n    ctx.fillText("Weeks", canvas.width / 2 - 20, canvas.height - 10);\r\n\r\n    ctx.translate(15, canvas.height / 2 + 40);\r\n    ctx.rotate(-Math.PI / 2);\r\n    ctx.fillText("Weight (kgs)", 0, 0);\r\n    ctx.restore();\r\n  }\r\n\r\n  // Draw on load and resize\r\n  window.addEventListener(\'resize\', drawChart);\r\n  drawChart();\r\n</script>';
                              }
                              throw e;
                            }
                          })()
                    }
                  />
                </div>
              </div>
            </div>
            <section
              className={classNames(projectcss.all, sty.section__swo9P, {
                [sty.sectionresalt__swo9PCpkCp]: hasVariant(
                  $state,
                  "resalt",
                  "resalt"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__blDyw)}>
                <ButtonLiom
                  data-plasmic-name={"buttonLiom2"}
                  data-plasmic-override={overrides.buttonLiom2}
                  className={classNames("__wab_instance", sty.buttonLiom2, {
                    [sty.buttonLiom2resalt]: hasVariant(
                      $state,
                      "resalt",
                      "resalt"
                    )
                  })}
                  color={generateStateValueProp($state, [
                    "buttonLiom2",
                    "color"
                  ])}
                  load={generateStateValueProp($state, ["buttonLiom2", "load"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateWeek2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["week2"]
                            },
                            operation: 0,
                            value: $state.bmi.week
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateWeek2"] != null &&
                      typeof $steps["updateWeek2"] === "object" &&
                      typeof $steps["updateWeek2"].then === "function"
                    ) {
                      $steps["updateWeek2"] = await $steps["updateWeek2"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                var higth = parseInt($state.higth.value) / 100;
                                var lastWeight = parseInt(
                                  $state.lastWeight.value
                                );
                                var weight2 = parseInt($state.weight2.value);
                                var week = $state.week2;
                                var gol = parseInt($state.glo.value);
                                var lastbmi = lastWeight / (higth * higth);
                                var w = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).gain;
                                var bmi = (weight2 - w) / (higth * higth);
                                var add = weight2 - lastWeight;
                                var min = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).minGain;
                                var max = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).maxGain;
                                var type =
                                  add >= min && add <= max
                                    ? 1
                                    : add < min
                                    ? 0
                                    : 2;
                                return ($state.bmi = {
                                  week: week,
                                  lastbmi: lastbmi,
                                  bmi: bmi,
                                  w: w,
                                  type: type,
                                  min: min,
                                  max: max,
                                  weight: lastWeight,
                                  add: add
                                });
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction"] = !(
                      $state.higth.value &&
                      $state.lastWeight.value &&
                      $state.weight2.value &&
                      $state.week.value &&
                      $state.glo.value
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                              "bottom-center",
                              3000
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom2",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom2",
                        "load"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2P0Jk
                    )}
                  >
                    {
                      "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0647\u0641\u062a\u0647 \u062c\u0627\u0631\u06cc"
                    }
                  </div>
                </ButtonLiom>
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__ptZMs, {
                  [sty.freeBoxresalt__ptZMsCpkCp]: hasVariant(
                    $state,
                    "resalt",
                    "resalt"
                  )
                })}
              >
                <ButtonLiom
                  data-plasmic-name={"buttonLiom4"}
                  data-plasmic-override={overrides.buttonLiom4}
                  className={classNames("__wab_instance", sty.buttonLiom4, {
                    [sty.buttonLiom4resalt]: hasVariant(
                      $state,
                      "resalt",
                      "resalt"
                    )
                  })}
                  color={generateStateValueProp($state, [
                    "buttonLiom4",
                    "color"
                  ])}
                  load={generateStateValueProp($state, ["buttonLiom4", "load"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateWeek2"] =
                      $state.week2 < 40
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["week2"]
                              },
                              operation: 0,
                              value: $state.week2 + 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateWeek2"] != null &&
                      typeof $steps["updateWeek2"] === "object" &&
                      typeof $steps["updateWeek2"].then === "function"
                    ) {
                      $steps["updateWeek2"] = await $steps["updateWeek2"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                var higth = parseInt($state.higth.value) / 100;
                                var lastWeight = parseInt(
                                  $state.lastWeight.value
                                );
                                var weight2 = parseInt($state.weight2.value);
                                var week = $state.week2;
                                var gol = parseInt($state.glo.value);
                                var lastbmi = lastWeight / (higth * higth);
                                var w = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).gain;
                                var bmi = (weight2 - w) / (higth * higth);
                                var add = weight2 - lastWeight;
                                var min = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).minGain;
                                var max = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).maxGain;
                                var type =
                                  add >= min && add <= max
                                    ? 1
                                    : add < min
                                    ? 0
                                    : 2;
                                return ($state.bmi = {
                                  week: $state.bmi.week,
                                  lastbmi: lastbmi,
                                  bmi: bmi,
                                  w: w,
                                  type: type,
                                  min: min,
                                  max: max,
                                  weight: lastWeight,
                                  add: add
                                });
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction"] = !(
                      $state.higth.value &&
                      $state.lastWeight.value &&
                      $state.weight2.value &&
                      $state.week.value &&
                      $state.glo.value
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                              "bottom-center",
                              3000
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom4",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom4",
                        "load"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p3Aap
                    )}
                  >
                    {"\u0647\u0641\u062a\u0647 \u0628\u0639\u062f"}
                  </div>
                </ButtonLiom>
                <ButtonLiom
                  data-plasmic-name={"buttonLiom5"}
                  data-plasmic-override={overrides.buttonLiom5}
                  className={classNames("__wab_instance", sty.buttonLiom5, {
                    [sty.buttonLiom5resalt]: hasVariant(
                      $state,
                      "resalt",
                      "resalt"
                    )
                  })}
                  color={generateStateValueProp($state, [
                    "buttonLiom5",
                    "color"
                  ])}
                  load={generateStateValueProp($state, ["buttonLiom5", "load"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateResalt"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "resalt",
                            operation: 6,
                            value: "resalt"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateResalt"] != null &&
                      typeof $steps["updateResalt"] === "object" &&
                      typeof $steps["updateResalt"].then === "function"
                    ) {
                      $steps["updateResalt"] = await $steps["updateResalt"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom5",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom5",
                        "load"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sNlgq
                    )}
                  >
                    {
                      "\u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u062c\u062f\u062f"
                    }
                  </div>
                </ButtonLiom>
              </div>
            </section>
          </section>
          <Dialog3
            data-plasmic-name={"dialog3"}
            data-plasmic-override={overrides.dialog3}
            className={classNames("__wab_instance", sty.dialog3)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog3",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog3",
              "opendialog"
            ])}
          >
            <ApiRequest
              data-plasmic-name={"apiRequest"}
              data-plasmic-override={overrides.apiRequest}
              className={classNames("__wab_instance", sty.apiRequest)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jJ41C
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              shouldFetch={true}
            >
              <div className={classNames(projectcss.all, sty.freeBox___4Vcb4)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7Hk9)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bYSp7)}
                  />

                  <DialogTitle
                    data-plasmic-name={"dialogTitle"}
                    data-plasmic-override={overrides.dialogTitle}
                    className={classNames("__wab_instance", sty.dialogTitle)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        sty.h5
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rq7Nq
                        )}
                      >
                        {"Dialog title"}
                      </div>
                    </h5>
                  </DialogTitle>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__duJ4R)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zihEs
                    )}
                  >
                    {"You can insert dialog body content here in this slot."}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mjmO)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3MW6F
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v2YkN
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w94D
                          )}
                        >
                          {
                            "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__blhcl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vurgz
                          )}
                        >
                          {"Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6D2Y
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dtvFu
                            )}
                          >
                            {"Enter some text"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2PEjo
                            )}
                          >
                            {"Enter some text"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__u6GvP
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kz6Eb
                            )}
                          >
                            {"1"}
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nFr29
                        )}
                      >
                        {
                          "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__j9X2B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__em7CA
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: false,
                              autoFocus: false,
                              bordered: false,
                              className: classNames(
                                "__wab_instance",
                                sty.input
                              ),
                              disabled: false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                              prefix: (
                                <Icon10Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__byIQw
                                  )}
                                  role={"img"}
                                />
                              ),

                              readOnly: false,
                              size: "small",
                              suffix: null,
                              value: generateStateValueProp($state, [
                                "input",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input"}
                                data-plasmic-override={overrides.input}
                                {...child$Props}
                              />
                            );
                          })()}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cEeWw
                            )}
                          />
                        </div>
                        <ButtonLiom
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          color={generateStateValueProp($state, [
                            "button",
                            "color"
                          ])}
                          load={generateStateValueProp($state, [
                            "button",
                            "load"
                          ])}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                "load"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y8JQ3
                            )}
                          >
                            {"\u062a\u0627\u06cc\u06cc\u062f"}
                          </div>
                        </ButtonLiom>
                      </div>
                      <ButtonLiom
                        data-plasmic-name={"button2"}
                        data-plasmic-override={overrides.button2}
                        className={classNames("__wab_instance", sty.button2)}
                        color={generateStateValueProp($state, [
                          "button2",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bIapS
                            )}
                            role={"img"}
                          />
                        }
                        load={generateStateValueProp($state, [
                          "button2",
                          "load"
                        ])}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button2",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button2",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2EGrL
                          )}
                        >
                          {
                            "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                          }
                        </div>
                      </ButtonLiom>
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__ki5JQ
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__u7CbU
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </ApiRequest>
          </Dialog3>
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? '<script>\r\n(function() {\r\n    var link = document.querySelector("link[rel=\'icon\']");\r\n    if (!link) {\r\n        link = document.createElement(\'link\');\r\n        link.rel = \'icon\';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = \'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico\';\r\n})();\r\nlet lastChange = Date.now();\r\n\r\ndocument.addEventListener("visibilitychange", function () {\r\n    if (document.visibilityState === "visible" && Date.now() - lastChange > 1000) {\r\n        fetch("https://n8n.staas.ir/webhook/credit", {\r\n            method: "GET", // \u06cc\u0627 "POST" \u0628\u0633\u062a\u0647 \u0628\u0647 \u0646\u06cc\u0627\u0632 \u0634\u0645\u0627\r\n            headers: {\r\n                "Authorization": "Bearer "+window.token,\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => window.credit=data.credit; )\r\n        .catch(error => console.error("\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u062e\u0648\u0627\u0633\u062a:", error));\r\n\r\n        lastChange = Date.now();\r\n    }\r\n});\r\n\r\n\r\n\r\n</script>\r\n<script src="https://developer.eitaa.com/eitaa-web-app.js">\r\n</script>\r\n<script>\r\n  window.Eitaa.WebApp.ready();\r\n  window.Eitaa.WebApp.expand();\r\n  window.Eitaa.WebApp.isClosingConfirmationEnabled = true;\r\n</script>\r\n'
                : '<script>\r\n(function() {\r\n    var link = document.querySelector("link[rel=\'icon\']");\r\n    if (!link) {\r\n        link = document.createElement(\'link\');\r\n        link.rel = \'icon\';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = \'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico\';\r\n})();\r\nlet lastChange = Date.now();\r\n\r\ndocument.addEventListener("visibilitychange", function () {\r\n    if (document.visibilityState === "visible" && Date.now() - lastChange > 1000) {\r\n        fetch("https://n8n.staas.ir/webhook/credit", {\r\n            method: "GET", // \u06cc\u0627 "POST" \u0628\u0633\u062a\u0647 \u0628\u0647 \u0646\u06cc\u0627\u0632 \u0634\u0645\u0627\r\n            headers: {\r\n                "Authorization": "Bearer "+window.token,\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            window.credit = data.credit; \r\n\r\n            // \u0627\u062c\u0631\u0627\u06cc \u06a9\u0644\u06cc\u06a9 \u0631\u0648\u06cc \u06cc\u06a9 \u062f\u06a9\u0645\u0647 (\u0645\u062b\u0644\u0627\u064b \u062f\u06a9\u0645\u0647\u200c\u0627\u06cc \u0628\u0627 `id="myButton"`)\r\n            let button = document.getElementById("creditCheck");\r\n            if (button) {\r\n                button.click();\r\n            }\r\n        })        .catch(error => console.error("\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u062e\u0648\u0627\u0633\u062a:", error));\r\n\r\n        lastChange = Date.now();\r\n    }\r\n});\r\n\r\n\r\n\r\n</script>\r\n<script src="https://developer.eitaa.com/eitaa-web-app.js">\r\n</script>\r\n<script>\r\n  window.Eitaa.WebApp.ready();\r\n  window.Eitaa.WebApp.expand();\r\n  window.Eitaa.WebApp.isClosingConfirmationEnabled = true;\r\n</script>\r\n'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "headerLiom",
    "higth",
    "lastWeight",
    "week",
    "weight2",
    "radioGroup",
    "glo",
    "buttonLiom",
    "buttonLiom6",
    "buttonLiom3",
    "buttonLiom7",
    "buttonLiom8",
    "buttonLiom2",
    "buttonLiom4",
    "buttonLiom5",
    "dialog3",
    "apiRequest",
    "dialogTitle",
    "h5",
    "input",
    "button",
    "button2",
    "favicon"
  ],
  sideEffect: ["sideEffect"],
  headerLiom: ["headerLiom"],
  higth: ["higth"],
  lastWeight: ["lastWeight"],
  week: ["week"],
  weight2: ["weight2"],
  radioGroup: ["radioGroup"],
  glo: ["glo"],
  buttonLiom: ["buttonLiom"],
  buttonLiom6: ["buttonLiom6"],
  buttonLiom3: ["buttonLiom3"],
  buttonLiom7: ["buttonLiom7"],
  buttonLiom8: ["buttonLiom8"],
  buttonLiom2: ["buttonLiom2"],
  buttonLiom4: ["buttonLiom4"],
  buttonLiom5: ["buttonLiom5"],
  dialog3: [
    "dialog3",
    "apiRequest",
    "dialogTitle",
    "h5",
    "input",
    "button",
    "button2"
  ],
  apiRequest: ["apiRequest", "dialogTitle", "h5", "input", "button", "button2"],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  input: ["input"],
  button: ["button"],
  button2: ["button2"],
  favicon: ["favicon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  headerLiom: typeof HeaderLiom;
  higth: typeof Input;
  lastWeight: typeof Input;
  week: typeof Input;
  weight2: typeof Input;
  radioGroup: typeof AntdRadioGroup;
  glo: typeof Input;
  buttonLiom: typeof ButtonLiom;
  buttonLiom6: typeof ButtonLiom;
  buttonLiom3: typeof ButtonLiom;
  buttonLiom7: typeof ButtonLiom;
  buttonLiom8: typeof ButtonLiom;
  buttonLiom2: typeof ButtonLiom;
  buttonLiom4: typeof ButtonLiom;
  buttonLiom5: typeof ButtonLiom;
  dialog3: typeof Dialog3;
  apiRequest: typeof ApiRequest;
  dialogTitle: typeof DialogTitle;
  h5: "h5";
  input: typeof AntdInput;
  button: typeof ButtonLiom;
  button2: typeof ButtonLiom;
  favicon: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBmi__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBmi__VariantsArgs;
    args?: PlasmicBmi__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBmi__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBmi__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBmi__ArgProps,
          internalVariantPropNames: PlasmicBmi__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBmi__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBmi";
  } else {
    func.displayName = `PlasmicBmi.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBmi = Object.assign(
  // Top-level PlasmicBmi renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    headerLiom: makeNodeComponent("headerLiom"),
    higth: makeNodeComponent("higth"),
    lastWeight: makeNodeComponent("lastWeight"),
    week: makeNodeComponent("week"),
    weight2: makeNodeComponent("weight2"),
    radioGroup: makeNodeComponent("radioGroup"),
    glo: makeNodeComponent("glo"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    buttonLiom6: makeNodeComponent("buttonLiom6"),
    buttonLiom3: makeNodeComponent("buttonLiom3"),
    buttonLiom7: makeNodeComponent("buttonLiom7"),
    buttonLiom8: makeNodeComponent("buttonLiom8"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    buttonLiom4: makeNodeComponent("buttonLiom4"),
    buttonLiom5: makeNodeComponent("buttonLiom5"),
    dialog3: makeNodeComponent("dialog3"),
    apiRequest: makeNodeComponent("apiRequest"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    favicon: makeNodeComponent("favicon"),

    // Metadata about props expected for PlasmicBmi
    internalVariantProps: PlasmicBmi__VariantProps,
    internalArgProps: PlasmicBmi__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | ارزیابی وزن دوران بارداری",
      description:
        "از دلایل عقب جلو شدن پریود خود،  در کمتر از چند دقیقه و بدون انتظار برای پزشک آگاه شوید",
      ogImageSrc:
        "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",
      canonical: ""
    }
  }
);

export default PlasmicBmi;
/* prettier-ignore-end */
