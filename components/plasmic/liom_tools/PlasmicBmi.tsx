/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 8CUbLIj-ur8O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Input } from "@/fragment/components/input"; // plasmic-import: 31QElsfd4yPt/codeComponent
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Dialog3 from "../../Dialog3"; // plasmic-import: UHX61U1xmtjA/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicBmi.module.css"; // plasmic-import: 8CUbLIj-ur8O/css

import ChevronRightIcon from "../hamdast_sdk/icons/PlasmicIcon__ChevronRight"; // plasmic-import: ehuYANk-vbAX/icon
import Icon174Icon from "./icons/PlasmicIcon__Icon174"; // plasmic-import: WwQTGVCpIZB2/icon
import Icon173Icon from "./icons/PlasmicIcon__Icon173"; // plasmic-import: GZmJZz95gKQL/icon
import Icon176Icon from "./icons/PlasmicIcon__Icon176"; // plasmic-import: uG1hUNDLfZmX/icon
import Icon177Icon from "./icons/PlasmicIcon__Icon177"; // plasmic-import: ld4RWktjVN-_/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: d7z2iEn8tiSD/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 7vleC7ixE4k4/icon

createPlasmicElementProxy;

export type PlasmicBmi__VariantMembers = {
  resalt: "resalt";
};
export type PlasmicBmi__VariantsArgs = {
  resalt?: SingleBooleanChoiceArg<"resalt">;
};
type VariantPropType = keyof PlasmicBmi__VariantsArgs;
export const PlasmicBmi__VariantProps = new Array<VariantPropType>("resalt");

export type PlasmicBmi__ArgsType = {};
type ArgPropType = keyof PlasmicBmi__ArgsType;
export const PlasmicBmi__ArgProps = new Array<ArgPropType>();

export type PlasmicBmi__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  sideEffect?: Flex__<typeof SideEffect>;
  higth?: Flex__<typeof Input>;
  lastWeight?: Flex__<typeof Input>;
  week?: Flex__<typeof Input>;
  weight2?: Flex__<typeof Input>;
  glo?: Flex__<typeof Input>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  embedHtml?: Flex__<typeof Embed>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  buttonLiom4?: Flex__<typeof ButtonLiom>;
  buttonLiom5?: Flex__<typeof ButtonLiom>;
  dialog3?: Flex__<typeof Dialog3>;
  apiRequest?: Flex__<typeof ApiRequest>;
  dialogTitle?: Flex__<typeof DialogTitle>;
  h5?: Flex__<"h5">;
  input?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof ButtonLiom>;
  button2?: Flex__<typeof ButtonLiom>;
};

export interface DefaultBmiProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBmi__RenderFunc(props: {
  variants: PlasmicBmi__VariantsArgs;
  args: PlasmicBmi__ArgsType;
  overrides: PlasmicBmi__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "testChat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                // if ($ctx.query.nextQuesion_id == "" || $ctx.query.nextQuesion_id == null) {
                //   []
                // } else {
                //   JSON.parse(localStorage.getItem("test"))
                // }
                // [
                //     {
                //         "text": "سلام👋\n  لیوم هستم، دستیار سلامت .",
                //         "from": "system"
                //     },
                //     {
                //         "text": "اگر درباره زودانزالی نگرانی داری، این تست بهت کمک می‌کنه تا وضعیت خودت رو بهتر بسنجی.",
                //         "from": "system"
                //     },
                //     {
                //         "text": " با پاسخ به چند سوال، می‌تونید در کمتر از ۵ دقیقه از اینکه آیا دچار زودانزالی هستید یا خیر مطلع شوید",
                //         "from": "system"
                //     },
                //     {
                //         "text": "آماده ای شروع کنیم؟",
                //         "question": {
                //             "lock": 0
                //         },
                //         "from": "system",
                //         "btnText": "شروع کنیم",
                //         "options": [
                //             {
                //                 "id": 1,
                //                 "text": "شروع کنیم"
                //             }
                //         ]
                //     }
                // ]
                []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\u0633\u0644\u0627\u0645\ud83d\udc4b\n  \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645\u060c \u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a .",
                    from: "system"
                  },
                  {
                    text: "\u0627\u06af\u0631 \u062f\u0631\u0628\u0627\u0631\u0647 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0646\u06af\u0631\u0627\u0646\u06cc \u062f\u0627\u0631\u06cc\u060c \u0627\u06cc\u0646 \u062a\u0633\u062a \u0628\u0647\u062a \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u062a\u0627 \u0648\u0636\u0639\u06cc\u062a \u062e\u0648\u062f\u062a \u0631\u0648 \u0628\u0647\u062a\u0631 \u0628\u0633\u0646\u062c\u06cc.",
                    from: "system"
                  },
                  {
                    text: " \u0628\u0627 \u067e\u0627\u0633\u062e \u0628\u0647 \u0686\u0646\u062f \u0633\u0648\u0627\u0644\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u062f\u0631 \u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f5 \u062f\u0642\u06cc\u0642\u0647 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0622\u06cc\u0627 \u062f\u0686\u0627\u0631 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0647\u0633\u062a\u06cc\u062f \u06cc\u0627 \u062e\u06cc\u0631 \u0645\u0637\u0644\u0639 \u0634\u0648\u06cc\u062f",
                    from: "system"
                  },
                  {
                    text: "\u0622\u0645\u0627\u062f\u0647 \u0627\u06cc \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645\u061f",
                    question: { lock: 0 },
                    from: "system",
                    btnText:
                      "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",
                    options: [
                      {
                        id: 1,
                        text: "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645"
                      }
                    ]
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "ferst",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.nextQuesion_id == null ||
                $ctx.query.nextQuesion_id == ""
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextQuesionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.testChat
                  .slice()
                  .reverse()
                  .find(item => item.question);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lock",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadinkBotten",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "totalTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 35
      },
      {
        path: "retestTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.nextQuesion_id == "" ||
                $ctx.query.nextQuesion_id == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "edit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "buy",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showgreen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "authCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "data",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "infoTest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "a0becceb-8ca9-49c0-a9d3-7c192f85129c"
      },
      {
        path: "free",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://tools.liom.app/chat-bot/?origin_user_id=${$ctx.query.origin_user_id}&app=${$ctx.query.app}&topic=${$ctx.query.topic}&origin=${$ctx.query.origin}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "botSessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sessions",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "indexchat",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasMore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "infoChat",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "text",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tokenliom",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "higth.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastWeight.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "weight2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "week.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.week2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "resalt",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.resalt
      },
      {
        path: "weight",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          [
            { week: 1, gain: -0.15, minGain: -0.5, maxGain: 0.2 },
            { week: 2, gain: 0.15, minGain: -0.5, maxGain: 0.2 },
            { week: 3, gain: 0.15, minGain: -0.5, maxGain: 0.2 },
            { week: 4, gain: 0.1, minGain: -0.5, maxGain: 0.3 },
            { week: 5, gain: 0.15, minGain: -0.2, maxGain: 0.5 },
            { week: 6, gain: 0.25, minGain: -0.2, maxGain: 0.7 },
            { week: 7, gain: 0.45, minGain: -0.1, maxGain: 1 },
            { week: 8, gain: 0.75, minGain: 0, maxGain: 1.5 },
            { week: 9, gain: 0.75, minGain: 0, maxGain: 1.8 },
            { week: 10, gain: 1, minGain: 0, maxGain: 2 },
            { week: 11, gain: 1.35, minGain: 0.3, maxGain: 2.4 },
            { week: 12, gain: 1.75, minGain: 0.5, maxGain: 3 },
            { week: 13, gain: 1.85, minGain: 0.5, maxGain: 3.2 },
            { week: 14, gain: 2.3, minGain: 1, maxGain: 4 },
            { week: 15, gain: 2.85, minGain: 1.5, maxGain: 4.5 },
            { week: 16, gain: 3.4, minGain: 2, maxGain: 5 },
            { week: 17, gain: 4, minGain: 2.5, maxGain: 5.8 },
            { week: 18, gain: 4.75, minGain: 3, maxGain: 6.5 },
            { week: 19, gain: 5.05, minGain: 3.3, maxGain: 7 },
            { week: 20, gain: 5.6, minGain: 3.5, maxGain: 7.5 },
            { week: 21, gain: 6.05, minGain: 3.7, maxGain: 8 },
            { week: 22, gain: 6.15, minGain: 3.9, maxGain: 8.5 },
            { week: 23, gain: 6.45, minGain: 4.1, maxGain: 9 },
            { week: 24, gain: 6.85, minGain: 4.3, maxGain: 9.5 },
            { week: 25, gain: 7.25, minGain: 4.5, maxGain: 10 },
            { week: 26, gain: 7.65, minGain: 4.7, maxGain: 10.5 },
            { week: 27, gain: 8.05, minGain: 4.9, maxGain: 11 },
            { week: 28, gain: 8.55, minGain: 5.1, maxGain: 11.5 },
            { week: 29, gain: 9.05, minGain: 5.3, maxGain: 12 },
            { week: 30, gain: 9.4, minGain: 5.5, maxGain: 12.5 },
            { week: 31, gain: 9.85, minGain: 5.7, maxGain: 13 },
            { week: 32, gain: 10.25, minGain: 5.9, maxGain: 13.5 },
            { week: 33, gain: 10.55, minGain: 6.1, maxGain: 14 },
            { week: 34, gain: 10.95, minGain: 6.3, maxGain: 14.5 },
            { week: 35, gain: 11.35, minGain: 6.5, maxGain: 15 },
            { week: 36, gain: 11.75, minGain: 6.7, maxGain: 15.5 },
            { week: 37, gain: 12.05, minGain: 6.9, maxGain: 16 },
            { week: 38, gain: 12.45, minGain: 7.1, maxGain: 16.5 },
            { week: 39, gain: 12.85, minGain: 7.3, maxGain: 17 },
            { week: 40, gain: 13.35, minGain: 7.5, maxGain: 17.5 }
          ],
          [
            { week: 1, gain: 0 },
            { week: 2, gain: 0 },
            { week: 3, gain: 0 },
            { week: 4, gain: 0 },
            { week: 5, gain: 0.2 },
            { week: 6, gain: 0.4 },
            { week: 7, gain: 0.6 },
            { week: 8, gain: 0.8 },
            { week: 9, gain: 1 },
            { week: 10, gain: 1.2 },
            { week: 11, gain: 1.4 },
            { week: 12, gain: 1.6 },
            { week: 13, gain: 2 },
            { week: 14, gain: 2.4 },
            { week: 15, gain: 2.8 },
            { week: 16, gain: 3.2 },
            { week: 17, gain: 3.6 },
            { week: 18, gain: 4 },
            { week: 19, gain: 4.4 },
            { week: 20, gain: 4.8 },
            { week: 21, gain: 5.2 },
            { week: 22, gain: 5.6 },
            { week: 23, gain: 6 },
            { week: 24, gain: 6.4 },
            { week: 25, gain: 6.8 },
            { week: 26, gain: 7.2 },
            { week: 27, gain: 7.6 },
            { week: 28, gain: 8 },
            { week: 29, gain: 8.4 },
            { week: 30, gain: 8.8 },
            { week: 31, gain: 9.2 },
            { week: 32, gain: 9.6 },
            { week: 33, gain: 10 },
            { week: 34, gain: 10.4 },
            { week: 35, gain: 10.8 },
            { week: 36, gain: 11.2 },
            { week: 37, gain: 11.6 },
            { week: 38, gain: 12 },
            { week: 39, gain: 12.4 },
            { week: 40, gain: 12.8 }
          ],
          [
            { week: 1, gain: 0 },
            { week: 2, gain: 0 },
            { week: 3, gain: 0 },
            { week: 4, gain: 0 },
            { week: 5, gain: 0.5 },
            { week: 6, gain: 1 },
            { week: 7, gain: 1.5 },
            { week: 8, gain: 2 },
            { week: 9, gain: 2.5 },
            { week: 10, gain: 3 },
            { week: 11, gain: 3.5 },
            { week: 12, gain: 4 },
            { week: 13, gain: 4.8 },
            { week: 14, gain: 5.6 },
            { week: 15, gain: 6.4 },
            { week: 16, gain: 7.2 },
            { week: 17, gain: 8 },
            { week: 18, gain: 8.8 },
            { week: 19, gain: 9.6 },
            { week: 20, gain: 10.4 },
            { week: 21, gain: 11.2 },
            { week: 22, gain: 12 },
            { week: 23, gain: 12.8 },
            { week: 24, gain: 13.6 },
            { week: 25, gain: 14.4 },
            { week: 26, gain: 15.2 },
            { week: 27, gain: 16 },
            { week: 28, gain: 16.8 },
            { week: 29, gain: 17.6 },
            { week: 30, gain: 18.4 },
            { week: 31, gain: 19.2 },
            { week: 32, gain: 20 },
            { week: 33, gain: 20.8 },
            { week: 34, gain: 21.6 },
            { week: 35, gain: 22 },
            { week: 36, gain: 22.4 },
            { week: 37, gain: 22.4 },
            { week: 38, gain: 22.4 },
            { week: 39, gain: 22.4 },
            { week: 40, gain: 22.4 }
          ],
          [
            { week: 1, gain: 0 },
            { week: 2, gain: 0 },
            { week: 3, gain: 0 },
            { week: 4, gain: 0 },
            { week: 5, gain: 0.6 },
            { week: 6, gain: 1.2 },
            { week: 7, gain: 1.8 },
            { week: 8, gain: 2.4 },
            { week: 9, gain: 3 },
            { week: 10, gain: 3.6 },
            { week: 11, gain: 4.2 },
            { week: 12, gain: 4.8 },
            { week: 13, gain: 6 },
            { week: 14, gain: 7.2 },
            { week: 15, gain: 8.4 },
            { week: 16, gain: 9.6 },
            { week: 17, gain: 10.8 },
            { week: 18, gain: 12 },
            { week: 19, gain: 13.2 },
            { week: 20, gain: 14.4 },
            { week: 21, gain: 15.6 },
            { week: 22, gain: 16.8 },
            { week: 23, gain: 18 },
            { week: 24, gain: 19.2 },
            { week: 25, gain: 20.4 },
            { week: 26, gain: 21.6 },
            { week: 27, gain: 22.8 },
            { week: 28, gain: 24 },
            { week: 29, gain: 25.2 },
            { week: 30, gain: 26.4 },
            { week: 31, gain: 27.6 },
            { week: 32, gain: 28.2 },
            { week: 33, gain: 29 },
            { week: 34, gain: 29.6 },
            { week: 35, gain: 30 },
            { week: 36, gain: 30 },
            { week: 37, gain: 30 },
            { week: 38, gain: 30 },
            { week: 39, gain: 30 },
            { week: 40, gain: 30 }
          ]
        ]
      },
      {
        path: "bmi",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "bmiCategories",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            min: 0,
            max: 18.5,
            status: "\u06a9\u0645\u0628\u0648\u062f \u0648\u0632\u0646",
            color: "#FFD700"
          },
          {
            min: 18.5,
            max: 24.9,
            status: "\u0648\u0632\u0646 \u0646\u0631\u0645\u0627\u0644",
            color: "#4CAF50"
          },
          {
            min: 25,
            max: 29.9,
            status: "\u0627\u0636\u0627\u0641\u0647 \u0648\u0632\u0646",
            color: "#FFA500"
          },
          {
            min: 30,
            max: 100,
            status: "\u0686\u0627\u0642\u06cc",
            color: "#F44336"
          }
        ]
      },
      {
        path: "glo.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "gain",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            status: "\u06a9\u0645\u0628\u0648\u062f \u0648\u0632\u0646",
            color: "#FFD700"
          },
          {
            status: "\u0648\u0632\u0646 \u0646\u0631\u0645\u0627\u0644",
            color: "#4CAF50"
          },
          {
            status: "\u0627\u0636\u0627\u0641\u0647 \u0648\u0632\u0646",
            color: "#FFA500"
          }
        ]
      },
      {
        path: "week2",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 10
      },
      {
        path: "buttonLiom2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "link"
      },
      {
        path: "buttonLiom4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "buttonLiom5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    theme: useTheme(),
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicBmi.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBmi.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBmi.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicBmi.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicBmi.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicBmi.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicBmi.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicBmi.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootresalt]: hasVariant($state, "resalt", "resalt")
            }
          )}
        >
          <section
            className={classNames(projectcss.all, sty.section__tslw4, {
              [sty.sectionresalt__tslw4CpkCp]: hasVariant(
                $state,
                "resalt",
                "resalt"
              )
            })}
          >
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
              slot={null}
              slot2={
                <ChevronRightIcon
                  className={classNames(projectcss.all, sty.svg__npI53, {
                    [sty.svgresalt__npI53CpkCp]: hasVariant(
                      $state,
                      "resalt",
                      "resalt"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $props.resalt == true
                                ? ($props.resalt = false)
                                : window.history.back();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cwybi
                )}
              >
                {
                  "\u0627\u0631\u0632\u06cc\u0627\u0628\u06cc \u0648\u0632\u0646 \u062f\u0648\u0631\u0627\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                }
              </div>
            </HeaderLiom>
          </section>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect, {
              [sty.sideEffectresalt]: hasVariant($state, "resalt", "resalt")
            })}
            deps={undefined}
            onMount={async () => {
              const $steps = {};

              $steps["params"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["params"] != null &&
                typeof $steps["params"] === "object" &&
                typeof $steps["params"].then === "function"
              ) {
                $steps["params"] = await $steps["params"];
              }

              $steps["updateWeek2"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["week2"]
                      },
                      operation: 0,
                      value: parseInt($state.paramsObject.week) || 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWeek2"] != null &&
                typeof $steps["updateWeek2"] === "object" &&
                typeof $steps["updateWeek2"].then === "function"
              ) {
                $steps["updateWeek2"] = await $steps["updateWeek2"];
              }

              $steps["clearParams"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }
            }}
          />

          <section
            className={classNames(projectcss.all, sty.section__lNvTd, {
              [sty.sectionresalt__lNvTdCpkCp]: hasVariant(
                $state,
                "resalt",
                "resalt"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__jm5S, {
                [sty.freeBoxresalt__jm5SCpkCp]: hasVariant(
                  $state,
                  "resalt",
                  "resalt"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox___4LagW)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4PsNr)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iOweJ
                    )}
                  >
                    {"\u0642\u062f"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__d01ZG)}
                  >
                    <Input
                      data-plasmic-name={"higth"}
                      data-plasmic-override={overrides.higth}
                      className={classNames("__wab_instance", sty.higth)}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "higth",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      placeholder={"cm"}
                      type={"text"}
                      value={generateStateValueProp($state, ["higth", "value"])}
                    />

                    <Icon174Icon
                      className={classNames(projectcss.all, sty.svg__gs59Z)}
                      role={"img"}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__y7Z75)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9YMl6
                    )}
                  >
                    {
                      "\u0648\u0632\u0646  \u0642\u0628\u0644 \u0627\u0632 \u0628\u0631\u062f\u0627\u0631\u06cc"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nGezH)}
                  >
                    <Input
                      data-plasmic-name={"lastWeight"}
                      data-plasmic-override={overrides.lastWeight}
                      className={classNames("__wab_instance", sty.lastWeight, {
                        [sty.lastWeightresalt]: hasVariant(
                          $state,
                          "resalt",
                          "resalt"
                        )
                      })}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "lastWeight",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      placeholder={"kg"}
                      type={"text"}
                      value={generateStateValueProp($state, [
                        "lastWeight",
                        "value"
                      ])}
                    />

                    <Icon173Icon
                      className={classNames(projectcss.all, sty.svg__re0X6)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__onWzc)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kcXag)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mkof
                    )}
                  >
                    {
                      "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                    }
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__zuT)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wzr4M)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tnTgd
                        )}
                      >
                        {
                          "\u0647\u0641\u062a\u0647 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vjbLz
                        )}
                      >
                        <Input
                          data-plasmic-name={"week"}
                          data-plasmic-override={overrides.week}
                          className={classNames("__wab_instance", sty.week, {
                            [sty.weekresalt]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "week",
                              "value"
                            ]).apply(null, eventArgs);

                            (async value => {
                              const $steps = {};

                              $steps["updateWeek2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["week2"]
                                      },
                                      operation: 0,
                                      value:
                                        parseInt($state.week.value) > 40
                                          ? 40
                                          : parseInt($state.week.value) || 0
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateWeek2"] != null &&
                                typeof $steps["updateWeek2"] === "object" &&
                                typeof $steps["updateWeek2"].then === "function"
                              ) {
                                $steps["updateWeek2"] = await $steps[
                                  "updateWeek2"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          placeholder={"\u0647\u0641\u062a\u0647"}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "week",
                            "value"
                          ])}
                        />

                        <Icon176Icon
                          className={classNames(projectcss.all, sty.svg__ctBZ)}
                          role={"img"}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vRky0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aaE4P
                        )}
                      >
                        {"\u0648\u0632\u0646  \u0641\u0639\u0644\u06cc"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sjiy2
                        )}
                      >
                        <Input
                          data-plasmic-name={"weight2"}
                          data-plasmic-override={overrides.weight2}
                          className={classNames("__wab_instance", sty.weight2, {
                            [sty.weight2resalt]: hasVariant(
                              $state,
                              "resalt",
                              "resalt"
                            )
                          })}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "weight2",
                              "value"
                            ]).apply(null, eventArgs);
                          }}
                          placeholder={"kg"}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "weight2",
                            "value"
                          ])}
                        />

                        <Icon173Icon
                          className={classNames(projectcss.all, sty.svg__hFdQ0)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h6WtR)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___46TXg
                      )}
                    >
                      {
                        "\u0686\u0646\u062f\u0642\u0644\u0648 \u062f\u0627\u0631\u06cc\u061f"
                      }
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mmkZj)}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__meewi
                          )}
                        >
                          <Icon177Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zUji1
                            )}
                            role={"img"}
                          />

                          <Input
                            data-plasmic-name={"glo"}
                            data-plasmic-override={overrides.glo}
                            className={classNames("__wab_instance", sty.glo)}
                            disabled={true}
                            onChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "glo",
                                "value"
                              ]).apply(null, eventArgs);
                            }}
                            placeholder={"1"}
                            type={"text"}
                            value={generateStateValueProp($state, [
                              "glo",
                              "value"
                            ])}
                          />
                        </div>
                      ) : null}
                    </div>
                  </div>
                </Stack__>
              </div>
              <section
                className={classNames(projectcss.all, sty.section___8G5Tq, {
                  [sty.sectionresalt___8G5TqCpkCp]: hasVariant(
                    $state,
                    "resalt",
                    "resalt"
                  )
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__aXAcS)}>
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom"}
                    data-plasmic-override={overrides.buttonLiom}
                    className={classNames("__wab_instance", sty.buttonLiom, {
                      [sty.buttonLiomresalt]: hasVariant(
                        $state,
                        "resalt",
                        "resalt"
                      )
                    })}
                    color={generateStateValueProp($state, [
                      "buttonLiom",
                      "color"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] =
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value &&
                        $state.glo.value
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var higth =
                                      parseInt($state.higth.value) / 100;
                                    var lastWeight = parseInt(
                                      $state.lastWeight.value
                                    );
                                    var weight2 = parseInt(
                                      $state.weight2.value
                                    );
                                    var week = $state.week2;
                                    var gol = parseInt($state.glo.value);
                                    var lastbmi = lastWeight / (higth * higth);
                                    var w = $state.weight[gol - 1].find(
                                      item => item.week == week
                                    ).gain;
                                    var bmi = (weight2 - w) / (higth * higth);
                                    var add = weight2 - lastWeight;
                                    var min = $state.weight[gol - 1].find(
                                      item => item.week == week
                                    ).minGain;
                                    var max = $state.weight[gol - 1].find(
                                      item => item.week == week
                                    ).maxGain;
                                    var type =
                                      add >= min && add <= max
                                        ? 1
                                        : add < min
                                        ? 0
                                        : 2;
                                    return ($state.bmi = {
                                      week: week,
                                      lastbmi: lastbmi,
                                      bmi: bmi,
                                      w: w,
                                      type: type,
                                      min: min,
                                      max: max,
                                      weight: lastWeight,
                                      add: add
                                    });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateResalt"] =
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value &&
                        $state.glo.value
                          ? (() => {
                              const actionArgs = {
                                vgroup: "resalt",
                                operation: 2,
                                value: "resalt"
                              };
                              return (({ vgroup, value }) => {
                                if (typeof value === "string") {
                                  value = [value];
                                }

                                const oldValue = $stateGet($state, vgroup);
                                $stateSet($state, vgroup, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateResalt"] != null &&
                        typeof $steps["updateResalt"] === "object" &&
                        typeof $steps["updateResalt"].then === "function"
                      ) {
                        $steps["updateResalt"] = await $steps["updateResalt"];
                      }

                      $steps["invokeGlobalAction"] = !(
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value &&
                        $state.glo.value
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                                "bottom-center",
                                3000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0KLbb
                      )}
                    >
                      {"\u0645\u062d\u0627\u0633\u0628\u0647 BMI"}
                    </div>
                  </ButtonLiom>
                </div>
              </section>
            </div>
          </section>
          <section
            className={classNames(projectcss.all, sty.section__e8Ta, {
              [sty.sectionresalt__e8TaCpkCp]: hasVariant(
                $state,
                "resalt",
                "resalt"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__y6RhQ)}>
              <div className={classNames(projectcss.all, sty.freeBox__cce33)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oWYi)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lMkSc
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return `بررسی وزن در هفته ${$state.week2} بارداری`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u062f\u0631 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__j1DUo)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__g4RiL)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zBiGv
                        )}
                      >
                        {"BMI \u0634\u0645\u0627 "}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__edLsG
                        )}
                        style={(() => {
                          try {
                            return {
                              color: $state.bmiCategories.find(
                                item =>
                                  $state.bmi.bmi >= item.min &&
                                  $state.bmi.bmi <= item.max
                              ).color
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.bmi.bmi.toFixed(2);
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pD9O
                        )}
                      >
                        {"\u0647\u0633\u062a."}
                      </div>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iQb4A
                      )}
                      style={(() => {
                        try {
                          return {
                            color: $state.bmiCategories.find(
                              item =>
                                $state.bmi.bmi >= item.min &&
                                $state.bmi.bmi <= item.max
                            ).color
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.bmiCategories.find(
                              item =>
                                $state.bmi.bmi >= item.min &&
                                $state.bmi.bmi <= item.max
                            ).status;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0648\u0636\u0639\u06cc\u062a \u0646\u0631\u0645\u0627\u0644";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Embed
                      data-plasmic-name={"embedHtml"}
                      data-plasmic-override={overrides.embedHtml}
                      className={classNames("__wab_instance", sty.embedHtml)}
                      code={(() => {
                        try {
                          return `
  <style>

    .sidebar h2 {
      text-align: center;
      font-size: 22px;
      margin-bottom: 20px;
      color: #333;
    }

    .menu-item {
      background-color: #ffffffcc;
      border-radius: 10px;
      padding: 10px 15px;
      margin-bottom: 15px;
      font-weight: bold;
      display: flex;
      align-items: center;
    }
    .slider-container {
      direction: ltr !important;
      margin-top: 20px;
    }
    label {
      font-weight: bold;
      margin-bottom: 5px;
      display: block;
      color: #444;
    }
    .slider-container {
  margin-top: 20px;
}

.slider-container input[type="range"] {
  direction: ltr;
}


    input[type="range"] {
      -webkit-appearance: none;
      width: 100%;
      height: 10px;
      border-radius: 5px;
background: linear-gradient(to right,
  #FFD700 0%,     /* کمبود وزن - زرد */
  #4CAF50 33%,    /* وزن نرمال - سبز */
  #FFA500 66%,    /* اضافه وزن - نارنجی */
  #F44336 100%    /* چاقی - قرمز */
);      outline: none;
    }

    input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: ${
        $state.bmiCategories.find(
          item => $state.bmi.bmi >= item.min && $state.bmi.bmi <= item.max
        ).color
      };
      cursor: pointer;
      border: 2px solid white;
      box-shadow: 0 0 4px rgba(0,0,0,0.3);
    }

    .value-output {
      text-align: center;
      margin-top: 10px;
      font-size: 16px;
      font-weight: bold;
      color: #ffffff;
    }
  </style>
</head>

  <div class="sidebar" style="direction: ltr !important;">
    <div class="slider-container">
      <input type="range" id="weekSlider" name="weekSlider" min="1" max="40" value="${
        $state.bmi.bmi
      }" disabled> 
    </div>
  </div>

  <script>
    const slider = document.getElementById("weekSlider");
    const valueOutput = document.getElementById("weekValue");
  </script>`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return '\r\n  <style>\r\n\r\n    .sidebar h2 {\r\n      text-align: center;\r\n      font-size: 22px;\r\n      margin-bottom: 20px;\r\n      color: #333;\r\n    }\r\n\r\n    .menu-item {\r\n      background-color: #ffffffcc;\r\n      border-radius: 10px;\r\n      padding: 10px 15px;\r\n      margin-bottom: 15px;\r\n      font-weight: bold;\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n\r\n    .slider-container {\r\n      direcshen: ltr;\r\n      margin-top: 20px;\r\n    }\r\n\r\n    label {\r\n      font-weight: bold;\r\n      margin-bottom: 5px;\r\n      display: block;\r\n      color: #444;\r\n    }\r\n\r\n    input[type="range"] {\r\n      -webkit-appearance: none;\r\n      width: 100%;\r\n      height: 10px;\r\n      border-radius: 5px;\r\nbackground: linear-gradient(to right,\r\n  #FFD700 0%,     /* \u06a9\u0645\u0628\u0648\u062f \u0648\u0632\u0646 - \u0632\u0631\u062f */\r\n  #4CAF50 33%,    /* \u0648\u0632\u0646 \u0646\u0631\u0645\u0627\u0644 - \u0633\u0628\u0632 */\r\n  #FFA500 66%,    /* \u0627\u0636\u0627\u0641\u0647 \u0648\u0632\u0646 - \u0646\u0627\u0631\u0646\u062c\u06cc */\r\n  #F44336 100%    /* \u0686\u0627\u0642\u06cc - \u0642\u0631\u0645\u0632 */\r\n);      outline: none;\r\n    }\r\n\r\n    input[type="range"]::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      appearance: none;\r\n      width: 20px;\r\n      height: 20px;\r\n      border-radius: 50%;\r\n      background: #333;\r\n      cursor: pointer;\r\n      border: 2px solid white;\r\n      box-shadow: 0 0 4px rgba(0,0,0,0.3);\r\n    }\r\n\r\n    .value-output {\r\n      text-align: center;\r\n      margin-top: 10px;\r\n      font-size: 16px;\r\n      font-weight: bold;\r\n      color: #ffffff;\r\n    }\r\n  </style>\r\n</head>\r\n\r\n  <div class="sidebar">\r\n    <div class="slider-container">\r\n      <input type="range" id="weekSlider" name="weekSlider" min="1" max="40" value="20" disabled> \r\n    </div>\r\n  </div>\r\n\r\n  <script>\r\n    const slider = document.getElementById("weekSlider");\r\n    const valueOutput = document.getElementById("weekValue");\r\n\r\n    slider.oninput = function () {\r\n      valueOutput.innerText = `\u0647\u0641\u062a\u0647 ${this.value}`;\r\n    };\r\n  </script>';
                          }
                          throw e;
                        }
                      })()}
                    />
                  </Stack__>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___2ZcCh)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oxfqf)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y3N
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return `BMI شما پیش از بارداری 
<span style="color: ${
                              $state.bmiCategories.find(
                                item =>
                                  $state.bmi.lastbmi >= item.min &&
                                  $state.bmi.lastbmi <= item.max
                              ).color
                            }; font-weight: bold;">
  ${$state.bmi.lastbmi.toFixed(2)}
</span> 
بوده که در محدوده 
<span style="color: ${
                              $state.bmiCategories.find(
                                item =>
                                  $state.bmi.lastbmi >= item.min &&
                                  $state.bmi.lastbmi <= item.max
                              ).color
                            }; font-weight: bold;">
  ${
    $state.bmiCategories.find(
      item => $state.bmi.lastbmi >= item.min && $state.bmi.lastbmi <= item.max
    ).status
  }
</span> 
قرار دارد.`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                  {(
                    hasVariant($state, "resalt", "resalt")
                      ? (() => {
                          try {
                            return $state.bmi.week == $state.week2;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Hvl,
                        {
                          [sty.textresalt___4HvlCpkCp]: hasVariant(
                            $state,
                            "resalt",
                            "resalt"
                          )
                        }
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return `شما تا هفته ${$state.week2}  بارداری
<span style="font-weight: bold;">
${$state.bmi.add}  کیلوگرم 
  ${
    $state.bmi.add < 0
      ? "کاهش وزن"
      : $state.bmi.add >= 0
      ? "افزایش وزن"
      : "هیچ تغییری"
  }
</span>
داشته اید. که در محدوده
<span style="color: ${$state.gain[$state.bmi.type].color}; font-weight: bold;">
  ${$state.gain[$state.bmi.type].status}
</span>
قرار دارد.
`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x0O7L
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return `حداقل وزن شماتا هفته ${$state.week2}      
       ...
<span style="font-weight: bold;">
${parseInt($state.bmi.weight) + $state.bmi.min}  کیلوگرم  ...
</span>
و حداکثر وزن شما در این هفته ... 
<span style="font-weight: bold;">
${parseInt($state.bmi.weight) + $state.bmi.max} کیلوگرم  ...
</span> است.`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0631\u0631\u0633\u06cc \u0648\u0632\u0646 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                </Stack__>
              </div>
            </div>
            <section
              className={classNames(projectcss.all, sty.section__swo9P, {
                [sty.sectionresalt__swo9PCpkCp]: hasVariant(
                  $state,
                  "resalt",
                  "resalt"
                )
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__blDyw)}
              >
                {(
                  hasVariant($state, "resalt", "resalt")
                    ? (() => {
                        try {
                          return $state.bmi.week != $state.week2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom2"}
                    data-plasmic-override={overrides.buttonLiom2}
                    className={classNames("__wab_instance", sty.buttonLiom2, {
                      [sty.buttonLiom2resalt]: hasVariant(
                        $state,
                        "resalt",
                        "resalt"
                      )
                    })}
                    color={generateStateValueProp($state, [
                      "buttonLiom2",
                      "color"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWeek2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["week2"]
                              },
                              operation: 0,
                              value: $state.bmi.week
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWeek2"] != null &&
                        typeof $steps["updateWeek2"] === "object" &&
                        typeof $steps["updateWeek2"].then === "function"
                      ) {
                        $steps["updateWeek2"] = await $steps["updateWeek2"];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var higth =
                                    parseInt($state.higth.value) / 100;
                                  var lastWeight = parseInt(
                                    $state.lastWeight.value
                                  );
                                  var weight2 = parseInt($state.weight2.value);
                                  var week = $state.week2;
                                  var gol = parseInt($state.glo.value);
                                  var lastbmi = lastWeight / (higth * higth);
                                  var w = $state.weight[gol - 1].find(
                                    item => item.week == week
                                  ).gain;
                                  var bmi = (weight2 - w) / (higth * higth);
                                  var add = weight2 - lastWeight;
                                  var min = $state.weight[gol - 1].find(
                                    item => item.week == week
                                  ).minGain;
                                  var max = $state.weight[gol - 1].find(
                                    item => item.week == week
                                  ).maxGain;
                                  var type =
                                    add >= min && add <= max
                                      ? 1
                                      : add < min
                                      ? 0
                                      : 2;
                                  return ($state.bmi = {
                                    week: week,
                                    lastbmi: lastbmi,
                                    bmi: bmi,
                                    w: w,
                                    type: type,
                                    min: min,
                                    max: max,
                                    weight: lastWeight,
                                    add: add
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction"] = !(
                        $state.higth.value &&
                        $state.lastWeight.value &&
                        $state.weight2.value &&
                        $state.week.value &&
                        $state.glo.value
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                                "bottom-center",
                                3000
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom2",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2P0Jk
                      )}
                    >
                      {
                        "\u0628\u0627\u0632\u06af\u0634\u062a \u0628\u0647 \u0647\u0641\u062a\u0647 \u062c\u0627\u0631\u06cc"
                      }
                    </div>
                  </ButtonLiom>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ptZMs, {
                  [sty.freeBoxresalt__ptZMsCpkCp]: hasVariant(
                    $state,
                    "resalt",
                    "resalt"
                  )
                })}
              >
                <ButtonLiom
                  data-plasmic-name={"buttonLiom4"}
                  data-plasmic-override={overrides.buttonLiom4}
                  className={classNames("__wab_instance", sty.buttonLiom4, {
                    [sty.buttonLiom4resalt]: hasVariant(
                      $state,
                      "resalt",
                      "resalt"
                    )
                  })}
                  color={generateStateValueProp($state, [
                    "buttonLiom4",
                    "color"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateWeek2"] =
                      $state.week2 < 40
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["week2"]
                              },
                              operation: 0,
                              value: $state.week2 + 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateWeek2"] != null &&
                      typeof $steps["updateWeek2"] === "object" &&
                      typeof $steps["updateWeek2"].then === "function"
                    ) {
                      $steps["updateWeek2"] = await $steps["updateWeek2"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                var higth = parseInt($state.higth.value) / 100;
                                var lastWeight = parseInt(
                                  $state.lastWeight.value
                                );
                                var weight2 = parseInt($state.weight2.value);
                                var week = $state.week2;
                                var gol = parseInt($state.glo.value);
                                var lastbmi = lastWeight / (higth * higth);
                                var w = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).gain;
                                var bmi = (weight2 - w) / (higth * higth);
                                var add = weight2 - lastWeight;
                                var min = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).minGain;
                                var max = $state.weight[gol - 1].find(
                                  item => item.week == week
                                ).maxGain;
                                var type =
                                  add >= min && add <= max
                                    ? 1
                                    : add < min
                                    ? 0
                                    : 2;
                                return ($state.bmi = {
                                  week: $state.bmi.week,
                                  lastbmi: lastbmi,
                                  bmi: bmi,
                                  w: w,
                                  type: type,
                                  min: min,
                                  max: max,
                                  weight: lastWeight,
                                  add: add
                                });
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction"] = !(
                      $state.higth.value &&
                      $state.lastWeight.value &&
                      $state.weight2.value &&
                      $state.week.value &&
                      $state.glo.value
                    )
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0631\u0627 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f",
                              "bottom-center",
                              3000
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom4",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p3Aap
                    )}
                  >
                    {"\u0647\u0641\u062a\u0647 \u0628\u0639\u062f"}
                  </div>
                </ButtonLiom>
                <ButtonLiom
                  data-plasmic-name={"buttonLiom5"}
                  data-plasmic-override={overrides.buttonLiom5}
                  className={classNames("__wab_instance", sty.buttonLiom5, {
                    [sty.buttonLiom5resalt]: hasVariant(
                      $state,
                      "resalt",
                      "resalt"
                    )
                  })}
                  color={generateStateValueProp($state, [
                    "buttonLiom5",
                    "color"
                  ])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateResalt"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "resalt",
                            operation: 6,
                            value: "resalt"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateResalt"] != null &&
                      typeof $steps["updateResalt"] === "object" &&
                      typeof $steps["updateResalt"].then === "function"
                    ) {
                      $steps["updateResalt"] = await $steps["updateResalt"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom5",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sNlgq
                    )}
                  >
                    {
                      "\u0645\u062d\u0627\u0633\u0628\u0647 \u0645\u062c\u062f\u062f"
                    }
                  </div>
                </ButtonLiom>
              </Stack__>
            </section>
          </section>
          <Dialog3
            data-plasmic-name={"dialog3"}
            data-plasmic-override={overrides.dialog3}
            className={classNames("__wab_instance", sty.dialog3)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog3",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog3",
              "opendialog"
            ])}
          >
            <ApiRequest
              data-plasmic-name={"apiRequest"}
              data-plasmic-override={overrides.apiRequest}
              className={classNames("__wab_instance", sty.apiRequest)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jJ41C
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
            >
              <div className={classNames(projectcss.all, sty.freeBox___4Vcb4)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7Hk9)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bYSp7)}
                  />

                  <DialogTitle
                    data-plasmic-name={"dialogTitle"}
                    data-plasmic-override={overrides.dialogTitle}
                    className={classNames("__wab_instance", sty.dialogTitle)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        sty.h5
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rq7Nq
                        )}
                      >
                        {"Dialog title"}
                      </div>
                    </h5>
                  </DialogTitle>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__duJ4R)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zihEs
                    )}
                  >
                    {"You can insert dialog body content here in this slot."}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mjmO)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3MW6F
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v2YkN
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w94D
                          )}
                        >
                          {
                            "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__blhcl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vurgz
                          )}
                        >
                          {"Enter some text"}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6D2Y
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dtvFu
                            )}
                          >
                            {"Enter some text"}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___2PEjo
                            )}
                          >
                            {"Enter some text"}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__u6GvP
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kz6Eb
                            )}
                          >
                            {"1"}
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nFr29
                        )}
                      >
                        {
                          "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                        }
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__j9X2B
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__em7CA
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: false,
                              autoFocus: false,
                              bordered: false,
                              className: classNames(
                                "__wab_instance",
                                sty.input
                              ),
                              disabled: false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                              prefix: (
                                <Icon10Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__byIQw
                                  )}
                                  role={"img"}
                                />
                              ),

                              readOnly: false,
                              size: "small",
                              suffix: null,
                              value: generateStateValueProp($state, [
                                "input",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input"}
                                data-plasmic-override={overrides.input}
                                {...child$Props}
                              />
                            );
                          })()}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cEeWw
                            )}
                          />
                        </div>
                        <ButtonLiom
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          color={generateStateValueProp($state, [
                            "button",
                            "color"
                          ])}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y8JQ3
                            )}
                          >
                            {"\u062a\u0627\u06cc\u06cc\u062f"}
                          </div>
                        </ButtonLiom>
                      </Stack__>
                      <ButtonLiom
                        data-plasmic-name={"button2"}
                        data-plasmic-override={overrides.button2}
                        className={classNames("__wab_instance", sty.button2)}
                        color={generateStateValueProp($state, [
                          "button2",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bIapS
                            )}
                            role={"img"}
                          />
                        }
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button2",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2EGrL
                          )}
                        >
                          {
                            "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                          }
                        </div>
                      </ButtonLiom>
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__ki5JQ
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__u7CbU
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                        }
                      </p>
                    </Stack__>
                  </div>
                </Stack__>
              </div>
            </ApiRequest>
          </Dialog3>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "sideEffect",
    "higth",
    "lastWeight",
    "week",
    "weight2",
    "glo",
    "buttonLiom",
    "embedHtml",
    "buttonLiom2",
    "buttonLiom4",
    "buttonLiom5",
    "dialog3",
    "apiRequest",
    "dialogTitle",
    "h5",
    "input",
    "button",
    "button2"
  ],
  headerLiom: ["headerLiom"],
  sideEffect: ["sideEffect"],
  higth: ["higth"],
  lastWeight: ["lastWeight"],
  week: ["week"],
  weight2: ["weight2"],
  glo: ["glo"],
  buttonLiom: ["buttonLiom"],
  embedHtml: ["embedHtml"],
  buttonLiom2: ["buttonLiom2"],
  buttonLiom4: ["buttonLiom4"],
  buttonLiom5: ["buttonLiom5"],
  dialog3: [
    "dialog3",
    "apiRequest",
    "dialogTitle",
    "h5",
    "input",
    "button",
    "button2"
  ],
  apiRequest: ["apiRequest", "dialogTitle", "h5", "input", "button", "button2"],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  input: ["input"],
  button: ["button"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  sideEffect: typeof SideEffect;
  higth: typeof Input;
  lastWeight: typeof Input;
  week: typeof Input;
  weight2: typeof Input;
  glo: typeof Input;
  buttonLiom: typeof ButtonLiom;
  embedHtml: typeof Embed;
  buttonLiom2: typeof ButtonLiom;
  buttonLiom4: typeof ButtonLiom;
  buttonLiom5: typeof ButtonLiom;
  dialog3: typeof Dialog3;
  apiRequest: typeof ApiRequest;
  dialogTitle: typeof DialogTitle;
  h5: "h5";
  input: typeof AntdInput;
  button: typeof ButtonLiom;
  button2: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBmi__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBmi__VariantsArgs;
    args?: PlasmicBmi__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBmi__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBmi__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBmi__ArgProps,
          internalVariantPropNames: PlasmicBmi__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBmi__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBmi";
  } else {
    func.displayName = `PlasmicBmi.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBmi = Object.assign(
  // Top-level PlasmicBmi renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    sideEffect: makeNodeComponent("sideEffect"),
    higth: makeNodeComponent("higth"),
    lastWeight: makeNodeComponent("lastWeight"),
    week: makeNodeComponent("week"),
    weight2: makeNodeComponent("weight2"),
    glo: makeNodeComponent("glo"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    embedHtml: makeNodeComponent("embedHtml"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    buttonLiom4: makeNodeComponent("buttonLiom4"),
    buttonLiom5: makeNodeComponent("buttonLiom5"),
    dialog3: makeNodeComponent("dialog3"),
    apiRequest: makeNodeComponent("apiRequest"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicBmi
    internalVariantProps: PlasmicBmi__VariantProps,
    internalArgProps: PlasmicBmi__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | دستیار سلامت",
      description:
        "از دلایل عقب جلو شدن پریود خود،  در کمتر از چند دقیقه و بدون انتظار برای پزشک آگاه شوید",
      ogImageSrc:
        "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",
      canonical: ""
    }
  }
);

export default PlasmicBmi;
/* prettier-ignore-end */
