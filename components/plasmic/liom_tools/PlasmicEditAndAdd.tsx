/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: oBl4S7RYlLkQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import AppAndEditItem from "../../AppAndEditItem"; // plasmic-import: GZp0kN_ckwXR/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicEditAndAdd.module.css"; // plasmic-import: oBl4S7RYlLkQ/css

createPlasmicElementProxy;

export type PlasmicEditAndAdd__VariantMembers = {};
export type PlasmicEditAndAdd__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditAndAdd__VariantsArgs;
export const PlasmicEditAndAdd__VariantProps = new Array<VariantPropType>();

export type PlasmicEditAndAdd__ArgsType = {
  type?: string;
  onTypeChange?: (val: string) => void;
  data?: any;
};
type ArgPropType = keyof PlasmicEditAndAdd__ArgsType;
export const PlasmicEditAndAdd__ArgProps = new Array<ArgPropType>(
  "type",
  "onTypeChange",
  "data"
);

export type PlasmicEditAndAdd__OverridesType = {
  root?: Flex__<"div">;
  appAndEditItem?: Flex__<typeof AppAndEditItem>;
};

export interface DefaultEditAndAddProps {
  type?: string;
  onTypeChange?: (val: string) => void;
  data?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditAndAdd__RenderFunc(props: {
  variants: PlasmicEditAndAdd__VariantsArgs;
  args: PlasmicEditAndAdd__ArgsType;
  overrides: PlasmicEditAndAdd__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: [
            {
              label: "\u0645\u062a\u0646 \u0633\u0624\u0627\u0644",
              placeholder:
                "\u0645\u062a\u0646 \u0633\u0624\u0627\u0644 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f...",
              type: "textarea",
              value:
                "\u0622\u06cc\u0627 \u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u062a\u062d\u0631\u06a9 \u0646\u062f\u0627\u0631\u06cc\u0646 (\u0645\u062b\u0644 \u0648\u0642\u062a\u06cc \u06a9\u0647 \u067e\u0634\u062a \u0635\u0646\u062f\u0644\u06cc \u0646\u0634\u0633\u062a\u06cc\u0646\u060c \u06cc\u0627 \u0628\u0631\u0627\u06cc \u062e\u0648\u0627\u0628\u06cc\u062f\u0646 \u0631\u0648\u06cc \u062a\u062e\u062a \u062f\u0631\u0627\u0632 \u06a9\u0634\u06cc\u062f\u06cc\u0646)\u060c \u0645\u06cc\u0644 \u062f\u0627\u0631\u06cc\u0646 \u06a9\u0647 \u067e\u0627\u0647\u0627\u062a\u0648\u0646 \u0631\u0648 \u0645\u062f\u0627\u0645 \u062a\u06a9\u0627\u0646 \u0628\u062f\u06cc\u0646\u061f\n\u0648 \u0627\u06cc\u0646 \u0637\u0648\u0631 \u0628\u0627\u0634\u0647 \u06a9\u0647 \u0628\u0627 \u062a\u06a9\u0627\u0646 \u062f\u0627\u062f\u0646 \u067e\u0627\u0647\u0627 \u0627\u062d\u0633\u0627\u0633 \u062e\u0648\u0634\u0627\u06cc\u0646\u062f\u06cc \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u0646 \u0648 \u0648\u0642\u062a\u06cc \u0627\u0648\u0646 \u0647\u0627 \u0631\u0648 \u062a\u06a9\u0627\u0646 \u0646\u0645\u06cc \u062f\u06cc\u0646 \u0627\u062d\u0633\u0627\u0633 \u0646\u0627\u062e\u0648\u0634\u0627\u06cc\u0646\u062f\u06cc \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u0646\u061f"
            },
            {
              label: "\u0631\u0627\u0647\u0646\u0645\u0627 (Hint)",
              placeholder:
                "\u0631\u0627\u0647\u0646\u0645\u0627\u06cc \u06a9\u0648\u062a\u0627\u0647 \u0628\u0631\u0627\u06cc \u0633\u0624\u0627\u0644 (\u0627\u062e\u062a\u06cc\u0627\u0631\u06cc)...",
              type: "text",
              value: ""
            },
            {
              label: "\u0641\u0639\u0627\u0644 \u0628\u0648\u062f\u0646",
              placeholder: "",
              type: "switch",
              value: true
            },
            {
              label: "\u0646\u0648\u0639 \u0633\u0624\u0627\u0644",
              placeholder:
                " \u0646\u0648\u0639 \u0633\u0624\u0627\u0644 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f...",
              type: "select",
              value: "IDA",
              options: [
                {
                  label: "\u062a\u0635\u0648\u06cc\u0631",
                  value: "imagePicker"
                },
                { label: "\u0639\u062f\u062f", value: "numberInput" },
                {
                  label:
                    "\u0644\u06cc\u0633\u062a \u0627\u0646\u062a\u062e\u0627\u0628",
                  value: "picker"
                }
              ]
            },
            {
              label: "\u06af\u0632\u06cc\u0646\u0647\u200c\u0647\u0627",
              placeholder:
                "\u0645\u062a\u0646 \u06af\u0632\u06cc\u0646\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f...",
              type: "options",
              value: [
                { id: 1594, text: "\u0628\u0644\u0647", score: 20 },
                { id: 1595, text: "\u062e\u06cc\u0631", score: 0 }
              ]
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "writable",
        variableType: "text",

        valueProp: "type",
        onChangeProp: "onTypeChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__iNiXu)}>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__iY1LX)}
              key={currentIndex}
              style={(() => {
                try {
                  return {
                    "grid-column":
                      currentItem.type == "textarea" ? "span 3" : "span 1"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <AppAndEditItem
                data-plasmic-name={"appAndEditItem"}
                data-plasmic-override={overrides.appAndEditItem}
                className={classNames("__wab_instance", sty.appAndEditItem)}
                currentItem={currentItem}
                type={(() => {
                  try {
                    return currentItem.type;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "appAndEditItem"],
  appAndEditItem: ["appAndEditItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  appAndEditItem: typeof AppAndEditItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditAndAdd__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditAndAdd__VariantsArgs;
    args?: PlasmicEditAndAdd__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditAndAdd__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditAndAdd__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditAndAdd__ArgProps,
          internalVariantPropNames: PlasmicEditAndAdd__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditAndAdd__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditAndAdd";
  } else {
    func.displayName = `PlasmicEditAndAdd.${nodeName}`;
  }
  return func;
}

export const PlasmicEditAndAdd = Object.assign(
  // Top-level PlasmicEditAndAdd renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appAndEditItem: makeNodeComponent("appAndEditItem"),

    // Metadata about props expected for PlasmicEditAndAdd
    internalVariantProps: PlasmicEditAndAdd__VariantProps,
    internalArgProps: PlasmicEditAndAdd__ArgProps
  }
);

export default PlasmicEditAndAdd;
/* prettier-ignore-end */
