// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: usfpaVkTXFYE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import LineClomp from "../../LineClomp"; // plasmic-import: VHAYS5YHy7AC/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicStepsLayout.module.css"; // plasmic-import: usfpaVkTXFYE/css

import Icon77Icon from "./icons/PlasmicIcon__Icon77"; // plasmic-import: YKE8ylWcPDbP/icon
import Icon122Icon from "./icons/PlasmicIcon__Icon122"; // plasmic-import: 7szDnb8vqxXD/icon

createPlasmicElementProxy;

export type PlasmicStepsLayout__VariantMembers = {
  layout: "card" | "banner" | "advice";
};
export type PlasmicStepsLayout__VariantsArgs = {
  layout?: SingleChoiceArg<"card" | "banner" | "advice">;
};
type VariantPropType = keyof PlasmicStepsLayout__VariantsArgs;
export const PlasmicStepsLayout__VariantProps = new Array<VariantPropType>(
  "layout"
);

export type PlasmicStepsLayout__ArgsType = {
  theme?: string;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicStepsLayout__ArgsType;
export const PlasmicStepsLayout__ArgProps = new Array<ArgPropType>(
  "theme",
  "children",
  "slot2",
  "slot"
);

export type PlasmicStepsLayout__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultStepsLayoutProps {
  theme?: string;
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot?: React.ReactNode;
  layout?: SingleChoiceArg<"card" | "banner" | "advice">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStepsLayout__RenderFunc(props: {
  variants: PlasmicStepsLayout__VariantsArgs;
  args: PlasmicStepsLayout__ArgsType;
  overrides: PlasmicStepsLayout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          theme: "dark"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "layout",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.layout
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootlayout_advice]: hasVariant($state, "layout", "advice"),
          [sty.rootlayout_banner]: hasVariant($state, "layout", "banner"),
          [sty.rootlayout_card]: hasVariant($state, "layout", "card")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__mcjZp, {
          [sty.freeBoxlayout_advice__mcjZpQaRcX]: hasVariant(
            $state,
            "layout",
            "advice"
          ),
          [sty.freeBoxlayout_banner__mcjZpqHmk]: hasVariant(
            $state,
            "layout",
            "banner"
          ),
          [sty.freeBoxlayout_card__mcjZp7B6JK]: hasVariant(
            $state,
            "layout",
            "card"
          )
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rWg2R, {
            [sty.freeBoxlayout_card__rWg2R7B6JK]: hasVariant(
              $state,
              "layout",
              "card"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox___1ZYr,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__kZOc,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__zl17C,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__oomJc,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__kTujE,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__bMkaS,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__k4Hdp,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__cRheE)}
        >
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__znupa,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__iInvE,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__a8GHw,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__jRhC2,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7HfzO)}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__jJrUq,
                (() => {
                  try {
                    return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            />

            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__qhJgz,
                (() => {
                  try {
                    return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            />

            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__bjlpp,
                (() => {
                  try {
                    return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              )}
            />
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__gw83I)}
        >
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__aneze,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox___0E2Ps,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__rZfle,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__vx4Wq,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__k3Iik,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__xJbG3,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />

          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__x711R,
              (() => {
                try {
                  return $props.theme == "dark" ? "shimmerDark" : "shimmer";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            )}
          />
        </Stack__>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__x9Ogj, {
          [sty.freeBoxlayout_advice__x9OgjQaRcX]: hasVariant(
            $state,
            "layout",
            "advice"
          ),
          [sty.freeBoxlayout_banner__x9OgjqHmk]: hasVariant(
            $state,
            "layout",
            "banner"
          ),
          [sty.freeBoxlayout_card__x9Ogj7B6JK]: hasVariant(
            $state,
            "layout",
            "card"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zHpYo
                )}
              >
                {"sjdiuhvv"}
              </div>
              <LineClomp
                className={classNames("__wab_instance", sty.lineClomp__nbYcR)}
                more={true}
                numberOfLine={2}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7TRna
                  )}
                >
                  {
                    "sddddddddddddddddddddddddddddddddddddddd\u0633\u062a\u0628\u0647\u0633\u0627\u06cc\u0647\u0639\u0628\u0627\u0647\u06cc\u0639\u0633\u0627\u0628\u0647\u0627\u0647 \u0627\u06cc\u0633\u0647\u0639\u062e\u0627\u0628\u0647\u0639\u0627\u0633\u06cc\u0647\u0639\u0628\u0627\u0647\u0627\u0647\u0627\u0647\u0627\u0628 \u062f\u0633\u062e\u06cc\u062a\u0633\u0639\u0647\u0627\u0647\u0639\u06cc\u0627\u0647\u0639\u0627\u0647\u0639\u0627\u0647\u0639\u0627\u0628 \u0633\u062a\u06cc\u0647\u062e\u0639\u062a\u0639\u0647\u062a\u0647\u0639\u062e\u062a\u0633\u062e\u062a\u062e\u062a\u0628 \u0633\u062f\u0627\u0639\u06cc\u0647\u0627\u0647\u0639\u0627\u0628\u0647\u0639\u0627\u0628\u0647\u0627\u0627\u0647\u0639\u0633\u0627 \u062f\u0633\u062e\u06cc\u0627\u0639\u062e\u0647\u0627\u0633\u0639\u0627\u0628\u0627\u0639\u0647\u06cc\u0633\u0627\u0628\u0639\u0647\u0633\u0627\u0628\u0633"
                  }
                </div>
              </LineClomp>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yCsuD)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__hIwNl)}
                  displayHeight={"4rem"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"4rem"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_tools/images/bitmap.png",
                    fullWidth: 612,
                    fullHeight: 459,
                    aspectRatio: undefined
                  }}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vsiMn)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___9KpYy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e1Qfe
                      )}
                    >
                      {"Enter some text"}
                    </div>
                    <Icon77Icon
                      className={classNames(projectcss.all, sty.svg__wikru)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zm72X
                      )}
                    >
                      {"\u0646\u0627\u0647\u0627\u0631"}
                    </div>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5M7V8
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </Stack__>
              </Stack__>
            </React.Fragment>
          ),
          value: args.children
        })}
      </Stack__>
      {(
        hasVariant($state, "layout", "advice")
          ? true
          : hasVariant($state, "layout", "card")
          ? true
          : false
      ) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__esDx6, {
            [sty.freeBoxlayout_advice__esDx6QaRcX]: hasVariant(
              $state,
              "layout",
              "advice"
            ),
            [sty.freeBoxlayout_banner__esDx6QHmk]: hasVariant(
              $state,
              "layout",
              "banner"
            ),
            [sty.freeBoxlayout_card__esDx67B6JK]: hasVariant(
              $state,
              "layout",
              "card"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Auqo
                  )}
                >
                  {"sjdiuhvv"}
                </div>
                <LineClomp
                  className={classNames("__wab_instance", sty.lineClomp__gchyz)}
                  more={true}
                  numberOfLine={2}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r9YyI
                    )}
                  >
                    {
                      "sddddddddddddddddddddddddddddddddddddddd\u0633\u062a\u0628\u0647\u0633\u0627\u06cc\u0647\u0639\u0628\u0627\u0647\u06cc\u0639\u0633\u0627\u0628\u0647\u0627\u0647 \u0627\u06cc\u0633\u0647\u0639\u062e\u0627\u0628\u0647\u0639\u0627\u0633\u06cc\u0647\u0639\u0628\u0627\u0647\u0627\u0647\u0627\u0647\u0627\u0628 \u062f\u0633\u062e\u06cc\u062a\u0633\u0639\u0647\u0627\u0647\u0639\u06cc\u0627\u0647\u0639\u0627\u0647\u0639\u0627\u0647\u0639\u0627\u0628 \u0633\u062a\u06cc\u0647\u062e\u0639\u062a\u0639\u0647\u062a\u0647\u0639\u062e\u062a\u0633\u062e\u062a\u062e\u062a\u0628 \u0633\u062f\u0627\u0639\u06cc\u0647\u0627\u0647\u0639\u0627\u0628\u0647\u0639\u0627\u0628\u0647\u0627\u0627\u0647\u0639\u0633\u0627 \u062f\u0633\u062e\u06cc\u0627\u0639\u062e\u0647\u0627\u0633\u0639\u0627\u0628\u0627\u0639\u0647\u06cc\u0633\u0627\u0628\u0639\u0647\u0633\u0627\u0628\u0633"
                    }
                  </div>
                </LineClomp>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pIkQd)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vx0Gt)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vjE1W)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sbHvb
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lfufa
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </Stack__>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mywWb)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dgSzw
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eKri
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qvkzc
                            )}
                          >
                            {"Enter some text"}
                          </div>
                        </Stack__>
                      </Stack__>
                    </div>
                  </div>
                </Stack__>
              </React.Fragment>
            ),
            value: args.slot2
          })}
        </Stack__>
      ) : null}
      {(
        hasVariant($state, "layout", "banner")
          ? true
          : hasVariant($state, "layout", "card")
          ? true
          : false
      ) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fczet, {
            [sty.freeBoxlayout_banner__fczetqHmk]: hasVariant(
              $state,
              "layout",
              "banner"
            ),
            [sty.freeBoxlayout_card__fczet7B6JK]: hasVariant(
              $state,
              "layout",
              "card"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6Cx6
                  )}
                >
                  {"sjdiuhvv"}
                </div>
                <LineClomp
                  className={classNames("__wab_instance", sty.lineClomp__oZkqb)}
                  more={true}
                  numberOfLine={2}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m81Za
                    )}
                  >
                    {
                      "sddddddddddddddddddddddddddddddddddddddd\u0633\u062a\u0628\u0647\u0633\u0627\u06cc\u0647\u0639\u0628\u0627\u0647\u06cc\u0639\u0633\u0627\u0628\u0647\u0627\u0647 \u0627\u06cc\u0633\u0647\u0639\u062e\u0627\u0628\u0647\u0639\u0627\u0633\u06cc\u0647\u0639\u0628\u0627\u0647\u0627\u0647\u0627\u0647\u0627\u0628 \u062f\u0633\u062e\u06cc\u062a\u0633\u0639\u0647\u0627\u0647\u0639\u06cc\u0627\u0647\u0639\u0627\u0647\u0639\u0627\u0647\u0639\u0627\u0628 \u0633\u062a\u06cc\u0647\u062e\u0639\u062a\u0639\u0647\u062a\u0647\u0639\u062e\u062a\u0633\u062e\u062a\u062e\u062a\u0628 \u0633\u062f\u0627\u0639\u06cc\u0647\u0627\u0647\u0639\u0627\u0628\u0647\u0639\u0627\u0628\u0647\u0627\u0627\u0647\u0639\u0633\u0627 \u062f\u0633\u062e\u06cc\u0627\u0639\u062e\u0647\u0627\u0633\u0639\u0627\u0628\u0627\u0639\u0647\u06cc\u0633\u0627\u0628\u0639\u0647\u0633\u0627\u0628\u0633"
                    }
                  </div>
                </LineClomp>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___2SydY)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__whmRi)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img___4B5Z)}
                      displayHeight={"8rem"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"13.5rem"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/liom_tools/images/newProject1Png.png",
                        fullWidth: 1080,
                        fullHeight: 764,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__ttIk7)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nqLga
                        )}
                      >
                        <Icon122Icon
                          className={classNames(projectcss.all, sty.svg__y7Ebv)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                </Stack__>
              </React.Fragment>
            ),
            value: args.slot
          })}
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStepsLayout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStepsLayout__VariantsArgs;
    args?: PlasmicStepsLayout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStepsLayout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicStepsLayout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStepsLayout__ArgProps,
          internalVariantPropNames: PlasmicStepsLayout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStepsLayout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStepsLayout";
  } else {
    func.displayName = `PlasmicStepsLayout.${nodeName}`;
  }
  return func;
}

export const PlasmicStepsLayout = Object.assign(
  // Top-level PlasmicStepsLayout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicStepsLayout
    internalVariantProps: PlasmicStepsLayout__VariantProps,
    internalArgProps: PlasmicStepsLayout__ArgProps
  }
);

export default PlasmicStepsLayout;
/* prettier-ignore-end */
