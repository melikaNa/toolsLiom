/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: Kh0l77Kj0PNL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSubscription2.module.css"; // plasmic-import: Kh0l77Kj0PNL/css

createPlasmicElementProxy;

export type PlasmicSubscription2__VariantMembers = {
  click: "click";
};
export type PlasmicSubscription2__VariantsArgs = {
  click?: SingleBooleanChoiceArg<"click">;
};
type VariantPropType = keyof PlasmicSubscription2__VariantsArgs;
export const PlasmicSubscription2__VariantProps = new Array<VariantPropType>(
  "click"
);

export type PlasmicSubscription2__ArgsType = {
  clickitem?: boolean;
  onClickitemChange?: (val: string) => void;
  onClick?: (event: any) => void;
  title?: string;
  onTitleChange?: (val: string) => void;
  price?: number;
  onPriceChange?: (val: string) => void;
  discount?: string;
  onDiscountChange?: (val: string) => void;
  fullprice?: number;
  onFullpriceChange?: (val: string) => void;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSubscription2__ArgsType;
export const PlasmicSubscription2__ArgProps = new Array<ArgPropType>(
  "clickitem",
  "onClickitemChange",
  "onClick",
  "title",
  "onTitleChange",
  "price",
  "onPriceChange",
  "discount",
  "onDiscountChange",
  "fullprice",
  "onFullpriceChange",
  "children"
);

export type PlasmicSubscription2__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultSubscription2Props {
  clickitem?: boolean;
  onClickitemChange?: (val: string) => void;
  onClick?: (event: any) => void;
  title?: string;
  onTitleChange?: (val: string) => void;
  price?: number;
  onPriceChange?: (val: string) => void;
  discount?: string;
  onDiscountChange?: (val: string) => void;
  fullprice?: number;
  onFullpriceChange?: (val: string) => void;
  children?: React.ReactNode;
  click?: SingleBooleanChoiceArg<"click">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSubscription2__RenderFunc(props: {
  variants: PlasmicSubscription2__VariantsArgs;
  args: PlasmicSubscription2__ArgsType;
  overrides: PlasmicSubscription2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "click",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.clickitem;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.click
      },
      {
        path: "clickitem",
        type: "writable",
        variableType: "boolean",

        valueProp: "clickitem",
        onChangeProp: "onClickitemChange"
      },
      {
        path: "title",
        type: "writable",
        variableType: "text",

        valueProp: "title",
        onChangeProp: "onTitleChange"
      },
      {
        path: "price",
        type: "writable",
        variableType: "number",

        valueProp: "price",
        onChangeProp: "onPriceChange"
      },
      {
        path: "discount",
        type: "writable",
        variableType: "text",

        valueProp: "discount",
        onChangeProp: "onDiscountChange"
      },
      {
        path: "fullprice",
        type: "writable",
        variableType: "number",

        valueProp: "fullprice",
        onChangeProp: "onFullpriceChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.root,
        { [sty.rootclick]: hasVariant($state, "click", "click") }
      )}
      onClick={async event => {
        const $steps = {};
      }}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gbDYe
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0627\u0634\u062a\u0631\u0627\u06a9";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jFrnM)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__beRe6
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.fullprice;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "120000";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iJqb
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.price + " تومان ";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "40000 \u062a\u0648\u0645\u0627\u0646";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___6CLy3)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xdxxj
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.discount;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "50%";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </React.Fragment>
        ),
        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubscription2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubscription2__VariantsArgs;
    args?: PlasmicSubscription2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubscription2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubscription2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubscription2__ArgProps,
          internalVariantPropNames: PlasmicSubscription2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubscription2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubscription2";
  } else {
    func.displayName = `PlasmicSubscription2.${nodeName}`;
  }
  return func;
}

export const PlasmicSubscription2 = Object.assign(
  // Top-level PlasmicSubscription2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSubscription2
    internalVariantProps: PlasmicSubscription2__VariantProps,
    internalArgProps: PlasmicSubscription2__ArgProps
  }
);

export default PlasmicSubscription2;
/* prettier-ignore-end */
