// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: UJN9m2mxrPIu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Lock from "../../Lock"; // plasmic-import: 5lKm1nUlkjS8/component
import Done from "../../Done"; // plasmic-import: kuXIsI5E0lmX/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicLinearCalendar2.module.css"; // plasmic-import: UJN9m2mxrPIu/css

createPlasmicElementProxy;

export type PlasmicLinearCalendar2__VariantMembers = {
  click: "click";
  dark: "dark";
};
export type PlasmicLinearCalendar2__VariantsArgs = {
  click?: SingleBooleanChoiceArg<"click">;
  dark?: SingleBooleanChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicLinearCalendar2__VariantsArgs;
export const PlasmicLinearCalendar2__VariantProps = new Array<VariantPropType>(
  "click",
  "dark"
);

export type PlasmicLinearCalendar2__ArgsType = {
  isLock?: boolean;
  title?: string;
  isShowDate?: boolean;
  done?: number;
  isVip?: boolean;
};
type ArgPropType = keyof PlasmicLinearCalendar2__ArgsType;
export const PlasmicLinearCalendar2__ArgProps = new Array<ArgPropType>(
  "isLock",
  "title",
  "isShowDate",
  "done",
  "isVip"
);

export type PlasmicLinearCalendar2__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  lock?: Flex__<typeof Lock>;
  done?: Flex__<typeof Done>;
};

export interface DefaultLinearCalendar2Props {
  isLock?: boolean;
  title?: string;
  isShowDate?: boolean;
  done?: number;
  isVip?: boolean;
  click?: SingleBooleanChoiceArg<"click">;
  dark?: SingleBooleanChoiceArg<"dark">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLinearCalendar2__RenderFunc(props: {
  variants: PlasmicLinearCalendar2__VariantsArgs;
  args: PlasmicLinearCalendar2__ArgsType;
  overrides: PlasmicLinearCalendar2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isLock: false,
          isShowDate: false,
          isVip: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "click",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.click
      },
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.dark
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        { [sty.rootclick]: hasVariant($state, "click", "click") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__wro0, {
          [sty.freeBoxclick__wro0Jr0Vt]: hasVariant($state, "click", "click"),
          [sty.freeBoxdark__wro0RiNjQ]: hasVariant($state, "dark", "dark")
        })}
      >
        {(() => {
          try {
            return $props.isVip;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__ri8Wv)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"13px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"16px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_tools/images/image36.svg",
                fullWidth: 22,
                fullHeight: 20,
                aspectRatio: 1.1
              }}
            />
          </div>
        ) : null}
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__andKa, {
            [sty.freeBoxdark__andKaRiNjQ]: hasVariant($state, "dark", "dark")
          })}
        >
          {(() => {
            try {
              return $props.done != 0 || $props.isLock;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pTv54, {
                [sty.freeBoxdark__pTv54RiNjQ]: hasVariant(
                  $state,
                  "dark",
                  "dark"
                )
              })}
            >
              {(() => {
                try {
                  return $props.isLock;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <Lock
                  data-plasmic-name={"lock"}
                  data-plasmic-override={overrides.lock}
                  className={classNames("__wab_instance", sty.lock)}
                  open={(() => {
                    try {
                      return false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              {(() => {
                try {
                  return $props.done != 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <Done
                  data-plasmic-name={"done"}
                  data-plasmic-override={overrides.done}
                  className={classNames("__wab_instance", sty.done)}
                  inDone={(() => {
                    try {
                      return $props.done == 1 ? true : false;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </Stack__>
          ) : null}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lLzEd,
              { [sty.textdark__lLzEdRiNjQ]: hasVariant($state, "dark", "dark") }
            )}
          >
            <div
              className={projectcss.__wab_expr_html_text}
              dangerouslySetInnerHTML={{
                __html: $props.title
                //+ "<br>" +"gsdfgsdfgdscccgdjgfjfg"
              }}
            />
          </div>
        </Stack__>
        {(() => {
          try {
            return $props.isShowDate;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f9Nt
            )}
          >
            {"27 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a"}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "lock", "done"],
  img: ["img"],
  lock: ["lock"],
  done: ["done"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  lock: typeof Lock;
  done: typeof Done;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinearCalendar2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLinearCalendar2__VariantsArgs;
    args?: PlasmicLinearCalendar2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLinearCalendar2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLinearCalendar2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLinearCalendar2__ArgProps,
          internalVariantPropNames: PlasmicLinearCalendar2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLinearCalendar2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinearCalendar2";
  } else {
    func.displayName = `PlasmicLinearCalendar2.${nodeName}`;
  }
  return func;
}

export const PlasmicLinearCalendar2 = Object.assign(
  // Top-level PlasmicLinearCalendar2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    lock: makeNodeComponent("lock"),
    done: makeNodeComponent("done"),

    // Metadata about props expected for PlasmicLinearCalendar2
    internalVariantProps: PlasmicLinearCalendar2__VariantProps,
    internalArgProps: PlasmicLinearCalendar2__ArgProps
  }
);

export default PlasmicLinearCalendar2;
/* prettier-ignore-end */
