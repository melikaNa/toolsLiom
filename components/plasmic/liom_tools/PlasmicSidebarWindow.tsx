/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: zOZqxY8nkGbN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSidebarWindow.module.css"; // plasmic-import: zOZqxY8nkGbN/css

import Icon152Icon from "./icons/PlasmicIcon__Icon152"; // plasmic-import: aN1J4LeWEqGr/icon
import Icon160Icon from "./icons/PlasmicIcon__Icon160"; // plasmic-import: VDxWJe2hoa-8/icon
import Icon161Icon from "./icons/PlasmicIcon__Icon161"; // plasmic-import: RaOYP4ifjT-P/icon
import Icon162Icon from "./icons/PlasmicIcon__Icon162"; // plasmic-import: ySm-fx5nxIne/icon
import Icon150Icon from "./icons/PlasmicIcon__Icon150"; // plasmic-import: hr_bpY54geRI/icon
import Icon158Icon from "./icons/PlasmicIcon__Icon158"; // plasmic-import: D1UPf1eCmdC-/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon157Icon from "./icons/PlasmicIcon__Icon157"; // plasmic-import: gVaaeTpQZv3W/icon

createPlasmicElementProxy;

export type PlasmicSidebarWindow__VariantMembers = {
  opening: "opening";
};
export type PlasmicSidebarWindow__VariantsArgs = {
  opening?: SingleBooleanChoiceArg<"opening">;
};
type VariantPropType = keyof PlasmicSidebarWindow__VariantsArgs;
export const PlasmicSidebarWindow__VariantProps = new Array<VariantPropType>(
  "opening"
);

export type PlasmicSidebarWindow__ArgsType = {
  open?: boolean;
  onOpenChange?: (val: string) => void;
  newChat?: (event: any) => void;
  load2?: boolean;
  onLoad2Change?: (val: string) => void;
  creadit?: (event: any) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSidebarWindow__ArgsType;
export const PlasmicSidebarWindow__ArgProps = new Array<ArgPropType>(
  "open",
  "onOpenChange",
  "newChat",
  "load2",
  "onLoad2Change",
  "creadit",
  "children",
  "slot"
);

export type PlasmicSidebarWindow__OverridesType = {
  root?: Flex__<"div">;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultSidebarWindowProps {
  open?: boolean;
  onOpenChange?: (val: string) => void;
  newChat?: (event: any) => void;
  load2?: boolean;
  onLoad2Change?: (val: string) => void;
  creadit?: (event: any) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  opening?: SingleBooleanChoiceArg<"opening">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSidebarWindow__RenderFunc(props: {
  variants: PlasmicSidebarWindow__VariantsArgs;
  args: PlasmicSidebarWindow__ArgsType;
  overrides: PlasmicSidebarWindow__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "opening",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.opening
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "load2",
        type: "writable",
        variableType: "boolean",

        valueProp: "load2",
        onChangeProp: "onLoad2Change"
      },
      {
        path: "buttonLiom.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        { [sty.rootopening]: hasVariant($state, "opening", "opening") }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rAiO, {
          [sty.freeBoxopening__rAiOrPBw2]: hasVariant(
            $state,
            "opening",
            "opening"
          )
        })}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__oukCe, {
            [sty.freeBoxopening__oukCErPBw2]: hasVariant(
              $state,
              "opening",
              "opening"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vxE81, {
              [sty.freeBoxopening__vxE81RPBw2]: hasVariant(
                $state,
                "opening",
                "opening"
              )
            })}
          >
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant($state, "opening", "opening") &&
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? Icon160Icon
                  : hasVariant(globalVariants, "screen", "mobileOnly")
                  ? Icon161Icon
                  : Icon152Icon
              }
              className={classNames(projectcss.all, sty.svg__dEi9A, {
                [sty.svgopening__dEi9ArPBw2]: hasVariant(
                  $state,
                  "opening",
                  "opening"
                )
              })}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vv4PZ,
                {
                  [sty.textopening__vv4PZrPBw2]: hasVariant(
                    $state,
                    "opening",
                    "opening"
                  )
                }
              )}
            >
              {hasVariant($state, "opening", "opening") &&
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "\u062a\u0627\u0631\u06cc\u062e\u0686\u0647 \u067e\u06cc\u0627\u0645 \u0647\u0627"
                : hasVariant($state, "opening", "opening")
                ? "\u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f"
                : "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0644\u06cc\u0648\u0645"}
            </div>
          </Stack__>
          <AntdTooltip
            className={classNames("__wab_instance", sty.tooltip__qA1, {
              [sty.tooltipopening__qA1RPBw2]: hasVariant(
                $state,
                "opening",
                "opening"
              )
            })}
            color={true ? "#0A0A0A80" : undefined}
            placement={"bottom"}
            titleText={"\u062a\u0627\u0631\u06cc\u062e\u0686\u0647"}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__pSqk)}
              onClick={async event => {
                const $steps = {};

                $steps["updateOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateOpen"] != null &&
                  typeof $steps["updateOpen"] === "object" &&
                  typeof $steps["updateOpen"].then === "function"
                ) {
                  $steps["updateOpen"] = await $steps["updateOpen"];
                }
              }}
            >
              <Icon162Icon
                className={classNames(projectcss.all, sty.svg___9J0Hc, {
                  [sty.svgopening___9J0HcrPBw2]: hasVariant(
                    $state,
                    "opening",
                    "opening"
                  )
                })}
                role={"img"}
              />
            </div>
          </AntdTooltip>
          <AntdTooltip
            className={classNames("__wab_instance", sty.tooltip__f3LzO, {
              [sty.tooltipopening__f3LzOrPBw2]: hasVariant(
                $state,
                "opening",
                "opening"
              )
            })}
            color={true ? "#0A0A0A80" : undefined}
            placement={"bottom"}
            titleText={"\u067e\u06cc\u0627\u0645 \u062c\u062f\u06cc\u062f"}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__bujP8)}
              onClick={args.newChat}
            >
              <Icon150Icon
                className={classNames(projectcss.all, sty.svg__jVg9Q)}
                role={"img"}
              />
            </div>
          </AntdTooltip>
        </Stack__>
        <ButtonLiom
          data-plasmic-name={"buttonLiom"}
          data-plasmic-override={overrides.buttonLiom}
          className={classNames("__wab_instance", sty.buttonLiom, {
            [sty.buttonLiomopening]: hasVariant($state, "opening", "opening")
          })}
          color={generateStateValueProp($state, ["buttonLiom", "color"])}
          load={generateStateValueProp($state, ["buttonLiom", "load"])}
          onClick={async event => {
            const $steps = {};

            $steps["runNewChat"] = true
              ? (() => {
                  const actionArgs = { eventRef: $props["newChat"] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runNewChat"] != null &&
              typeof $steps["runNewChat"] === "object" &&
              typeof $steps["runNewChat"].then === "function"
            ) {
              $steps["runNewChat"] = await $steps["runNewChat"];
            }
          }}
          onColorChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["buttonLiom", "color"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["buttonLiom", "load"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          showStartIcon={true}
          size={"compact"}
          startIcon={
            <Icon158Icon
              className={classNames(projectcss.all, sty.svg__b8LQi)}
              role={"img"}
            />
          }
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3HiXp
            )}
          >
            {"\u067e\u06cc\u0627\u0645 \u062c\u062f\u06cc\u062f"}
          </div>
        </ButtonLiom>
        <Embed
          data-plasmic-name={"embedHtml"}
          data-plasmic-override={overrides.embedHtml}
          className={classNames("__wab_instance", sty.embedHtml, {
            [sty.embedHtmlopening]: hasVariant($state, "opening", "opening")
          })}
          code={"<hr></hr>"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__d3RXr, {
          [sty.freeBoxopening__d3RXrrPBw2]: hasVariant(
            $state,
            "opening",
            "opening"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div className={classNames(projectcss.all, sty.freeBox__uKr2P)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x9YdS
                )}
              >
                {"Enter some text"}
              </div>
              <ButtonLiom
                className={classNames("__wab_instance", sty.buttonLiom__jpKrR)}
                color={["clear"]}
              />
            </div>
          ),
          value: args.children
        })}
        {(
          hasVariant($state, "opening", "opening")
            ? (() => {
                try {
                  return $state.load2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__y9T4, {
              [sty.freeBoxopening__y9T4RPBw2]: hasVariant(
                $state,
                "opening",
                "opening"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__voNiW,
                hasVariant($state, "opening", "opening")
                  ? "shimmer"
                  : undefined,
                {
                  [sty.freeBoxopening__voNiWrPBw2]: hasVariant(
                    $state,
                    "opening",
                    "opening"
                  )
                }
              )}
            />

            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__d8TTs,
                hasVariant($state, "opening", "opening")
                  ? "shimmer"
                  : undefined,
                {
                  [sty.freeBoxopening__d8TTsrPBw2]: hasVariant(
                    $state,
                    "opening",
                    "opening"
                  )
                }
              )}
            />

            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__ag2JC,
                hasVariant($state, "opening", "opening")
                  ? "shimmer"
                  : undefined,
                {
                  [sty.freeBoxopening__ag2JCrPBw2]: hasVariant(
                    $state,
                    "opening",
                    "opening"
                  )
                }
              )}
            />
          </Stack__>
        ) : null}
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dvAEo, {
          [sty.freeBoxopening__dvAEorPBw2]: hasVariant(
            $state,
            "opening",
            "opening"
          )
        })}
        onClick={args.creadit}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__w2Rqc, {
            [sty.freeBoxopening__w2RqcrPBw2]: hasVariant(
              $state,
              "opening",
              "opening"
            )
          })}
        >
          <Icon157Icon
            className={classNames(projectcss.all, sty.svg___1DBdT, {
              [sty.svgopening___1DBdTrPBw2]: hasVariant(
                $state,
                "opening",
                "opening"
              )
            })}
            role={"img"}
          />
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__v7Tmw,
            {
              [sty.textopening__v7TmwrPBw2]: hasVariant(
                $state,
                "opening",
                "opening"
              )
            }
          )}
        >
          {hasVariant($state, "opening", "opening")
            ? "\u0627\u0639\u062a\u0628\u0627\u0631 \u0634\u0645\u0627 :"
            : "Enter some text"}
        </div>
        {(hasVariant($state, "opening", "opening") ? true : false) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__fgeSi, {
              [sty.freeBoxopening__fgeSirPBw2]: hasVariant(
                $state,
                "opening",
                "opening"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents:
                "\u0627\u0639\u062a\u0628\u0627\u0631 \u0634\u0645\u0627 :",
              value: args.slot,
              className: classNames(sty.slotTargetSlot, {
                [sty.slotTargetSlotopening]: hasVariant(
                  $state,
                  "opening",
                  "opening"
                )
              })
            })}
          </div>
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "buttonLiom", "embedHtml"],
  buttonLiom: ["buttonLiom"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  buttonLiom: typeof ButtonLiom;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebarWindow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebarWindow__VariantsArgs;
    args?: PlasmicSidebarWindow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebarWindow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebarWindow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSidebarWindow__ArgProps,
          internalVariantPropNames: PlasmicSidebarWindow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSidebarWindow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebarWindow";
  } else {
    func.displayName = `PlasmicSidebarWindow.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebarWindow = Object.assign(
  // Top-level PlasmicSidebarWindow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buttonLiom: makeNodeComponent("buttonLiom"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicSidebarWindow
    internalVariantProps: PlasmicSidebarWindow__VariantProps,
    internalArgProps: PlasmicSidebarWindow__ArgProps
  }
);

export default PlasmicSidebarWindow;
/* prettier-ignore-end */
