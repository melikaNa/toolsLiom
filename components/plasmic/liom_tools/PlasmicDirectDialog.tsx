/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: GJ5eKNtJs574

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog3 from "../../Dialog3"; // plasmic-import: UHX61U1xmtjA/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import Subscription3 from "../../Subscription3"; // plasmic-import: EB9cfatW1AEN/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicDirectDialog.module.css"; // plasmic-import: GJ5eKNtJs574/css

import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: d7z2iEn8tiSD/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 7vleC7ixE4k4/icon

createPlasmicElementProxy;

export type PlasmicDirectDialog__VariantMembers = {};
export type PlasmicDirectDialog__VariantsArgs = {};
type VariantPropType = keyof PlasmicDirectDialog__VariantsArgs;
export const PlasmicDirectDialog__VariantProps = new Array<VariantPropType>();

export type PlasmicDirectDialog__ArgsType = {
  type?: string;
  token?: string;
  desc?: string;
  redirectUrl?: string;
  onSelectShopChange?: (val: string) => void;
  open?: boolean;
  onOpenChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicDirectDialog__ArgsType;
export const PlasmicDirectDialog__ArgProps = new Array<ArgPropType>(
  "type",
  "token",
  "desc",
  "redirectUrl",
  "onSelectShopChange",
  "open",
  "onOpenChange"
);

export type PlasmicDirectDialog__OverridesType = {
  root?: Flex__<"div">;
  dialog?: Flex__<typeof Dialog3>;
  shopDialog?: Flex__<typeof ApiRequest>;
  img?: Flex__<typeof PlasmicImg__>;
  input4?: Flex__<typeof AntdInput>;
  button12?: Flex__<typeof ButtonLiom>;
  button8?: Flex__<typeof ButtonLiom>;
  p?: Flex__<"p">;
  dialog2?: Flex__<typeof Dialog3>;
  subscription3?: Flex__<typeof Subscription3>;
  button9?: Flex__<typeof ButtonLiom>;
};

export interface DefaultDirectDialogProps {
  type?: string;
  token?: string;
  desc?: string;
  redirectUrl?: string;
  onSelectShopChange?: (val: string) => void;
  open?: boolean;
  onOpenChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDirectDialog__RenderFunc(props: {
  variants: PlasmicDirectDialog__VariantsArgs;
  args: PlasmicDirectDialog__ArgsType;
  overrides: PlasmicDirectDialog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          type: "irregular",
          token:
            "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYmFiYXJrYXRBcHAiLCJpZCI6MjEzNTN9.M8r0SsjS1pvDgQzyvstwPCNgrgZkGFsXTE2vZy-StqlcViL3Km9aM1iCRcAhHq6l5QXmF1rZiAiG4lUqTES2Lw",
          desc: "\u0628\u0631\u0627\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0648 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631\u060c \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u062a\u0647\u06cc\u0647 \u0646\u0645\u0627\u06cc\u06cc\u062f."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectShop",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shopDialog.data.result.shopList.length == 1
                ? $state.shopDialog.data.result.shopList[0]
                : $state.shopDialog.data.result.shopList.find(
                    item => item.selected == 1
                  );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })(),

        onChangeProp: "onSelectShopChange"
      },
      {
        path: "dialog.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "shopDialog.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopDialog.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog2.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription3[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription3[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription3[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription3[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "button9.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "topShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shopDialog.data.result.shopList.length == 1
                ? $state.shopDialog.data.result.shopList[0]
                : $state.shopDialog.data.result.shopList.find(
                    item => item.selected == 1
                  );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root
      )}
    >
      <Dialog3
        data-plasmic-name={"dialog"}
        data-plasmic-override={overrides.dialog}
        className={classNames("__wab_instance", sty.dialog)}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        opendialog={generateStateValueProp($state, ["dialog", "opendialog"])}
      >
        <ApiRequest
          data-plasmic-name={"shopDialog"}
          data-plasmic-override={overrides.shopDialog}
          body={(() => {
            try {
              return {
                type: $props.type,
                authorization: $props.token
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.shopDialog)}
          errorDisplay={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mCyPz
              )}
            >
              {"Error fetching data"}
            </div>
          }
          loadingDisplay={
            <div className={classNames(projectcss.all, sty.freeBox___4Z7L6)}>
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__i2ZfI)}
                role={"img"}
              />
            </div>
          }
          method={"PUT"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["shopDialog", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["shopDialog", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["shopDialog", "data"]).apply(
              null,
              eventArgs
            );
          }}
          url={"https://n8n.staas.ir/webhook/rest/shop/list"}
        >
          <div className={classNames(projectcss.all, sty.freeBox__y0Qik)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7M4Vv)}
              dir={"rtl"}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nNvcc)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"15px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_tools/images/image36.svg",
                    fullWidth: 22,
                    fullHeight: 20,
                    aspectRatio: 1.1
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xuCyc
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.desc;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nLsG
                )}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return (
                          " اشتراک " +
                          $state.shopDialog.data.result.shopList[0].name
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f8Fql
                )}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return $state.shopDialog.data.result.shopList[0].hint;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1D3Kf)}
              dir={"rtl"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__a7L8L)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qaKgd)}
                >
                  {(() => {
                    try {
                      return $state.topShop.topBadge;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ofSU)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__olHnh
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.topShop.topBadge;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mSv1U)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cy5D7
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return $state.shopDialog.data.result.shopList
                                .length == 1
                                ? $state.topShop.name
                                : $state.topShop.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oJ3Rd)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pI9W3
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.topShop.fullPrice.toLocaleString();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o6ZSf
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.topShop.price.toLocaleString() +
                                "  تومان "
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    {(() => {
                      try {
                        return $state.topShop.badge;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__iQt1Y
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wAa5P
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.topShop.badge;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ivHqX
                    )}
                  >
                    {
                      "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                    }
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__exxwy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iEtP)}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: false,
                          autoFocus: false,
                          bordered: false,
                          className: classNames("__wab_instance", sty.input4),
                          disabled: false,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input4", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                          prefix: (
                            <Icon10Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yEr11
                              )}
                              role={"img"}
                            />
                          ),

                          readOnly: false,
                          size: "small",
                          suffix: null,
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xEbM6
                        )}
                      />
                    </div>
                    <ButtonLiom
                      data-plasmic-name={"button12"}
                      data-plasmic-override={overrides.button12}
                      className={classNames("__wab_instance", sty.button12)}
                      color={generateStateValueProp($state, [
                        "button12",
                        "color"
                      ])}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button12",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___86DEd
                        )}
                      >
                        {"\u062a\u0627\u06cc\u06cc\u062f"}
                      </div>
                    </ButtonLiom>
                  </Stack__>
                  <ButtonLiom
                    data-plasmic-name={"button8"}
                    data-plasmic-override={overrides.button8}
                    className={classNames("__wab_instance", sty.button8)}
                    color={generateStateValueProp($state, ["button8", "color"])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__ozmpK)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading3"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectShop"]
                              },
                              operation: 0,
                              value: $state.topShop
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading3"] != null &&
                        typeof $steps["updateLoading3"] === "object" &&
                        typeof $steps["updateLoading3"].then === "function"
                      ) {
                        $steps["updateLoading3"] = await $steps[
                          "updateLoading3"
                        ];
                      }

                      $steps["updateLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading"] != null &&
                        typeof $steps["updateLoading"] === "object" &&
                        typeof $steps["updateLoading"].then === "function"
                      ) {
                        $steps["updateLoading"] = await $steps["updateLoading"];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/rest/shop/list",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      id: $state.topShop.id,
                                      offCode: "",
                                      redirectUrl: $props.redirectUrl,
                                      authorization: $props.token
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["updateDialogOpendialog2"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $steps.invokeGlobalAction?.data?.result != false
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return $steps.invokeGlobalAction.data
                                      .result;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateDialogOpendialog2"] != null &&
                        typeof $steps["updateDialogOpendialog2"] === "object" &&
                        typeof $steps["updateDialogOpendialog2"].then ===
                          "function"
                      ) {
                        $steps["updateDialogOpendialog2"] = await $steps[
                          "updateDialogOpendialog2"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction?.data?.success == false ||
                        $steps.invokeGlobalAction?.data?.result == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button8", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    unnamedVariant={(() => {
                      try {
                        return $state.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Cok
                      )}
                    >
                      {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                    </div>
                  </ButtonLiom>
                  {(() => {
                    try {
                      return $state.shopDialog.data.result.shopList.length > 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <p
                      data-plasmic-name={"p"}
                      data-plasmic-override={overrides.p}
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDialog2Opendialog"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog2", "opendialog"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialog2Opendialog"] != null &&
                          typeof $steps["updateDialog2Opendialog"] ===
                            "object" &&
                          typeof $steps["updateDialog2Opendialog"].then ===
                            "function"
                        ) {
                          $steps["updateDialog2Opendialog"] = await $steps[
                            "updateDialog2Opendialog"
                          ];
                        }
                      }}
                    >
                      {
                        "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                      }
                    </p>
                  ) : null}
                </Stack__>
              </div>
            </Stack__>
          </div>
          <Dialog3
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            className={classNames("__wab_instance", sty.dialog2)}
            onOpendialogChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "dialog2",
                "opendialog"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            opendialog={generateStateValueProp($state, [
              "dialog2",
              "opendialog"
            ])}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__abnMs)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8UgJd)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.shopDialog.data.result.shopList;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.subscription3
                      ),
                      clickitem: generateStateValueProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "clickitem"
                      ]),
                      discount: generateStateValueProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "discount"
                      ]),
                      fullprice: generateStateValueProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "fullprice"
                      ]),
                      key: currentIndex,
                      onClick: async event => {
                        const $steps = {};

                        $steps["updateSelectShop"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectShop"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectShop"] != null &&
                          typeof $steps["updateSelectShop"] === "object" &&
                          typeof $steps["updateSelectShop"].then === "function"
                        ) {
                          $steps["updateSelectShop"] = await $steps[
                            "updateSelectShop"
                          ];
                        }
                      },
                      onClickitemChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "clickitem"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onDiscountChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "discount"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onFullpriceChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "fullprice"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onPriceChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "price"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onTitleChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "subscription3",
                          __plasmic_idx_0,
                          "title"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      price: generateStateValueProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "price"
                      ]),
                      title: generateStateValueProp($state, [
                        "subscription3",
                        __plasmic_idx_0,
                        "title"
                      ])
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "subscription3[].clickitem",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.id == $state.selectShop.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                        },
                        {
                          name: "subscription3[].title",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        },
                        {
                          name: "subscription3[].price",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.price.toLocaleString();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 120000;
                                }
                                throw e;
                              }
                            })()
                        },
                        {
                          name: "subscription3[].discount",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.badge;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                        },
                        {
                          name: "subscription3[].fullprice",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return currentItem.fullPrice.toLocaleString();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return 0;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <Subscription3
                        data-plasmic-name={"subscription3"}
                        data-plasmic-override={overrides.subscription3}
                        {...child$Props}
                      >
                        {(() => {
                          try {
                            return currentItem.topBadge ? true : false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ynxsp
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bpcQi
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.topBadge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\ud83c\udf39 \u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646 \ud83c\udf39";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                      </Subscription3>
                    );
                  })();
                })}
              </Stack__>
              <ButtonLiom
                data-plasmic-name={"button9"}
                data-plasmic-override={overrides.button9}
                className={classNames("__wab_instance", sty.button9)}
                color={generateStateValueProp($state, ["button9", "color"])}
                endIcon={
                  <Icon12Icon
                    className={classNames(projectcss.all, sty.svg__dAe3B)}
                    role={"img"}
                  />
                }
                isDisabled={(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoading"] != null &&
                    typeof $steps["updateLoading"] === "object" &&
                    typeof $steps["updateLoading"].then === "function"
                  ) {
                    $steps["updateLoading"] = await $steps["updateLoading"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.staas.ir/webhook/rest/shop/list",
                            undefined,
                            (() => {
                              try {
                                return {
                                  id: $state.selectShop.id,
                                  offCode: "",
                                  redirectUrl: $props.redirectUrl,
                                  authorization: $props.token
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateDialogOpendialog2"] =
                    $steps.invokeGlobalAction?.data?.success == true &&
                    $steps.invokeGlobalAction?.data?.result != false
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              try {
                                return $steps.invokeGlobalAction.data.result;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateDialogOpendialog2"] != null &&
                    typeof $steps["updateDialogOpendialog2"] === "object" &&
                    typeof $steps["updateDialogOpendialog2"].then === "function"
                  ) {
                    $steps["updateDialogOpendialog2"] = await $steps[
                      "updateDialogOpendialog2"
                    ];
                  }

                  $steps["invokeGlobalAction2"] =
                    $steps.invokeGlobalAction?.data?.success == false ||
                    $steps.invokeGlobalAction?.data?.result == false
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                              "bottom-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["updateLoading2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoading2"] != null &&
                    typeof $steps["updateLoading2"] === "object" &&
                    typeof $steps["updateLoading2"].then === "function"
                  ) {
                    $steps["updateLoading2"] = await $steps["updateLoading2"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button9", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                unnamedVariant={(() => {
                  try {
                    return $state.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yMIip
                  )}
                >
                  {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                </div>
              </ButtonLiom>
            </Stack__>
          </Dialog3>
        </ApiRequest>
      </Dialog3>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dialog",
    "shopDialog",
    "img",
    "input4",
    "button12",
    "button8",
    "p",
    "dialog2",
    "subscription3",
    "button9"
  ],
  dialog: [
    "dialog",
    "shopDialog",
    "img",
    "input4",
    "button12",
    "button8",
    "p",
    "dialog2",
    "subscription3",
    "button9"
  ],
  shopDialog: [
    "shopDialog",
    "img",
    "input4",
    "button12",
    "button8",
    "p",
    "dialog2",
    "subscription3",
    "button9"
  ],
  img: ["img"],
  input4: ["input4"],
  button12: ["button12"],
  button8: ["button8"],
  p: ["p"],
  dialog2: ["dialog2", "subscription3", "button9"],
  subscription3: ["subscription3"],
  button9: ["button9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dialog: typeof Dialog3;
  shopDialog: typeof ApiRequest;
  img: typeof PlasmicImg__;
  input4: typeof AntdInput;
  button12: typeof ButtonLiom;
  button8: typeof ButtonLiom;
  p: "p";
  dialog2: typeof Dialog3;
  subscription3: typeof Subscription3;
  button9: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDirectDialog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDirectDialog__VariantsArgs;
    args?: PlasmicDirectDialog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDirectDialog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDirectDialog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDirectDialog__ArgProps,
          internalVariantPropNames: PlasmicDirectDialog__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDirectDialog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDirectDialog";
  } else {
    func.displayName = `PlasmicDirectDialog.${nodeName}`;
  }
  return func;
}

export const PlasmicDirectDialog = Object.assign(
  // Top-level PlasmicDirectDialog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dialog: makeNodeComponent("dialog"),
    shopDialog: makeNodeComponent("shopDialog"),
    img: makeNodeComponent("img"),
    input4: makeNodeComponent("input4"),
    button12: makeNodeComponent("button12"),
    button8: makeNodeComponent("button8"),
    p: makeNodeComponent("p"),
    dialog2: makeNodeComponent("dialog2"),
    subscription3: makeNodeComponent("subscription3"),
    button9: makeNodeComponent("button9"),

    // Metadata about props expected for PlasmicDirectDialog
    internalVariantProps: PlasmicDirectDialog__VariantProps,
    internalArgProps: PlasmicDirectDialog__ArgProps
  }
);

export default PlasmicDirectDialog;
/* prettier-ignore-end */
