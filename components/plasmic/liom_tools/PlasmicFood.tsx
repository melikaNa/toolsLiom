// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: litPy0ZRN-AN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Foodbox from "../../Foodbox"; // plasmic-import: -4EnW7-DgNW3/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Input } from "@/fragment/components/input"; // plasmic-import: 31QElsfd4yPt/codeComponent
import Tick from "../../Tick"; // plasmic-import: 5t0HYJh8NX6B/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { AntdRangeSlider } from "@plasmicpkgs/antd5/skinny/registerSlider";
import { rangeSliderHelpers as AntdRangeSlider_Helpers } from "@plasmicpkgs/antd5/skinny/registerSlider";
import { AntdSliderMark } from "@plasmicpkgs/antd5/skinny/registerSlider";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import SlideinModal from "../../SlideinModal"; // plasmic-import: PMpcD3nAGzFX/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsyg4Uf6WCaaLe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YG4uf6WCaaLe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicFood.module.css"; // plasmic-import: litPy0ZRN-AN/css

import Icon60Icon from "./icons/PlasmicIcon__Icon60"; // plasmic-import: gVweAYadypar/icon
import Icon61Icon from "./icons/PlasmicIcon__Icon61"; // plasmic-import: dCW25PFsrxeV/icon
import Icon62Icon from "./icons/PlasmicIcon__Icon62"; // plasmic-import: 5-QLWhppKKrD/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: eBtOOvv7aooF/icon
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: uaU_99qpovqU/icon
import Icon67Icon from "./icons/PlasmicIcon__Icon67"; // plasmic-import: Jp7ZPp4P-Iir/icon
import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: nUOPjtqNxpTk/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: WIXMGnqTFn8X/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: svqpWWNnaQ7C/icon
import Icon73Icon from "./icons/PlasmicIcon__Icon73"; // plasmic-import: SPlHTy1d1DM6/icon

import __lib_dayjs from "dayjs";

createPlasmicElementProxy;

export type PlasmicFood__VariantMembers = {};
export type PlasmicFood__VariantsArgs = {};
type VariantPropType = keyof PlasmicFood__VariantsArgs;
export const PlasmicFood__VariantProps = new Array<VariantPropType>();

export type PlasmicFood__ArgsType = {};
type ArgPropType = keyof PlasmicFood__ArgsType;
export const PlasmicFood__ArgProps = new Array<ArgPropType>();

export type PlasmicFood__OverridesType = {
  root?: Flex__<"div">;
  foodbox?: Flex__<typeof Foodbox>;
  modal?: Flex__<typeof AntdModal>;
  input?: Flex__<typeof Input>;
  tick?: Flex__<typeof Tick>;
  button4?: Flex__<typeof ButtonLiom>;
  modal2?: Flex__<typeof AntdModal>;
  rangeSlider?: Flex__<typeof AntdRangeSlider>;
  sliderMark?: Flex__<typeof AntdSliderMark>;
  input2?: Flex__<typeof Input>;
  input3?: Flex__<typeof Input>;
  kabed?: Flex__<typeof AntdRadioGroup>;
  diabet?: Flex__<typeof AntdRadioGroup>;
  button3?: Flex__<typeof ButtonLiom>;
  button5?: Flex__<typeof ButtonLiom>;
  button6?: Flex__<typeof ButtonLiom>;
  button2?: Flex__<typeof ButtonLiom>;
  slideinModal?: Flex__<typeof SlideinModal>;
  input4?: Flex__<typeof Input>;
  button?: Flex__<typeof ButtonLiom>;
  weeknow?: Flex__<typeof ApiRequest>;
  previousWeek?: Flex__<typeof ApiRequest>;
  foodinfo?: Flex__<typeof ApiRequest>;
  modal3?: Flex__<typeof AntdModal>;
  favicon?: Flex__<typeof Embed>;
};

export interface DefaultFoodProps {}

const $$ = {
  dayjs: __lib_dayjs
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFood__RenderFunc(props: {
  variants: PlasmicFood__VariantsArgs;
  args: PlasmicFood__ArgsType;
  overrides: PlasmicFood__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "tick[].click",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("ferstFoodTrack") == null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "rangeSlider.min",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("min", AntdRangeSlider_Helpers)
      },
      {
        path: "rangeSlider.max",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.heghit;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 161;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("max", AntdRangeSlider_Helpers)
      },
      {
        path: "heghit",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 168
      },
      {
        path: "withe",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 80
      },
      {
        path: "slideinModal.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "w",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let arr = [];
                for (let i = 50; i <= 200; i++) {
                  arr.push({
                    value: i,
                    label: `${i} kg`
                  });
                }
                return arr;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "weight",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 80
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.age;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.withe;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "harmfulFood",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: 1,
            icon: "https://www.svgrepo.com/show/282188/fast-food-hamburguer.svg",
            title: "\u0641\u0633\u062a \u0641\u0648\u062f",
            text: "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0648\u0632\u0646 + \u0686\u0631\u0628\u06cc\u200c\u0647\u0627\u06cc \u0646\u0627\u0633\u0627\u0644\u0645 \u0628\u0627\u0644\u0627",
            score: 8,
            description:
              "\u0634\u0627\u0645\u0644 \u0647\u0645\u0628\u0631\u06af\u0631\u060c \u067e\u06cc\u062a\u0632\u0627 \u0648 \u0633\u06cc\u0628\u200c\u0632\u0645\u06cc\u0646\u06cc \u0633\u0631\u062e\u200c\u06a9\u0631\u062f\u0647 \u0627\u0633\u062a \u06a9\u0647 \u067e\u0631 \u0627\u0632 \u0686\u0631\u0628\u06cc\u200c\u0647\u0627\u06cc \u0646\u0627\u0633\u0627\u0644\u0645 \u0648 \u06a9\u0627\u0644\u0631\u06cc \u0628\u0627\u0644\u0627\u0633\u062a. \u0628\u0647\u200c\u0633\u0631\u0639\u062a \u0648\u0632\u0646 \u0631\u0648 \u0628\u0627\u0644\u0627 \u0645\u06cc\u200c\u0628\u0631\u0647 \u0648 \u0628\u0627 \u06a9\u0644\u0633\u062a\u0631\u0648\u0644 \u0628\u0627\u0644\u0627 \u0647\u0645\u0631\u0627\u0647\u0647. \u0627\u06af\u0647 \u0639\u0627\u0634\u0642 \u0637\u0639\u0645\u0634 \u0647\u0633\u062a\u06cc\u060c \u0648\u0644\u06cc \u0645\u0631\u0627\u0642\u0628 \u0628\u0627\u0634 \u06a9\u0647 \u0632\u06cc\u0627\u062f\u0647\u200c\u0631\u0648\u06cc \u0646\u06a9\u0646\u06cc!"
          },
          {
            id: 2,
            icon: "https://www.svgrepo.com/show/398295/shortcake.svg",
            title: "\u0634\u06cc\u0631\u06cc\u0646\u06cc",
            text: "\u0634\u06a9\u0631 \u0628\u0627\u0644\u0627 + \u0686\u0627\u0642\u06cc \u0633\u0631\u06cc\u0639",
            score: 7,
            description:
              "\u0634\u0627\u0645\u0644 \u0627\u0646\u0648\u0627\u0639 \u06a9\u06cc\u06a9\u060c \u0634\u06cc\u0631\u06cc\u0646\u06cc \u0648 \u0628\u06cc\u0633\u06a9\u0648\u06cc\u06cc\u062a \u06a9\u0647 \u067e\u0631 \u0627\u0632 \u0634\u06a9\u0631 \u0648 \u06a9\u0627\u0644\u0631\u06cc\u0647. \u062e\u0648\u0631\u062f\u0646\u0634 \u0644\u0630\u062a\u200c\u0628\u062e\u0634\u0647\u060c \u0648\u0644\u06cc \u0647\u0645\u06cc\u0646 \u06a9\u0647 \u0627\u0632 \u062f\u0647\u0646 \u067e\u0627\u06cc\u06cc\u0646 \u0628\u0631\u0647\u060c \u0645\u06cc\u200c\u0641\u0647\u0645\u06cc \u0642\u0646\u062f \u062e\u0648\u0646\u062a \u0633\u0631 \u0628\u0647 \u0641\u0644\u06a9 \u06a9\u0634\u06cc\u062f\u0647!"
          },
          {
            id: 3,
            icon: "https://www.svgrepo.com/show/276546/chips-snack.svg",
            title: "\u0647\u0644\u0647\u200c\u0647\u0648\u0644\u0647",
            text: "\u06a9\u0645\u200c\u0627\u0631\u0632\u0634 \u063a\u0630\u0627\u06cc\u06cc + \u0639\u0627\u062f\u062a \u0646\u0627\u0633\u0627\u0644\u0645",
            score: 6,
            description:
              "\u0634\u0627\u0645\u0644 \u0627\u0646\u0648\u0627\u0639 \u0686\u06cc\u067e\u0633\u060c \u067e\u0641\u06a9 \u0648 \u062e\u0648\u0631\u0627\u06a9\u06cc\u200c\u0647\u0627\u06cc \u0633\u0628\u06a9 \u06a9\u0647 \u0686\u06cc\u0632\u06cc \u062c\u0632 \u0639\u0627\u062f\u062a \u0628\u062f \u0628\u0631\u0627\u062a \u0646\u0645\u06cc\u200c\u0645\u0648\u0646\u0647. \u0627\u0631\u0632\u0634 \u063a\u0630\u0627\u06cc\u06cc \u0646\u062f\u0627\u0631\u0647 \u0648 \u062f\u0631 \u062f\u0631\u0627\u0632\u0645\u062f\u062a \u0645\u0645\u06a9\u0646\u0647 \u0628\u0631\u0627\u062a \u0636\u0631\u0631 \u0647\u0645 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647."
          },
          {
            id: 4,
            icon: "https://www.svgrepo.com/show/198547/soft-drink-soda.svg",
            title:
              "\u0646\u0648\u0634\u06cc\u062f\u0646\u06cc \u06af\u0627\u0632\u062f\u0627\u0631",
            text: "\u0634\u06a9\u0631 \u0632\u06cc\u0627\u062f + \u0622\u0633\u06cc\u0628 \u0628\u0647 \u062f\u0646\u062f\u0627\u0646",
            score: 9,
            description:
              "\u0634\u0627\u0645\u0644 \u0646\u0648\u0634\u0627\u0628\u0647\u200c\u0647\u0627 \u0648 \u0633\u0627\u06cc\u0631 \u0646\u0648\u0634\u06cc\u062f\u0646\u06cc\u200c\u0647\u0627\u06cc \u0634\u06cc\u0631\u06cc\u0646 \u06af\u0627\u0632\u062f\u0627\u0631. \u0634\u06a9\u0631 \u0632\u06cc\u0627\u062f\u06cc \u062f\u0627\u0631\u0646 \u06a9\u0647 \u0639\u0644\u0627\u0648\u0647 \u0628\u0631 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0648\u0632\u0646\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u0646 \u062f\u0646\u062f\u0648\u0646\u0627\u062a \u0631\u0648 \u0647\u0645 \u0646\u0627\u0628\u0648\u062f \u06a9\u0646\u0646. \u062e\u0646\u06a9 \u0648 \u062f\u0644\u0686\u0633\u0628\u060c \u0648\u0644\u06cc \u0636\u0631\u0631 \u0647\u0645 \u062f\u0627\u0631\u0647!"
          },
          {
            id: 5,
            icon: "https://www.svgrepo.com/show/282222/sausage-meat.svg",
            title:
              "\u0633\u0648\u0633\u06cc\u0633 \u0648 \u06a9\u0627\u0644\u0628\u0627\u0633",
            text: "\u0645\u0648\u0627\u062f \u0646\u06af\u0647\u062f\u0627\u0631\u0646\u062f\u0647 + \u0686\u0631\u0628\u06cc \u0628\u0627\u0644\u0627",
            score: 7,
            description:
              "\u0627\u0646\u0648\u0627\u0639 \u0641\u0631\u0622\u0648\u0631\u062f\u0647\u200c\u0647\u0627\u06cc \u06af\u0648\u0634\u062a\u06cc \u0641\u0631\u0627\u0648\u0631\u06cc\u200c\u0634\u062f\u0647 \u0645\u062b\u0644 \u0633\u0648\u0633\u06cc\u0633\u060c \u06a9\u0627\u0644\u0628\u0627\u0633 \u0648 \u0698\u0627\u0645\u0628\u0648\u0646\u060c \u06a9\u0647 \u067e\u0631 \u0627\u0632 \u0645\u0648\u0627\u062f \u0646\u06af\u0647\u062f\u0627\u0631\u0646\u062f\u0647 \u0648 \u0686\u0631\u0628\u06cc \u0628\u0627\u0644\u0627 \u0647\u0633\u062a\u0646. \u062e\u0648\u0634\u0645\u0632\u06af\u06cc\u200c\u0634\u0648\u0646 \u06cc\u0647 \u0637\u0631\u0641\u060c \u0645\u0636\u0631\u0627\u062a\u0634\u0648\u0646 \u0647\u0645 \u06cc\u0647 \u0637\u0631\u0641!"
          },
          {
            id: 6,
            icon: "https://www.svgrepo.com/show/384970/chocolate-bar-candy-dairymilk-sweet-dessert.svg",
            title:
              "\u0622\u0628\u200c\u0646\u0628\u0627\u062a \u0648 \u0634\u06a9\u0644\u0627\u062a",
            text: "\u0634\u06a9\u0631 \u0628\u0627\u0644\u0627 + \u067e\u0648\u0633\u06cc\u062f\u06af\u06cc \u062f\u0646\u062f\u0627\u0646",
            score: 7,
            description:
              "\u0634\u0627\u0645\u0644 \u0627\u0646\u0648\u0627\u0639 \u0634\u06a9\u0644\u0627\u062a\u060c \u0622\u0628\u200c\u0646\u0628\u0627\u062a \u0648 \u0634\u06cc\u0631\u06cc\u0646\u06cc\u200c\u0647\u0627\u06cc \u06a9\u0648\u0686\u06cc\u06a9 \u067e\u0631 \u0627\u0632 \u0634\u06a9\u0631. \u0644\u0630\u062a \u062e\u0648\u0631\u062f\u0646\u0634 \u06cc\u0647 \u0686\u06cc\u0632\u0647\u060c \u067e\u0648\u0633\u06cc\u062f\u06af\u06cc \u062f\u0646\u062f\u0648\u0646 \u0648 \u06a9\u0627\u0644\u0631\u06cc \u0628\u0627\u0644\u0627 \u06cc\u0647 \u0686\u06cc\u0632 \u062f\u06cc\u06af\u0647!"
          },
          {
            id: 7,
            icon: "https://www.svgrepo.com/show/149193/ice-cream.svg",
            title: "\u0628\u0633\u062a\u0646\u06cc",
            text: "\u0686\u0631\u0628\u06cc \u0648 \u0634\u06a9\u0631 \u0628\u0627\u0644\u0627 + \u0627\u0641\u0632\u0627\u06cc\u0634 \u0648\u0632\u0646",
            score: 8,
            description:
              "\u0634\u0627\u0645\u0644 \u0628\u0633\u062a\u0646\u06cc\u200c\u0647\u0627\u06cc \u0633\u0646\u062a\u06cc \u0648 \u0635\u0646\u0639\u062a\u06cc \u06a9\u0647 \u0647\u0645 \u0634\u06a9\u0631 \u0632\u06cc\u0627\u062f\u06cc \u062f\u0627\u0631\u0646 \u0648 \u0647\u0645 \u0686\u0631\u0628\u06cc \u0628\u0627\u0644\u0627. \u0627\u06af\u0647 \u062f\u0648\u0633\u062a \u062f\u0627\u0631\u06cc \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648 \u0641\u0631\u06cc\u0632\u0631 \u0628\u0627\u0634\u0647\u060c \u062d\u0648\u0627\u0633\u062a \u0628\u0647 \u06a9\u0627\u0644\u0631\u06cc\u200c\u0647\u0627\u06cc \u0627\u0636\u0627\u0641\u06cc \u0647\u0645 \u0628\u0627\u0634\u0647."
          },
          {
            id: 8,
            icon: "https://www.svgrepo.com/show/384977/french-fries-fastfood-food-emoj-symbol.svg",
            title:
              "\u0633\u06cc\u0628\u200c\u0632\u0645\u06cc\u0646\u06cc \u0633\u0631\u062e\u200c\u06a9\u0631\u062f\u0647",
            text: "\u0686\u0631\u0628\u06cc \u062a\u0631\u0627\u0646\u0633 + \u0627\u0641\u0632\u0627\u06cc\u0634 \u06a9\u0644\u0633\u062a\u0631\u0648\u0644",
            score: 8,
            description:
              "\u067e\u0631 \u0627\u0632 \u0686\u0631\u0628\u06cc \u062a\u0631\u0627\u0646\u0633 \u0648 \u0637\u0639\u0645\u200c\u062f\u0647\u0646\u062f\u0647\u200c\u0647\u0627\u06cc \u0645\u0635\u0646\u0648\u0639\u06cc. \u0639\u0627\u0634\u0642\u0634 \u0645\u06cc\u200c\u0634\u06cc\u060c \u0648\u0644\u06cc \u0628\u0627\u06cc\u062f \u0628\u062f\u0646\u062a \u0631\u0648 \u0622\u0645\u0627\u062f\u0647 \u06a9\u0646\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0644\u0633\u062a\u0631\u0648\u0644 \u0628\u0627\u0644\u0627 \u0648 \u0627\u062d\u062a\u0645\u0627\u0644 \u0627\u0636\u0627\u0641\u0647 \u0648\u0632\u0646."
          },
          {
            id: 9,
            icon: "https://www.svgrepo.com/show/425866/bread.svg",
            title: "\u0646\u0627\u0646 \u0633\u0641\u06cc\u062f",
            text: "\u06a9\u0631\u0628\u0648\u0647\u06cc\u062f\u0631\u0627\u062a \u0633\u0627\u062f\u0647 + \u0627\u0641\u0632\u0627\u06cc\u0634 \u0642\u0646\u062f \u062e\u0648\u0646",
            score: 5,
            description:
              "\u0634\u0627\u0645\u0644 \u0646\u0648\u0646\u200c\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u0632 \u0622\u0631\u062f \u0633\u0641\u06cc\u062f \u062f\u0631\u0633\u062a \u0634\u062f\u0646\u061b \u0633\u0631\u06cc\u0639 \u0642\u0646\u062f \u062e\u0648\u0646 \u0631\u0648 \u0628\u0627\u0644\u0627 \u0645\u06cc\u200c\u0628\u0631\u0647 \u0648\u0644\u06cc \u0627\u0631\u0632\u0634 \u063a\u0630\u0627\u06cc\u06cc \u0686\u0646\u062f\u0627\u0646\u06cc \u0646\u062f\u0627\u0631\u0647. \u0645\u0635\u0631\u0641 \u0645\u062a\u0639\u0627\u062f\u0644\u0634 \u062e\u0648\u0628\u0647\u060c \u0648\u0644\u06cc \u0632\u06cc\u0627\u062f\u0647\u200c\u0631\u0648\u06cc \u0646\u0647."
          },
          {
            id: 10,
            icon: "https://www.svgrepo.com/show/122497/energy-drink.svg",
            title:
              "\u0646\u0648\u0634\u06cc\u062f\u0646\u06cc \u0627\u0646\u0631\u0698\u06cc\u200c\u0632\u0627",
            text: "\u0634\u06a9\u0631 \u0628\u0627\u0644\u0627 + \u062a\u062d\u0631\u06cc\u06a9\u200c\u067e\u0630\u06cc\u0631\u06cc \u0639\u0635\u0628\u06cc",
            score: 9,
            description:
              "\u0634\u0627\u0645\u0644 \u0631\u062f\u0628\u0648\u0644\u060c \u0645\u0627\u0646\u0633\u062a\u0631 \u0648 \u0646\u0648\u0634\u06cc\u062f\u0646\u06cc\u200c\u0647\u0627\u06cc \u062f\u06cc\u06af\u0647 \u06a9\u0647 \u0634\u06a9\u0631 \u0628\u0627\u0644\u0627 \u0648 \u06a9\u0627\u0641\u0626\u06cc\u0646 \u0632\u06cc\u0627\u062f\u06cc \u062f\u0627\u0631\u0646. \u0645\u0645\u06a9\u0646\u0647 \u0628\u0647\u062a \u0627\u0646\u0631\u0698\u06cc \u0628\u062f\u0646\u060c \u0648\u0644\u06cc \u062a\u062d\u0631\u06cc\u06a9\u200c\u067e\u0630\u06cc\u0631\u06cc \u0648 \u0628\u06cc\u200c\u0642\u0631\u0627\u0631\u06cc \u0647\u0645 \u0628\u0647\u200c\u062f\u0646\u0628\u0627\u0644\u0634 \u062f\u0627\u0631\u0647."
          },
          {
            id: 12,
            icon: "https://www.svgrepo.com/show/425852/doughnut.svg",
            title: "\u062f\u0648\u0646\u0627\u062a",
            text: "\u0686\u0631\u0628\u06cc \u0648 \u0634\u06a9\u0631 \u0628\u0627\u0644\u0627 + \u0627\u0641\u0632\u0627\u06cc\u0634 \u0648\u0632\u0646",
            score: 8,
            description:
              "\u0634\u0627\u0645\u0644 \u0627\u0646\u0648\u0627\u0639 \u062f\u0648\u0646\u0627\u062a\u060c \u067e\u0631 \u0627\u0632 \u0634\u06a9\u0631 \u0648 \u0686\u0631\u0628\u06cc. \u062e\u0648\u0634\u0645\u0632\u06af\u06cc\u200c\u0634\u0648\u0646 \u062e\u06cc\u0644\u06cc \u0648\u0633\u0648\u0633\u0647\u200c\u0627\u0646\u06af\u06cc\u0632\u0647\u060c \u0648\u0644\u06cc \u0648\u0632\u0646 \u0631\u0648 \u0647\u0645 \u0631\u0627\u062d\u062a \u0628\u0627\u0644\u0627 \u0645\u06cc\u200c\u0628\u0631\u0646."
          },
          {
            id: 15,
            icon: "https://www.svgrepo.com/show/407708/waffle.svg",
            title: "\u0648\u0627\u0641\u0644",
            text: "\u0634\u06a9\u0631 \u0648 \u06a9\u0631\u0628\u0648\u0647\u06cc\u062f\u0631\u0627\u062a \u0628\u0627\u0644\u0627 + \u0686\u0627\u0642\u06cc",
            score: 6,
            description:
              "\u0634\u0627\u0645\u0644 \u0648\u0627\u0641\u0644\u200c\u0647\u0627\u06cc \u0634\u06cc\u0631\u06cc\u0646 \u0648 \u067e\u064f\u0631\u06a9\u0627\u0644\u0631\u06cc \u06a9\u0647 \u067e\u0631 \u0627\u0632 \u06a9\u0631\u0628\u0648\u0647\u06cc\u062f\u0631\u0627\u062a \u0648 \u0634\u06a9\u0631\u0647. \u06cc\u0647 \u062f\u0633\u0631 \u062f\u0648\u0633\u062a\u200c\u062f\u0627\u0634\u062a\u0646\u06cc\u060c \u0648\u0644\u06cc \u0645\u0645\u06a9\u0646\u0647 \u0628\u0627 \u062e\u0648\u062f\u0634 \u0686\u0627\u0642\u06cc \u0628\u06cc\u0627\u0631\u0647."
          },
          {
            id: 16,
            icon: "https://www.svgrepo.com/show/404925/canned-food.svg",
            title:
              "\u06a9\u0646\u0633\u0631\u0648\u0647\u0627\u06cc \u0622\u0645\u0627\u062f\u0647",
            text: "\u0645\u0648\u0627\u062f \u0646\u06af\u0647\u062f\u0627\u0631\u0646\u062f\u0647 + \u0633\u062f\u06cc\u0645 \u0628\u0627\u0644\u0627",
            score: 6,
            description:
              "\u0634\u0627\u0645\u0644 \u06a9\u0646\u0633\u0631\u0648\u0647\u0627\u06cc\u06cc \u0645\u062b\u0644 \u0644\u0648\u0628\u06cc\u0627\u060c \u0646\u062e\u0648\u062f\u060c \u0633\u0648\u067e \u0622\u0645\u0627\u062f\u0647 \u0648 \u063a\u0630\u0627\u0647\u0627\u06cc \u062f\u06cc\u06af\u0647 \u06a9\u0647 \u0633\u062f\u06cc\u0645 \u0648 \u0645\u0648\u0627\u062f \u0646\u06af\u0647\u062f\u0627\u0631\u0646\u062f\u0647 \u0632\u06cc\u0627\u062f\u06cc \u062f\u0627\u0631\u0646. \u0631\u0627\u0647\u06cc \u0622\u0633\u0648\u0646 \u0628\u0631\u0627\u06cc \u0648\u0639\u062f\u0647\u200c\u0647\u0627\u06cc \u0633\u0631\u06cc\u0639\u060c \u0627\u0645\u0627 \u0632\u06cc\u0627\u062f\u0647\u200c\u0631\u0648\u06cc \u062f\u0631 \u0645\u0635\u0631\u0641\u0634\u0648\u0646 \u062e\u0648\u0628 \u0646\u06cc\u0633\u062a."
          },
          {
            id: 18,
            icon: "https://www.svgrepo.com/show/263324/milkshake-straw.svg",
            title: "\u0645\u06cc\u0644\u06a9\u200c\u0634\u06cc\u06a9",
            text: "\u0634\u06a9\u0631 \u0648 \u0686\u0631\u0628\u06cc \u0628\u0627\u0644\u0627 + \u0686\u0627\u0642\u06cc \u0633\u0631\u06cc\u0639",
            score: 8,
            description:
              "\u0634\u0627\u0645\u0644 \u0634\u06cc\u0631 \u0648 \u0628\u0633\u062a\u0646\u06cc \u0628\u0627 \u062a\u0631\u06a9\u06cc\u0628 \u0634\u06a9\u0631 \u0648 \u06af\u0627\u0647\u06cc \u0627\u0641\u0632\u0648\u062f\u0646\u06cc\u200c\u0647\u0627\u06cc \u062f\u06cc\u06af\u0647 \u06a9\u0647 \u062e\u06cc\u0644\u06cc \u06a9\u0627\u0644\u0631\u06cc \u062f\u0627\u0631\u0646. \u06cc\u0647 \u0644\u06cc\u0648\u0627\u0646\u0634 \u062e\u0648\u0634\u0645\u0632\u0647\u200c\u0633\u062a\u060c \u0648\u0644\u06cc \u0645\u0645\u06a9\u0646\u0647 \u06a9\u0627\u0644\u0631\u06cc \u0627\u0636\u0627\u0641\u06cc \u0628\u0647 \u0628\u062f\u0646 \u0628\u0631\u0633\u0648\u0646\u0647."
          },
          {
            id: 19,
            icon: "https://www.svgrepo.com/show/251555/sauces-sauce.svg",
            title:
              "\u0633\u0633\u200c\u0647\u0627\u06cc \u0622\u0645\u0627\u062f\u0647",
            text: "\u0633\u062f\u06cc\u0645 \u0648 \u0686\u0631\u0628\u06cc \u0628\u0627\u0644\u0627 + \u0627\u0641\u0632\u0648\u062f\u0646\u06cc\u200c\u0647\u0627",
            score: 6,
            description:
              "\u0634\u0627\u0645\u0644 \u0627\u0646\u0648\u0627\u0639 \u0633\u0633 \u0645\u062b\u0644 \u0645\u0627\u06cc\u0648\u0646\u0632\u060c \u06a9\u0686\u0627\u067e \u0648 \u0633\u0633\u200c\u0647\u0627\u06cc \u0645\u062e\u0635\u0648\u0635 \u0633\u0627\u0644\u0627\u062f \u06a9\u0647 \u067e\u0631 \u0627\u0632 \u0633\u062f\u06cc\u0645 \u0648 \u0686\u0631\u0628\u06cc \u0628\u0627\u0644\u0627 \u0647\u0633\u062a\u0646. \u0628\u0647 \u063a\u0630\u0627\u0647\u0627 \u0637\u0639\u0645 \u062e\u0648\u0628\u06cc \u0645\u06cc\u200c\u062f\u0646\u060c \u0648\u0644\u06cc \u062f\u0631 \u0645\u0635\u0631\u0641\u0634\u0648\u0646 \u0627\u062d\u062a\u06cc\u0627\u0637 \u06a9\u0646."
          },
          {
            id: 20,
            icon: "https://www.svgrepo.com/show/276745/champagne-alcohol.svg",
            title: "\u0627\u0644\u06a9\u0644",
            text: "\u0622\u0633\u06cc\u0628 \u0628\u0647 \u06a9\u0628\u062f + \u06a9\u0627\u0644\u0631\u06cc \u0628\u0627\u0644\u0627",
            score: 10,
            description:
              "\u0634\u0627\u0645\u0644 \u0627\u0646\u0648\u0627\u0639 \u0646\u0648\u0634\u06cc\u062f\u0646\u06cc\u200c\u0647\u0627\u06cc \u0627\u0644\u06a9\u0644\u06cc \u06a9\u0647 \u0639\u0644\u0627\u0648\u0647 \u0628\u0631 \u06a9\u0627\u0644\u0631\u06cc \u0628\u0627\u0644\u0627\u060c \u0628\u0647 \u06a9\u0628\u062f \u0647\u0645 \u0622\u0633\u06cc\u0628 \u0645\u06cc\u200c\u0632\u0646\u0646. \u0645\u0635\u0631\u0641 \u062f\u0631 \u062d\u062f \u062a\u0639\u0627\u062f\u0644 \u062a\u0648\u0635\u06cc\u0647 \u0645\u06cc\u200c\u0634\u0647\u060c \u0686\u0648\u0646 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0631\u0648\u06cc \u0633\u0644\u0627\u0645\u062a \u06a9\u0644\u06cc \u0628\u062f\u0646 \u0627\u062b\u0631 \u0645\u0646\u0641\u06cc \u0628\u0630\u0627\u0631\u0647."
          },
          {
            id: 21,
            icon: "https://www.svgrepo.com/show/275697/coffee-cup-coffee.svg",
            title: "\u0642\u0647\u0648\u0647",
            text: "\u06a9\u0627\u0641\u0626\u06cc\u0646 \u0628\u0627\u0644\u0627 + \u0627\u0641\u0632\u0627\u06cc\u0634 \u0627\u0636\u0637\u0631\u0627\u0628",
            score: 5,
            description:
              "\u0634\u0627\u0645\u0644 \u0627\u0646\u0648\u0627\u0639 \u0642\u0647\u0648\u0647\u200c\u0647\u0627 \u06a9\u0647 \u06a9\u0627\u0641\u0626\u06cc\u0646 \u0628\u0627\u0644\u0627\u06cc\u06cc \u062f\u0627\u0631\u0646 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0628\u0627\u0639\u062b \u0627\u0636\u0637\u0631\u0627\u0628 \u0628\u0634\u0646. \u0628\u0631\u0627\u06cc \u0628\u06cc\u062f\u0627\u0631 \u0645\u0648\u0646\u062f\u0646 \u0639\u0627\u0644\u06cc\u0647\u060c \u0648\u0644\u06cc \u0645\u0631\u0627\u0642\u0628 \u0628\u0627\u0634 \u06a9\u0647 \u0645\u0635\u0631\u0641 \u0628\u06cc\u0634 \u0627\u0632 \u062d\u062f\u0634 \u0628\u0647\u062a \u0622\u0633\u06cc\u0628 \u0646\u0632\u0646\u0647."
          },
          {
            id: 22,
            icon: "https://www.svgrepo.com/show/244450/spaghetti-pasta.svg",
            title: "\u067e\u0627\u0633\u062a\u0627",
            text: "\u06a9\u0631\u0628\u0648\u0647\u06cc\u062f\u0631\u0627\u062a \u0633\u0627\u062f\u0647 + \u0627\u0641\u0632\u0627\u06cc\u0634 \u0642\u0646\u062f \u062e\u0648\u0646",
            score: 6,
            description:
              "\u0634\u0627\u0645\u0644 \u067e\u0627\u0633\u062a\u0627\u0647\u0627 \u06a9\u0647 \u0627\u0632 \u06a9\u0631\u0628\u0648\u0647\u06cc\u062f\u0631\u0627\u062a \u0633\u0627\u062f\u0647 \u062a\u0634\u06a9\u06cc\u0644 \u0634\u062f\u0646 \u0648 \u0633\u0631\u06cc\u0639 \u0642\u0646\u062f \u062e\u0648\u0646 \u0631\u0648 \u0628\u0627\u0644\u0627 \u0645\u06cc\u200c\u0628\u0631\u0646. \u062e\u0648\u0634\u0645\u0632\u0647\u200c\u0633\u062a\u060c \u0648\u0644\u06cc \u0632\u06cc\u0627\u062f\u0647\u200c\u0631\u0648\u06cc \u0628\u0627\u0639\u062b \u0686\u0627\u0642\u06cc \u0645\u06cc\u200c\u0634\u0647."
          },
          {
            id: 23,
            icon: "https://www.svgrepo.com/show/505200/rice.svg",
            title: "\u0628\u0631\u0646\u062c \u0633\u0641\u06cc\u062f",
            text: "\u06a9\u0631\u0628\u0648\u0647\u06cc\u062f\u0631\u0627\u062a \u0628\u0627\u0644\u0627 + \u0627\u0631\u0632\u0634 \u063a\u0630\u0627\u06cc\u06cc \u06a9\u0645\u062a\u0631",
            score: 5,
            description:
              "\u0634\u0627\u0645\u0644 \u0628\u0631\u0646\u062c \u0633\u0641\u06cc\u062f \u06a9\u0647 \u06a9\u0631\u0628\u0648\u0647\u06cc\u062f\u0631\u0627\u062a \u0633\u0627\u062f\u0647 \u0632\u06cc\u0627\u062f\u06cc \u062f\u0627\u0631\u0647 \u0648 \u0627\u0631\u0632\u0634 \u063a\u0630\u0627\u06cc\u06cc \u0646\u0633\u0628\u062a\u0627 \u06a9\u0645\u062a\u0631\u06cc \u0646\u0633\u0628\u062a \u0628\u0647 \u0628\u0631\u0646\u062c \u0642\u0647\u0648\u0647\u200c\u0627\u06cc \u062f\u0627\u0631\u0647. \u0645\u0635\u0631\u0641 \u062f\u0631 \u062d\u062f \u062a\u0639\u0627\u062f\u0644 \u0645\u0634\u06a9\u0644\u06cc \u0646\u062f\u0627\u0631\u0647."
          }
        ]
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "kabed.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "diabet.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "age",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const storedBirthDate = JSON.parse(
                  localStorage.getItem("birthDate")
                );
                if (storedBirthDate) {
                  const birthYear = storedBirthDate.year;
                  const birthMonth = storedBirthDate.month;
                  const birthDay = storedBirthDate.day;
                  const today = new Date();
                  const currentYear = today.getFullYear();
                  const currentMonth = today.getMonth() + 1;
                  const currentDay = today.getDate();
                  let age = currentYear - birthYear;
                  if (
                    currentMonth < birthMonth ||
                    (currentMonth === birthMonth && currentDay < birthDay)
                  ) {
                    age--;
                  }
                  return age;
                } else {
                  return 20;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 5;
              }
              throw e;
            }
          })()
      },
      {
        path: "liverDisease",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "diabetes",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "filter",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.harmfulFood;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "ids",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (localStorage.getItem("foodIds") == null) {
                  return [1, 2, 3, 4];
                } else {
                  return JSON.parse(localStorage.getItem("foodIds"));
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [1, 2, 3, 4];
              }
              throw e;
            }
          })()
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedfood",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let sortedData = $state.weeknow.data.data
                  .slice()
                  .sort(
                    (a, b) => new Date(b.timestamp) - new Date(a.timestamp)
                  );
                let lastNumbersArray = [];
                let seenIds = new Set();
                for (let entry of sortedData) {
                  let id = entry.value.id;
                  if (!seenIds.has(id)) {
                    lastNumbersArray.push({
                      id: id,
                      number: entry.value.number
                    });
                    seenIds.add(id);
                  }
                }
                for (let id of $state.ids) {
                  if (!lastNumbersArray.some(item => item.id === id)) {
                    lastNumbersArray.push({
                      id: id,
                      number: 0
                    });
                  }
                }
                lastNumbersArray = lastNumbersArray.filter(item =>
                  $state.ids.includes(item.id)
                );
                return lastNumbersArray;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  { id: 1, number: 0 },
                  { id: 2, number: 0 },
                  { id: 3, number: 0 },
                  { id: 4, number: 0 }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "userinfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userinfo");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "weeknow.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "weeknow.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "weeknow.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "previousWeek.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "previousWeek.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "previousWeek.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let lastNumbersArray = [];
                let seenIds = new Set();
                for (let entry of $state.previousWeek.data.data) {
                  let id = entry.value.id;
                  if (!seenIds.has(id)) {
                    lastNumbersArray.push({
                      id: id,
                      number: entry.value.number
                    });
                    seenIds.add(id);
                  }
                }
                return lastNumbersArray.reduce(
                  (total, entry) => total + entry.number,
                  0
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable2",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let currentNumbersArray = [];
                let seenIds = new Set();
                for (let entry of $state.weeknow.data.data) {
                  let id = entry.value.id;
                  if (!seenIds.has(id)) {
                    currentNumbersArray.push({
                      id: id,
                      number: entry.value.number
                    });
                    seenIds.add(id);
                  }
                }
                return currentNumbersArray.reduce(
                  (total, entry) => total + entry.number,
                  0
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "foodinfo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "foodinfo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "foodinfo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.weight;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "modal3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "infofood",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyg4Uf6WCaaLe()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            try {
              return !(
                $state.weeknow.loading ||
                $state.previousWeek.loading ||
                $state.foodinfo.loading
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0DjR)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jbni)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ouPbd
                  )}
                >
                  {
                    "\u06a9\u0646\u062a\u0631\u0644 \u062a\u063a\u0630\u06cc\u0647"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cERd
                  )}
                >
                  {
                    "\u062a\u0648 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u062a\u0639\u062f\u0627\u062f \u063a\u0630\u0627\u0647\u0627\u06cc \u0645\u0636\u0631 \u0647\u0641\u062a\u0647 \u067e\u06cc\u0634\u062a \u0631\u0648 \u0628\u0628\u06cc\u0646\u06cc\u060c \u0628\u0647\u0634 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0646\u06cc \u0648 \u0628\u0627 \u0642\u062f\u0645 \u0647\u0627\u06cc \u06a9\u0648\u0686\u06cc\u06a9 \u0647\u0631 \u0647\u0641\u062a\u0647  \u0628\u0647\u062a\u0631 \u0628\u0634\u06cc!"
                  }
                </div>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__utBjv)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uHcEv)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__i3Hj6)}
                  >
                    <Icon60Icon
                      className={classNames(projectcss.all, sty.svg__eOhZ)}
                      role={"img"}
                    />

                    <Icon60Icon
                      className={classNames(projectcss.all, sty.svg__xYwWs)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9Tcl)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oCix)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4QtrU
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___16Pjn
                          )}
                        >
                          {"BMI"}
                        </div>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fh33
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                let h = $state.heghit / 100;
                                return ($state.weight / (h * h)).toFixed(1);
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "--";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f4D9N
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                let h = $state.heghit / 100;
                                let bmi = ($state.weight / (h * h)).toFixed(1);
                                if (bmi < 18.5) {
                                  return "کم‌وزن";
                                } else if (bmi >= 18.5 && bmi < 24.9) {
                                  return "نرمال";
                                } else if (bmi >= 25 && bmi < 29.9) {
                                  return "اضافه‌وزن";
                                } else {
                                  return "چاق";
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "200";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <Foodbox
                      data-plasmic-name={"foodbox"}
                      data-plasmic-override={overrides.foodbox}
                      avg={(() => {
                        try {
                          return (() => {
                            let avrg =
                              $state.variable !== 0
                                ? ($state.variable2 * 50) / $state.variable
                                : 0;
                            if (avrg <= 40) {
                              return "good";
                            } else if (avrg <= 60 && avrg > 40) {
                              return "alert";
                            } else {
                              return "bad";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      className={classNames("__wab_instance", sty.foodbox)}
                      variable={$state.variable}
                      variable2={$state.variable2}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__lsov6)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cnAcm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sFsz9
                          )}
                        >
                          {
                            "\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \n\u0647\u0641\u062a\u0647 \u0642\u0628\u0644"
                          }
                        </div>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__seKf
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                ($state.variable / 7).toFixed() + " دونه در روز"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "--";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <AntdModal
                    data-plasmic-name={"modal"}
                    data-plasmic-override={overrides.modal}
                    className={classNames("__wab_instance", sty.modal)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens,
                      plasmic_paziresh_24_design_system_css.plasmic_tokens,
                      plasmic_hamdast_sdk_css.plasmic_tokens
                    )}
                    hideFooter={true}
                    maskClosable={false}
                    modalContentClassName={classNames({
                      [sty["pcls_Pfq_7vYUSGxs"]]: true
                    })}
                    modalScopeClassName={sty["modal__modal"]}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal",
                        "open"
                      ]).apply(null, eventArgs);
                    }}
                    open={generateStateValueProp($state, ["modal", "open"])}
                    title={null}
                    trigger={null}
                    width={"100vw"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tTkLm)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hUBbh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w4KcW
                          )}
                        >
                          {
                            "\u062f\u0633\u062a\u0647 \u0628\u0646\u062f\u06cc \u0647\u0627"
                          }
                        </div>
                        <Input
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          className={classNames("__wab_instance", sty.input)}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "input",
                              "value"
                            ]).apply(null, eventArgs);

                            (async value => {
                              const $steps = {};

                              $steps["updateFilter"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["filter"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        return $state.harmfulFood.filter(item =>
                                          item.title.includes(
                                            $state.input.value
                                          )
                                        );
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateFilter"] != null &&
                                typeof $steps["updateFilter"] === "object" &&
                                typeof $steps["updateFilter"].then ===
                                  "function"
                              ) {
                                $steps["updateFilter"] = await $steps[
                                  "updateFilter"
                                ];
                              }
                            }).apply(null, eventArgs);
                          }}
                          placeholder={"\u062c\u0633\u062a\u062c\u0648"}
                          type={"text"}
                          value={generateStateValueProp($state, [
                            "input",
                            "value"
                          ])}
                        />

                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gmu2L
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $state.filter;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mGic0
                                )}
                                key={currentIndex}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return ($state.tick[
                                              currentIndex
                                            ].click =
                                              !$state.tick[currentIndex].click);
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["runCode2"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              if (
                                                $state.ids.includes(
                                                  currentItem.id
                                                )
                                              )
                                                return $state.ids.splice(
                                                  $state.ids.indexOf(
                                                    currentItem.id
                                                  ),
                                                  1
                                                );
                                              else
                                                return $state.ids.push(
                                                  currentItem.id
                                                );
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode2"] != null &&
                                    typeof $steps["runCode2"] === "object" &&
                                    typeof $steps["runCode2"].then ===
                                      "function"
                                  ) {
                                    $steps["runCode2"] = await $steps[
                                      "runCode2"
                                    ];
                                  }
                                }}
                              >
                                <PlasmicImg__
                                  alt={""}
                                  className={classNames(sty.img__epuph)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"40px"}
                                  loading={"lazy"}
                                  src={(() => {
                                    try {
                                      return currentItem.icon;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___16Og8
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__dO8Rz
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.title;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0641\u0633\u062a \u0641\u0648\u062f";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cxbn7
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.text;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0648\u0632\u0646 + \u0627\u0641\u0632\u0627\u06cc\u0634 \u0686\u0631\u0628\u06cc \u062e\u0648\u0646";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__afd8W
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.tick
                                      ),
                                      click: generateStateValueProp($state, [
                                        "tick",
                                        __plasmic_idx_0,
                                        "click"
                                      ]),
                                      onClick: async event => {
                                        const $steps = {};
                                      },
                                      onClickChange: async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "tick",
                                          __plasmic_idx_0,
                                          "click"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }
                                    };

                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "tick[].click",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return $state.ids.includes(
                                                  currentItem.id
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return [];
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <Tick
                                        data-plasmic-name={"tick"}
                                        data-plasmic-override={overrides.tick}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </Stack__>
                              </div>
                            );
                          })}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__khxA
                            )}
                          >
                            {(() => {
                              try {
                                return $state.filter.length == 0;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__laZhk
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wuebz
                                  )}
                                >
                                  {
                                    "\u0645\u0648\u0631\u062f\u06cc \u067e\u06cc\u062f\u0627 \u0646\u0634\u062f."
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__twkdr
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateInputValue"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["input", "value"]
                                            },
                                            operation: 0,
                                            value: ""
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateInputValue"] != null &&
                                      typeof $steps["updateInputValue"] ===
                                        "object" &&
                                      typeof $steps["updateInputValue"].then ===
                                        "function"
                                    ) {
                                      $steps["updateInputValue"] = await $steps[
                                        "updateInputValue"
                                      ];
                                    }

                                    $steps["updateFilter"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["filter"]
                                            },
                                            operation: 0,
                                            value: $state.harmfulFood
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateFilter"] != null &&
                                      typeof $steps["updateFilter"] ===
                                        "object" &&
                                      typeof $steps["updateFilter"].then ===
                                        "function"
                                    ) {
                                      $steps["updateFilter"] = await $steps[
                                        "updateFilter"
                                      ];
                                    }
                                  }}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "نمایش همه" + ">";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0646\u0645\u0627\u06cc\u0634 \u0647\u0645\u0647 <";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Stack__>
                            ) : null}
                          </Stack__>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bj1Hv
                          )}
                        >
                          <ButtonLiom
                            data-plasmic-name={"button4"}
                            data-plasmic-override={overrides.button4}
                            className={classNames(
                              "__wab_instance",
                              sty.button4
                            )}
                            color={generateStateValueProp($state, [
                              "button4",
                              "color"
                            ])}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          localStorage.setItem(
                                            "foodIds",
                                            JSON.stringify($state.ids)
                                          );
                                          $state.ids.forEach(item => {
                                            if (
                                              !$state.selectedfood.some(
                                                food => food.id === item
                                              )
                                            ) {
                                              $state.selectedfood.push({
                                                id: item,
                                                number: 0
                                              });
                                            }
                                          });
                                          return ($state.selectedfood =
                                            $state.selectedfood.filter(item =>
                                              $state.ids.includes(item.id)
                                            ));
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateModalOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModalOpen"] != null &&
                                typeof $steps["updateModalOpen"] === "object" &&
                                typeof $steps["updateModalOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateModalOpen"] = await $steps[
                                  "updateModalOpen"
                                ];
                              }
                            }}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button4",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__egJgM
                              )}
                            >
                              {"\u0627\u0641\u0632\u0648\u062f\u0646"}
                            </div>
                          </ButtonLiom>
                        </div>
                      </Stack__>
                    </div>
                  </AntdModal>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.modal2),
                      closeIcon: null,
                      defaultStylesClassName: classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens,
                        plasmic_paziresh_24_design_system_css.plasmic_tokens,
                        plasmic_hamdast_sdk_css.plasmic_tokens
                      ),
                      hideFooter: true,
                      maskClosable: false,
                      modalContentClassName: classNames({
                        [sty["pcls_A7fgNObMvUDf"]]: true
                      }),
                      modalScopeClassName: sty["modal2__modal"],
                      onOpenChange: async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "modal2",
                          "open"
                        ]).apply(null, eventArgs);
                      },
                      open: generateStateValueProp($state, ["modal2", "open"]),
                      title: null,
                      trigger: null,
                      width: "100vw"
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "open",
                          plasmicStateName: "modal2.open"
                        }
                      ],
                      [],
                      undefined ?? {},
                      child$Props
                    );
                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "modal2.open",
                          initFunc: ({ $props, $state, $queries }) =>
                            (() => {
                              try {
                                return (
                                  localStorage.getItem("ferstFoodTrack") == null
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()
                        }
                      ],
                      []
                    );
                    return (
                      <AntdModal
                        data-plasmic-name={"modal2"}
                        data-plasmic-override={overrides.modal2}
                        {...child$Props}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b2CIy
                          )}
                        >
                          <Reveal
                            className={classNames(
                              "__wab_instance",
                              sty.reveal__jjCIa
                            )}
                            direction={"left"}
                            effect={"slide"}
                            triggerOnce={true}
                          >
                            {(() => {
                              try {
                                return $state.slide == 1;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ymxpu
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pzmAw
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cZt8
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ihfHp
                                      )}
                                    >
                                      {
                                        "\u0642\u0631\u0627\u0631\u0647 \u0628\u0627\u0647\u0645 \u0686\u0646\u062f \u0642\u062f\u0645 \u0628\u0647 \u0633\u0645\u062a \u0633\u0627\u0644\u0645\u200c\u062a\u0631 \u0632\u0646\u062f\u06af\u06cc \u06a9\u0631\u062f\u0646 \u0628\u0631\u062f\u0627\u0631\u06cc\u0645. \ud83e\udd66\ud83d\udcaa\n\u0644\u0637\u0641\u0627 \u0627\u0637\u0644\u0627\u0639\u0627\u062a\u062a\u0648 \u067e\u0631 \u06a9\u0646 \u062a\u0627 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645 \u0648 \u0628\u062a\u0648\u0646\u06cc\u0645 \u0645\u0633\u06cc\u0631\u0648 \u062f\u0646\u0628\u0627\u0644 \u06a9\u0646\u06cc\u0645. \u0647\u0631 \u0642\u062f\u0645 \u06a9\u0648\u0686\u06cc\u06a9\u06cc \u06a9\u0647 \u0628\u0631\u062f\u0627\u0631\u06cc\u060c \u0645\u0627 \u0647\u0645 \u0647\u0645\u0631\u0627\u0647\u062a \u0647\u0633\u062a\u06cc\u0645 \u062a\u0627 \u0632\u0646\u062f\u06af\u06cc \u0633\u0627\u0644\u0645\u200c\u062a\u0631\u06cc \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc! \ud83d\udeb6\u200d\u2642\ufe0f\ud83c\udf31"
                                      }
                                    </div>
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__pX8U6
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___6Ai2Q
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__uGxir
                                        )}
                                      >
                                        {"\u0642\u062f"}
                                      </div>
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__rBcTm
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___5Jhta
                                          )}
                                        >
                                          {"cm"}
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___9WEg6
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $state.heghit;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "160";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </Stack__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__igncM
                                        )}
                                      >
                                        {(() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.rangeSlider
                                            ),
                                            defaultValueMax: (() => {
                                              try {
                                                return $state.heghit;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 161;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            draggableTrack: true,
                                            handleClassName: classNames({
                                              [sty["pcls_brhKeUmaHnrc"]]: true
                                            }),
                                            max: 210,
                                            min: 120,
                                            onChange: async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "min",
                                                ["rangeSlider", "min"],
                                                AntdRangeSlider_Helpers
                                              ).apply(null, eventArgs);
                                              generateStateOnChangePropForCodeComponents(
                                                $state,
                                                "max",
                                                ["rangeSlider", "max"],
                                                AntdRangeSlider_Helpers
                                              ).apply(null, eventArgs);

                                              (async value => {
                                                const $steps = {};

                                                $steps["updateHeghit"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "heghit"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value:
                                                          $state.rangeSlider.max
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["updateHeghit"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateHeghit"
                                                  ] === "object" &&
                                                  typeof $steps["updateHeghit"]
                                                    .then === "function"
                                                ) {
                                                  $steps["updateHeghit"] =
                                                    await $steps[
                                                      "updateHeghit"
                                                    ];
                                                }
                                              }).apply(null, eventArgs);
                                            },
                                            sliderScopeClassName:
                                              sty["rangeSlider__slider"],
                                            stylableMarks: (
                                              <AntdSliderMark
                                                data-plasmic-name={"sliderMark"}
                                                data-plasmic-override={
                                                  overrides.sliderMark
                                                }
                                                children={null}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.sliderMark
                                                )}
                                                mark={50}
                                              />
                                            ),

                                            tooltipVisible: "unset",
                                            trackClassName: classNames({
                                              [sty["pcls_8KMtYsN4uBLf"]]: true
                                            }),
                                            valueMax: generateStateValueProp(
                                              $state,
                                              ["rangeSlider", "max"]
                                            ),
                                            valueMin: generateStateValueProp(
                                              $state,
                                              ["rangeSlider", "min"]
                                            )
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "min",
                                                plasmicStateName:
                                                  "rangeSlider.min"
                                              },
                                              {
                                                name: "max",
                                                plasmicStateName:
                                                  "rangeSlider.max"
                                              }
                                            ],
                                            [],
                                            AntdRangeSlider_Helpers ?? {},
                                            child$Props
                                          );

                                          return (
                                            <AntdRangeSlider
                                              data-plasmic-name={"rangeSlider"}
                                              data-plasmic-override={
                                                overrides.rangeSlider
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })()}
                                      </div>
                                    </div>
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zqYyn
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__vneo6
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__tsg6U
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___2BbDa
                                          )}
                                        >
                                          {"\u0633\u0646"}
                                        </div>
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__m4ZkT
                                          )}
                                        >
                                          <Icon47Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__akKpR
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return ($state.input2.value += 1);
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }}
                                            role={"img"}
                                          />

                                          <Input
                                            data-plasmic-name={"input2"}
                                            data-plasmic-override={
                                              overrides.input2
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.input2
                                            )}
                                            onChange={async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                ["input2", "value"]
                                              ).apply(null, eventArgs);

                                              (async value => {
                                                const $steps = {};

                                                $steps["updateAge"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: ["age"]
                                                        },
                                                        operation: 0,
                                                        value: parseInt(
                                                          $state.input2.value
                                                        )
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["updateAge"] != null &&
                                                  typeof $steps["updateAge"] ===
                                                    "object" &&
                                                  typeof $steps["updateAge"]
                                                    .then === "function"
                                                ) {
                                                  $steps["updateAge"] =
                                                    await $steps["updateAge"];
                                                }

                                                $steps["updateButton2Color"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "button2",
                                                              "color"
                                                            ]
                                                          },
                                                          operation: 0
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "updateButton2Color"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "updateButton2Color"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateButton2Color"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateButton2Color"] =
                                                    await $steps[
                                                      "updateButton2Color"
                                                    ];
                                                }
                                              }).apply(null, eventArgs);
                                            }}
                                            type={"number"}
                                            value={generateStateValueProp(
                                              $state,
                                              ["input2", "value"]
                                            )}
                                          />

                                          <Icon48Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__umt0T
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return (() => {
                                                            if (
                                                              $state.input2
                                                                .value != 0
                                                            )
                                                              return ($state.input2.value -= 1);
                                                          })();
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }}
                                            role={"img"}
                                          />
                                        </Stack__>
                                      </div>
                                    </Stack__>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__fQucr
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___2WRjC
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___7WgnG
                                          )}
                                        >
                                          {"\u0648\u0632\u0646 ( kg )"}
                                        </div>
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__hrLrv
                                          )}
                                        >
                                          <Icon47Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__uGyMm
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return ($state.input3.value += 1);
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }}
                                            role={"img"}
                                          />

                                          <Input
                                            data-plasmic-name={"input3"}
                                            data-plasmic-override={
                                              overrides.input3
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.input3
                                            )}
                                            onChange={async (
                                              ...eventArgs: any
                                            ) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                ["input3", "value"]
                                              ).apply(null, eventArgs);

                                              (async value => {
                                                const $steps = {};

                                                $steps["updateWeight"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "weight"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: parseInt(
                                                          $state.input3.value
                                                        )
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["updateWeight"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateWeight"
                                                  ] === "object" &&
                                                  typeof $steps["updateWeight"]
                                                    .then === "function"
                                                ) {
                                                  $steps["updateWeight"] =
                                                    await $steps[
                                                      "updateWeight"
                                                    ];
                                                }
                                              }).apply(null, eventArgs);
                                            }}
                                            type={"number"}
                                            value={generateStateValueProp(
                                              $state,
                                              ["input3", "value"]
                                            )}
                                          />

                                          <Icon48Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__p43Fj
                                            )}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return (() => {
                                                            if (
                                                              $state.input3
                                                                .value != 0
                                                            )
                                                              return ($state.input3.value -= 1);
                                                          })();
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }}
                                            role={"img"}
                                          />
                                        </Stack__>
                                      </div>
                                    </Stack__>
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xXlFi
                                    )}
                                  >
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__n5Kbz
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__rwVgK
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__wfdEo
                                          )}
                                        >
                                          {
                                            "\u0645\u0634\u06a9\u0644 \u06a9\u0628\u062f \u062f\u0627\u0631\u06cc\u061f"
                                          }
                                        </div>
                                        <AntdRadioGroup
                                          data-plasmic-name={"kabed"}
                                          data-plasmic-override={
                                            overrides.kabed
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.kabed
                                          )}
                                          defaultValue={"0"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "kabed",
                                              "value"
                                            ]).apply(null, eventArgs);

                                            (async value => {
                                              const $steps = {};

                                              $steps["updateLiverDisease"] =
                                                true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "liverDisease"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value: parseInt(
                                                          $state.kabed.value
                                                        )
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["updateLiverDisease"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateLiverDisease"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateLiverDisease"
                                                ].then === "function"
                                              ) {
                                                $steps["updateLiverDisease"] =
                                                  await $steps[
                                                    "updateLiverDisease"
                                                  ];
                                              }
                                            }).apply(null, eventArgs);
                                          }}
                                          options={(() => {
                                            const __composite = [
                                              { value: null, label: null },
                                              { value: null, label: null },
                                              { label: null, value: null },
                                              { label: null, value: null }
                                            ];
                                            __composite["0"]["value"] = "0";
                                            __composite["0"]["label"] =
                                              "\u0646\u0647";
                                            __composite["1"]["value"] = "1";
                                            __composite["1"]["label"] =
                                              "\u06af\u0631\u06cc\u062f1";
                                            __composite["2"]["label"] =
                                              "\u06af\u0631\u06cc\u062f2";
                                            __composite["2"]["value"] = "2";
                                            __composite["3"]["label"] =
                                              "\u06af\u0631\u06cc\u062f3";
                                            __composite["3"]["value"] = "3";
                                            return __composite;
                                          })()}
                                          value={generateStateValueProp(
                                            $state,
                                            ["kabed", "value"]
                                          )}
                                        >
                                          <AntdRadio
                                            className={classNames(
                                              "__wab_instance",
                                              sty.radio___3ApU
                                            )}
                                            value={"op1"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__rQrA9
                                              )}
                                            >
                                              {"Option 1"}
                                            </div>
                                          </AntdRadio>
                                          <AntdRadio
                                            className={classNames(
                                              "__wab_instance",
                                              sty.radio__njNhh
                                            )}
                                            value={"op2"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__bqwgS
                                              )}
                                            >
                                              {"Option 2"}
                                            </div>
                                          </AntdRadio>
                                        </AntdRadioGroup>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__xRutg
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__orVx
                                          )}
                                        >
                                          {
                                            "\u062f\u06cc\u0627\u0628\u062a \u062f\u0627\u0631\u06cc\u061f"
                                          }
                                        </div>
                                        <AntdRadioGroup
                                          data-plasmic-name={"diabet"}
                                          data-plasmic-override={
                                            overrides.diabet
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.diabet
                                          )}
                                          defaultValue={"0"}
                                          onChange={async (
                                            ...eventArgs: any
                                          ) => {
                                            generateStateOnChangeProp($state, [
                                              "diabet",
                                              "value"
                                            ]).apply(null, eventArgs);

                                            (async value => {
                                              const $steps = {};

                                              $steps["updateDiabetes"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "diabetes"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: parseInt(
                                                        $state.diabet.value
                                                      )
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateDiabetes"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateDiabetes"
                                                ] === "object" &&
                                                typeof $steps["updateDiabetes"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateDiabetes"] =
                                                  await $steps[
                                                    "updateDiabetes"
                                                  ];
                                              }
                                            }).apply(null, eventArgs);
                                          }}
                                          options={(() => {
                                            const __composite = [
                                              { value: null, label: null },
                                              { value: null, label: null },
                                              { label: null, value: null },
                                              { label: null, value: null }
                                            ];
                                            __composite["0"]["value"] = "0";
                                            __composite["0"]["label"] =
                                              "\u0646\u0647";
                                            __composite["1"]["value"] = "1";
                                            __composite["1"]["label"] =
                                              "\u0646\u0648\u06391";
                                            __composite["2"]["label"] =
                                              "\u0646\u0648\u06392";
                                            __composite["2"]["value"] = "2";
                                            __composite["3"]["label"] =
                                              "\u0646\u0648\u06393";
                                            __composite["3"]["value"] = "3";
                                            return __composite;
                                          })()}
                                          value={generateStateValueProp(
                                            $state,
                                            ["diabet", "value"]
                                          )}
                                        >
                                          <AntdRadio
                                            className={classNames(
                                              "__wab_instance",
                                              sty.radio__pKtEx
                                            )}
                                            value={"op1"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___0X7Em
                                              )}
                                            >
                                              {"Option 1"}
                                            </div>
                                          </AntdRadio>
                                          <AntdRadio
                                            className={classNames(
                                              "__wab_instance",
                                              sty.radio__zjLCh
                                            )}
                                            value={"op2"}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__lT37
                                              )}
                                            >
                                              {"Option 2"}
                                            </div>
                                          </AntdRadio>
                                        </AntdRadioGroup>
                                      </div>
                                    </Stack__>
                                  </Stack__>
                                </Stack__>
                                <ButtonLiom
                                  data-plasmic-name={"button3"}
                                  data-plasmic-override={overrides.button3}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button3
                                  )}
                                  color={generateStateValueProp($state, [
                                    "button3",
                                    "color"
                                  ])}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "POST",
                                              "https://n8n.staas.ir/webhook/hamyar/food",
                                              undefined,
                                              (() => {
                                                try {
                                                  return {
                                                    userId:
                                                      $state.userinfo.man.id,
                                                    dataType: "info Tracker",
                                                    value: {
                                                      height: $state.heghit,
                                                      weight: $state.weight,
                                                      age: $state.age,
                                                      liver:
                                                        $state.liverDisease,
                                                      diabetes: $state.diabetes
                                                    },
                                                    timestamp:
                                                      $$.dayjs().format(
                                                        "YYYY-MM-DD HH:mm:ss"
                                                      )
                                                  };
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }

                                    $steps["updateButton2Color2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            queryInvalidation: [
                                              "plasmic_refresh_all"
                                            ]
                                          };
                                          return (async ({
                                            queryInvalidation
                                          }) => {
                                            if (!queryInvalidation) {
                                              return;
                                            }
                                            await plasmicInvalidate(
                                              queryInvalidation
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateButton2Color2"] != null &&
                                      typeof $steps["updateButton2Color2"] ===
                                        "object" &&
                                      typeof $steps["updateButton2Color2"]
                                        .then === "function"
                                    ) {
                                      $steps["updateButton2Color2"] =
                                        await $steps["updateButton2Color2"];
                                    }

                                    $steps["updateSlide"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["slide"]
                                            },
                                            operation: 0,
                                            value: 2
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateSlide"] != null &&
                                      typeof $steps["updateSlide"] ===
                                        "object" &&
                                      typeof $steps["updateSlide"].then ===
                                        "function"
                                    ) {
                                      $steps["updateSlide"] = await $steps[
                                        "updateSlide"
                                      ];
                                    }
                                  }}
                                  onColorChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button3",
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                >
                                  {"\u0627\u062f\u0627\u0645\u0647"}
                                </ButtonLiom>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mDd0G
                                  )}
                                />
                              </Stack__>
                            ) : null}
                          </Reveal>
                          <Reveal
                            className={classNames(
                              "__wab_instance",
                              sty.reveal__hrOa
                            )}
                            effect={"slide"}
                            triggerOnce={true}
                          >
                            {(() => {
                              try {
                                return $state.slide == 2;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wi5Gv
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xFqsh
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9Hrij
                                    )}
                                  >
                                    {
                                      "\u0647\u0641\u062a\u0647\u200c\u06cc \u067e\u06cc\u0634 \u0686\u0646\u062f \u062a\u0627 \u063a\u0630\u0627\u06cc \u0646\u0627\u0633\u0627\u0644\u0645 \u062e\u0648\u0631\u062f\u06cc\u061f"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__nPcJ
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.selectedfood;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__fhYwy
                                            )}
                                            key={currentIndex}
                                          >
                                            <PlasmicImg__
                                              alt={""}
                                              className={classNames(
                                                sty.img__oPeYs
                                              )}
                                              displayHeight={"auto"}
                                              displayMaxHeight={"none"}
                                              displayMaxWidth={"100%"}
                                              displayMinHeight={"0"}
                                              displayMinWidth={"0"}
                                              displayWidth={"auto"}
                                              height={``}
                                              loading={"lazy"}
                                              src={(() => {
                                                try {
                                                  return $state.harmfulFood.find(
                                                    item =>
                                                      item.id === currentItem.id
                                                  ).icon;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              width={"40"}
                                            />

                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__tEyxD
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return $state.harmfulFood.find(
                                                      item =>
                                                        item.id ===
                                                        currentItem.id
                                                    ).title;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__nca1Y
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return $state.harmfulFood.find(
                                                      item =>
                                                        item.id ===
                                                        currentItem.id
                                                    ).text;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__uo62P
                                              )}
                                            >
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__eKThJ
                                                )}
                                              >
                                                <Icon47Icon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__oMAci
                                                  )}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return (currentItem.number += 1);
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }

                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "POST",
                                                              "https://n8n.staas.ir/webhook/hamyar/food",
                                                              undefined,
                                                              (() => {
                                                                try {
                                                                  return {
                                                                    userId:
                                                                      $state
                                                                        .userinfo
                                                                        .man.id,
                                                                    dataType:
                                                                      "food Tracker",
                                                                    value: {
                                                                      id: currentItem.id,
                                                                      number:
                                                                        currentItem.number
                                                                    },
                                                                    timestamp:
                                                                      $$.dayjs()
                                                                        .subtract(
                                                                          1,
                                                                          "week"
                                                                        )
                                                                        .day(1)
                                                                        .format(
                                                                          "YYYY-MM-DD HH:mm:ss"
                                                                        )
                                                                  };
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return undefined;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })(),
                                                              {}
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.apiRequest"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = await $steps[
                                                        "invokeGlobalAction"
                                                      ];
                                                    }
                                                  }}
                                                  role={"img"}
                                                />

                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__ofohM
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return currentItem.number;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "2";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                                <Icon48Icon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg__sjX8Q
                                                  )}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return (() => {
                                                                  if (
                                                                    currentItem.number !=
                                                                    0
                                                                  )
                                                                    return (currentItem.number -= 1);
                                                                })();
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }

                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] =
                                                      currentItem.number >= 0
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "POST",
                                                                "https://n8n.staas.ir/webhook/hamyar/food",
                                                                undefined,
                                                                (() => {
                                                                  try {
                                                                    return {
                                                                      userId:
                                                                        $state
                                                                          .userinfo
                                                                          .man
                                                                          .id,
                                                                      dataType:
                                                                        "food Tracker",
                                                                      value: {
                                                                        id: currentItem.id,
                                                                        number:
                                                                          currentItem.number
                                                                      },
                                                                      timestamp:
                                                                        $$.dayjs()
                                                                          .subtract(
                                                                            1,
                                                                            "week"
                                                                          )
                                                                          .day(
                                                                            1
                                                                          )
                                                                          .format(
                                                                            "YYYY-MM-DD HH:mm:ss"
                                                                          )
                                                                    };
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.apiRequest"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = await $steps[
                                                        "invokeGlobalAction"
                                                      ];
                                                    }
                                                  }}
                                                  role={"img"}
                                                />
                                              </Stack__>
                                            </Stack__>
                                          </div>
                                        );
                                      }
                                    )}
                                  </div>
                                </Stack__>
                                <ButtonLiom
                                  data-plasmic-name={"button5"}
                                  data-plasmic-override={overrides.button5}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button5
                                  )}
                                  color={generateStateValueProp($state, [
                                    "button5",
                                    "color"
                                  ])}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateModal2Open"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["modal2", "open"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateModal2Open"] != null &&
                                      typeof $steps["updateModal2Open"] ===
                                        "object" &&
                                      typeof $steps["updateModal2Open"].then ===
                                        "function"
                                    ) {
                                      $steps["updateModal2Open"] = await $steps[
                                        "updateModal2Open"
                                      ];
                                    }

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return (() => {
                                                $state.selectedfood.forEach(
                                                  item => (item.number = 0)
                                                );
                                                return localStorage.setItem(
                                                  "ferstFoodTrack",
                                                  "true"
                                                );
                                              })();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }

                                    $steps["refreshData"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            queryInvalidation: [
                                              "plasmic_refresh_all"
                                            ]
                                          };
                                          return (async ({
                                            queryInvalidation
                                          }) => {
                                            if (!queryInvalidation) {
                                              return;
                                            }
                                            await plasmicInvalidate(
                                              queryInvalidation
                                            );
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["refreshData"] != null &&
                                      typeof $steps["refreshData"] ===
                                        "object" &&
                                      typeof $steps["refreshData"].then ===
                                        "function"
                                    ) {
                                      $steps["refreshData"] = await $steps[
                                        "refreshData"
                                      ];
                                    }
                                  }}
                                  onColorChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button5",
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                >
                                  {"\u062a\u0627\u06cc\u06cc\u062f"}
                                </ButtonLiom>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cjihG
                                  )}
                                />
                              </Stack__>
                            ) : null}
                          </Reveal>
                          <Reveal
                            className={classNames(
                              "__wab_instance",
                              sty.reveal__xqT
                            )}
                            effect={"fade"}
                            triggerOnce={true}
                          >
                            {(() => {
                              try {
                                return $state.slide == 0;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__b1XBj
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jsDa
                                  )}
                                >
                                  <PlasmicImg__
                                    alt={""}
                                    className={classNames(sty.img__fCrLb)}
                                    displayHeight={"auto"}
                                    displayMaxHeight={"none"}
                                    displayMaxWidth={"100%"}
                                    displayMinHeight={"0"}
                                    displayMinWidth={"0"}
                                    displayWidth={"50%"}
                                    loading={"lazy"}
                                    src={{
                                      src: "/plasmic/liom_tools/images/image34.png",
                                      fullWidth: 566,
                                      fullHeight: 450,
                                      aspectRatio: undefined
                                    }}
                                  />

                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uLvJd
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__lg64F
                                      )}
                                    >
                                      {
                                        "\u0628\u0647 \u06a9\u0646\u062a\u0631\u0644 \u062a\u063a\u0630\u06cc\u0647 \u0644\u06cc\u0648\u0645  \u062e\u0648\u0634 \u0627\u0648\u0645\u062f\u06cc\u0646"
                                      }
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__veRs9
                                      )}
                                    >
                                      {
                                        "\u0642\u0631\u0627\u0631\u0647 \u0628\u0627\u0647\u0645 \u0686\u0646\u062f \u0642\u062f\u0645 \u0628\u0647 \u0633\u0645\u062a \u0633\u0627\u0644\u0645\u200c\u062a\u0631 \u0632\u0646\u062f\u06af\u06cc \u06a9\u0631\u062f\u0646 \u0628\u0631\u062f\u0627\u0631\u06cc\u0645. \ud83e\udd66\ud83d\udcaa\n\u0647\u062f\u0641\u0645\u0648\u0646 \u0627\u06cc\u0646\u0647 \u06a9\u0647 \u06a9\u0645\u06a9\u062a \u06a9\u0646\u06cc\u0645 \u0639\u0627\u062f\u062a \u0647\u0627\u06cc \u0628\u062f \u063a\u0630\u0627\u06cc\u06cc \u0631\u0648 \u06a9\u0646\u0627\u0631 \u0628\u0630\u0627\u0631\u06cc \u0648 \u0628\u0647 \u0645\u0631\u0648\u0631 \u0639\u0627\u062f\u062a\u200c\u0647\u0627\u06cc \u063a\u0630\u0627\u06cc\u06cc \u0628\u0647\u062a\u0631\u06cc \u0627\u06cc\u062c\u0627\u062f \u06a9\u0646\u06cc. \u0647\u0631 \u0642\u062f\u0645 \u06a9\u0648\u0686\u06cc\u06a9\u06cc \u06a9\u0647 \u0628\u0631\u0645\u06cc\u200c\u062f\u0627\u0631\u06cc\u060c \u0645\u0627 \u0647\u0645 \u06a9\u0646\u0627\u0631\u062a\u06cc\u0645 \u062a\u0627 \u062a\u062c\u0631\u0628\u0647\u200c\u06cc \u06cc\u06a9 \u062a\u063a\u06cc\u06cc\u0631 \u0645\u062b\u0628\u062a \u0648 \u0645\u0627\u0646\u062f\u06af\u0627\u0631 \u0631\u0648 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc. \ud83d\udeb6\u200d\u2642\ufe0f\ud83c\udf31\n\n\u0628\u0631\u0627\u06cc \u0634\u0631\u0648\u0639\u060c \u0686\u0646\u062f \u0633\u0648\u0627\u0644 \u0633\u0627\u062f\u0647 \u062f\u0627\u0631\u06cc\u0645. \u0622\u0645\u0627\u062f\u0647\u200c\u0627\u06cc\u061f \ud83d\ude03"
                                      }
                                    </div>
                                  </Stack__>
                                </Stack__>
                                <ButtonLiom
                                  data-plasmic-name={"button6"}
                                  data-plasmic-override={overrides.button6}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button6
                                  )}
                                  color={generateStateValueProp($state, [
                                    "button6",
                                    "color"
                                  ])}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateSlide"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["slide"]
                                            },
                                            operation: 0,
                                            value: 1
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateSlide"] != null &&
                                      typeof $steps["updateSlide"] ===
                                        "object" &&
                                      typeof $steps["updateSlide"].then ===
                                        "function"
                                    ) {
                                      $steps["updateSlide"] = await $steps[
                                        "updateSlide"
                                      ];
                                    }
                                  }}
                                  onColorChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button6",
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                >
                                  {"\u0627\u062f\u0627\u0645\u0647"}
                                </ButtonLiom>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__yo5R
                                  )}
                                />
                              </Stack__>
                            ) : null}
                          </Reveal>
                        </div>
                      </AntdModal>
                    );
                  })()}
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox__boEwk)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSlideinModalClick"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["slideinModal", "click"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSlideinModalClick"] != null &&
                      typeof $steps["updateSlideinModalClick"] === "object" &&
                      typeof $steps["updateSlideinModalClick"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModalClick"] = await $steps[
                        "updateSlideinModalClick"
                      ];
                    }
                  }}
                >
                  <LottieWrapper
                    animationData={{
                      v: "4.8.0",
                      meta: {
                        g: "LottieFiles AE 1.1.0",
                        a: "",
                        k: "",
                        d: "",
                        tc: ""
                      },
                      fr: 30,
                      ip: 0,
                      op: 150,
                      w: 500,
                      h: 500,
                      nm: "3 - Weigth scale",
                      ddd: 0,
                      assets: [],
                      layers: [
                        {
                          ddd: 0,
                          ind: 2,
                          ty: 4,
                          nm: "Mask",
                          parent: 7,
                          td: 1,
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [175.25, 88.795, 0], ix: 2 },
                            a: { a: 0, k: [91.664, 54.352, 0], ix: 1 },
                            s: { a: 0, k: [100, 100, 100], ix: 6 }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  ind: 0,
                                  ty: "sh",
                                  ix: 1,
                                  ks: {
                                    a: 0,
                                    k: {
                                      i: [
                                        [11.95, 8.064],
                                        [0, 0],
                                        [1.875, 0],
                                        [0.87, 0.51],
                                        [-1.53, 2.604],
                                        [0, 0],
                                        [16.716, 0.823],
                                        [0, 0],
                                        [3.02, 0],
                                        [0, 3.021],
                                        [0, 0],
                                        [13.921, -7.493],
                                        [0, 0],
                                        [2.604, -1.533],
                                        [0.94, 0],
                                        [1.02, 1.733],
                                        [0, 0],
                                        [7.978, -12.016],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0]
                                      ],
                                      o: [
                                        [0, 0],
                                        [-1.02, 1.733],
                                        [-0.942, 0],
                                        [-2.604, -1.533],
                                        [0, 0],
                                        [-13.923, -7.492],
                                        [0, 0],
                                        [0, 3.021],
                                        [-3.02, 0],
                                        [0, 0],
                                        [-16.715, 0.824],
                                        [0, 0],
                                        [1.53, 2.604],
                                        [-0.87, 0.51],
                                        [-1.875, 0],
                                        [0, 0],
                                        [-11.949, 8.064],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [-7.977, -12.016]
                                      ],
                                      v: [
                                        [61.182, -35.553],
                                        [51.491, -19.065],
                                        [46.77, -16.368],
                                        [44.004, -17.121],
                                        [42.06, -24.609],
                                        [51.832, -41.235],
                                        [5.469, -54.102],
                                        [5.469, -35.221],
                                        [-0.001, -29.752],
                                        [-5.469, -35.221],
                                        [-5.469, -54.102],
                                        [-51.829, -41.235],
                                        [-42.057, -24.609],
                                        [-44.001, -17.121],
                                        [-46.768, -16.368],
                                        [-51.488, -19.065],
                                        [-61.18, -35.554],
                                        [-91.414, -5.158],
                                        [-64.068, 54.102],
                                        [64.069, 54.102],
                                        [91.414, -5.158]
                                      ],
                                      c: true
                                    },
                                    ix: 2
                                  },
                                  nm: "Path 1",
                                  mn: "ADBE Vector Shape - Group",
                                  hd: false
                                },
                                {
                                  ty: "fl",
                                  c: {
                                    a: 0,
                                    k: [0.8154, 0.7439, 0.9961, 1],
                                    ix: 4,
                                    x: "var $bm_rt;\ntry {\n    $bm_rt = thisComp.layer('Controller').effect('Color')('ADBE Color Control-0001');\n} catch (e) {\n    $bm_rt = value;\n}"
                                  },
                                  o: { a: 0, k: 100, ix: 5 },
                                  r: 1,
                                  bm: 0,
                                  nm: "Fill 1",
                                  mn: "ADBE Vector Graphic - Fill",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [91.664, 54.352], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Group 1",
                              np: 2,
                              cix: 2,
                              bm: 0,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 150,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 3,
                          ty: 4,
                          nm: "Arrow",
                          parent: 7,
                          tt: 1,
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 0,
                                  s: [-29]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 22,
                                  s: [40]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 28.25,
                                  s: [22]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 34.5,
                                  s: [44]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 40.75,
                                  s: [22]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 47,
                                  s: [40]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 70,
                                  s: [-29]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 75,
                                  s: [-29]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 97,
                                  s: [40]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 103.25,
                                  s: [22]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 109.5,
                                  s: [44]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 115.75,
                                  s: [22]
                                },
                                {
                                  i: { x: [0.5], y: [1] },
                                  o: { x: [0.5], y: [0] },
                                  t: 122,
                                  s: [40]
                                },
                                { t: 145, s: [-29] }
                              ],
                              ix: 10
                            },
                            p: { a: 0, k: [175.25, 143.375, 0], ix: 2 },
                            a: { a: 0, k: [20.25, 56.17, 0], ix: 1 },
                            s: { a: 0, k: [100, 100, 100], ix: 6 }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  ind: 0,
                                  ty: "sh",
                                  ix: 1,
                                  ks: {
                                    a: 0,
                                    k: {
                                      i: [
                                        [0, -11.046],
                                        [11.046, 0],
                                        [0, 11.046],
                                        [0, 0]
                                      ],
                                      o: [
                                        [0, 11.046],
                                        [-11.046, 0],
                                        [0, -11.046],
                                        [0, 0]
                                      ],
                                      v: [
                                        [20, 17.658],
                                        [0, 37.658],
                                        [-20, 17.658],
                                        [0, -37.658]
                                      ],
                                      c: true
                                    },
                                    ix: 2
                                  },
                                  nm: "Path 1",
                                  mn: "ADBE Vector Shape - Group",
                                  hd: false
                                },
                                {
                                  ty: "fl",
                                  c: {
                                    a: 0,
                                    k: [0.2392, 0.2824, 0.3255, 1],
                                    ix: 4,
                                    x: "var $bm_rt;\ntry {\n    $bm_rt = thisComp.layer('Controller').effect('Color 2')('ADBE Color Control-0001');\n} catch (e) {\n    $bm_rt = value;\n}"
                                  },
                                  o: { a: 0, k: 100, ix: 5 },
                                  r: 1,
                                  bm: 0,
                                  nm: "Fill 1",
                                  mn: "ADBE Vector Graphic - Fill",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [20.25, 37.908], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Group 1",
                              np: 2,
                              cix: 2,
                              bm: 0,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 150,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 4,
                          ty: 4,
                          nm: "Scoreboard",
                          parent: 7,
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [175.25, 88.795, 0], ix: 2 },
                            a: { a: 0, k: [91.664, 54.352, 0], ix: 1 },
                            s: { a: 0, k: [100, 100, 100], ix: 6 }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  ind: 0,
                                  ty: "sh",
                                  ix: 1,
                                  ks: {
                                    a: 0,
                                    k: {
                                      i: [
                                        [11.95, 8.064],
                                        [0, 0],
                                        [1.875, 0],
                                        [0.87, 0.51],
                                        [-1.53, 2.604],
                                        [0, 0],
                                        [16.716, 0.823],
                                        [0, 0],
                                        [3.02, 0],
                                        [0, 3.021],
                                        [0, 0],
                                        [13.921, -7.493],
                                        [0, 0],
                                        [2.604, -1.533],
                                        [0.94, 0],
                                        [1.02, 1.733],
                                        [0, 0],
                                        [7.978, -12.016],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0]
                                      ],
                                      o: [
                                        [0, 0],
                                        [-1.02, 1.733],
                                        [-0.942, 0],
                                        [-2.604, -1.533],
                                        [0, 0],
                                        [-13.923, -7.492],
                                        [0, 0],
                                        [0, 3.021],
                                        [-3.02, 0],
                                        [0, 0],
                                        [-16.715, 0.824],
                                        [0, 0],
                                        [1.53, 2.604],
                                        [-0.87, 0.51],
                                        [-1.875, 0],
                                        [0, 0],
                                        [-11.949, 8.064],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [-7.977, -12.016]
                                      ],
                                      v: [
                                        [61.182, -35.553],
                                        [51.491, -19.065],
                                        [46.77, -16.368],
                                        [44.004, -17.121],
                                        [42.06, -24.609],
                                        [51.832, -41.235],
                                        [5.469, -54.102],
                                        [5.469, -35.221],
                                        [-0.001, -29.752],
                                        [-5.469, -35.221],
                                        [-5.469, -54.102],
                                        [-51.829, -41.235],
                                        [-42.057, -24.609],
                                        [-44.001, -17.121],
                                        [-46.768, -16.368],
                                        [-51.488, -19.065],
                                        [-61.18, -35.554],
                                        [-91.414, -5.158],
                                        [-64.068, 54.102],
                                        [64.069, 54.102],
                                        [91.414, -5.158]
                                      ],
                                      c: true
                                    },
                                    ix: 2
                                  },
                                  nm: "Path 1",
                                  mn: "ADBE Vector Shape - Group",
                                  hd: false
                                },
                                {
                                  ty: "fl",
                                  c: {
                                    a: 0,
                                    k: [0.8154, 0.7439, 0.9961, 1],
                                    ix: 4,
                                    x: "var $bm_rt;\ntry {\n    $bm_rt = thisComp.layer('Controller')('Effects')('Color')('ADBE Color Control-0001');\n} catch (e) {\n    $bm_rt = value;\n}"
                                  },
                                  o: { a: 0, k: 100, ix: 5 },
                                  r: 1,
                                  bm: 0,
                                  nm: "Fill 1",
                                  mn: "ADBE Vector Graphic - Fill",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [91.664, 54.352], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Group 1",
                              np: 2,
                              cix: 2,
                              bm: 0,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 150,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 5,
                          ty: 4,
                          nm: "Place 1",
                          parent: 7,
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [97.388, 231.337, 0], ix: 2 },
                            a: { a: 0, k: [56.235, 83.221, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 0,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 10,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 59,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 70,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 75,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 85,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 134,
                                  s: [92, 92, 100]
                                },
                                { t: 145, s: [100, 100, 100] }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  ind: 0,
                                  ty: "sh",
                                  ix: 1,
                                  ks: {
                                    a: 0,
                                    k: {
                                      i: [
                                        [0, 0],
                                        [3.014, 14.749],
                                        [3.965, 0],
                                        [0, 0],
                                        [0, -4.698],
                                        [0, 0],
                                        [-4.698, 0],
                                        [0, 0],
                                        [0, 4.697],
                                        [0, 0],
                                        [4.698, 0]
                                      ],
                                      o: [
                                        [-15.647, 0],
                                        [-0.794, -3.885],
                                        [0, 0],
                                        [-4.698, 0],
                                        [0, 0],
                                        [0, 4.697],
                                        [0, 0],
                                        [4.698, 0],
                                        [0, 0],
                                        [0, -4.698],
                                        [0, 0]
                                      ],
                                      v: [
                                        [20.122, -50.618],
                                        [-11.574, -76.446],
                                        [-19.986, -82.971],
                                        [-47.479, -82.971],
                                        [-55.985, -74.465],
                                        [-55.985, 74.465],
                                        [-47.479, 82.971],
                                        [47.479, 82.971],
                                        [55.985, 74.465],
                                        [55.985, -42.112],
                                        [47.479, -50.618]
                                      ],
                                      c: true
                                    },
                                    ix: 2
                                  },
                                  nm: "Path 1",
                                  mn: "ADBE Vector Shape - Group",
                                  hd: false
                                },
                                {
                                  ty: "fl",
                                  c: {
                                    a: 0,
                                    k: [0.3059, 0.2275, 0.5098, 1],
                                    ix: 4,
                                    x: "var $bm_rt;\ntry {\n    $bm_rt = thisComp.layer('Controller').effect('Color 3')('ADBE Color Control-0001');\n} catch (e) {\n    $bm_rt = value;\n}"
                                  },
                                  o: { a: 0, k: 100, ix: 5 },
                                  r: 1,
                                  bm: 0,
                                  nm: "Fill 1",
                                  mn: "ADBE Vector Graphic - Fill",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [56.235, 83.221], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Group 1",
                              np: 2,
                              cix: 2,
                              bm: 0,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 150,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 6,
                          ty: 4,
                          nm: "Place 2",
                          parent: 7,
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [253.113, 231.337, 0], ix: 2 },
                            a: { a: 0, k: [56.235, 83.221, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 10,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 22,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 47,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 59,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 85,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 97,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 122,
                                  s: [92, 92, 100]
                                },
                                { t: 134, s: [100, 100, 100] }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  ind: 0,
                                  ty: "sh",
                                  ix: 1,
                                  ks: {
                                    a: 0,
                                    k: {
                                      i: [
                                        [0, 0],
                                        [-3.014, 14.749],
                                        [-3.965, 0],
                                        [0, 0],
                                        [0, -4.698],
                                        [0, 0],
                                        [4.698, 0],
                                        [0, 0],
                                        [0, 4.697],
                                        [0, 0],
                                        [-4.698, 0]
                                      ],
                                      o: [
                                        [15.647, 0],
                                        [0.794, -3.885],
                                        [0, 0],
                                        [4.698, 0],
                                        [0, 0],
                                        [0, 4.697],
                                        [0, 0],
                                        [-4.698, 0],
                                        [0, 0],
                                        [0, -4.698],
                                        [0, 0]
                                      ],
                                      v: [
                                        [-20.122, -50.618],
                                        [11.574, -76.446],
                                        [19.986, -82.971],
                                        [47.479, -82.971],
                                        [55.985, -74.465],
                                        [55.985, 74.465],
                                        [47.479, 82.971],
                                        [-47.479, 82.971],
                                        [-55.985, 74.465],
                                        [-55.985, -42.112],
                                        [-47.479, -50.618]
                                      ],
                                      c: true
                                    },
                                    ix: 2
                                  },
                                  nm: "Path 1",
                                  mn: "ADBE Vector Shape - Group",
                                  hd: false
                                },
                                {
                                  ty: "fl",
                                  c: {
                                    a: 0,
                                    k: [0.3059, 0.2275, 0.5098, 1],
                                    ix: 4,
                                    x: "var $bm_rt;\ntry {\n    $bm_rt = thisComp.layer('Controller')('Effects')('Color 3')('ADBE Color Control-0001');\n} catch (e) {\n    $bm_rt = value;\n}"
                                  },
                                  o: { a: 0, k: 100, ix: 5 },
                                  r: 1,
                                  bm: 0,
                                  nm: "Fill 1",
                                  mn: "ADBE Vector Graphic - Fill",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [56.235, 83.221], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Group 1",
                              np: 2,
                              cix: 2,
                              bm: 0,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 150,
                          st: 0,
                          bm: 0
                        },
                        {
                          ddd: 0,
                          ind: 7,
                          ty: 4,
                          nm: "Main",
                          sr: 1,
                          ks: {
                            o: { a: 0, k: 100, ix: 11 },
                            r: { a: 0, k: 0, ix: 10 },
                            p: { a: 0, k: [250, 250, 0], ix: 2 },
                            a: { a: 0, k: [175.25, 175.25, 0], ix: 1 },
                            s: {
                              a: 1,
                              k: [
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 0,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 22,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 47,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 70,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 75,
                                  s: [100, 100, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 97,
                                  s: [92, 92, 100]
                                },
                                {
                                  i: { x: [0.5, 0.5, 0.5], y: [1, 1, 1] },
                                  o: { x: [0.5, 0.5, 0.5], y: [0, 0, 0] },
                                  t: 122,
                                  s: [92, 92, 100]
                                },
                                { t: 145, s: [100, 100, 100] }
                              ],
                              ix: 6
                            }
                          },
                          ao: 0,
                          shapes: [
                            {
                              ty: "gr",
                              it: [
                                {
                                  ind: 0,
                                  ty: "sh",
                                  ix: 1,
                                  ks: {
                                    a: 0,
                                    k: {
                                      i: [
                                        [11.771, 0],
                                        [0, 0],
                                        [38.711, 0],
                                        [25.415, -25.317],
                                        [0, 0],
                                        [0, -11.771],
                                        [0, 0],
                                        [-11.772, 0],
                                        [0, 0],
                                        [0, 11.772],
                                        [0, 0]
                                      ],
                                      o: [
                                        [0, 0],
                                        [-25.415, -25.317],
                                        [-38.71, 0],
                                        [0, 0],
                                        [-11.772, 0],
                                        [0, 0],
                                        [0, 11.772],
                                        [0, 0],
                                        [11.771, 0],
                                        [0, 0],
                                        [0, -11.771]
                                      ],
                                      v: [
                                        [153.598, -133.981],
                                        [99.116, -133.981],
                                        [0, -175],
                                        [-99.115, -133.981],
                                        [-153.597, -133.981],
                                        [-175, -112.579],
                                        [-175, 153.597],
                                        [-153.597, 175],
                                        [153.598, 175],
                                        [175, 153.597],
                                        [175, -112.579]
                                      ],
                                      c: true
                                    },
                                    ix: 2
                                  },
                                  nm: "Path 1",
                                  mn: "ADBE Vector Shape - Group",
                                  hd: false
                                },
                                {
                                  ty: "fl",
                                  c: {
                                    a: 0,
                                    k: [0.6107, 0.5071, 0.8729, 1],
                                    ix: 4,
                                    x: "var $bm_rt;\ntry {\n    $bm_rt = thisComp.layer('Controller').effect('Color 4')('ADBE Color Control-0001');\n} catch (e) {\n    $bm_rt = value;\n}"
                                  },
                                  o: { a: 0, k: 100, ix: 5 },
                                  r: 1,
                                  bm: 0,
                                  nm: "Fill 1",
                                  mn: "ADBE Vector Graphic - Fill",
                                  hd: false
                                },
                                {
                                  ty: "tr",
                                  p: { a: 0, k: [175.25, 175.25], ix: 2 },
                                  a: { a: 0, k: [0, 0], ix: 1 },
                                  s: { a: 0, k: [100, 100], ix: 3 },
                                  r: { a: 0, k: 0, ix: 6 },
                                  o: { a: 0, k: 100, ix: 7 },
                                  sk: { a: 0, k: 0, ix: 4 },
                                  sa: { a: 0, k: 0, ix: 5 },
                                  nm: "Transform"
                                }
                              ],
                              nm: "Group 1",
                              np: 2,
                              cix: 2,
                              bm: 0,
                              ix: 1,
                              mn: "ADBE Vector Group",
                              hd: false
                            }
                          ],
                          ip: 0,
                          op: 150,
                          st: 0,
                          bm: 0
                        }
                      ],
                      markers: []
                    }}
                    className={classNames("__wab_instance", sty.lottie__a0XWi)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Eh3O
                    )}
                  >
                    {
                      " \u0648\u0632\u0646\u062a\u0648 \u0628\u0631\u0648\u0632 \u06a9\u0646!"
                    }
                  </div>
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bmVx)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.selectedfood;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__obXfz)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jt7Mk
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateInfofood"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["infofood"]
                                  },
                                  operation: 0,
                                  value: currentItem
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateInfofood"] != null &&
                            typeof $steps["updateInfofood"] === "object" &&
                            typeof $steps["updateInfofood"].then === "function"
                          ) {
                            $steps["updateInfofood"] = await $steps[
                              "updateInfofood"
                            ];
                          }

                          $steps["updateModal3Open"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["modal3", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateModal3Open"] != null &&
                            typeof $steps["updateModal3Open"] === "object" &&
                            typeof $steps["updateModal3Open"].then ===
                              "function"
                          ) {
                            $steps["updateModal3Open"] = await $steps[
                              "updateModal3Open"
                            ];
                          }
                        }}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ntwqK)}
                          displayHeight={"40px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return $state.harmfulFood.find(
                                item => item.id === currentItem.id
                              ).icon;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wOdsc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vyIfq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.harmfulFood.find(
                                    item => item.id === currentItem.id
                                  ).title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0641\u0633\u062a \u0641\u0648\u062f";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6F73Z
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    let sorted_data =
                                      $state.previousWeek.data.data.sort(
                                        (a, b) =>
                                          new Date(b.timestamp) -
                                          new Date(a.timestamp)
                                      );
                                    let lastNumbersArray = [];
                                    let seenIds = new Set();
                                    for (let entry of sorted_data) {
                                      let id = entry.value.id;
                                      if (!seenIds.has(id)) {
                                        lastNumbersArray.push({
                                          id: id,
                                          number: entry.value.number
                                        });
                                        seenIds.add(id);
                                      }
                                    }
                                    let targetEntry = lastNumbersArray.find(
                                      item => item.id === currentItem.id
                                    );
                                    if (targetEntry && targetEntry != 0) {
                                      return (
                                        " هفته پیش  " +
                                        targetEntry.number +
                                        "  تا خوردی. "
                                      );
                                    } else {
                                      return (
                                        "هفته پیش " +
                                        $state.harmfulFood.find(
                                          item => item.id === currentItem.id
                                        ).title +
                                        " نخوردی."
                                      );
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "--";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <Icon67Icon
                          className={classNames(projectcss.all, sty.svg__ukafn)}
                          role={"img"}
                        />
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__s8KJi
                        )}
                      >
                        <Icon47Icon
                          className={classNames(projectcss.all, sty.svg__rhbhd)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (currentItem.number += 1);
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateVariable2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["variable2"]
                                    },
                                    operation: 0,
                                    value: $state.variable2 + 1
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVariable2"] != null &&
                              typeof $steps["updateVariable2"] === "object" &&
                              typeof $steps["updateVariable2"].then ===
                                "function"
                            ) {
                              $steps["updateVariable2"] = await $steps[
                                "updateVariable2"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://n8n.staas.ir/webhook/hamyar/food",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            userId: $state.userinfo.man.id,
                                            dataType: "food Tracker",
                                            value: {
                                              id: currentItem.id,
                                              number: currentItem.number
                                            },
                                            timestamp: $$.dayjs().format(
                                              "YYYY-MM-DD HH:mm:ss"
                                            )
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      {}
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }

                            $steps["invokeGlobalAction2"] = (() => {
                              let sorted_data =
                                $state.previousWeek.data.data.sort(
                                  (a, b) =>
                                    new Date(b.timestamp) -
                                    new Date(a.timestamp)
                                );
                              let lastNumbersArray = [];
                              let seenIds = new Set();
                              for (let entry of sorted_data) {
                                let id = entry.value.id;
                                if (!seenIds.has(id)) {
                                  lastNumbersArray.push({
                                    id: id,
                                    number: entry.value.number
                                  });
                                  seenIds.add(id);
                                }
                              }
                              return (
                                lastNumbersArray.find(
                                  item => item.id === currentItem.id
                                ).number == currentItem.number
                              );
                            })()
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "warning",
                                      (() => {
                                        try {
                                          return (
                                            "یه " +
                                            $state.harmfulFood.find(
                                              item => item.id === currentItem.id
                                            ).title +
                                            " دیگه بخوری\u060C بیشتر از هفته قبل می‌شه!"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction2"] != null &&
                              typeof $steps["invokeGlobalAction2"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction2"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction2"] = await $steps[
                                "invokeGlobalAction2"
                              ];
                            }

                            $steps["invokeGlobalAction3"] = (() => {
                              let sorted_data =
                                $state.previousWeek.data.data.sort(
                                  (a, b) =>
                                    new Date(b.timestamp) -
                                    new Date(a.timestamp)
                                );
                              let lastNumbersArray = [];
                              let seenIds = new Set();
                              for (let entry of sorted_data) {
                                let id = entry.value.id;
                                if (!seenIds.has(id)) {
                                  lastNumbersArray.push({
                                    id: id,
                                    number: entry.value.number
                                  });
                                  seenIds.add(id);
                                }
                              }
                              return (
                                lastNumbersArray.find(
                                  item => item.id === currentItem.id
                                ).number < currentItem.number
                              );
                            })()
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "\u062f\u0627\u0631\u06cc \u0627\u0632 \u0647\u0641\u062a\u0647 \u067e\u06cc\u0634 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u200c\u062e\u0648\u0631\u06cc!"
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction3"] != null &&
                              typeof $steps["invokeGlobalAction3"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction3"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction3"] = await $steps[
                                "invokeGlobalAction3"
                              ];
                            }
                          }}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__shmqm
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.number;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "--";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return currentItem.number > 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon48Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hBYru
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          if (currentItem.number > 0)
                                            return (currentItem.number -= 1);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateVariable2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["variable2"]
                                      },
                                      operation: 0,
                                      value: $state.variable2 - 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateVariable2"] != null &&
                                typeof $steps["updateVariable2"] === "object" &&
                                typeof $steps["updateVariable2"].then ===
                                  "function"
                              ) {
                                $steps["updateVariable2"] = await $steps[
                                  "updateVariable2"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://n8n.staas.ir/webhook/hamyar/food",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              userId: $state.userinfo.man.id,
                                              dataType: "food Tracker",
                                              value: {
                                                id: currentItem.id,
                                                number: currentItem.number
                                              },
                                              timestamp: $$.dayjs().format(
                                                "YYYY-MM-DD HH:mm:00"
                                              )
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                            role={"img"}
                          />
                        ) : null}
                        {(() => {
                          try {
                            return currentItem.number <= 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon48Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gYfRt
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </Stack__>
                    </div>
                  );
                })}
                <ButtonLiom
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  endIcon={
                    <Icon50Icon
                      className={classNames(projectcss.all, sty.svg__rkF5N)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  shape={"rounded"}
                  showEndIcon={true}
                  size={"compact"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ftHyi
                    )}
                  >
                    {
                      "\u0627\u0641\u0632\u0648\u062f \u062f\u0633\u062a\u0647 \u0628\u0646\u062f\u06cc \u062c\u062f\u06cc\u062f"
                    }
                  </div>
                </ButtonLiom>
              </Stack__>
            </Stack__>
          ) : null}
          <SlideinModal
            data-plasmic-name={"slideinModal"}
            data-plasmic-override={overrides.slideinModal}
            className={classNames("__wab_instance", sty.slideinModal)}
            click={generateStateValueProp($state, ["slideinModal", "click"])}
            onClickChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "slideinModal",
                "click"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__p0FBt)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p8Wyl
                )}
              >
                {"\u0648\u0632\u0646 \u0641\u0639\u0644\u06cc"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a7L89,
                  "negative"
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.weight + " kg ";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0648\u0632\u0646 \u0641\u0639\u0644\u06cc";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__qBzkS)}>
              <Input
                data-plasmic-name={"input4"}
                data-plasmic-override={overrides.input4}
                className={classNames("__wab_instance", sty.input4)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["input4", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                type={"number"}
                value={generateStateValueProp($state, ["input4", "value"])}
              />
            </div>
            <ButtonLiom
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={generateStateValueProp($state, ["button", "color"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateWeight"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["weight"]
                        },
                        operation: 0,
                        value: $state.input4.value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWeight"] != null &&
                  typeof $steps["updateWeight"] === "object" &&
                  typeof $steps["updateWeight"].then === "function"
                ) {
                  $steps["updateWeight"] = await $steps["updateWeight"];
                }

                $steps["updateSlideinModalClick"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["slideinModal", "click"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSlideinModalClick"] != null &&
                  typeof $steps["updateSlideinModalClick"] === "object" &&
                  typeof $steps["updateSlideinModalClick"].then === "function"
                ) {
                  $steps["updateSlideinModalClick"] = await $steps[
                    "updateSlideinModalClick"
                  ];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.staas.ir/webhook/hamyar/food",
                          undefined,
                          (() => {
                            try {
                              return {
                                userId: $state.userinfo.man.id,
                                dataType: "info Tracker",
                                value: {
                                  height: $state.heghit,
                                  weight: $state.weight,
                                  age: $state.age,
                                  liver: $state.liverDisease,
                                  diabetes: $state.diabetes
                                },
                                timestamp: $$.dayjs().format(
                                  "YYYY-MM-DD HH:mm:00"
                                )
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rMls
                )}
              >
                {"\u062a\u0627\u06cc\u06cc\u062f"}
              </div>
            </ButtonLiom>
          </SlideinModal>
          <ApiRequest
            data-plasmic-name={"weeknow"}
            data-plasmic-override={overrides.weeknow}
            className={classNames("__wab_instance", sty.weeknow)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["weeknow", "error"]).apply(
                null,
                eventArgs
              );

              (async error => {
                const $steps = {};

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: ["plasmic_refresh_all"]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["weeknow", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["weeknow", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  userId: $state.userinfo.man.id,
                  dataType: "food Tracker",
                  startDate: $$.dayjs()
                    .subtract(0, "week")
                    .day(0)
                    .set("hour", 0)
                    .set("minute", 0)
                    .set("second", 2)
                    .format("YYYY-MM-DD HH:mm:ss")
                    .toString(),
                  endDate: $$.dayjs().format("YYYY-MM-DD 23:59:00")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/hamyar/food"}
          />

          <ApiRequest
            data-plasmic-name={"previousWeek"}
            data-plasmic-override={overrides.previousWeek}
            className={classNames("__wab_instance", sty.previousWeek)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "previousWeek",
                "error"
              ]).apply(null, eventArgs);

              (async error => {
                const $steps = {};

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: ["plasmic_refresh_all"]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "previousWeek",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["previousWeek", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  userId: $state.userinfo.man.id,
                  dataType: "food Tracker",
                  startDate: $$.dayjs()
                    .subtract(1, "week")
                    .day(0)
                    .set("hour", 0)
                    .set("minute", 0)
                    .set("second", 1)
                    .format("YYYY-MM-DD HH:mm:ss")
                    .toString(),
                  endDate: $$.dayjs()
                    .subtract(1, "week")
                    .day(6)
                    .set("hour", 23)
                    .set("minute", 59)
                    .set("second", 59)
                    .format("YYYY-MM-DD HH:mm:ss")
                    .toString()
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/hamyar/food"}
          />

          <ApiRequest
            data-plasmic-name={"foodinfo"}
            data-plasmic-override={overrides.foodinfo}
            className={classNames("__wab_instance", sty.foodinfo)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["foodinfo", "error"]).apply(
                null,
                eventArgs
              );

              (async error => {
                const $steps = {};

                $steps["refreshData"] = true
                  ? (() => {
                      const actionArgs = {
                        queryInvalidation: ["plasmic_refresh_all"]
                      };
                      return (async ({ queryInvalidation }) => {
                        if (!queryInvalidation) {
                          return;
                        }
                        await plasmicInvalidate(queryInvalidation);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["refreshData"] != null &&
                  typeof $steps["refreshData"] === "object" &&
                  typeof $steps["refreshData"].then === "function"
                ) {
                  $steps["refreshData"] = await $steps["refreshData"];
                }
              }).apply(null, eventArgs);
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["foodinfo", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["foodinfo", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["updateWeight"] =
                  $state.foodinfo.data != null
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["weight"]
                          },
                          operation: 0,
                          value: $state.foodinfo.data.data[0].value.weight
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateWeight"] != null &&
                  typeof $steps["updateWeight"] === "object" &&
                  typeof $steps["updateWeight"].then === "function"
                ) {
                  $steps["updateWeight"] = await $steps["updateWeight"];
                }

                $steps["updateButton2Color2"] =
                  $state.foodinfo.data != null
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["heghit"]
                          },
                          operation: 0,
                          value: $state.foodinfo.data.data[0].value.height
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateButton2Color2"] != null &&
                  typeof $steps["updateButton2Color2"] === "object" &&
                  typeof $steps["updateButton2Color2"].then === "function"
                ) {
                  $steps["updateButton2Color2"] = await $steps[
                    "updateButton2Color2"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  userId: $state.userinfo.man.id,
                  dataType: "info Tracker",
                  startDate: $$.dayjs()
                    .subtract(1, "year")
                    .day(6)
                    .set("hour", 0)
                    .set("minute", 0)
                    .set("second", 1)
                    .format("YYYY-MM-DD HH:mm:ss")
                    .toString(),
                  endDate: $$.dayjs().format("YYYY-MM-DD 23:59:00")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/hamyar/food"}
          />

          <AntdModal
            data-plasmic-name={"modal3"}
            data-plasmic-override={overrides.modal3}
            className={classNames("__wab_instance", sty.modal3)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              plasmic_hamdast_sdk_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={true}
            modalScopeClassName={sty["modal3__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal3", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal3", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yJ6Zt
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.harmfulFood.find(
                        item => item.id === $state.infofood.id
                      ).title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            }
            trigger={null}
            wrapClassName={classNames({ [sty["pcls_NG0KwaSrW5GH"]]: true })}
          >
            <div className={classNames(projectcss.all, sty.freeBox___3R8Hi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5IW4O
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.harmfulFood.find(
                        item => item.id === $state.infofood.id
                      ).description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Modal content";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </AntdModal>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__puNtc)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__f7IgG)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (window.location.href =
                            "https://apps.liom.app/hamyar/?r=" +
                            $state.userinfo.r +
                            "&m=" +
                            $state.userinfo.m);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
            >
              <Icon6Icon
                className={classNames(projectcss.all, sty.svg___6OG7C)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fCLyk
                )}
              >
                {"\u0647\u0645\u06cc\u0627\u0631"}
              </div>
            </div>
            <div
              aria-pressed={undefined}
              className={classNames(projectcss.all, sty.freeBox__ecFip)}
              onClick={async event => {
                const $steps = {};

                $steps["goToBioritm"] = true
                  ? (() => {
                      const actionArgs = { destination: `/bioritm` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToBioritm"] != null &&
                  typeof $steps["goToBioritm"] === "object" &&
                  typeof $steps["goToBioritm"].then === "function"
                ) {
                  $steps["goToBioritm"] = await $steps["goToBioritm"];
                }
              }}
            >
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg___8TusP)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xwpFk
                )}
              >
                {"\u062d\u0627\u0644 \u0627\u0645\u0631\u0648\u0632"}
              </div>
            </div>
            <div
              aria-pressed={undefined}
              className={classNames(projectcss.all, sty.freeBox__w6SO)}
              onClick={async event => {
                const $steps = {};
              }}
            >
              <Icon73Icon
                className={classNames(projectcss.all, sty.svg__yPLoL)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ovJiY
                )}
              >
                {
                  "\u06a9\u0646\u062a\u0631\u0644 \u062a\u063a\u0630\u06cc\u0647"
                }
              </div>
            </div>
          </Stack__>
          {(() => {
            try {
              return (
                $state.weeknow.loading ||
                $state.previousWeek.loading ||
                $state.foodinfo.loading
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__wANr)}>
              {(() => {
                try {
                  return (
                    $state.weeknow.loading ||
                    $state.previousWeek.loading ||
                    $state.foodinfo.loading
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LottieWrapper
                  animationData={{
                    v: "5.6.10",
                    fr: 30,
                    ip: 30,
                    op: 210,
                    w: 800,
                    h: 600,
                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                    ddd: 0,
                    assets: [
                      {
                        id: "comp_0",
                        layers: [
                          {
                            ddd: 0,
                            ind: 1,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 18",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 340, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 0,
                                          s: [0]
                                        },
                                        { t: 30, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 0,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 2,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 17",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 320, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 10,
                                          s: [0]
                                        },
                                        { t: 40, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 10,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 3,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 16",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 300, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 20,
                                          s: [0]
                                        },
                                        { t: 50, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 20,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 4,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 15",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 280, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 30,
                                          s: [0]
                                        },
                                        { t: 60, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 30,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 5,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 14",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 260, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 40,
                                          s: [0]
                                        },
                                        { t: 70, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 40,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 6,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 13",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 240, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 50,
                                          s: [0]
                                        },
                                        { t: 80, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 50,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 7,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 12",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 220, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 60,
                                          s: [0]
                                        },
                                        { t: 90, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 60,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 8,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 11",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 200, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 70,
                                          s: [0]
                                        },
                                        { t: 100, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 70,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 9,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 10",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 180, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 80,
                                          s: [0]
                                        },
                                        { t: 110, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 80,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 10,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 9",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 160, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 90,
                                          s: [0]
                                        },
                                        { t: 120, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 90,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 11,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 8",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 140, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 100,
                                          s: [0]
                                        },
                                        { t: 130, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 100,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 12,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 7",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 120, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 110,
                                          s: [0]
                                        },
                                        { t: 140, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 110,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 13,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 6",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 100, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 120,
                                          s: [0]
                                        },
                                        { t: 150, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 420,
                            st: 120,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 14,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 5",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 80, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 130,
                                          s: [0]
                                        },
                                        { t: 160, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 430,
                            st: 130,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 15,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 4",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 60, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 140,
                                          s: [0]
                                        },
                                        { t: 170, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 440,
                            st: 140,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 16,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 3",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 40, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 150,
                                          s: [0]
                                        },
                                        { t: 180, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 450,
                            st: 150,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 17,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 2",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 20, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 160,
                                          s: [0]
                                        },
                                        { t: 190, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 460,
                            st: 160,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 18,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 1",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 0, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 170,
                                          s: [0]
                                        },
                                        { t: 200, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 470,
                            st: 170,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 19,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 24",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 340, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 180,
                                          s: [0]
                                        },
                                        { t: 210, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 180,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 20,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 23",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 320, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 190,
                                          s: [0]
                                        },
                                        { t: 220, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 190,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 21,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 22",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 300, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 200,
                                          s: [0]
                                        },
                                        { t: 230, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 200,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 22,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 21",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 280, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 210,
                                          s: [0]
                                        },
                                        { t: 240, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 210,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 23,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 20",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 260, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 220,
                                          s: [0]
                                        },
                                        { t: 250, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 220,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 24,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 19",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 240, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 230,
                                          s: [0]
                                        },
                                        { t: 260, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 230,
                            bm: 0
                          }
                        ]
                      }
                    ],
                    layers: [
                      {
                        ddd: 0,
                        ind: 1,
                        ty: 0,
                        nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u0084\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                        refId: "comp_0",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 100, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [400, 300, 0], ix: 2 },
                          a: { a: 0, k: [400, 300, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                        },
                        ao: 0,
                        ef: [
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00ae\u00c3\u0082\u00c2\u0080\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u0095\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00a5\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0085\u00c3\u0082\u00c2\u00b7",
                            np: 4,
                            mn: "ADBE Simple Choker",
                            ix: 1,
                            en: 1,
                            ef: [
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be",
                                mn: "ADBE Simple Choker-0001",
                                ix: 1,
                                v: { a: 0, k: 1, ix: 1 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0081\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a9",
                                mn: "ADBE Simple Choker-0002",
                                ix: 2,
                                v: { a: 0, k: 14, ix: 2 }
                              }
                            ]
                          },
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098",
                            np: 10,
                            mn: "ADBE Ramp",
                            ix: 2,
                            en: 1,
                            ef: [
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0001",
                                ix: 1,
                                v: { a: 0, k: [400, 0], ix: 1 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0002",
                                ix: 2,
                                v: { a: 0, k: [0.556, 0.26, 1, 1], ix: 2 }
                              },
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0003",
                                ix: 3,
                                v: { a: 0, k: [400, 600], ix: 3 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0093\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u009d\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0004",
                                ix: 4,
                                v: { a: 0, k: [0.616, 0.36, 1, 1], ix: 4 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6",
                                mn: "ADBE Ramp-0005",
                                ix: 5,
                                v: { a: 0, k: 1, ix: 5 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0095\u00c3\u0082\u00c2\u00a3\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b0\u00c3\u0082\u00c2\u0084",
                                mn: "ADBE Ramp-0006",
                                ix: 6,
                                v: { a: 0, k: 0, ix: 6 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u008e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008e\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088",
                                mn: "ADBE Ramp-0007",
                                ix: 7,
                                v: { a: 0, k: 0, ix: 7 }
                              },
                              {
                                ty: 6,
                                nm: "",
                                mn: "ADBE Ramp-0008",
                                ix: 8,
                                v: 0
                              }
                            ]
                          }
                        ],
                        w: 800,
                        h: 600,
                        ip: 0,
                        op: 300,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 2,
                        ty: 0,
                        nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u0084\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                        refId: "comp_0",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 56, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [400, 320, 0], ix: 2 },
                          a: { a: 0, k: [400, 300, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                        },
                        ao: 0,
                        ef: [
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00ae\u00c3\u0082\u00c2\u0080\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u0095\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00a5\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0085\u00c3\u0082\u00c2\u00b7",
                            np: 4,
                            mn: "ADBE Simple Choker",
                            ix: 1,
                            en: 1,
                            ef: [
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be",
                                mn: "ADBE Simple Choker-0001",
                                ix: 1,
                                v: { a: 0, k: 1, ix: 1 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0081\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a9",
                                mn: "ADBE Simple Choker-0002",
                                ix: 2,
                                v: { a: 0, k: 14, ix: 2 }
                              }
                            ]
                          },
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098",
                            np: 10,
                            mn: "ADBE Ramp",
                            ix: 2,
                            en: 1,
                            ef: [
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0001",
                                ix: 1,
                                v: { a: 0, k: [400, 0], ix: 1 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0002",
                                ix: 2,
                                v: { a: 0, k: [0.556, 0.26, 1, 1], ix: 2 }
                              },
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0003",
                                ix: 3,
                                v: { a: 0, k: [400, 600], ix: 3 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0093\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u009d\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0004",
                                ix: 4,
                                v: { a: 0, k: [0.616, 0.36, 1, 1], ix: 4 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6",
                                mn: "ADBE Ramp-0005",
                                ix: 5,
                                v: { a: 0, k: 1, ix: 5 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0095\u00c3\u0082\u00c2\u00a3\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b0\u00c3\u0082\u00c2\u0084",
                                mn: "ADBE Ramp-0006",
                                ix: 6,
                                v: { a: 0, k: 0, ix: 6 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u008e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008e\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088",
                                mn: "ADBE Ramp-0007",
                                ix: 7,
                                v: { a: 0, k: 0, ix: 7 }
                              },
                              {
                                ty: 6,
                                nm: "",
                                mn: "ADBE Ramp-0008",
                                ix: 8,
                                v: 0
                              }
                            ]
                          },
                          {
                            ty: 29,
                            nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00ab\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0096\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a",
                            np: 5,
                            mn: "ADBE Gaussian Blur 2",
                            ix: 3,
                            en: 1,
                            ef: [
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6",
                                mn: "ADBE Gaussian Blur 2-0001",
                                ix: 1,
                                v: { a: 0, k: 41.3, ix: 1 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0096\u00c3\u0082\u00c2\u00b9\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0091",
                                mn: "ADBE Gaussian Blur 2-0002",
                                ix: 2,
                                v: { a: 0, k: 1, ix: 2 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0087\u00c3\u0082\u00c2\u008d\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u008d\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bc\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b4\u00c3\u0082\u00c2\u00a0",
                                mn: "ADBE Gaussian Blur 2-0003",
                                ix: 3,
                                v: { a: 0, k: 0, ix: 3 }
                              }
                            ]
                          }
                        ],
                        w: 800,
                        h: 600,
                        ip: 0,
                        op: 300,
                        st: 0,
                        bm: 0
                      }
                    ],
                    markers: []
                  }}
                  autoplay={true}
                  className={classNames("__wab_instance", sty.lottie__nEe)}
                  loop={true}
                  preview={false}
                />
              ) : null}
            </div>
          ) : null}
          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "foodbox",
    "modal",
    "input",
    "tick",
    "button4",
    "modal2",
    "rangeSlider",
    "sliderMark",
    "input2",
    "input3",
    "kabed",
    "diabet",
    "button3",
    "button5",
    "button6",
    "button2",
    "slideinModal",
    "input4",
    "button",
    "weeknow",
    "previousWeek",
    "foodinfo",
    "modal3",
    "favicon"
  ],
  foodbox: ["foodbox"],
  modal: ["modal", "input", "tick", "button4"],
  input: ["input"],
  tick: ["tick"],
  button4: ["button4"],
  modal2: [
    "modal2",
    "rangeSlider",
    "sliderMark",
    "input2",
    "input3",
    "kabed",
    "diabet",
    "button3",
    "button5",
    "button6"
  ],
  rangeSlider: ["rangeSlider", "sliderMark"],
  sliderMark: ["sliderMark"],
  input2: ["input2"],
  input3: ["input3"],
  kabed: ["kabed"],
  diabet: ["diabet"],
  button3: ["button3"],
  button5: ["button5"],
  button6: ["button6"],
  button2: ["button2"],
  slideinModal: ["slideinModal", "input4", "button"],
  input4: ["input4"],
  button: ["button"],
  weeknow: ["weeknow"],
  previousWeek: ["previousWeek"],
  foodinfo: ["foodinfo"],
  modal3: ["modal3"],
  favicon: ["favicon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  foodbox: typeof Foodbox;
  modal: typeof AntdModal;
  input: typeof Input;
  tick: typeof Tick;
  button4: typeof ButtonLiom;
  modal2: typeof AntdModal;
  rangeSlider: typeof AntdRangeSlider;
  sliderMark: typeof AntdSliderMark;
  input2: typeof Input;
  input3: typeof Input;
  kabed: typeof AntdRadioGroup;
  diabet: typeof AntdRadioGroup;
  button3: typeof ButtonLiom;
  button5: typeof ButtonLiom;
  button6: typeof ButtonLiom;
  button2: typeof ButtonLiom;
  slideinModal: typeof SlideinModal;
  input4: typeof Input;
  button: typeof ButtonLiom;
  weeknow: typeof ApiRequest;
  previousWeek: typeof ApiRequest;
  foodinfo: typeof ApiRequest;
  modal3: typeof AntdModal;
  favicon: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFood__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFood__VariantsArgs;
    args?: PlasmicFood__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFood__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFood__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFood__ArgProps,
          internalVariantPropNames: PlasmicFood__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFood__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFood";
  } else {
    func.displayName = `PlasmicFood.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicFood = Object.assign(
  // Top-level PlasmicFood renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    foodbox: makeNodeComponent("foodbox"),
    modal: makeNodeComponent("modal"),
    input: makeNodeComponent("input"),
    tick: makeNodeComponent("tick"),
    button4: makeNodeComponent("button4"),
    modal2: makeNodeComponent("modal2"),
    rangeSlider: makeNodeComponent("rangeSlider"),
    sliderMark: makeNodeComponent("sliderMark"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    kabed: makeNodeComponent("kabed"),
    diabet: makeNodeComponent("diabet"),
    button3: makeNodeComponent("button3"),
    button5: makeNodeComponent("button5"),
    button6: makeNodeComponent("button6"),
    button2: makeNodeComponent("button2"),
    slideinModal: makeNodeComponent("slideinModal"),
    input4: makeNodeComponent("input4"),
    button: makeNodeComponent("button"),
    weeknow: makeNodeComponent("weeknow"),
    previousWeek: makeNodeComponent("previousWeek"),
    foodinfo: makeNodeComponent("foodinfo"),
    modal3: makeNodeComponent("modal3"),
    favicon: makeNodeComponent("favicon"),

    // Metadata about props expected for PlasmicFood
    internalVariantProps: PlasmicFood__VariantProps,
    internalArgProps: PlasmicFood__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFood;
/* prettier-ignore-end */
