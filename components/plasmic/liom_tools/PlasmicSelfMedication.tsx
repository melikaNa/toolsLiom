/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: RlsH9qDdUc17

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import LinearCalendar from "../../LinearCalendar"; // plasmic-import: UJhKrwaiZx_G/component
import Lock from "../../Lock"; // plasmic-import: 5lKm1nUlkjS8/component
import Done from "../../Done"; // plasmic-import: kuXIsI5E0lmX/component
import LinearCalendar2 from "../../LinearCalendar2"; // plasmic-import: UJN9m2mxrPIu/component
import LoadingConclusion from "../../LoadingConclusion"; // plasmic-import: 4McqJ57YwWl3/component
import DirectDialog from "../../DirectDialog"; // plasmic-import: GJ5eKNtJs574/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfMedication.module.css"; // plasmic-import: RlsH9qDdUc17/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: CIGrIuwcL9LP/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: ZqTOLr82hcYp/icon

createPlasmicElementProxy;

export type PlasmicSelfMedication__VariantMembers = {
  darkMod: "darkMod";
};
export type PlasmicSelfMedication__VariantsArgs = {
  darkMod?: SingleBooleanChoiceArg<"darkMod">;
};
type VariantPropType = keyof PlasmicSelfMedication__VariantsArgs;
export const PlasmicSelfMedication__VariantProps = new Array<VariantPropType>(
  "darkMod"
);

export type PlasmicSelfMedication__ArgsType = {};
type ArgPropType = keyof PlasmicSelfMedication__ArgsType;
export const PlasmicSelfMedication__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfMedication__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  getUser?: Flex__<typeof ApiRequest>;
  getStep?: Flex__<typeof ApiRequest>;
  getItem?: Flex__<typeof ApiRequest>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  linearCalendar?: Flex__<typeof LinearCalendar>;
  lock?: Flex__<typeof Lock>;
  done?: Flex__<typeof Done>;
  linearCalendar2?: Flex__<typeof LinearCalendar2>;
  loadingConclusion?: Flex__<typeof LoadingConclusion>;
  directDialog?: Flex__<typeof DirectDialog>;
};

export interface DefaultSelfMedicationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfMedication__RenderFunc(props: {
  variants: PlasmicSelfMedication__VariantsArgs;
  args: PlasmicSelfMedication__ArgsType;
  overrides: PlasmicSelfMedication__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "detailsList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "getStep.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getStep.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getStep.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($ctx.query.type == "danger") {
                  return parseInt($ctx.query.selectStep);
                } else {
                  var index;
                  if ($state.getStep?.data?.todayReady == 1)
                    index =
                      $state.getStep.data.data.findIndex(
                        item => item.id == $state.getStep?.data?.userStep
                      ) + 1;
                  else
                    index = $state.getStep.data.data.findIndex(
                      item => item.id == $state.getStep?.data?.userStep
                    );
                  return parseInt(index);
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "getItem.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getItem.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getItem.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "itemLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "getUser.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUser.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUser.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stepLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "userStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($ctx.query.type == "danger") {
                  return parseInt($ctx.query.selectStep);
                } else {
                  var index;
                  if ($state.getStep?.data?.todayReady == 1)
                    index =
                      $state.getStep.data.data.findIndex(
                        item => item.id == $state.getStep?.data?.userStep
                      ) + 1;
                  else
                    index = $state.getStep.data.data.findIndex(
                      item => item.id == $state.getStep?.data?.userStep
                    );
                  return parseInt(index);
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "directDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "darkMod",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.theme == "dark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.darkMod
      },
      {
        path: "directDialog.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "healthStatus",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImI5MmFlY2UzLWIyOTItNGEwOS1hZDc0LTIxZTA4NzQxZGNlNiIsInR5cGUiOiJzZXNzaW9uIn0.wa2BGGpGdL49QTwXPhcp0xHwW3h9KCp5nPVJ_fSOD5U"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqiBuxNlixBgQ(),
    theme: useTheme()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root,
            { [sty.rootdarkMod]: hasVariant($state, "darkMod", "darkMod") }
          )}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__chQel, {
              [sty.freeBoxdarkMod__chQeLtta2T]: hasVariant(
                $state,
                "darkMod",
                "darkMod"
              )
            })}
          >
            <SideEffect
              data-plasmic-name={"sideEffect"}
              data-plasmic-override={overrides.sideEffect}
              className={classNames("__wab_instance", sty.sideEffect)}
              onMount={async () => {
                const $steps = {};

                $steps["getParams"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const queryString = window.location.search;
                            const urlParams = new URLSearchParams(queryString);
                            return urlParams.forEach((value, key) => {
                              $state.paramsObject[key] = value;
                            });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["getParams"] != null &&
                  typeof $steps["getParams"] === "object" &&
                  typeof $steps["getParams"].then === "function"
                ) {
                  $steps["getParams"] = await $steps["getParams"];
                }

                $steps["clearParams"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const searchParams = new URLSearchParams(
                              window.location.search
                            );
                            searchParams.delete("token");
                            searchParams.delete("userId");
                            searchParams.delete("user_id");
                            const newUrl = `${
                              window.location.pathname
                            }?${searchParams.toString()}`;
                            return window.history.replaceState(
                              null,
                              "",
                              newUrl
                            );
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["clearParams"] != null &&
                  typeof $steps["clearParams"] === "object" &&
                  typeof $steps["clearParams"].then === "function"
                ) {
                  $steps["clearParams"] = await $steps["clearParams"];
                }

                $steps["getToken"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if (
                              $state.paramsObject.token !== undefined &&
                              $state.paramsObject.token.trim() !== ""
                            ) {
                              if (!$state.paramsObject.token.startsWith("ey"))
                                $state.paramsObject.token =
                                  $state.paramsObject.token.slice(6, -3);
                              var setCookie = (name, value, days) => {
                                const expires = new Date(
                                  Date.now() + days * 86400000
                                ).toUTCString();
                                document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                              };
                              return setCookie(
                                "token",
                                JSON.stringify([$state.paramsObject.token]),
                                100
                              );
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["getToken"] != null &&
                  typeof $steps["getToken"] === "object" &&
                  typeof $steps["getToken"].then === "function"
                ) {
                  $steps["getToken"] = await $steps["getToken"];
                }

                $steps["getTokenFromCookie"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            var getCookie = name => {
                              const cookies = document.cookie.split("; ");
                              for (let cookie of cookies) {
                                const [key, value] = cookie.split("=");
                                if (key === name) return JSON.parse(value)[0];
                              }
                              return "";
                            };
                            return ($state.token = getCookie("token"));
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["getTokenFromCookie"] != null &&
                  typeof $steps["getTokenFromCookie"] === "object" &&
                  typeof $steps["getTokenFromCookie"].then === "function"
                ) {
                  $steps["getTokenFromCookie"] = await $steps[
                    "getTokenFromCookie"
                  ];
                }

                $steps["userGuest"] =
                  $state.token == ""
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://api.liom.app/auth/signup/guest",
                            undefined,
                            (() => {
                              try {
                                return (() => {
                                  function pseudoUUID() {
                                    let timestamp = Date.now().toString(36);
                                    let randomStr = Math.random()
                                      .toString(36)
                                      .substr(2, 8);
                                    return timestamp + "-" + randomStr;
                                  }
                                  return {
                                    name: "کاربر مهمان",
                                    gateway: "self_medication",
                                    country: "98",
                                    isCountryPending: false,
                                    lang: "fa",
                                    version: "",
                                    os: (() => {
                                      const userAgent =
                                        window.navigator.userAgent;
                                      const platform =
                                        window.navigator.userAgent;
                                      if (/Windows/i.test(platform))
                                        return "Windows";
                                      if (/Mac/i.test(platform)) return "macOS";
                                      if (/Linux/i.test(platform))
                                        return "Linux";
                                      if (/Android/i.test(userAgent))
                                        return "Android";
                                      if (/iPhone|iPad|iPod/i.test(userAgent))
                                        return "iOS";
                                      return "Unknown OS";
                                    })(),
                                    osVersion: (() => {
                                      const userAgent =
                                        window.navigator.userAgent;
                                      if (/Windows NT 10.0/.test(userAgent))
                                        return "Windows 10";
                                      if (/Windows NT 6.3/.test(userAgent))
                                        return "Windows 8.1";
                                      if (/Windows NT 6.2/.test(userAgent))
                                        return "Windows 8";
                                      if (/Windows NT 6.1/.test(userAgent))
                                        return "Windows 7";
                                      if (
                                        /Mac OS X (\d+[\._]\d+)/.test(userAgent)
                                      )
                                        return `macOS ${RegExp.$1.replace(
                                          "_",
                                          "."
                                        )}`;
                                      if (
                                        /Android (\d+(\.\d+)?)/.test(userAgent)
                                      )
                                        return `Android ${RegExp.$1}`;
                                      if (
                                        /CPU (iPhone )?OS (\d+_\d+)/.test(
                                          userAgent
                                        )
                                      )
                                        return `iOS ${RegExp.$2.replace(
                                          "_",
                                          "."
                                        )}`;
                                      return "Unknown Version";
                                    })(),
                                    sex: $state.gender || "",
                                    additionalData: {
                                      ip: "132465",
                                      name: "test1"
                                    },
                                    device: (() => {
                                      const userAgent =
                                        window.navigator.userAgent;
                                      if (
                                        /Mobi|Android|iPhone|iPad|iPod/i.test(
                                          userAgent
                                        )
                                      ) {
                                        return "Mobile";
                                      } else if (
                                        /Tablet|iPad/i.test(userAgent)
                                      ) {
                                        return "Tablet";
                                      } else {
                                        return "Desktop";
                                      }
                                    })(),
                                    fcm:
                                      window.localStorage.getItem("fcmToken") ||
                                      " ",
                                    uniqueId: pseudoUUID(),
                                    device_type: window.navigator.platform,
                                    postLang: "fa"
                                  };
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["userGuest"] != null &&
                  typeof $steps["userGuest"] === "object" &&
                  typeof $steps["userGuest"].then === "function"
                ) {
                  $steps["userGuest"] = await $steps["userGuest"];
                }

                $steps["setToken"] =
                  $steps.userGuest?.data?.success ?? false
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              var setCookie = (name, value, days) => {
                                const expires = new Date(
                                  Date.now() + days * 86400000
                                ).toUTCString();
                                document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                              };
                              setCookie(
                                "token",
                                JSON.stringify([
                                  $steps.userGuest.data.result.token
                                ]),
                                100
                              );
                              return ($state.token =
                                $steps.userGuest.data.result.token);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["setToken"] != null &&
                  typeof $steps["setToken"] === "object" &&
                  typeof $steps["setToken"].then === "function"
                ) {
                  $steps["setToken"] = await $steps["setToken"];
                }
              }}
            />

            {(() => {
              try {
                return $state.paramsObject.inApp != "true";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom, {
                  [sty.headerLiomdarkMod]: hasVariant(
                    $state,
                    "darkMod",
                    "darkMod"
                  )
                })}
                dark={(() => {
                  try {
                    return $ctx.query.theme == "dark";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                slot={
                  <Paziresh24Avatar
                    data-plasmic-name={"paziresh24Avatar"}
                    data-plasmic-override={overrides.paziresh24Avatar}
                    className={classNames(
                      "__wab_instance",
                      sty.paziresh24Avatar
                    )}
                  />
                }
                slot2={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yuiru)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return window.history.back();
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    {(() => {
                      try {
                        return $ctx.query.token.length > 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon22Icon
                        className={classNames(projectcss.all, sty.svg__nBoN, {
                          [sty.svgdarkMod__nBoNTta2T]: hasVariant(
                            $state,
                            "darkMod",
                            "darkMod"
                          )
                        })}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.history.back();
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                }
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__mbOMj)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return window.history.back();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  {(() => {
                    try {
                      return (() => {
                        if (($state.getStep?.data?.info?.name ?? "") != "")
                          return true;
                        else return false;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cOzkv,
                        {
                          [sty.textdarkMod__cOzkvtta2T]: hasVariant(
                            $state,
                            "darkMod",
                            "darkMod"
                          )
                        }
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (() => {
                                      if ($ctx.query.type == "danger")
                                        return (
                                          "https://apps.liom.app/pregnancy/?token=+ " +
                                          $ctx.query.token +
                                          "&userId=" +
                                          $ctx.query.userId +
                                          "&theme=" +
                                          $ctx.query.theme +
                                          "&inAp=" +
                                          $ctx.query.inApp +
                                          "&inBot" +
                                          $ctx.query.inBot +
                                          "&version=" +
                                          $ctx.query.versio
                                        );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }}
                    >
                      <React.Fragment>
                        {$state.getStep?.data?.info?.name ?? ""}
                      </React.Fragment>
                    </div>
                  ) : null}
                </div>
              </HeaderLiom>
            ) : null}
            <div
              className={classNames(projectcss.all, sty.freeBox__eyhPa, {
                [sty.freeBoxdarkMod__eyhPatta2T]: hasVariant(
                  $state,
                  "darkMod",
                  "darkMod"
                )
              })}
            >
              <ApiRequest
                data-plasmic-name={"getUser"}
                data-plasmic-override={overrides.getUser}
                className={classNames("__wab_instance", sty.getUser)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["getUser", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getUser",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["getUser", "data"]).apply(
                    null,
                    eventArgs
                  );

                  (async data => {
                    const $steps = {};

                    $steps["updateHealthStatus"] =
                      typeof $state.getUser?.data?.[0]?.result?.user
                        ?.healthStatus != "undefined" &&
                      $state.getUser?.data?.[0]?.result?.user?.healthStatus !=
                        ""
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["healthStatus"]
                              },
                              operation: 0,
                              value:
                                $state.getUser?.data?.[0]?.result?.user
                                  ?.healthStatus
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateHealthStatus"] != null &&
                      typeof $steps["updateHealthStatus"] === "object" &&
                      typeof $steps["updateHealthStatus"].then === "function"
                    ) {
                      $steps["updateHealthStatus"] = await $steps[
                        "updateHealthStatus"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://api.liom.app/service/log",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    userId:
                                      $state.getUser.data[0].result.user.id,
                                    pageName:
                                      "self-treatment-" + $ctx.query.type,
                                    action: "onLoad-" + $ctx.query.type,
                                    extraData: {}
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMiLCJuYW1lIjoicHJlZ25hbmN5In0.nE_MuQ821HUfFQAujqlhizJRCtnhZp4Y4DYHZzVGUe4"
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return {
                      token: $state.token
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                url={"https://n8n.staas.ir/webhook/selfTreatment/userInfo"}
              >
                <ApiRequest
                  data-plasmic-name={"getStep"}
                  data-plasmic-override={overrides.getStep}
                  className={classNames("__wab_instance", sty.getStep)}
                  errorDisplay={null}
                  loadingDisplay={null}
                  method={"GET"}
                  onError={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "getStep",
                      "error"
                    ]).apply(null, eventArgs);
                  }}
                  onLoading={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "getStep",
                      "loading"
                    ]).apply(null, eventArgs);
                  }}
                  onSuccess={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "getStep",
                      "data"
                    ]).apply(null, eventArgs);

                    (async data => {
                      const $steps = {};

                      $steps["updateSelectedSteppp"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedStep"]
                              },
                              operation: 0,
                              value: (() => {
                                var index;
                                if ($state.getStep?.data?.todayReady == 1)
                                  index =
                                    $state.getStep?.data?.data.findIndex(
                                      item =>
                                        item.id ==
                                        $state.getStep?.data?.userStep
                                    ) + 1;
                                else
                                  index = $state.getStep?.data?.data.findIndex(
                                    item =>
                                      item.id == $state.getStep?.data?.userStep
                                  );
                                return index;
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedSteppp"] != null &&
                        typeof $steps["updateSelectedSteppp"] === "object" &&
                        typeof $steps["updateSelectedSteppp"].then ===
                          "function"
                      ) {
                        $steps["updateSelectedSteppp"] = await $steps[
                          "updateSelectedSteppp"
                        ];
                      }

                      $steps["updateUserStep"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["userStep"]
                              },
                              operation: 0,
                              value: (() => {
                                if ($state.getStep?.data?.todayReady == 1)
                                  return (
                                    $state.getStep?.data?.data.findIndex(
                                      item =>
                                        item.id ==
                                        $state.getStep?.data?.userStep
                                    ) + 1
                                  );
                                else
                                  return $state.getStep?.data?.data.findIndex(
                                    item =>
                                      item.id == $state.getStep?.data?.userStep
                                  );
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateUserStep"] != null &&
                        typeof $steps["updateUserStep"] === "object" &&
                        typeof $steps["updateUserStep"].then === "function"
                      ) {
                        $steps["updateUserStep"] = await $steps[
                          "updateUserStep"
                        ];
                      }

                      $steps["runCode2"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let __plasmic_ret = undefined;
                                  if (
                                    $state.getStep?.data?.userStep == 0 &&
                                    $ctx.query.type == "skinCare"
                                  ) {
                                    for (
                                      var i = 0;
                                      i < $state.getStep.data.data.length;
                                      i++
                                    ) {
                                      if (
                                        $state.getStep.data.data[i].orderr == 1
                                      ) {
                                        $state.selectedStep =
                                          $state.selectedStep + 1;
                                        __plasmic_ret = $state.userStep =
                                          $state.userStep + 1;
                                      }
                                    }
                                  }
                                  return __plasmic_ret;
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["updateSelectedStep2"] =
                        $ctx.query.type == "pregnancy_danger_sub"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedStep"]
                                },
                                operation: 0,
                                value: parseInt($ctx.query.selectStep)
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateSelectedStep2"] != null &&
                        typeof $steps["updateSelectedStep2"] === "object" &&
                        typeof $steps["updateSelectedStep2"].then === "function"
                      ) {
                        $steps["updateSelectedStep2"] = await $steps[
                          "updateSelectedStep2"
                        ];
                      }

                      $steps["updateSelectedStep"] =
                        $ctx.query.type == "stretch_marks" ||
                        $ctx.query.type == "stretch_marks_sub"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedStep"]
                                },
                                operation: 0,
                                value: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateSelectedStep"] != null &&
                        typeof $steps["updateSelectedStep"] === "object" &&
                        typeof $steps["updateSelectedStep"].then === "function"
                      ) {
                        $steps["updateSelectedStep"] = await $steps[
                          "updateSelectedStep"
                        ];
                      }

                      $steps["updateUserStep2"] =
                        $ctx.query.type == "stretch_marks"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["userStep"]
                                },
                                operation: 0,
                                value: 0
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateUserStep2"] != null &&
                        typeof $steps["updateUserStep2"] === "object" &&
                        typeof $steps["updateUserStep2"].then === "function"
                      ) {
                        $steps["updateUserStep2"] = await $steps[
                          "updateUserStep2"
                        ];
                      }

                      $steps["updateStepLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["stepLoading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStepLoading"] != null &&
                        typeof $steps["updateStepLoading"] === "object" &&
                        typeof $steps["updateStepLoading"].then === "function"
                      ) {
                        $steps["updateStepLoading"] = await $steps[
                          "updateStepLoading"
                        ];
                      }

                      $steps["wait"] = true
                        ? (() => {
                            const actionArgs = { args: [1000] };
                            return $globalActions["Fragment.wait"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["wait"] != null &&
                        typeof $steps["wait"] === "object" &&
                        typeof $steps["wait"].then === "function"
                      ) {
                        $steps["wait"] = await $steps["wait"];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const list =
                                    document.getElementById("my-scroll-list11");
                                  const list2 = list.children[0];
                                  const fourthItem =
                                    list2.children[$state.selectedStep];
                                  if (fourthItem) {
                                    const itemPosition =
                                      fourthItem.offsetLeft -
                                      list.offsetWidth * 0.35 +
                                      fourthItem.offsetWidth / 2;
                                    return list.scrollTo({
                                      left: itemPosition,
                                      behavior: "smooth"
                                    });
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  params={(() => {
                    try {
                      return (() => {
                        var type =
                          $ctx.query.type ||
                          new URLSearchParams(window.location.search).get(
                            "type"
                          );
                        return {
                          token: $state.token,
                          userId: $state.getUser.data[0].result.user.id,
                          type: type
                        };
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={"https://n8n.staas.ir/webhook/self/info"}
                >
                  <ApiRequest
                    data-plasmic-name={"getItem"}
                    data-plasmic-override={overrides.getItem}
                    className={classNames("__wab_instance", sty.getItem)}
                    errorDisplay={null}
                    loadingDisplay={null}
                    method={"GET"}
                    onError={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "getItem",
                        "error"
                      ]).apply(null, eventArgs);
                    }}
                    onLoading={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "getItem",
                        "loading"
                      ]).apply(null, eventArgs);
                    }}
                    onSuccess={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "getItem",
                        "data"
                      ]).apply(null, eventArgs);

                      (async data => {
                        const $steps = {};

                        $steps["updateDetailsList"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["detailsList"]
                                },
                                operation: 0,
                                value: $state.getItem.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDetailsList"] != null &&
                          typeof $steps["updateDetailsList"] === "object" &&
                          typeof $steps["updateDetailsList"].then === "function"
                        ) {
                          $steps["updateDetailsList"] = await $steps[
                            "updateDetailsList"
                          ];
                        }

                        $steps["updateDetailsList2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["itemLoading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDetailsList2"] != null &&
                          typeof $steps["updateDetailsList2"] === "object" &&
                          typeof $steps["updateDetailsList2"].then ===
                            "function"
                        ) {
                          $steps["updateDetailsList2"] = await $steps[
                            "updateDetailsList2"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    params={(() => {
                      try {
                        return {
                          stepId:
                            $state.getStep.data.data[$state.selectedStep].id,
                          userId: $state.getUser.data[0].result.user.id
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    url={"https://n8n.staas.ir/webhook/selfTreatment"}
                  />
                </ApiRequest>
              </ApiRequest>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__uJv)}
              >
                {(() => {
                  try {
                    return (() => {
                      if (
                        $ctx.query.type == "danger" ||
                        $ctx.query.type == "pregnancy_danger_sub"
                      ) {
                        return false;
                      } else {
                        if (
                          $state.getStep.data.data[$state.userStep].vip == 1 &&
                          $state.userStep == $state.selectedStep
                        ) {
                          const allowance =
                            $state?.getUser?.data?.[0]?.result?.allowance || [];
                          const filteredItem = allowance.find(item =>
                            item.type.includes($ctx.query.type)
                          );
                          const active = filteredItem
                            ? filteredItem.active
                            : false;
                          return (
                            !active &&
                            ($state.getUser?.loading !== undefined
                              ? !$state.getUser?.loading
                              : false)
                          );
                        } else {
                          return false;
                        }
                      }
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lHhJz, {
                      [sty.freeBoxdarkMod__lHhJZtta2T]: hasVariant(
                        $state,
                        "darkMod",
                        "darkMod"
                      )
                    })}
                  >
                    {(() => {
                      try {
                        return (() => {
                          if (
                            $ctx.query.type == "danger" ||
                            $ctx.query.type == "pregnancy_danger_sub"
                          ) {
                            return false;
                          } else {
                            if (
                              $state.getStep.data.data[$state.userStep].vip ==
                                1 &&
                              $state.userStep == $state.selectedStep
                            ) {
                              const allowance =
                                $state?.getUser?.data?.[0]?.result?.allowance ||
                                [];
                              const filteredItem = allowance.find(item =>
                                item.type.includes($ctx.query.type)
                              );
                              const active = filteredItem
                                ? filteredItem.active
                                : false;
                              return (
                                !active &&
                                !$state.itemLoading &&
                                !$state.stepLoading
                              );
                            } else {
                              return false;
                            }
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aiGEi
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] =
                            $ctx.query.inApp == "true"
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if ($ctx.query.type == "skinCare")
                                          return window.FlutterChannel.postMessage(
                                            "#directDialog-skinCare-sub"
                                          );
                                        else if ($ctx.query.type == "irregular")
                                          return window.FlutterChannel.postMessage(
                                            "#directDialog-irregular"
                                          );
                                        else if (
                                          $ctx.query.type == "stretch_marks"
                                        )
                                          return window.FlutterChannel.postMessage(
                                            "#directDialog-stretch_marks_sub"
                                          );
                                        else if ($ctx.query.type == "hair_care")
                                          return window.FlutterChannel.postMessage(
                                            "#directDialog-hair_care_sub"
                                          );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["updateDirectDialogOpen"] =
                            $ctx.query.inApp != "true"
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["directDialog", "open"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateDirectDialogOpen"] != null &&
                            typeof $steps["updateDirectDialogOpen"] ===
                              "object" &&
                            typeof $steps["updateDirectDialogOpen"].then ===
                              "function"
                          ) {
                            $steps["updateDirectDialogOpen"] = await $steps[
                              "updateDirectDialogOpen"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/service/log",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          userId: $ctx.query.userId.slice(
                                            4,
                                            $ctx.query.userId.length - 4
                                          ),
                                          pageName: "mainPage",
                                          action:
                                            "buyDialog-" + $ctx.query.type,
                                          extraData: {}
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            "Content-Type": "application/json",
                                            Authorization:
                                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMiLCJuYW1lIjoicHJlZ25hbmN5In0.nE_MuQ821HUfFQAujqlhizJRCtnhZp4Y4DYHZzVGUe4"
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__v89FH
                          )}
                        >
                          {(() => {
                            try {
                              return (
                                !$state.getStep.loading &&
                                ($state.getStep?.data?.info?.icon ?? "") != ""
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___7JnK3)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"none"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"40%"}
                              loading={"lazy"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateDirectDialogOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["directDialog", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDirectDialogOpen"] != null &&
                                  typeof $steps["updateDirectDialogOpen"] ===
                                    "object" &&
                                  typeof $steps["updateDirectDialogOpen"]
                                    .then === "function"
                                ) {
                                  $steps["updateDirectDialogOpen"] =
                                    await $steps["updateDirectDialogOpen"];
                                }
                              }}
                              src={(() => {
                                try {
                                  return $state.getStep?.data?.info?.icon ?? "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return {
                                      src: "/plasmic/liom_tools/images/loading3SvgrepoComSvg2.svg",
                                      fullWidth: 512,
                                      fullHeight: 512,
                                      aspectRatio: 1
                                    };
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uvYnO
                            )}
                          >
                            {
                              "\u0628\u0631\u0627\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u06a9\u0627\u0645\u0644 \u0628\u0647 \u0645\u062d\u062a\u0648\u0627 \u0644\u0637\u0641\u0627 \u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0647\u06cc\u0647 \u06a9\u0646\u06cc\u062f"
                            }
                          </div>
                          <ButtonLiom
                            data-plasmic-name={"buttonLiom"}
                            data-plasmic-override={overrides.buttonLiom}
                            className={classNames(
                              "__wab_instance",
                              sty.buttonLiom
                            )}
                            color={generateStateValueProp($state, [
                              "buttonLiom",
                              "color"
                            ])}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "buttonLiom",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                            size={"minimal"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__smXo4
                              )}
                            >
                              {
                                "\u062e\u0631\u06cc\u062f \u0627\u0634\u062a\u0631\u0627\u06a9"
                              }
                            </div>
                          </ButtonLiom>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__imEyz)}
                >
                  {(() => {
                    try {
                      return (
                        !$state.getStep.loading &&
                        ($state.getStep?.data?.info?.icon ?? "") != ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__asFD)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "60%"
                          : "40%"
                      }
                      loading={"lazy"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDirectDialogOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["directDialog", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDirectDialogOpen"] != null &&
                          typeof $steps["updateDirectDialogOpen"] ===
                            "object" &&
                          typeof $steps["updateDirectDialogOpen"].then ===
                            "function"
                        ) {
                          $steps["updateDirectDialogOpen"] = await $steps[
                            "updateDirectDialogOpen"
                          ];
                        }
                      }}
                      src={(() => {
                        try {
                          return $state.getStep?.data?.info?.icon ?? "";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/liom_tools/images/loading3SvgrepoComSvg2.svg",
                              fullWidth: 512,
                              fullHeight: 512,
                              aspectRatio: 1
                            };
                          }
                          throw e;
                        }
                      })()}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nIwdU
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.getStep?.data?.info?.text ?? "";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.getStep.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__nRced,
                        (() => {
                          try {
                            return $ctx.query.theme == "dark"
                              ? "shimmerDark"
                              : "shimmer";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      )}
                    />
                  ) : null}
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mmyFj)}
                  id={"my-scroll-list1"}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.getStep.data.data.length > 0
                          ? $state.getStep.data.data
                          : [];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <LinearCalendar
                        data-plasmic-name={"linearCalendar"}
                        data-plasmic-override={overrides.linearCalendar}
                        className={classNames(
                          "__wab_instance",
                          sty.linearCalendar
                        )}
                        click={(() => {
                          try {
                            return currentIndex == $state.selectedStep;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        isLock={(() => {
                          try {
                            return (() => {
                              if ($state.getStep.data.userStep < currentItem.id)
                                return true;
                              else if (
                                $state.getStep.data.userStep ==
                                  currentItem.id &&
                                (!$state.getStep?.data?.todayReady ?? false)
                              )
                                return true;
                              else return false;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        isShowDate={(() => {
                          try {
                            return false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        title={(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lokpt
                          )}
                        >
                          {(() => {
                            try {
                              return (() => {
                                if ($ctx.query.type == "danger") return false;
                                else if (
                                  $state.getStep.data.userStep < currentItem.id
                                )
                                  return true;
                                else return false;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <Lock
                              data-plasmic-name={"lock"}
                              data-plasmic-override={overrides.lock}
                              className={classNames("__wab_instance", sty.lock)}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                if ($ctx.query.type == "danger") return false;
                                else if (
                                  $state.getStep.data.userStep < currentItem.id
                                )
                                  return false;
                                else return true;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <Done
                              data-plasmic-name={"done"}
                              data-plasmic-override={overrides.done}
                              className={classNames("__wab_instance", sty.done)}
                              currentIndex={currentIndex}
                              inDone={(() => {
                                try {
                                  return (() => {
                                    if (
                                      $state.getStep.data.userStep <
                                      currentItem.id
                                    )
                                      return false;
                                    else if (
                                      $state.getStep.data.userStep ==
                                        currentItem.id &&
                                      ($state.getStep?.data?.todayReady ?? 0) ==
                                        0
                                    )
                                      return false;
                                    else return true;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3Rk8
                            )}
                          >
                            <React.Fragment>{currentItem.name}</React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fJmY
                          )}
                        >
                          {
                            "27 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a"
                          }
                        </div>
                      </LinearCalendar>
                    );
                  })}
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.getStep.data.data.length > 0
                          ? $state.getStep.data.data
                          : [];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fbJ4B,
                          ``
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSelectedStep"] = (() => {
                            if ($ctx.query.type == "danger") return true;
                            else if (
                              $state.getStep.data.userStep < currentItem.id
                            )
                              return false;
                            else return true;
                          })()
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedStep"]
                                  },
                                  operation: 0,
                                  value: currentIndex
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedStep"] != null &&
                            typeof $steps["updateSelectedStep"] === "object" &&
                            typeof $steps["updateSelectedStep"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedStep"] = await $steps[
                              "updateSelectedStep"
                            ];
                          }

                          $steps["updateDetailsList"] = (() => {
                            if ($ctx.query.type == "danger") return true;
                            else if (
                              $state.getStep.data.userStep < currentItem.id
                            )
                              return false;
                            else return true;
                          })()
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["detailsList"]
                                  },
                                  operation: 0,
                                  value: $steps.invokeGlobalAction?.data ?? []
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDetailsList"] != null &&
                            typeof $steps["updateDetailsList"] === "object" &&
                            typeof $steps["updateDetailsList"].then ===
                              "function"
                          ) {
                            $steps["updateDetailsList"] = await $steps[
                              "updateDetailsList"
                            ];
                          }

                          $steps["invokeGlobalAction"] = (() => {
                            if ($ctx.query.type == "danger") return true;
                            else if (
                              $state.getStep.data.userStep < currentItem.id
                            )
                              return false;
                            else return true;
                          })()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "https://n8n.staas.ir/webhook/selfTreatment",
                                    (() => {
                                      try {
                                        return {
                                          stepId:
                                            $state.getStep.data[
                                              $state.selectedStep
                                            ].id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updateDetailsList4"] = (() => {
                            if ($ctx.query.type == "danger") return false;
                            else if (
                              $state.getStep.data.userStep < currentItem.id
                            )
                              return true;
                            else return false;
                          })()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0642\u062f\u0645 \u0628\u0639\u062f\u06cc \u0686\u0627\u0644\u0634 \u0641\u0631\u062f\u0627 \u0628\u0631\u0627\u062a \u0628\u0627\u0632 \u0645\u06cc\u0634\u0647\u066c \u0644\u0637\u0641\u0627 \u062a\u0627 \u0627\u0648\u0646 \u0645\u0648\u0642\u0639 \u0635\u0628\u0631 \u06a9\u0646 \u0648 \u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u062a\u0648 \u0628\u0631\u0646\u0627\u0645\u0647 \u0627\u0645\u0631\u0648\u0632\u062a \u0647\u0633\u062a \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647 \ud83d\ude0d",
                                    "bottom-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDetailsList4"] != null &&
                            typeof $steps["updateDetailsList4"] === "object" &&
                            typeof $steps["updateDetailsList4"].then ===
                              "function"
                          ) {
                            $steps["updateDetailsList4"] = await $steps[
                              "updateDetailsList4"
                            ];
                          }
                        }}
                      />
                    );
                  })}
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__s9KiX)}
                  id={"my-scroll-list11"}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.getStep.data.data.length > 0
                          ? $state.getStep.data.data
                          : [];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y9Cbt,
                          ``
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSelectedStep"] = (() => {
                            if (currentIndex == $state.selectedStep)
                              return false;
                            else if (
                              $state.getStep?.data?.info?.unlockMode ==
                              "openAll"
                            )
                              return true;
                            else if ($state.userStep < currentIndex)
                              return false;
                            else return true;
                          })()
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedStep"]
                                  },
                                  operation: 0,
                                  value: currentIndex
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedStep"] != null &&
                            typeof $steps["updateSelectedStep"] === "object" &&
                            typeof $steps["updateSelectedStep"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedStep"] = await $steps[
                              "updateSelectedStep"
                            ];
                          }

                          $steps["updateDetailsList"] = (() => {
                            if (currentIndex == $state.selectedStep)
                              return false;
                            else if (
                              $state.getStep?.data?.info?.unlockMode ==
                              "openAll"
                            )
                              return true;
                            else if ($state.userStep < currentIndex)
                              return false;
                            else return true;
                          })()
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["detailsList"]
                                  },
                                  operation: 0,
                                  value: $steps.invokeGlobalAction?.data ?? []
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDetailsList"] != null &&
                            typeof $steps["updateDetailsList"] === "object" &&
                            typeof $steps["updateDetailsList"].then ===
                              "function"
                          ) {
                            $steps["updateDetailsList"] = await $steps[
                              "updateDetailsList"
                            ];
                          }

                          $steps["invokeGlobalAction"] = (() => {
                            if (currentIndex == $state.selectedStep)
                              return false;
                            else if (
                              $ctx.query.type == "danger" ||
                              $ctx.query.type == "stretch_marks" ||
                              $ctx.query.type == "hair_care"
                            )
                              return true;
                            else if ($state.userStep < currentIndex)
                              return false;
                            else return true;
                          })()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "https://n8n.staas.ir/webhook/selfTreatment",
                                    (() => {
                                      try {
                                        return {
                                          stepId:
                                            $state.getStep.data[
                                              $state.selectedStep
                                            ].id
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updateDetailsList4"] = (() => {
                            if (
                              $state.getStep?.data?.info?.unlockMode ==
                              "openAll"
                            )
                              return false;
                            else if ($state.userStep < currentIndex)
                              return true;
                            else return false;
                          })()
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0642\u062f\u0645 \u0628\u0639\u062f\u06cc \u0686\u0627\u0644\u0634 \u0641\u0631\u062f\u0627 \u0628\u0631\u0627\u062a \u0628\u0627\u0632 \u0645\u06cc\u0634\u0647\u066c \u0644\u0637\u0641\u0627 \u062a\u0627 \u0627\u0648\u0646 \u0645\u0648\u0642\u0639 \u0635\u0628\u0631 \u06a9\u0646 \u0648 \u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u062a\u0648 \u0628\u0631\u0646\u0627\u0645\u0647 \u0627\u0645\u0631\u0648\u0632\u062a \u0647\u0633\u062a \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647 \ud83d\ude0d",
                                    "bottom-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDetailsList4"] != null &&
                            typeof $steps["updateDetailsList4"] === "object" &&
                            typeof $steps["updateDetailsList4"].then ===
                              "function"
                          ) {
                            $steps["updateDetailsList4"] = await $steps[
                              "updateDetailsList4"
                            ];
                          }

                          $steps["updateDetailsList2"] =
                            //parseInt($ctx.query.version) > 286 &&
                            // if( $ctx.query.inApp == 'true')
                            // {
                            // if($ctx.query.type == 'danger')
                            // false
                            // else if(($state.userStep) < currentIndex)
                            //   true
                            // else
                            //   false
                            // } else
                            false
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        return window.FlutterChannel.postMessage(
                                          "#toast-قدم بعدی چالش فردا برات باز میشه\u066C لطفا تا اون موقع صبر کن و کارهایی که تو برنامه امروزت هست رو انجام بده \uD83D\uDE0D-warning"
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateDetailsList2"] != null &&
                            typeof $steps["updateDetailsList2"] === "object" &&
                            typeof $steps["updateDetailsList2"].then ===
                              "function"
                          ) {
                            $steps["updateDetailsList2"] = await $steps[
                              "updateDetailsList2"
                            ];
                          }
                        }}
                      >
                        {(() => {
                          try {
                            return (() => {
                              if (
                                $state.getUser.data[0].result.user
                                  .healthStatus != "period" &&
                                currentItem.orderr == 1
                              ) {
                                return false;
                              } else {
                                return true;
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <LinearCalendar2
                            data-plasmic-name={"linearCalendar2"}
                            data-plasmic-override={overrides.linearCalendar2}
                            className={classNames(
                              "__wab_instance",
                              sty.linearCalendar2,
                              {
                                [sty.linearCalendar2darkMod]: hasVariant(
                                  $state,
                                  "darkMod",
                                  "darkMod"
                                )
                              }
                            )}
                            click={(() => {
                              try {
                                return currentIndex == $state.selectedStep;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            dark={
                              hasVariant($state, "darkMod", "darkMod")
                                ? (() => {
                                    try {
                                      return $ctx.query.theme == "dark";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                : undefined
                            }
                            done={(() => {
                              try {
                                return (() => {
                                  if (
                                    $state.getStep?.data?.info?.unlockMode ==
                                      "openAll" ||
                                    currentItem.orderr != 0
                                  )
                                    return 0;
                                  else if ($state.userStep > currentIndex)
                                    return 1;
                                  else if ($state.userStep < currentIndex)
                                    return 0;
                                  else if ($state.userStep == currentIndex) {
                                    if (
                                      ($state.getStep?.data?.todayReady ?? 0) ==
                                      1
                                    )
                                      return 2;
                                    else return 1;
                                  } else return 2;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            isLock={(() => {
                              try {
                                return (() => {
                                  if (
                                    $state.getStep?.data?.info?.unlockMode ==
                                      "openAll" ||
                                    currentItem.orderr != 0
                                  )
                                    return false;
                                  else if (
                                    $state.userStep == currentIndex &&
                                    ($state.getStep?.data?.todayReady ?? 0) == 1
                                  )
                                    return false;
                                  else if ($state.userStep < currentIndex)
                                    return true;
                                  else return false;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()}
                            isShowDate={false}
                            isVip={(() => {
                              try {
                                return currentItem.vip;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()}
                            title={(() => {
                              try {
                                return currentItem.name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        ) : null}
                      </Stack__>
                    );
                  })}
                </Stack__>
                {(() => {
                  try {
                    return $state.getStep.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qfPX)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [2, 3, 4, 5, 6, 7, 8, 9, 10];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yh9Um,
                            (() => {
                              try {
                                return $ctx.query.theme == "dark"
                                  ? "shimmerDark"
                                  : "shimmer";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          )}
                          key={currentIndex}
                        />
                      );
                    })}
                  </div>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox__rMj4, {
                    [sty.freeBoxdarkMod__rMj4Tta2T]: hasVariant(
                      $state,
                      "darkMod",
                      "darkMod"
                    )
                  })}
                >
                  {(() => {
                    try {
                      return (
                        ($state.getStep.data.data[$state.selectedStep].text ??
                          "") != ""
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tCh75
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.getStep.data.data[$state.selectedStep]
                                .text ?? ""
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return !$state.getItem.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()
                    ? (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.detailsList.length > 0
                              ? $state.detailsList
                              : [];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hSeqy,
                              {
                                [sty.freeBoxdarkMod__hSeqytta2T]: hasVariant(
                                  $state,
                                  "darkMod",
                                  "darkMod"
                                )
                              }
                            )}
                            id={"parent"}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["goToPage"] = (() => {
                                const allowance =
                                  $state?.getUser?.data?.[0]?.result
                                    ?.allowance || [];
                                const filteredItem = allowance.find(item =>
                                  item.type.includes($ctx.query.type)
                                );
                                const active = filteredItem
                                  ? filteredItem.active
                                  : false;
                                return (
                                  (active || !currentItem.vip) &&
                                  $ctx.query.inApp != "true"
                                );
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      destination: (() => {
                                        try {
                                          return (() => {
                                            var token = $state.token;
                                            var title =
                                              currentItem.title +
                                              " | " +
                                              $state.getStep.data.data[
                                                $state.selectedStep
                                              ].name +
                                              " اُم";
                                            if (
                                              $ctx.query.type ==
                                                "stretch_marks" ||
                                              $ctx.query.type == "hair_care" ||
                                              $ctx.query.type ==
                                                "adhd_treatment_sub"
                                            )
                                              title = currentItem.title;
                                            if (
                                              $state.getStep.data.data[
                                                $state.selectedStep
                                              ].orderr != 0
                                            )
                                              title =
                                                currentItem.title +
                                                " | " +
                                                $state.getStep.data.data[
                                                  $state.selectedStep
                                                ].name;
                                            return (
                                              "https://tools.liom.app/self-medication-step/?secId=" +
                                              currentItem.id +
                                              "&stepId=" +
                                              currentItem.stepId +
                                              "&style=" +
                                              currentItem.styleType +
                                              "&type=" +
                                              $ctx.query.type +
                                              "&token=" +
                                              token +
                                              "&inApp=" +
                                              $ctx.query.inApp +
                                              "&userId=" +
                                              $state.getUser.data[0].result.user
                                                .id +
                                              "&selectStep=" +
                                              $state.selectedStep +
                                              "&version=" +
                                              $ctx.query.version +
                                              "&title=" +
                                              title +
                                              "&theme=" +
                                              $ctx.query.theme
                                            );
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToPage"] != null &&
                                typeof $steps["goToPage"] === "object" &&
                                typeof $steps["goToPage"].then === "function"
                              ) {
                                $steps["goToPage"] = await $steps["goToPage"];
                              }

                              $steps["runCode"] = (() => {
                                const allowance =
                                  $state?.getUser?.data?.[0]?.result
                                    ?.allowance || [];
                                const filteredItem = allowance.find(item =>
                                  item.type.includes($ctx.query.type)
                                );
                                const active = filteredItem
                                  ? filteredItem.active
                                  : false;
                                return (
                                  $ctx.query.inApp == "true" &&
                                  !active &&
                                  currentItem.vip == 1
                                );
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          if ($ctx.query.type == "danger")
                                            return window.FlutterChannel.postMessage(
                                              "#directDialog-pregnancy_danger_sub"
                                            );
                                          else
                                            return window.FlutterChannel.postMessage(
                                              "#healthSubscription"
                                            );
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["showToast"] = (() => {
                                const allowance =
                                  $state?.getUser?.data?.[0]?.result
                                    ?.allowance || [];
                                const filteredItem = allowance.find(item =>
                                  item.type.includes($ctx.query.type)
                                );
                                const active = filteredItem
                                  ? filteredItem.active
                                  : false;
                                return (
                                  $ctx.query.inApp != "true" &&
                                  !active &&
                                  currentItem.vip == 1
                                );
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["directDialog", "open"]
                                      },
                                      operation: 4
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        !oldValue
                                      );
                                      return !oldValue;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["showToast"] != null &&
                                typeof $steps["showToast"] === "object" &&
                                typeof $steps["showToast"].then === "function"
                              ) {
                                $steps["showToast"] = await $steps["showToast"];
                              }

                              $steps["runCode2"] = (() => {
                                const allowance =
                                  $state?.getUser?.data?.[0]?.result
                                    ?.allowance || [];
                                const filteredItem = allowance.find(item =>
                                  item.type.includes($ctx.query.type)
                                );
                                const active = filteredItem
                                  ? filteredItem.active
                                  : false;
                                return (
                                  (active || !currentItem.vip) &&
                                  $ctx.query.inApp == "true"
                                );
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          var token = $state.token;
                                          var link =
                                            "https://tools.liom.app/self-medication-step/?secId=" +
                                            currentItem.id +
                                            "&stepId=" +
                                            currentItem.stepId +
                                            "&style=" +
                                            currentItem.styleType +
                                            "&type=" +
                                            $ctx.query.type +
                                            "&token=" +
                                            token +
                                            "&inApp=" +
                                            $ctx.query.inApp +
                                            "&userId=" +
                                            $state.getUser.data[0].result.user
                                              .id +
                                            "&selectStep=" +
                                            $state.selectedStep +
                                            "&version=" +
                                            $ctx.query.version +
                                            "&theme=" +
                                            $ctx.query.theme;
                                          var title =
                                            currentItem.title +
                                            " | " +
                                            $state.getStep.data.data[
                                              $state.selectedStep
                                            ].name +
                                            " اُم";
                                          if (
                                            $state.getStep.data.data[
                                              $state.selectedStep
                                            ].orderr == 1
                                          )
                                            title =
                                              currentItem.title +
                                              " | " +
                                              $state.getStep.data.data[
                                                $state.selectedStep
                                              ].name;
                                          if (
                                            $ctx.query.type ==
                                              "stretch_marks" ||
                                            $ctx.query.type == "hair_care" ||
                                            $ctx.query.type ==
                                              "adhd_treatment_sub"
                                          )
                                            title = currentItem.title;
                                          return window.FlutterChannel.postMessage(
                                            "#inAppWebView**@@**" +
                                              title +
                                              "**@@**" +
                                              link
                                          );
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode2"] != null &&
                                typeof $steps["runCode2"] === "object" &&
                                typeof $steps["runCode2"].then === "function"
                              ) {
                                $steps["runCode2"] = await $steps["runCode2"];
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___5QdKl,
                                {
                                  [sty.freeBoxdarkMod___5QdKltta2T]: hasVariant(
                                    $state,
                                    "darkMod",
                                    "darkMod"
                                  )
                                }
                              )}
                            >
                              <LoadingConclusion
                                data-plasmic-name={"loadingConclusion"}
                                data-plasmic-override={
                                  overrides.loadingConclusion
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.loadingConclusion,
                                  {
                                    [sty.loadingConclusiondarkMod]: hasVariant(
                                      $state,
                                      "darkMod",
                                      "darkMod"
                                    ),
                                    [sty.loadingConclusionglobal_theme_dark]:
                                      hasVariant(
                                        globalVariants,
                                        "theme",
                                        "dark"
                                      ),
                                    [sty.loadingConclusionglobal_theme_dark_darkMod]:
                                      hasVariant(
                                        $state,
                                        "darkMod",
                                        "darkMod"
                                      ) &&
                                      hasVariant(
                                        globalVariants,
                                        "theme",
                                        "dark"
                                      )
                                  }
                                )}
                                color={
                                  hasVariant($state, "darkMod", "darkMod")
                                    ? (() => {
                                        try {
                                          return $ctx.query.type ==
                                            "dangerOrNot"
                                            ? undefined
                                            : currentItem.isDone == 1
                                            ? "green"
                                            : "trasparent";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    : (() => {
                                        try {
                                          return $ctx.query.type ==
                                            "dangerOrNot"
                                            ? undefined
                                            : currentItem.isDone == 1
                                            ? "green"
                                            : "trasparent";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                }
                                fouse={
                                  hasVariant($state, "darkMod", "darkMod")
                                    ? true
                                    : true
                                }
                                selected={
                                  hasVariant($state, "darkMod", "darkMod")
                                    ? true
                                    : true
                                }
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___8Kyoi,
                                    {
                                      [sty.freeBoxdarkMod___8Kyoitta2T]:
                                        hasVariant($state, "darkMod", "darkMod")
                                    }
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ksZwP,
                                      {
                                        [sty.textdarkMod__ksZwPtta2T]:
                                          hasVariant(
                                            $state,
                                            "darkMod",
                                            "darkMod"
                                          )
                                      }
                                    )}
                                  >
                                    <div
                                      className={
                                        projectcss.__wab_expr_html_text
                                      }
                                      dangerouslySetInnerHTML={{
                                        __html: currentItem.title
                                      }}
                                    />
                                  </div>
                                  {(() => {
                                    try {
                                      return currentItem.vip == 1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img___9Cd58)}
                                      displayHeight={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "15px"
                                          : "auto"
                                      }
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "15px"
                                          : "18px"
                                      }
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/liom_tools/images/image36.svg",
                                        fullWidth: 22,
                                        fullHeight: 20,
                                        aspectRatio: 1.1
                                      }}
                                    />
                                  ) : null}
                                </Stack__>
                              </LoadingConclusion>
                              <ChevronLeftIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__lmQ55,
                                  {
                                    [sty.svgdarkMod__lmQ55Tta2T]: hasVariant(
                                      $state,
                                      "darkMod",
                                      "darkMod"
                                    )
                                  }
                                )}
                                role={"img"}
                              />
                            </div>
                          </div>
                        );
                      })
                    : null}
                </div>
                {(() => {
                  try {
                    return $state.getItem.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()
                  ? (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [2, 3, 4, 5, 6, 7];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xObKs,
                            (() => {
                              try {
                                return $ctx.query.theme == "dark"
                                  ? "shimmerDark"
                                  : "shimmer";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          )}
                          key={currentIndex}
                        />
                      );
                    })
                  : null}
              </Stack__>
              {(() => {
                try {
                  return (
                    // if(window.scrollY <= document.body.scrollHeight)
                    // true
                    // else false

                    false
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__dnrlo)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.scrollTo({
                                top: document.body.scrollHeight,
                                behavior: "smooth"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__m6X9)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_tools/images/image38.svg",
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    }}
                  />
                </div>
              ) : null}
            </div>
          </div>
          <DirectDialog
            data-plasmic-name={"directDialog"}
            data-plasmic-override={overrides.directDialog}
            className={classNames("__wab_instance", sty.directDialog)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["directDialog", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectShopChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "directDialog",
                "selectShop"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["directDialog", "open"])}
            redirectUrl={(() => {
              try {
                return (() => {
                  var token = $state.token;
                  return `https://tools.liom.app/shopResult?buyId=${
                    $state.directDialog.selectShop.id
                  }&?offCode=&token=${token}&redirectUrl=${encodeURIComponent(
                    window.location.href
                  )}`;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            token={$state.token}
            type={(() => {
              try {
                return (() => {
                  switch ($ctx.query.type) {
                    case "skinCare":
                      return "skin_care_sub";
                    case "skinCareIsActive":
                      return "skin_care_sub";
                    case "irregular":
                      return "irregular";
                    case "stretch_marks":
                      return "stretch_marks_sub";
                    case "hair_care":
                      return "hair_care_sub";
                    case "adhd_treatment_sub":
                      return "adhd_treatment_sub";
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "headerLiom",
    "paziresh24Avatar",
    "getUser",
    "getStep",
    "getItem",
    "buttonLiom",
    "linearCalendar",
    "lock",
    "done",
    "linearCalendar2",
    "loadingConclusion",
    "directDialog"
  ],
  sideEffect: ["sideEffect"],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  getUser: ["getUser", "getStep", "getItem"],
  getStep: ["getStep", "getItem"],
  getItem: ["getItem"],
  buttonLiom: ["buttonLiom"],
  linearCalendar: ["linearCalendar", "lock", "done"],
  lock: ["lock"],
  done: ["done"],
  linearCalendar2: ["linearCalendar2"],
  loadingConclusion: ["loadingConclusion"],
  directDialog: ["directDialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  getUser: typeof ApiRequest;
  getStep: typeof ApiRequest;
  getItem: typeof ApiRequest;
  buttonLiom: typeof ButtonLiom;
  linearCalendar: typeof LinearCalendar;
  lock: typeof Lock;
  done: typeof Done;
  linearCalendar2: typeof LinearCalendar2;
  loadingConclusion: typeof LoadingConclusion;
  directDialog: typeof DirectDialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfMedication__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfMedication__VariantsArgs;
    args?: PlasmicSelfMedication__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfMedication__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfMedication__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfMedication__ArgProps,
          internalVariantPropNames: PlasmicSelfMedication__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfMedication__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfMedication";
  } else {
    func.displayName = `PlasmicSelfMedication.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfMedication = Object.assign(
  // Top-level PlasmicSelfMedication renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    getUser: makeNodeComponent("getUser"),
    getStep: makeNodeComponent("getStep"),
    getItem: makeNodeComponent("getItem"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    linearCalendar: makeNodeComponent("linearCalendar"),
    lock: makeNodeComponent("lock"),
    done: makeNodeComponent("done"),
    linearCalendar2: makeNodeComponent("linearCalendar2"),
    loadingConclusion: makeNodeComponent("loadingConclusion"),
    directDialog: makeNodeComponent("directDialog"),

    // Metadata about props expected for PlasmicSelfMedication
    internalVariantProps: PlasmicSelfMedication__VariantProps,
    internalArgProps: PlasmicSelfMedication__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfMedication;
/* prettier-ignore-end */
