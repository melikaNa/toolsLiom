// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: RlsH9qDdUc17

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import LinearCalendar from "../../LinearCalendar"; // plasmic-import: UJhKrwaiZx_G/component
import LoadingConclusion from "../../LoadingConclusion"; // plasmic-import: 4McqJ57YwWl3/component

import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfMedication.module.css"; // plasmic-import: RlsH9qDdUc17/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: CIGrIuwcL9LP/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: ZqTOLr82hcYp/icon

createPlasmicElementProxy;

export type PlasmicSelfMedication__VariantMembers = {};
export type PlasmicSelfMedication__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfMedication__VariantsArgs;
export const PlasmicSelfMedication__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfMedication__ArgsType = {};
type ArgPropType = keyof PlasmicSelfMedication__ArgsType;
export const PlasmicSelfMedication__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfMedication__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  getName?: Flex__<typeof ApiRequest>;
  getStep?: Flex__<typeof ApiRequest>;
  getUser?: Flex__<typeof ApiRequest>;
  getItem?: Flex__<typeof ApiRequest>;
  linearCalendar?: Flex__<typeof LinearCalendar>;
  loadingConclusion?: Flex__<typeof LoadingConclusion>;
};

export interface DefaultSelfMedicationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfMedication__RenderFunc(props: {
  variants: PlasmicSelfMedication__VariantsArgs;
  args: PlasmicSelfMedication__ArgsType;
  overrides: PlasmicSelfMedication__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "detailsList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "getStep.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getStep.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getStep.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedStep",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "getItem.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getItem.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getItem.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "itemLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "getUser.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUser.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUser.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getName.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getName.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getName.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["refreshData"] = true
              ? (() => {
                  const actionArgs = {
                    queryInvalidation: ["plasmic_refresh_all"]
                  };
                  return (async ({ queryInvalidation }) => {
                    if (!queryInvalidation) {
                      return;
                    }
                    await plasmicInvalidate(queryInvalidation);
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["refreshData"] != null &&
              typeof $steps["refreshData"] === "object" &&
              typeof $steps["refreshData"].then === "function"
            ) {
              $steps["refreshData"] = await $steps["refreshData"];
            }
          }}
        >
          {(() => {
            try {
              return $ctx.query.inApp == "false";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
              slot={
                <Paziresh24Avatar
                  data-plasmic-name={"paziresh24Avatar"}
                  data-plasmic-override={overrides.paziresh24Avatar}
                  className={classNames("__wab_instance", sty.paziresh24Avatar)}
                />
              }
              slot2={
                (() => {
                  try {
                    return $ctx.query.token.length > 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon22Icon
                    className={classNames(projectcss.all, sty.svg__nBoN)}
                    role={"img"}
                  />
                ) : null
              }
            >
              {(() => {
                try {
                  return (() => {
                    if ($state?.getName?.data?.[0]?.name ?? "" != "")
                      return true;
                    else return false;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cOzkv
                  )}
                >
                  <React.Fragment>
                    {$state?.getName?.data?.[0]?.name ?? ""}
                  </React.Fragment>
                </div>
              ) : null}
            </HeaderLiom>
          ) : null}
          <ApiRequest
            data-plasmic-name={"getName"}
            data-plasmic-override={overrides.getName}
            body={(() => {
              try {
                return {
                  type:
                    $ctx.query.type ||
                    new URLSearchParams(window.location.search).get("type")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            children={null}
            className={classNames("__wab_instance", sty.getName)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getName", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getName", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getName", "data"]).apply(
                null,
                eventArgs
              );
            }}
            url={"https://n8n.staas.ir/webhook/self/info"}
          />

          <ApiRequest
            data-plasmic-name={"getStep"}
            data-plasmic-override={overrides.getStep}
            className={classNames("__wab_instance", sty.getStep)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getStep", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getStep", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["getStep", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {};
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  type:
                    $ctx.query.type ||
                    new URLSearchParams(window.location.search).get("type")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/self/info"}
          >
            <ApiRequest
              data-plasmic-name={"getUser"}
              data-plasmic-override={overrides.getUser}
              className={classNames("__wab_instance", sty.getUser)}
              errorDisplay={null}
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getUser", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getUser", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getUser", "data"]).apply(
                  null,
                  eventArgs
                );

                (async data => {
                  const $steps = {};
                }).apply(null, eventArgs);
              }}
              params={(() => {
                try {
                  return {
                    token:
                      $ctx.query.token ||
                      new URLSearchParams(window.location.search).get("token")
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={"https://n8n.staas.ir/webhook/userInfo"}
            >
              <ApiRequest
                data-plasmic-name={"getItem"}
                data-plasmic-override={overrides.getItem}
                className={classNames("__wab_instance", sty.getItem)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["getItem", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getItem",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["getItem", "data"]).apply(
                    null,
                    eventArgs
                  );

                  (async data => {
                    const $steps = {};

                    $steps["updateDetailsList"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["detailsList"]
                            },
                            operation: 0,
                            value: $state.getItem.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDetailsList"] != null &&
                      typeof $steps["updateDetailsList"] === "object" &&
                      typeof $steps["updateDetailsList"].then === "function"
                    ) {
                      $steps["updateDetailsList"] = await $steps[
                        "updateDetailsList"
                      ];
                    }

                    $steps["updateDetailsList2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["itemLoading"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDetailsList2"] != null &&
                      typeof $steps["updateDetailsList2"] === "object" &&
                      typeof $steps["updateDetailsList2"].then === "function"
                    ) {
                      $steps["updateDetailsList2"] = await $steps[
                        "updateDetailsList2"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return {
                      stepId: $state.getStep.data[$state.selectedStep].id,
                      userId: $state.getUser.data[0].result.user.id
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                url={"https://n8n.staas.ir/webhook/selfTreatment"}
              />
            </ApiRequest>
          </ApiRequest>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uJv)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__imEyz)}>
              {(() => {
                try {
                  return (
                    !$state.getName.loading &&
                    ($state.getName.data[0].icon ?? "") != ""
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__asFD)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"300%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"400px"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return $state?.getName?.data?.[0]?.icon ?? "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: "/plasmic/liom_tools/images/loading3SvgrepoComSvg2.svg",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: 1
                        };
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              {(() => {
                try {
                  return $state.getName.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__nRced,
                    "shimmer"
                  )}
                />
              ) : null}
            </div>
            {(() => {
              try {
                return !$state.getStep.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5D4Eu)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.getStep.data.length > 0
                        ? $state.getStep.data
                        : [];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1NlzI
                      )}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateSelectedStep"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedStep"]
                                },
                                operation: 0,
                                value: currentIndex
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectedStep"] != null &&
                          typeof $steps["updateSelectedStep"] === "object" &&
                          typeof $steps["updateSelectedStep"].then ===
                            "function"
                        ) {
                          $steps["updateSelectedStep"] = await $steps[
                            "updateSelectedStep"
                          ];
                        }

                        $steps["updateDetailsList"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["detailsList"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction?.data ?? []
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDetailsList"] != null &&
                          typeof $steps["updateDetailsList"] === "object" &&
                          typeof $steps["updateDetailsList"].then === "function"
                        ) {
                          $steps["updateDetailsList"] = await $steps[
                            "updateDetailsList"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "https://n8n.staas.ir/webhook/selfTreatment",
                                  (() => {
                                    try {
                                      return {
                                        stepId:
                                          $state.getStep.data[
                                            $state.selectedStep
                                          ].id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateDetailsList2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return console.log($state.detailsList);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDetailsList2"] != null &&
                          typeof $steps["updateDetailsList2"] === "object" &&
                          typeof $steps["updateDetailsList2"].then ===
                            "function"
                        ) {
                          $steps["updateDetailsList2"] = await $steps[
                            "updateDetailsList2"
                          ];
                        }
                      }}
                    >
                      <LinearCalendar
                        data-plasmic-name={"linearCalendar"}
                        data-plasmic-override={overrides.linearCalendar}
                        className={classNames(
                          "__wab_instance",
                          sty.linearCalendar
                        )}
                        click={(() => {
                          try {
                            return currentIndex == $state.selectedStep;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        isLock={(() => {
                          try {
                            return currentItem.isLock;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        isShowDate={(() => {
                          try {
                            return false;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()}
                        title={(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                  );
                })}
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $ctx.query.type != "danger";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__psCpo
                )}
              >
                <React.Fragment>{(() => {})()}</React.Fragment>
              </div>
            ) : null}
            {(() => {
              try {
                return $state.getStep.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__qfPX)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [2, 3, 4, 5, 6, 7, 8, 9, 10];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__yh9Um,
                        "shimmer"
                      )}
                      key={currentIndex}
                    />
                  );
                })}
              </div>
            ) : null}
            {(() => {
              try {
                return !$state.getItem.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.detailsList.length > 0
                        ? $state.detailsList
                        : [];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hSeqy)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToPage"] = (() => {
                          const allowance =
                            $state?.getUser?.data?.[0]?.result?.allowance || [];
                          const filteredItem = allowance.find(
                            item => item.type === $ctx.query.type
                          );
                          const active = filteredItem
                            ? filteredItem.active
                            : false;
                          return active || !currentItem.vip;
                        })()
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (
                                      "https://tools.liom.app/self-medication-step/?secId=" +
                                      currentItem.id +
                                      "&stepId=" +
                                      currentItem.stepId +
                                      "&style=" +
                                      currentItem.styleType +
                                      "&type=" +
                                      $ctx.query.type +
                                      "&token=" +
                                      $ctx.query.token +
                                      "&inApp=" +
                                      $ctx.query.inApp +
                                      "&userId=" +
                                      $state.getUser.data[0].result.user.id
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }

                        $steps["runCode"] = (() => {
                          const allowance =
                            $state?.getUser?.data?.[0]?.result?.allowance || [];
                          const filteredItem = allowance.find(
                            item => item.type === $ctx.query.type
                          );
                          const active = filteredItem
                            ? filteredItem.active
                            : false;
                          return (
                            $ctx.query.inApp == "true" &&
                            !active &&
                            currentItem.vip == 1
                          );
                        })()
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.FlutterChannel.postMessage(
                                    "#healthSubscription"
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["showToast"] = (
                          ($ctx.query.inApp == "false" && currentItem.vip) == 1
                            ? true
                            : false
                        )
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0628\u0631\u0627\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0644\u0637\u0641\u0627 \u0644\u06cc\u0648\u0645 \u0631\u0648 \u0627\u0632 \u0645\u0627\u0631\u06a9\u062a \u0647\u0627\u06cc \u0645\u0639\u062a\u0628\u0631 \u062f\u0627\u0646\u0644\u0648\u062f \u0648 \u0646\u0635\u0628 \u06a9\u0646\u06cc\u062f",
                                  "bottom-center"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["showToast"] != null &&
                          typeof $steps["showToast"] === "object" &&
                          typeof $steps["showToast"].then === "function"
                        ) {
                          $steps["showToast"] = await $steps["showToast"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5QdKl
                        )}
                      >
                        <LoadingConclusion
                          data-plasmic-name={"loadingConclusion"}
                          data-plasmic-override={overrides.loadingConclusion}
                          className={classNames(
                            "__wab_instance",
                            sty.loadingConclusion
                          )}
                          color={(() => {
                            try {
                              return $ctx.query.type == "dangerOrNot"
                                ? undefined
                                : currentItem.isDone == 1
                                ? "green"
                                : true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          fouse={true}
                          selected={true}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___8Kyoi
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ksZwP
                              )}
                            >
                              <div
                                className={projectcss.__wab_expr_html_text}
                                dangerouslySetInnerHTML={{
                                  __html: currentItem.title
                                }}
                              />
                            </div>
                            {(() => {
                              try {
                                return currentItem.vip == 1;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <PlasmicImg__
                                alt={""}
                                className={classNames(sty.img___9Cd58)}
                                displayHeight={"auto"}
                                displayMaxHeight={"none"}
                                displayMaxWidth={"100%"}
                                displayMinHeight={"0"}
                                displayMinWidth={"0"}
                                displayWidth={"18px"}
                                loading={"lazy"}
                                src={{
                                  src: "/plasmic/liom_tools/images/image36.svg",
                                  fullWidth: 22,
                                  fullHeight: 20,
                                  aspectRatio: 1.1
                                }}
                              />
                            ) : null}
                          </Stack__>
                        </LoadingConclusion>
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__lmQ55)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  );
                })
              : null}
            {(() => {
              try {
                return $state.getItem.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })()
              ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [2, 3, 4, 5, 6, 7];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xObKs,
                        "shimmer"
                      )}
                      key={currentIndex}
                    />
                  );
                })
              : null}
          </Stack__>
          <div
            className={classNames(projectcss.all, sty.freeBox__dnrlo)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.scrollTo({
                          top: document.body.scrollHeight,
                          behavior: "smooth"
                        });
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__m6X9)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_tools/images/image38.svg",
                fullWidth: 24,
                fullHeight: 24,
                aspectRatio: 1
              }}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "paziresh24Avatar",
    "getName",
    "getStep",
    "getUser",
    "getItem",
    "linearCalendar",
    "loadingConclusion"
  ],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  getName: ["getName"],
  getStep: ["getStep", "getUser", "getItem"],
  getUser: ["getUser", "getItem"],
  getItem: ["getItem"],
  linearCalendar: ["linearCalendar"],
  loadingConclusion: ["loadingConclusion"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  getName: typeof ApiRequest;
  getStep: typeof ApiRequest;
  getUser: typeof ApiRequest;
  getItem: typeof ApiRequest;
  linearCalendar: typeof LinearCalendar;
  loadingConclusion: typeof LoadingConclusion;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfMedication__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfMedication__VariantsArgs;
    args?: PlasmicSelfMedication__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfMedication__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelfMedication__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfMedication__ArgProps,
          internalVariantPropNames: PlasmicSelfMedication__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfMedication__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfMedication";
  } else {
    func.displayName = `PlasmicSelfMedication.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfMedication = Object.assign(
  // Top-level PlasmicSelfMedication renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    getName: makeNodeComponent("getName"),
    getStep: makeNodeComponent("getStep"),
    getUser: makeNodeComponent("getUser"),
    getItem: makeNodeComponent("getItem"),
    linearCalendar: makeNodeComponent("linearCalendar"),
    loadingConclusion: makeNodeComponent("loadingConclusion"),

    // Metadata about props expected for PlasmicSelfMedication
    internalVariantProps: PlasmicSelfMedication__VariantProps,
    internalArgProps: PlasmicSelfMedication__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfMedication;
/* prettier-ignore-end */
