// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: RlsH9qDdUc17

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import LinearCalendar from "../../LinearCalendar"; // plasmic-import: UJhKrwaiZx_G/component
import Lock from "../../Lock"; // plasmic-import: 5lKm1nUlkjS8/component
import LoadingConclusion from "../../LoadingConclusion"; // plasmic-import: 4McqJ57YwWl3/component

import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfMedication.module.css"; // plasmic-import: RlsH9qDdUc17/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: CIGrIuwcL9LP/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicSelfMedication__VariantMembers = {};
export type PlasmicSelfMedication__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfMedication__VariantsArgs;
export const PlasmicSelfMedication__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfMedication__ArgsType = {};
type ArgPropType = keyof PlasmicSelfMedication__ArgsType;
export const PlasmicSelfMedication__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfMedication__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  img?: Flex__<typeof PlasmicImg__>;
  linearCalendar?: Flex__<typeof LinearCalendar>;
  lock?: Flex__<typeof Lock>;
  loadingConclusion?: Flex__<typeof LoadingConclusion>;
  svg?: Flex__<"svg">;
};

export interface DefaultSelfMedicationProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfMedication__RenderFunc(props: {
  variants: PlasmicSelfMedication__VariantsArgs;
  args: PlasmicSelfMedication__ArgsType;
  overrides: PlasmicSelfMedication__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
              slot={
                <Paziresh24Avatar
                  data-plasmic-name={"paziresh24Avatar"}
                  data-plasmic-override={overrides.paziresh24Avatar}
                  className={classNames("__wab_instance", sty.paziresh24Avatar)}
                />
              }
            >
              {"\u0645\u0633\u06cc\u0631 \u0633\u0644\u0627\u0645\u062a"}
            </HeaderLiom>
          </section>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__uJv)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"300%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"300px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_tools/images/医疗工作的男医生矢量扁平插画0918果冻画板1.png",
                fullWidth: 888,
                fullHeight: 705,
                aspectRatio: undefined
              }}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5D4Eu)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return [2, 3, 4, 5];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <LinearCalendar
                    data-plasmic-name={"linearCalendar"}
                    data-plasmic-override={overrides.linearCalendar}
                    className={classNames("__wab_instance", sty.linearCalendar)}
                    click={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? undefined
                        : true
                    }
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__w2GNm)}
                    >
                      <Lock
                        data-plasmic-name={"lock"}
                        data-plasmic-override={overrides.lock}
                        className={classNames("__wab_instance", sty.lock)}
                        open={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? undefined
                            : true
                        }
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lrAvx
                        )}
                      >
                        {"\u0631\u0648\u0632 1"}
                      </div>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eTvSk
                      )}
                    >
                      {"27 \u0627\u0631\u062f\u06cc\u0628\u0647\u0634\u062a"}
                    </div>
                  </LinearCalendar>
                );
              })}
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__psCpo
              )}
            >
              {"\u0631\u0648\u0632 1 \u0627\u0632 30"}
            </div>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
              2, 3, 4
            ]).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__hSeqy)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5QdKl)}
                  >
                    <LoadingConclusion
                      data-plasmic-name={"loadingConclusion"}
                      data-plasmic-override={overrides.loadingConclusion}
                      children={null}
                      className={classNames(
                        "__wab_instance",
                        sty.loadingConclusion
                      )}
                      color={"green"}
                      fouse={true}
                      selected={true}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ksZwP
                      )}
                    >
                      <div
                        className={projectcss.__wab_expr_html_text}
                        dangerouslySetInnerHTML={{
                          __html: (() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062a\u0648\u0636\u06cc\u062d \u0631\u0627\u062c\u0628 \u0628\u0686\u0647";
                              }
                              throw e;
                            }
                          })()
                        }}
                      />
                    </div>
                    <ChevronLeftIcon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  </div>
                </div>
              );
            })}
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "headerLiom",
    "paziresh24Avatar",
    "img",
    "linearCalendar",
    "lock",
    "loadingConclusion",
    "svg"
  ],
  section: ["section", "headerLiom", "paziresh24Avatar"],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  img: ["img"],
  linearCalendar: ["linearCalendar", "lock"],
  lock: ["lock"],
  loadingConclusion: ["loadingConclusion"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  img: typeof PlasmicImg__;
  linearCalendar: typeof LinearCalendar;
  lock: typeof Lock;
  loadingConclusion: typeof LoadingConclusion;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfMedication__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfMedication__VariantsArgs;
    args?: PlasmicSelfMedication__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfMedication__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelfMedication__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfMedication__ArgProps,
          internalVariantPropNames: PlasmicSelfMedication__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfMedication__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfMedication";
  } else {
    func.displayName = `PlasmicSelfMedication.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfMedication = Object.assign(
  // Top-level PlasmicSelfMedication renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    img: makeNodeComponent("img"),
    linearCalendar: makeNodeComponent("linearCalendar"),
    lock: makeNodeComponent("lock"),
    loadingConclusion: makeNodeComponent("loadingConclusion"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSelfMedication
    internalVariantProps: PlasmicSelfMedication__VariantProps,
    internalArgProps: PlasmicSelfMedication__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfMedication;
/* prettier-ignore-end */
