/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: -4EnW7-DgNW3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";

import { useScreenVariants as useScreenVariantsyg4Uf6WCaaLe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YG4uf6WCaaLe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicFoodbox.module.css"; // plasmic-import: -4EnW7-DgNW3/css

import Icon66Icon from "./icons/PlasmicIcon__Icon66"; // plasmic-import: f56Ea0fiKHl0/icon
import Icon64Icon from "./icons/PlasmicIcon__Icon64"; // plasmic-import: qESquNHBY8GB/icon
import Icon65Icon from "./icons/PlasmicIcon__Icon65"; // plasmic-import: rqpBAvsfpbPO/icon

createPlasmicElementProxy;

export type PlasmicFoodbox__VariantMembers = {
  avg: "good" | "bad" | "alert";
};
export type PlasmicFoodbox__VariantsArgs = {
  avg?: SingleChoiceArg<"good" | "bad" | "alert">;
};
type VariantPropType = keyof PlasmicFoodbox__VariantsArgs;
export const PlasmicFoodbox__VariantProps = new Array<VariantPropType>("avg");

export type PlasmicFoodbox__ArgsType = {
  variable2?: number;
  variable?: number;
};
type ArgPropType = keyof PlasmicFoodbox__ArgsType;
export const PlasmicFoodbox__ArgProps = new Array<ArgPropType>(
  "variable2",
  "variable"
);

export type PlasmicFoodbox__OverridesType = {
  root?: Flex__<"div">;
  progress?: Flex__<typeof AntdProgress>;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultFoodboxProps {
  variable2?: number;
  variable?: number;
  avg?: SingleChoiceArg<"good" | "bad" | "alert">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFoodbox__RenderFunc(props: {
  variants: PlasmicFoodbox__VariantsArgs;
  args: PlasmicFoodbox__ArgsType;
  overrides: PlasmicFoodbox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "avg",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.avg
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyg4Uf6WCaaLe()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        "food",
        {
          [sty.rootavg_alert]: hasVariant($state, "avg", "alert"),
          [sty.rootavg_bad]: hasVariant($state, "avg", "bad"),
          [sty.rootavg_good]: hasVariant($state, "avg", "good")
        }
      )}
    >
      <AntdProgress
        data-plasmic-name={"progress"}
        data-plasmic-override={overrides.progress}
        className={classNames("__wab_instance", sty.progress, {
          [sty.progressavg_alert]: hasVariant($state, "avg", "alert"),
          [sty.progressavg_bad]: hasVariant($state, "avg", "bad"),
          [sty.progressavg_good]: hasVariant($state, "avg", "good")
        })}
        percent={(() => {
          try {
            return (() => {
              return $props.variable !== 0
                ? ($props.variable2 * 50) / $props.variable
                : 0;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return 50;
            }
            throw e;
          }
        })()}
        strokeColor={(() => {
          try {
            return (() => {
              let avrg =
                $props.variable !== 0
                  ? ($props.variable2 * 50) / $props.variable
                  : 0;
              if (avrg <= 40) {
                return "#00C371";
              } else if (avrg <= 60 && avrg > 40) {
                return "#FAAD14";
              } else {
                return "#EB464A";
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "#FAAD14";
            }
            throw e;
          }
        })()}
        type={"dashboard"}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textavg_alert]: hasVariant($state, "avg", "alert"),
          [sty.textavg_bad]: hasVariant($state, "avg", "bad"),
          [sty.textavg_good]: hasVariant($state, "avg", "good")
        })}
      >
        {hasVariant($state, "avg", "bad")
          ? "\u0627\u062e\u0637\u0627\u0631 \u0627\u0632 \u0647\u0641\u062a\u0647 \u0642\u0628\u0644 \u0628\u06cc\u0634\u062a\u0631 \u0634\u062f\u0647."
          : hasVariant($state, "avg", "good")
          ? "\u062a\u0627 \u0627\u0644\u0627\u0646 \u0639\u0627\u0644\u06cc \u067e\u06cc\u0634 \u0631\u0641\u062a\u06cc!"
          : "\u062d\u0648\u0627\u0633\u062a \u0628\u0627\u0634\u0647\u060c \u062f\u0627\u0631\u0647 \u0632\u06cc\u0627\u062f \u0645\u06cc\u0634\u0647."}
      </div>
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "avg", "bad")
            ? Icon65Icon
            : hasVariant($state, "avg", "good")
            ? Icon64Icon
            : Icon66Icon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgavg_bad]: hasVariant($state, "avg", "bad"),
          [sty.svgavg_good]: hasVariant($state, "avg", "good")
        })}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "progress", "text", "svg"],
  progress: ["progress"],
  text: ["text"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  progress: typeof AntdProgress;
  text: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFoodbox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFoodbox__VariantsArgs;
    args?: PlasmicFoodbox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFoodbox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFoodbox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFoodbox__ArgProps,
          internalVariantPropNames: PlasmicFoodbox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFoodbox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFoodbox";
  } else {
    func.displayName = `PlasmicFoodbox.${nodeName}`;
  }
  return func;
}

export const PlasmicFoodbox = Object.assign(
  // Top-level PlasmicFoodbox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    progress: makeNodeComponent("progress"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicFoodbox
    internalVariantProps: PlasmicFoodbox__VariantProps,
    internalArgProps: PlasmicFoodbox__ArgProps
  }
);

export default PlasmicFoodbox;
/* prettier-ignore-end */
