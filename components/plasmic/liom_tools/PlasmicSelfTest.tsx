/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 5IOCSv5V9vzY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import MessageLiom from "../../MessageLiom"; // plasmic-import: xCdoITDvZVKn/component
import TestOptionsLiom from "../../TestOptionsLiom"; // plasmic-import: DvUx8-VJCAy9/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import Paziresh24Modal from "../../Paziresh24Modal"; // plasmic-import: ZGdhyEBPJSmH/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Stars from "../../Stars"; // plasmic-import: wwNNSLKePNyr/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfTest.module.css"; // plasmic-import: 5IOCSv5V9vzY/css

import XIcon from "../hamdast_sdk/icons/PlasmicIcon__X"; // plasmic-import: S0M2VMEAEs7X/icon
import Icon119Icon from "./icons/PlasmicIcon__Icon119"; // plasmic-import: JdBtCI53tCN5/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: 3GJi3NV2X6Zg/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: ZqTOLr82hcYp/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: d7z2iEn8tiSD/icon
import EmojiHappySquareSvgrepoComSvg2Icon from "./icons/PlasmicIcon__EmojiHappySquareSvgrepoComSvg2"; // plasmic-import: VTuVNgeUH3X6/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 7vleC7ixE4k4/icon
import EmojiSadSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmojiSadSquareSvgrepoComSvg"; // plasmic-import: frqiW1UAlfdr/icon
import Icon118Icon from "./icons/PlasmicIcon__Icon118"; // plasmic-import: DnG_0B8ScC9o/icon
import Icon167Icon from "./icons/PlasmicIcon__Icon167"; // plasmic-import: 5eVMEaBbaM21/icon

createPlasmicElementProxy;

export type PlasmicSelfTest__VariantMembers = {};
export type PlasmicSelfTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfTest__VariantsArgs;
export const PlasmicSelfTest__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfTest__ArgsType = {};
type ArgPropType = keyof PlasmicSelfTest__ArgsType;
export const PlasmicSelfTest__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfTest__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  hamdast?: Flex__<typeof Embed>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  progress?: Flex__<typeof AntdProgress>;
  messageLiom?: Flex__<typeof MessageLiom>;
  section?: Flex__<"section">;
  testOptionsLiom?: Flex__<typeof TestOptionsLiom>;
  peyliom?: Flex__<"div">;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  peyPardakht24?: Flex__<"div">;
  favicon?: Flex__<typeof Embed>;
  dialog?: Flex__<typeof Paziresh24Modal>;
  buttonLiom3?: Flex__<typeof ButtonLiom>;
  dialog2?: Flex__<typeof Paziresh24Modal>;
  shop?: Flex__<typeof ApiRequest>;
  input4?: Flex__<typeof AntdInput>;
  button12?: Flex__<typeof ButtonLiom>;
  buttonLiom6?: Flex__<typeof ButtonLiom>;
  modal?: Flex__<typeof AntdModal>;
  button3?: Flex__<typeof ButtonLiom>;
  shop2?: Flex__<typeof ApiRequest>;
  buttonLiom8?: Flex__<typeof ButtonLiom>;
  rate2?: Flex__<"div">;
  rateinfo?: Flex__<typeof AntdModal>;
  buttonLiom4?: Flex__<typeof ButtonLiom>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  comments?: Flex__<typeof Paziresh24Modal>;
  comment?: Flex__<typeof ApiRequest>;
  stars?: Flex__<typeof Stars>;
  error?: Flex__<"div">;
  buttonLiom5?: Flex__<typeof ButtonLiom>;
};

export interface DefaultSelfTestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfTest__RenderFunc(props: {
  variants: PlasmicSelfTest__VariantsArgs;
  args: PlasmicSelfTest__ArgsType;
  overrides: PlasmicSelfTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "testChat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (
                  $ctx.query.nextQuesion_id == "" ||
                  $ctx.query.nextQuesion_id == null
                ) {
                  return [];
                } else {
                  return JSON.parse(localStorage.getItem("test"));
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\u0633\u0644\u0627\u0645\ud83d\udc4b\n  \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645\u060c \u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a .",
                    from: "system"
                  },
                  {
                    text: "\u0627\u06af\u0631 \u062f\u0631\u0628\u0627\u0631\u0647 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0646\u06af\u0631\u0627\u0646\u06cc \u062f\u0627\u0631\u06cc\u060c \u0627\u06cc\u0646 \u062a\u0633\u062a \u0628\u0647\u062a \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u062a\u0627 \u0648\u0636\u0639\u06cc\u062a \u062e\u0648\u062f\u062a \u0631\u0648 \u0628\u0647\u062a\u0631 \u0628\u0633\u0646\u062c\u06cc.",
                    from: "system"
                  },
                  {
                    text: " \u0628\u0627 \u067e\u0627\u0633\u062e \u0628\u0647 \u0686\u0646\u062f \u0633\u0648\u0627\u0644\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u062f\u0631 \u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f5 \u062f\u0642\u06cc\u0642\u0647 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0622\u06cc\u0627 \u062f\u0686\u0627\u0631 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0647\u0633\u062a\u06cc\u062f \u06cc\u0627 \u062e\u06cc\u0631 \u0645\u0637\u0644\u0639 \u0634\u0648\u06cc\u062f",
                    from: "system"
                  },
                  {
                    text: "\u0622\u0645\u0627\u062f\u0647 \u0627\u06cc \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645\u061f",
                    question: { lock: 0 },
                    from: "system",
                    btnText:
                      "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",
                    options: [
                      {
                        id: 1,
                        text: "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645"
                      }
                    ]
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "testOptionsLiom.selectedIDs",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "ferst",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.nextQuesion_id == null ||
                $ctx.query.nextQuesion_id == ""
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextQuesionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.testChat
                  .slice()
                  .reverse()
                  .find(item => item.question);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.session_id == "" ||
                $ctx.query.session_id == null
                ? 0
                : parseInt($ctx.query.session_id);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "lock",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadinkBotten",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "totalTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 35
      },
      {
        path: "retestTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.nextQuesion_id == "" ||
                $ctx.query.nextQuesion_id == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "edit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "green"
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.status == "" || $ctx.query.status == null
                ? ""
                : $ctx.query.status;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "buy",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showgreen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "authCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "data",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "infoTest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "orginNotLook",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let urlOrigin =
                  $ctx.query.origin ||
                  new window.URLSearchParams(window.location.search).get(
                    "origin"
                  );
                return !(
                  urlOrigin == "pazireshBlog" ||
                  urlOrigin == "pazireshSearch" ||
                  urlOrigin == "liomSelfCare"
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonLiom6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "free",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.status != "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://tools.liom.app/self-test/?user_id=${$state.userId}&type=${$state.type}&app=${$ctx.query.app}&session_id=${$state.sessionId}&inApp=${$ctx.query.inApp}&origin=${$ctx.query.origin}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "shop2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonLiom8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "rateinfo.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softSand"
      },
      {
        path: "buttonLiom4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "comments.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "comment.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "comment.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "comment.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cRate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "owner",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "next",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "buttonLiom.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button12.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom6.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom8.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "testOptionsLiom.number",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "paziresh24",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "buttonLiom5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonLiom5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "errorload",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shoping",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "variable4",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable5",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicSelfTest.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSelfTest.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSelfTest.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicSelfTest.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicSelfTest.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicSelfTest.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicSelfTest.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicSelfTest.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          styleTokensClassNames,
          styleTokensClassNames_antd_5_hostless,
          styleTokensClassNames_plasmic_rich_components,
          styleTokensClassNames_paziresh_24_design_system,
          styleTokensClassNames_hamdast_sdk,
          sty.root,
          {
            [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              )
          }
        )}
        onLoad={async event => {
          const $steps = {};

          $steps["invokeGlobalAction"] = false
            ? (() => {
                const actionArgs = {
                  args: [
                    "PUT",
                    "https://n8n.staas.ir/webhook/selfTestPaymentPasiresh24",
                    undefined,
                    (() => {
                      try {
                        return {
                          receipt_id: localStorage.getItem("receipt_id")
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    {}
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }

          $steps["invokeGlobalAction2"] = false
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "https://n8n.staas.ir/webhook/selfTestPayment",
                    undefined,
                    (() => {
                      try {
                        return {
                          status: $steps.invokeGlobalAction.data.status
                            ? "OK"
                            : "NOK",
                          extra: {
                            user_id: localStorage.getItem("user_id"),
                            session_id: new window.URLSearchParams(
                              window.location.search
                            ).get("session_id")
                          },
                          id: localStorage.getItem("receipt_id")
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction2"] != null &&
            typeof $steps["invokeGlobalAction2"] === "object" &&
            typeof $steps["invokeGlobalAction2"].then === "function"
          ) {
            $steps["invokeGlobalAction2"] = await $steps["invokeGlobalAction2"];
          }

          $steps["runCode"] = true
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      if (window.location.href.includes("?token")) {
                        window.location.href = window.location.href.replace(
                          "?token=",
                          "&token="
                        );
                      }
                      var urlParams = new window.URLSearchParams(
                        window.location.search
                      );
                      var app = urlParams.get("app");
                      var originUserId = urlParams.has("origin_user_id")
                        ? urlParams.get("origin_user_id")
                        : null;
                      if (!urlParams.has("type")) {
                        window.location.href =
                          window.location.href + "&type=irregular";
                      }
                      if (
                        $steps.invokeGlobalAction?.data?.status == true &&
                        localStorage.getItem("receipt_id")
                      ) {
                        $state.status = "OK";
                        localStorage.removeItem("receipt_id");
                      } else if (
                        $steps.invokeGlobalAction?.data &&
                        !$steps.invokeGlobalAction?.data?.status &&
                        localStorage.getItem("receipt_id")
                      ) {
                        $state.status = "NOK";
                        localStorage.removeItem("receipt_id");
                      }
                      if (urlParams.has("home-page")) {
                        return window.sessionStorage.setItem(
                          "home-page",
                          urlParams.get("home-page")
                        );
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
      >
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
          onMount={async () => {
            const $steps = {};

            $steps["params"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const queryString = window.location.search;
                        const urlParams = new URLSearchParams(queryString);
                        return urlParams.forEach((value, key) => {
                          $state.paramsObject[key] = value;
                        });
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["params"] != null &&
              typeof $steps["params"] === "object" &&
              typeof $steps["params"].then === "function"
            ) {
              $steps["params"] = await $steps["params"];
            }

            $steps["clearParams"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const searchParams = new URLSearchParams(
                          window.location.search
                        );
                        searchParams.delete("token");
                        searchParams.delete("userId");
                        searchParams.delete("user_id");
                        const newUrl = `${
                          window.location.pathname
                        }?${searchParams.toString()}`;
                        return window.history.replaceState(null, "", newUrl);
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["clearParams"] != null &&
              typeof $steps["clearParams"] === "object" &&
              typeof $steps["clearParams"].then === "function"
            ) {
              $steps["clearParams"] = await $steps["clearParams"];
            }

            $steps["setCookie"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        if (
                          $state.paramsObject.token !== undefined &&
                          $state.paramsObject.token.trim() !== ""
                        ) {
                          if (!$state.paramsObject.token.startsWith("ey"))
                            $state.paramsObject.token =
                              $state.paramsObject.token.slice(6, -3);
                          var setCookie = (name, value, days) => {
                            const expires = new Date(
                              Date.now() + days * 86400000
                            ).toUTCString();
                            document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                          };
                          return setCookie(
                            "token",
                            JSON.stringify([$state.paramsObject.token]),
                            100
                          );
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["setCookie"] != null &&
              typeof $steps["setCookie"] === "object" &&
              typeof $steps["setCookie"].then === "function"
            ) {
              $steps["setCookie"] = await $steps["setCookie"];
            }

            $steps["getCookie"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        var getCookie = name => {
                          const cookies = document.cookie.split("; ");
                          for (let cookie of cookies) {
                            const [key, value] = cookie.split("=");
                            if (key === name) return JSON.parse(value)[0];
                          }
                          return "";
                        };
                        return ($state.token = getCookie("token"));
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["getCookie"] != null &&
              typeof $steps["getCookie"] === "object" &&
              typeof $steps["getCookie"].then === "function"
            ) {
              $steps["getCookie"] = await $steps["getCookie"];
            }

            $steps["user"] =
              $state.token != "" && $state.paramsObject.gw != "paziresh24"
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/users/profile",
                        undefined,
                        undefined,
                        (() => {
                          try {
                            return {
                              headers: {
                                Authorization: $state.token,
                                area: "selfTest"
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["user"] != null &&
              typeof $steps["user"] === "object" &&
              typeof $steps["user"].then === "function"
            ) {
              $steps["user"] = await $steps["user"];
            }

            $steps["paziresh24"] =
              $state.paramsObject.gw == "paziresh24"
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.paziresh24 =
                          await window.hamdast.getState("user"));
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["paziresh24"] != null &&
              typeof $steps["paziresh24"] === "object" &&
              typeof $steps["paziresh24"].then === "function"
            ) {
              $steps["paziresh24"] = await $steps["paziresh24"];
            }

            $steps["userInfoUpdate"] =
              $steps.user?.data?.success ?? false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userInfo"]
                      },
                      operation: 0,
                      value: $steps.user.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["userInfoUpdate"] != null &&
              typeof $steps["userInfoUpdate"] === "object" &&
              typeof $steps["userInfoUpdate"].then === "function"
            ) {
              $steps["userInfoUpdate"] = await $steps["userInfoUpdate"];
            }

            $steps["usergust"] =
              $state.token == "" && $state.paramsObject.gw != "paziresh24"
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.liom.app/auth/signup/guest",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              function pseudoUUID() {
                                let timestamp = Date.now().toString(36);
                                let randomStr = Math.random()
                                  .toString(36)
                                  .substr(2, 8);
                                return timestamp + "-" + randomStr;
                              }
                              return {
                                name: "کاربر مهمان",
                                gateway: "self_test",
                                country: "98",
                                isCountryPending: false,
                                lang: "fa",
                                version: "",
                                os: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  const platform = window.navigator.userAgent;
                                  if (/Windows/i.test(platform))
                                    return "Windows";
                                  if (/Mac/i.test(platform)) return "macOS";
                                  if (/Linux/i.test(platform)) return "Linux";
                                  if (/Android/i.test(userAgent))
                                    return "Android";
                                  if (/iPhone|iPad|iPod/i.test(userAgent))
                                    return "iOS";
                                  return "Unknown OS";
                                })(),
                                osVersion: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  if (/Windows NT 10.0/.test(userAgent))
                                    return "Windows 10";
                                  if (/Windows NT 6.3/.test(userAgent))
                                    return "Windows 8.1";
                                  if (/Windows NT 6.2/.test(userAgent))
                                    return "Windows 8";
                                  if (/Windows NT 6.1/.test(userAgent))
                                    return "Windows 7";
                                  if (/Mac OS X (\d+[\._]\d+)/.test(userAgent))
                                    return `macOS ${RegExp.$1.replace(
                                      "_",
                                      "."
                                    )}`;
                                  if (/Android (\d+(\.\d+)?)/.test(userAgent))
                                    return `Android ${RegExp.$1}`;
                                  if (
                                    /CPU (iPhone )?OS (\d+_\d+)/.test(userAgent)
                                  )
                                    return `iOS ${RegExp.$2.replace("_", ".")}`;
                                  return "Unknown Version";
                                })(),
                                sex: $state.gender || "",
                                additionalData: {
                                  ip: "132465",
                                  name: "test1"
                                },
                                device: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  if (
                                    /Mobi|Android|iPhone|iPad|iPod/i.test(
                                      userAgent
                                    )
                                  ) {
                                    return "Mobile";
                                  } else if (/Tablet|iPad/i.test(userAgent)) {
                                    return "Tablet";
                                  } else {
                                    return "Desktop";
                                  }
                                })(),
                                fcm:
                                  window.localStorage.getItem("fcmToken") ||
                                  " ",
                                uniqueId: pseudoUUID(),
                                device_type: window.navigator.platform,
                                postLang: "fa"
                              };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["usergust"] != null &&
              typeof $steps["usergust"] === "object" &&
              typeof $steps["usergust"].then === "function"
            ) {
              $steps["usergust"] = await $steps["usergust"];
            }

            $steps["userInfogust"] =
              $steps.usergust?.data?.success ?? false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userInfo"]
                      },
                      operation: 0,
                      value: {
                        id: $steps.usergust.data.result.userId,
                        name: "کاربر مهمان",
                        token: $steps.usergust.data.result.token
                      }
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["userInfogust"] != null &&
              typeof $steps["userInfogust"] === "object" &&
              typeof $steps["userInfogust"].then === "function"
            ) {
              $steps["userInfogust"] = await $steps["userInfogust"];
            }

            $steps["setCookieGust"] =
              $steps.usergust?.data?.success ?? false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var setCookie = (name, value, days) => {
                            const expires = new Date(
                              Date.now() + days * 86400000
                            ).toUTCString();
                            document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                          };
                          return setCookie(
                            "token",
                            JSON.stringify([$steps.usergust.data.result.token]),
                            100
                          );
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["setCookieGust"] != null &&
              typeof $steps["setCookieGust"] === "object" &&
              typeof $steps["setCookieGust"].then === "function"
            ) {
              $steps["setCookieGust"] = await $steps["setCookieGust"];
            }

            $steps["noProfile"] = false
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["userInfo"]
                    },
                    operation: 0,
                    value: {
                      id:
                        $state.paramsObject.userId ||
                        $state.paramsObject.user_id ||
                        $state.paramsObject.origin_user_id
                    }
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["noProfile"] != null &&
              typeof $steps["noProfile"] === "object" &&
              typeof $steps["noProfile"].then === "function"
            ) {
              $steps["noProfile"] = await $steps["noProfile"];
            }

            $steps["selfTestUser"] =
              !localStorage.getItem("user_id") &&
              new URLSearchParams(window.location.search).get("origin") ===
                "eata"
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/selfTestUser",
                        (() => {
                          try {
                            return {
                              origin_user_id:
                                window.Eitaa?.WebApp?.initDataUnsafe?.user?.id
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["selfTestUser"] != null &&
              typeof $steps["selfTestUser"] === "object" &&
              typeof $steps["selfTestUser"].then === "function"
            ) {
              $steps["selfTestUser"] = await $steps["selfTestUser"];
            }

            $steps["selfTestUserPost"] =
              //$steps.user?.data?.success == true || $steps.usergust?.data?.success == true ||
              $state.userInfo || Object.keys($state.paziresh24).length > 0
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/selfTestUser",
                        undefined,
                        (() => {
                          try {
                            return {
                              mobile:
                                $state.paziresh24.cell ||
                                $state.userInfo.mobile ||
                                null,
                              email:
                                $state.paziresh24.email ||
                                $state.userInfo.email ||
                                null,
                              name: $state.paziresh24.name
                                ? $state.paziresh24.name +
                                  ($state.paziresh24.family
                                    ? " " + $state.paziresh24.family
                                    : "")
                                : $state.userInfo.name || null,
                              origin:
                                $state.paramsObject.origin ||
                                $state.paramsObject.app ||
                                "liomSite",
                              origin_user_id:
                                $state.paziresh24.id ||
                                $state.userInfo.id ||
                                $state.paramsObject.user_id ||
                                $state.paramsObject.userId,
                              token: $state.userInfo.token || "",
                              nationalCode:
                                $state.paziresh24.national_code || "",
                              gender: $state.paziresh24.gender || ""
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["selfTestUserPost"] != null &&
              typeof $steps["selfTestUserPost"] === "object" &&
              typeof $steps["selfTestUserPost"].then === "function"
            ) {
              $steps["selfTestUserPost"] = await $steps["selfTestUserPost"];
            }

            $steps["updateTestChat5"] =
              new URLSearchParams(window.location.search).get("origin") ===
              "eata"
                ? (() => {
                    const actionArgs = { args: [3000] };
                    return $globalActions["Fragment.wait"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["updateTestChat5"] != null &&
              typeof $steps["updateTestChat5"] === "object" &&
              typeof $steps["updateTestChat5"].then === "function"
            ) {
              $steps["updateTestChat5"] = await $steps["updateTestChat5"];
            }

            $steps["userId"] =
              $steps.selfTestUser?.data?.success == true ||
              $steps.selfTestUserPost?.data?.success == true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.userId =
                            $steps.selfTestUserPost?.data?.user_id;
                          return ($state.name = $state.userInfo.name);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["userId"] != null &&
              typeof $steps["userId"] === "object" &&
              typeof $steps["userId"].then === "function"
            ) {
              $steps["userId"] = await $steps["userId"];
            }

            $steps["infoTest"] =
              $state.userId != ""
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://n8n.staas.ir/webhook/addUserSelfTest",
                        (() => {
                          try {
                            return {
                              type: $state.paramsObject.type,
                              origin: $state.paramsObject.origin,
                              inApp: $state.paramsObject.inApp,
                              user_id: $state.userId
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["infoTest"] != null &&
              typeof $steps["infoTest"] === "object" &&
              typeof $steps["infoTest"].then === "function"
            ) {
              $steps["infoTest"] = await $steps["infoTest"];
            }

            $steps["updateTestChat6"] = $steps.infoTest?.data?.info?.shopId
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["shopId"]
                    },
                    operation: 0,
                    value: $steps.infoTest?.data?.info?.shopId
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTestChat6"] != null &&
              typeof $steps["updateTestChat6"] === "object" &&
              typeof $steps["updateTestChat6"].then === "function"
            ) {
              $steps["updateTestChat6"] = await $steps["updateTestChat6"];
            }

            $steps["updateTestChat2"] = $steps.infoTest?.data?.info
              ?.numberOfquestion
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["totalTest"]
                    },
                    operation: 0,
                    value: $steps.infoTest?.data?.info.numberOfquestion
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTestChat2"] != null &&
              typeof $steps["updateTestChat2"] === "object" &&
              typeof $steps["updateTestChat2"].then === "function"
            ) {
              $steps["updateTestChat2"] = await $steps["updateTestChat2"];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        $state.productKey =
                          $steps.infoTest?.data?.info?.product_key;
                        $state.rate = $steps.infoTest?.data?.info?.rate;
                        $state.cRate = $steps.infoTest?.data.info.cRate;
                        $state.shoping = $steps.infoTest?.data.info;
                        window.sessionStorage.setItem(
                          "testID",
                          $steps.infoTest?.data?.info?.id
                        );
                        return ($state.owner = {
                          ownerId: $steps.infoTest?.data?.info?.ownerId,
                          ownerName: $steps.infoTest?.data?.info?.ownerName,
                          ownerExpert: $steps.infoTest?.data?.info?.ownerExpert,
                          ownerImage: $steps.infoTest?.data?.info?.ownerImage
                        });
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["updateTestChat9"] =
              $state.shopId == ""
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["errorload"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateTestChat9"] != null &&
              typeof $steps["updateTestChat9"] === "object" &&
              typeof $steps["updateTestChat9"].then === "function"
            ) {
              $steps["updateTestChat9"] = await $steps["updateTestChat9"];
            }

            $steps["updateTestChat7"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["free"]
                    },
                    operation: 0,
                    value: $steps.infoTest?.data?.canStart
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTestChat7"] != null &&
              typeof $steps["updateTestChat7"] === "object" &&
              typeof $steps["updateTestChat7"].then === "function"
            ) {
              $steps["updateTestChat7"] = await $steps["updateTestChat7"];
            }

            $steps["updateTestChat"] = $steps.infoTest?.data?.info?.festText
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["testChat"]
                    },
                    operation: 0,
                    value: (() => {
                      if (
                        $ctx.query.nextQuesion_id == "" ||
                        $ctx.query.nextQuesion_id == null
                      ) {
                        return JSON.parse($steps.infoTest.data.info.festText);
                      } else {
                        return JSON.parse(localStorage.getItem("test"));
                      }
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTestChat"] != null &&
              typeof $steps["updateTestChat"] === "object" &&
              typeof $steps["updateTestChat"].then === "function"
            ) {
              $steps["updateTestChat"] = await $steps["updateTestChat"];
            }

            $steps["retestTest"] =
              $state.retestTest == false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.testChat[$state.testChat.length - 1] = {
                          text: "آماده ای گفتگو رو ادامه بدیم\u061F",
                          question: { lock: 0 },
                          from: "system",
                          btnText: "ادامه گفتگو",
                          options: [
                            {
                              id: -50,
                              text: "ادامه گفتگو"
                            }
                          ]
                        });
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["retestTest"] != null &&
              typeof $steps["retestTest"] === "object" &&
              typeof $steps["retestTest"].then === "function"
            ) {
              $steps["retestTest"] = await $steps["retestTest"];
            }

            $steps["testIds"] =
              $state.retestTest == false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["testOptionsLiom", "selectedIDs"]
                      },
                      operation: 0,
                      value: [-50]
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["testIds"] != null &&
              typeof $steps["testIds"] === "object" &&
              typeof $steps["testIds"].then === "function"
            ) {
              $steps["testIds"] = await $steps["testIds"];
            }

            $steps["refreshDown"] =
              $state.testChat[$state.testChat.length - 1]?.options[0]?.id == -50
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return window.scrollTo({
                          top: document.body.scrollHeight,
                          behavior: "smooth"
                        });
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["refreshDown"] != null &&
              typeof $steps["refreshDown"] === "object" &&
              typeof $steps["refreshDown"].then === "function"
            ) {
              $steps["refreshDown"] = await $steps["refreshDown"];
            }

            $steps["numberOfQ"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const type =
                          $ctx.query.type ||
                          new URLSearchParams(window.location.search).get(
                            "type"
                          ) ||
                          "";
                        if ($steps.infoTest?.data?.info.numberOfquestion) {
                          $state.totalTest =
                            $steps.infoTest?.data?.info.numberOfquestion || 35;
                          $state.numberTest = 0;
                          if (
                            $ctx.query.nextQuesion_id != null &&
                            $ctx.query.nextQuesion_id !== ""
                          ) {
                            return ($state.numberTest = 10);
                          }
                        } else if (type !== "") {
                          $state.totalTest = 51;
                          return ($state.numberTest = 40);
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["numberOfQ"] != null &&
              typeof $steps["numberOfQ"] === "object" &&
              typeof $steps["numberOfQ"].then === "function"
            ) {
              $steps["numberOfQ"] = await $steps["numberOfQ"];
            }

            $steps["updateTestChat4"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["loading"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTestChat4"] != null &&
              typeof $steps["updateTestChat4"] === "object" &&
              typeof $steps["updateTestChat4"].then === "function"
            ) {
              $steps["updateTestChat4"] = await $steps["updateTestChat4"];
            }

            $steps["result"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "https://n8n.staas.ir/webhook/resultList",
                      (() => {
                        try {
                          return { user_id: $state.userId };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["result"] != null &&
              typeof $steps["result"] === "object" &&
              typeof $steps["result"].then === "function"
            ) {
              $steps["result"] = await $steps["result"];
            }

            $steps["showgreen"] = ($steps.result?.data ? true : false)
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["showgreen"]
                    },
                    operation: 0,
                    value: $steps.result?.data || []
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["showgreen"] != null &&
              typeof $steps["showgreen"] === "object" &&
              typeof $steps["showgreen"].then === "function"
            ) {
              $steps["showgreen"] = await $steps["showgreen"];
            }

            $steps["updateTestChat3"] =
              new URLSearchParams(window.location.search).get("origin") ===
              "eata"
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          window.Eitaa.WebApp.MainButton.text = "لیوم";
                          window.Eitaa.WebApp.MainButton.disable();
                          window.Eitaa.WebApp.MainButton.color = "#ffffff";
                          window.Eitaa.WebApp.MainButton.textColor = "#ffffff";
                          return window.Eitaa.WebApp.MainButton.show();
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateTestChat3"] != null &&
              typeof $steps["updateTestChat3"] === "object" &&
              typeof $steps["updateTestChat3"].then === "function"
            ) {
              $steps["updateTestChat3"] = await $steps["updateTestChat3"];
            }

            $steps["updateTestChat8"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        var messageBox =
                          window.document.getElementById("chatBox");
                        if (messageBox) {
                          var inputBox = document.getElementById("selectBox");
                          messageBox.style.paddingBottom = `${
                            inputBox.offsetHeight + 20
                          }px`;
                          return (messageBox.scrollTop =
                            messageBox.scrollHeight);
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTestChat8"] != null &&
              typeof $steps["updateTestChat8"] === "object" &&
              typeof $steps["updateTestChat8"].then === "function"
            ) {
              $steps["updateTestChat8"] = await $steps["updateTestChat8"];
            }

            $steps["log"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://api.liom.app/service/log",
                      undefined,
                      (() => {
                        try {
                          return {
                            userId: $state.userId,
                            pageName: `self-test-${$state.paramsObject.type}`,
                            action: `onLoad-${$state.paramsObject.type}`,
                            extraData: {}
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      (() => {
                        try {
                          return {
                            headers: {
                              "Content-Type": "application/json",
                              Authorization:
                                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                            }
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["log"] != null &&
              typeof $steps["log"] === "object" &&
              typeof $steps["log"].then === "function"
            ) {
              $steps["log"] = await $steps["log"];
            }
          }}
        />

        <Embed
          data-plasmic-name={"hamdast"}
          data-plasmic-override={overrides.hamdast}
          className={classNames("__wab_instance", sty.hamdast)}
          code={
            '<script src="https://hamdast.paziresh24.com/sdk/hamdast.js"></script>'
          }
        />

        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return (
                    new URLSearchParams(window.location.search).get("inApp") !=
                    "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (
                    new window.URLSearchParams(window.location.search).get(
                      "inApp"
                    ) != "true"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <HeaderLiom
            data-plasmic-name={"headerLiom"}
            data-plasmic-override={overrides.headerLiom}
            className={classNames("__wab_instance", sty.headerLiom)}
            slot={
              <React.Fragment>
                {(() => {
                  try {
                    return window.sessionStorage.getItem("home-page") != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <XIcon
                    className={classNames(projectcss.all, sty.svg__fkEs)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return window.location.replace(
                                    window.sessionStorage.getItem("home-page")
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    role={"img"}
                  />
                ) : null}
                <Paziresh24Avatar
                  data-plasmic-name={"paziresh24Avatar"}
                  data-plasmic-override={overrides.paziresh24Avatar}
                  className={classNames("__wab_instance", sty.paziresh24Avatar)}
                  src={(() => {
                    try {
                      return $state.owner.ownerImage;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </React.Fragment>
            }
            slot2={null}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zSfpX)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mJlZs
                )}
                data-i18n={"title"}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.owner.ownerName;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </HeaderLiom>
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__eKo7V)}
          style={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return {
                      top:
                        new URLSearchParams(window.location.search).get(
                          "inApp"
                        ) == "true"
                          ? "-10px"
                          : ""
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return {
                      top:
                        new window.URLSearchParams(window.location.search).get(
                          "inApp"
                        ) == "true"
                          ? "-10px"
                          : ""
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
        >
          <AntdProgress
            data-plasmic-name={"progress"}
            data-plasmic-override={overrides.progress}
            className={classNames("__wab_instance", sty.progress)}
            gradient={[]}
            percent={(() => {
              try {
                return $state.numberTest / ($state.totalTest / 100) - 0.1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 0;
                }
                throw e;
              }
            })()}
            showInfo={false}
            strokeColor={(() => {
              try {
                return (() => {
                  if ($ctx.query.app == "liom") return "#EF6FB7";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            strokeWidth={
              hasVariant(globalVariants, "screen", "mobileOnly") ? 5 : 6
            }
            successPercent={undefined}
            type={"line"}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__fwEj, ``)}
          id={"chatBox"}
        >
          <Reveal
            big={false}
            cascade={false}
            className={classNames("__wab_instance", sty.reveal__simfe)}
            delay={0}
            direction={"up"}
            duration={1000}
            effect={"fade"}
            triggerOnce={true}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.testChat;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <MessageLiom
                  data-plasmic-name={"messageLiom"}
                  data-plasmic-override={overrides.messageLiom}
                  className={classNames("__wab_instance", sty.messageLiom, {
                    [sty.messageLiomglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants",
                        "unnamedVariant"
                      )
                  })}
                  endMessege={(() => {
                    try {
                      return (
                        $state.testChat[currentIndex].from === "system" &&
                        ($state.testChat[currentIndex + 1]?.from !== "system" ||
                          $state.testChat.length - 1 === currentIndex)
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  hint={(() => {
                    try {
                      return currentItem.tip;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  inApp={(() => {
                    try {
                      return $state.paramsObject.inApp == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  key={currentIndex}
                  liomAnswer={(() => {
                    try {
                      return (
                        currentItem.from == "user" && $ctx.query.app == "liom"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loadingMessage={(() => {
                    try {
                      return currentItem.loading == true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  pazireshAnswer={(() => {
                    try {
                      return currentItem.from == "user";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  slot={
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const lastUserMessage =
                              $state.testChat
                                .slice()
                                .reverse()
                                .find(item => item.from === "user") || false;
                            return (
                              lastUserMessage &&
                              lastUserMessage.id === currentItem.id &&
                              currentItem.text != "شروع کنیم" &&
                              currentItem.text != "ادامه گفتگو" &&
                              $state.retestTest == true
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          aria-disabled={(() => {
                            try {
                              return $state.variable4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c1Ue
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateVariable4"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["variable4"]
                                    },
                                    operation: 4,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVariable4"] != null &&
                              typeof $steps["updateVariable4"] === "object" &&
                              typeof $steps["updateVariable4"].then ===
                                "function"
                            ) {
                              $steps["updateVariable4"] = await $steps[
                                "updateVariable4"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "PUT",
                                      "https://n8n.staas.ir/webhook/selfTestLogs",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            session_id: $state.sessionId,
                                            question_id:
                                              $state.testChat[
                                                $state.testChat.length - 1
                                              ].question.id
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }

                            $steps["runCode"] = $steps.invokeGlobalAction?.data
                              ?.success
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        const reversedIndex = $state.testChat
                                          .slice()
                                          .reverse()
                                          .findIndex(item => item.question);
                                        if (reversedIndex !== -1) {
                                          const originalIndex =
                                            $state.testChat.length -
                                            1 -
                                            reversedIndex;
                                          const previousReversedIndex =
                                            $state.testChat
                                              .slice(0, originalIndex)
                                              .reverse()
                                              .findIndex(item => item.question);
                                          if (previousReversedIndex !== -1) {
                                            const previousOriginalIndex =
                                              originalIndex -
                                              1 -
                                              previousReversedIndex;
                                            return $state.testChat.splice(
                                              previousOriginalIndex + 1
                                            );
                                          }
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateEdit"] = $steps.invokeGlobalAction
                              ?.data?.success
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["edit"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEdit"] != null &&
                              typeof $steps["updateEdit"] === "object" &&
                              typeof $steps["updateEdit"].then === "function"
                            ) {
                              $steps["updateEdit"] = await $steps["updateEdit"];
                            }

                            $steps["updateVariable42"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["variable4"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVariable42"] != null &&
                              typeof $steps["updateVariable42"] === "object" &&
                              typeof $steps["updateVariable42"].then ===
                                "function"
                            ) {
                              $steps["updateVariable42"] = await $steps[
                                "updateVariable42"
                              ];
                            }
                          }}
                        >
                          {(() => {
                            try {
                              return !$state.variable4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon119Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__fCcuL
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.variable4;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon11Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__avLq
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            const lastUserMessage =
                              $state.testChat
                                .slice()
                                .reverse()
                                .find(
                                  item =>
                                    item.from === "system" && item.tip == true
                                ) || false;
                            return (
                              lastUserMessage &&
                              lastUserMessage.id === currentItem.id &&
                              currentItem.text != "شروع کنیم" &&
                              currentItem.text != "ادامه گفتگو" &&
                              $state.retestTest == true
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          aria-disabled={"$state.variable5"}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__t3OzC
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateVariable5"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["variable5"]
                                    },
                                    operation: 4
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(objRoot, variablePath, !oldValue);
                                    return !oldValue;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVariable5"] != null &&
                              typeof $steps["updateVariable5"] === "object" &&
                              typeof $steps["updateVariable5"].then ===
                                "function"
                            ) {
                              $steps["updateVariable5"] = await $steps[
                                "updateVariable5"
                              ];
                            }

                            $steps["remove"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "PUT",
                                      "https://n8n.staas.ir/webhook/selfTestLogs",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            session_id: $state.sessionId,
                                            question_id:
                                              $state.testChat[
                                                $state.testChat.length - 1
                                              ].question.id
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["remove"] != null &&
                              typeof $steps["remove"] === "object" &&
                              typeof $steps["remove"].then === "function"
                            ) {
                              $steps["remove"] = await $steps["remove"];
                            }

                            $steps["updateEdit"] = $steps.remove?.data?.success
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["edit"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEdit"] != null &&
                              typeof $steps["updateEdit"] === "object" &&
                              typeof $steps["updateEdit"].then === "function"
                            ) {
                              $steps["updateEdit"] = await $steps["updateEdit"];
                            }

                            $steps["runCode"] = $steps.remove?.data?.success
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        const reversedIndex = $state.testChat
                                          .slice()
                                          .reverse()
                                          .findIndex(item => item.question);
                                        if (reversedIndex !== -1) {
                                          const originalIndex =
                                            $state.testChat.length -
                                            1 -
                                            reversedIndex;
                                          const previousReversedIndex =
                                            $state.testChat
                                              .slice(0, originalIndex)
                                              .reverse()
                                              .findIndex(item => item.question);
                                          if (previousReversedIndex !== -1) {
                                            const previousOriginalIndex =
                                              originalIndex -
                                              1 -
                                              previousReversedIndex;
                                            return $state.testChat.splice(
                                              previousOriginalIndex + 1
                                            );
                                          }
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateVariable52"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["variable5"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateVariable52"] != null &&
                              typeof $steps["updateVariable52"] === "object" &&
                              typeof $steps["updateVariable52"].then ===
                                "function"
                            ) {
                              $steps["updateVariable52"] = await $steps[
                                "updateVariable52"
                              ];
                            }
                          }}
                        >
                          {(() => {
                            try {
                              return !$state.variable5;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon119Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__o5Pbm
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $state.variable5;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon11Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wc7Vv
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m641N
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "ویرایش پاسخ";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ) : null}
                    </React.Fragment>
                  }
                >
                  {(() => {
                    try {
                      return currentItem.owner != true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___91S8B,
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "text-box "
                          : undefined
                      )}
                      style={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? {
                              display: "inline-block",
                              width: "auto",
                              "overflow-wrap": "break-word"
                            }
                          : undefined
                      }
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Lorem ipsum dolor sit amet,";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t6IbZ)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l3ELo
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `این آزمون سلامتی توسط ${$state.owner.ownerName} طراحی شده است.`;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(() => {
                      try {
                        return $state.owner;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___2Ydx
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__uydhd)}
                          displayHeight={"40px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"40px"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return $state.owner.ownerImage;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return {
                                  src: "/plasmic/liom_tools/images/photo20250501134141Jpg.jpg",
                                  fullWidth: 640,
                                  fullHeight: 640,
                                  aspectRatio: undefined
                                };
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dgmGx
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__se8Ru
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.owner.ownerName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mI9
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.owner.ownerExpert;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                </MessageLiom>
              );
            })}
          </Reveal>
        </div>
        {(() => {
          try {
            return !$state.variable5 && !$state.variable4;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__ssEaT, ``, {
                [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__ssEaTYcZU]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants",
                    "unnamedVariant"
                  )
              })}
              id={"selectBox"}
            >
              <Reveal
                big={true}
                className={classNames("__wab_instance", sty.reveal__ekaj9)}
                direction={"up"}
                triggerOnce={true}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return (
                            $state.testChat[$state.testChat.length - 1]
                              .options != null &&
                            !(
                              $state.variable.question?.lock == 1 &&
                              $state.orginNotLook &&
                              $state.buy == false
                            ) &&
                            $state.nextQuesionId != -1 &&
                            $state.status == ""
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return (
                            $state.testChat[$state.testChat.length - 1]
                              .options != null &&
                            !(
                              $state.variable.question?.lock == 1 &&
                              $state.orginNotLook &&
                              $state.buy == false
                            ) &&
                            $state.nextQuesionId != -1 &&
                            $state.status == ""
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <TestOptionsLiom
                    data-plasmic-name={"testOptionsLiom"}
                    data-plasmic-override={overrides.testOptionsLiom}
                    app={(() => {
                      try {
                        return $ctx.query.app;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    b={(() => {
                      try {
                        return $state.shoping.badge;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    buy={(() => {
                      try {
                        return (
                          $ctx.query.buy != "true" &&
                          !$state.free &&
                          !$state.buy
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    buyClick={async event => {
                      const $steps = {};

                      $steps["updateDialog2Open"] =
                        $ctx.query.gw != "paziresh24"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateDialog2Open"] != null &&
                        typeof $steps["updateDialog2Open"] === "object" &&
                        typeof $steps["updateDialog2Open"].then === "function"
                      ) {
                        $steps["updateDialog2Open"] = await $steps[
                          "updateDialog2Open"
                        ];
                      }

                      $steps["runCode"] =
                        $ctx.query.gw == "paziresh24"
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    console.log("pay");
                                    return window.hamdast.payment
                                      .pay({
                                        product_key: $state.productKey,
                                        payload: null
                                      })
                                      .then(function ({ event, ...payload }) {
                                        console.log(event);
                                        if (
                                          event === "HAMDAST_PAYMENT_SUCCESS"
                                        ) {
                                          $state.status = "OK";
                                          const receipt_id = payload.receipt_id;
                                          fetch(
                                            "https://n8n.staas.ir/webhook/pasiresh24/pay",
                                            {
                                              method: "POST",
                                              headers: {
                                                "Content-Type":
                                                  "application/json"
                                              },
                                              body: JSON.stringify({
                                                receipt_id: receipt_id
                                              })
                                            }
                                          )
                                            .then(response => response.json())
                                            .then(data => {
                                              console.log(
                                                "تایید پرداخت:",
                                                data
                                              );
                                            })
                                            .catch(err => {
                                              console.error(
                                                "خطا در تایید پرداخت:",
                                                err
                                              );
                                            });
                                          fetch(
                                            "https://n8n.staas.ir/webhook/selfTestPayment",
                                            {
                                              method: "POST",
                                              headers: {
                                                "Content-Type":
                                                  "application/json"
                                              },
                                              body: JSON.stringify({
                                                id: receipt_id,
                                                status: "OK",
                                                extra: {
                                                  price: 99000,
                                                  user_id: $state.userId,
                                                  session_id: $state.sessionId,
                                                  type: $ctx.query.type
                                                }
                                              })
                                            }
                                          )
                                            .then(response => response.json())
                                            .then(data => {
                                              console.log(
                                                "تایید پرداخت:",
                                                data
                                              );
                                            })
                                            .catch(err => {
                                              console.error(
                                                "خطا در تایید پرداخت:",
                                                err
                                              );
                                            });
                                        } else if (
                                          event === "HAMDAST_PAYMENT_CANCEL"
                                        ) {
                                          $state.status = "NOK";
                                          console.log("پرداخت لغو شد.");
                                          fetch(
                                            "https://n8n.staas.ir/webhook/selfTestPayment",
                                            {
                                              method: "POST",
                                              headers: {
                                                "Content-Type":
                                                  "application/json"
                                              },
                                              body: JSON.stringify({
                                                id: "Failed",
                                                status: "NOK",
                                                extra: {
                                                  price: 99000,
                                                  user_id: $state.userId,
                                                  session_id: $state.sessionId,
                                                  type: $ctx.query.type
                                                }
                                              })
                                            }
                                          )
                                            .then(response => response.json())
                                            .then(data => {
                                              console.log(
                                                "تایید پرداخت:",
                                                data
                                              );
                                            })
                                            .catch(err => {
                                              console.error(
                                                "خطا در تایید پرداخت:",
                                                err
                                              );
                                            });
                                        } else if (
                                          event === "HAMDAST_PAYMENT_ERROR"
                                        ) {
                                          $state.status = "NOK";
                                          console.log("پرداخت ناموفق بود.");
                                          fetch(
                                            "https://n8n.staas.ir/webhook/selfTestPayment",
                                            {
                                              method: "POST",
                                              headers: {
                                                "Content-Type":
                                                  "application/json"
                                              },
                                              body: JSON.stringify({
                                                id: "Failed",
                                                status: "NOK",
                                                extra: {
                                                  price: 99000,
                                                  user_id: $state.userId,
                                                  session_id: $state.sessionId,
                                                  type: $ctx.query.type
                                                }
                                              })
                                            }
                                          )
                                            .then(response => response.json())
                                            .then(data => {
                                              console.log(
                                                "تایید پرداخت:",
                                                data
                                              );
                                            })
                                            .catch(err => {
                                              console.error(
                                                "خطا در تایید پرداخت:",
                                                err
                                              );
                                            });
                                        }
                                      })
                                      .catch(function (error) {
                                        console.error(
                                          "خطای کلی در فرآیند پرداخت:",
                                          error
                                        );
                                      });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    className={classNames(
                      "__wab_instance",
                      sty.testOptionsLiom,
                      {
                        [sty.testOptionsLiomglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                          hasVariant(
                            globalVariants,
                            "unnamedGlobalGroupOfVariants",
                            "unnamedVariant"
                          )
                      }
                    )}
                    data={(() => {
                      try {
                        return $state.testChat[$state.testChat.length - 1];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    ferst={(() => {
                      try {
                        return $state.ferst;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    fp={(() => {
                      try {
                        return $state.shoping.fullPrice_rial.toLocaleString();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    gw={(() => {
                      try {
                        return $state.paramsObject.gw == "paziresh24";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    number={generateStateValueProp($state, [
                      "testOptionsLiom",
                      "number"
                    ])}
                    onClick24={async event => {
                      const $steps = {};

                      $steps["updateEdit"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["edit"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEdit"] != null &&
                        typeof $steps["updateEdit"] === "object" &&
                        typeof $steps["updateEdit"].then === "function"
                      ) {
                        $steps["updateEdit"] = await $steps["updateEdit"];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.testChat.push({
                                    id:
                                      $state.testOptionsLiom.selectedIDs
                                        .length !== 0
                                        ? $state.testOptionsLiom.selectedIDs
                                            .map(
                                              id =>
                                                $state.testChat[
                                                  $state.testChat.length - 1
                                                ].options.filter(
                                                  option => option.id === id
                                                )[0]?.id
                                            )
                                            .join(" \n ")
                                        : $state.testChat[
                                            $state.testChat.length - 1
                                          ].options[0]?.id,
                                    text:
                                      $state.testOptionsLiom.number != 0
                                        ? $state.testOptionsLiom.number.toString()
                                        : $state.testOptionsLiom.selectedIDs
                                            .length !== 0
                                        ? $state.testOptionsLiom.selectedIDs
                                            .map(
                                              id =>
                                                $state.testChat[
                                                  $state.testChat.length - 1
                                                ].options.filter(
                                                  option => option.id === id
                                                )[0]?.text
                                            )
                                            .join(" \n ")
                                        : $state.testChat[
                                            $state.testChat.length - 1
                                          ].options[0]?.text,
                                    from: "user",
                                    type: "answer"
                                  });
                                  if ($state.retestTest) {
                                    for (
                                      let i = 0;
                                      i <
                                      $state.testOptionsLiom.selectedIDs.length;
                                      i++
                                    ) {
                                      let selectedOption = $state.testChat[
                                        $state.testChat.length - 2
                                      ]?.options.filter(
                                        option =>
                                          option.id ===
                                          $state.testOptionsLiom.selectedIDs[i]
                                      )[0];
                                      if (
                                        selectedOption &&
                                        selectedOption.advice
                                      ) {
                                        $state.testChat.push({
                                          text: selectedOption.advice,
                                          from: "system"
                                        });
                                      }
                                      if (
                                        selectedOption &&
                                        selectedOption.tip
                                      ) {
                                        $state.testChat.push({
                                          text: selectedOption.tip,
                                          tip: true,
                                          from: "system"
                                        });
                                      }
                                    }
                                  }
                                  if (
                                    $state.ferst == false &&
                                    $state.type == "irregular"
                                  ) {
                                    $state.testChat.push({
                                      text: "حدودا 14 علت برای نامنظم شدن قاعدگی وجود دارد. من به کمک پاسخ های شما آنها را بررسی می کنم و در آخر نتیجه را بازگو می کنم. تا کار های لازم برای رفع این نامنظمی را انجام دهید\nدر پاسخ دادن به سوالات دقت و شکیبایی کافی را داشته باشید",
                                      from: "system"
                                    });
                                  }
                                  $state.testChat.push({
                                    loading: true,
                                    text: "               ",
                                    from: "system"
                                  });
                                  var messageBox =
                                    window.document.getElementById("chatBox");
                                  if (messageBox) {
                                    messageBox.scrollTop =
                                      messageBox.scrollHeight;
                                    return (messageBox.style.paddingBottom =
                                      "8px");
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["invokeGlobalAction3"] =
                        $state.ferst == true && $state.retestTest == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/selfTestLogs",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        session_id: $state.sessionId,
                                        user_id: $state.userId,
                                        question_id:
                                          $state.variable.question.id,
                                        option_id:
                                          $state.testOptionsLiom.selectedIDs[0],
                                        option_metric:
                                          $state.variable.options.find(
                                            option =>
                                              option.id ===
                                              $state.testOptionsLiom
                                                .selectedIDs[0]
                                          ).metric,
                                        option_score:
                                          $state.variable.options.find(
                                            option =>
                                              option.id ===
                                              $state.testOptionsLiom
                                                .selectedIDs[0]
                                          ).score,
                                        question_text:
                                          $state.variable.question.question,
                                        question_type: $state.type,
                                        option_advice:
                                          $state.variable.options.find(
                                            option =>
                                              option.id ===
                                              $state.testOptionsLiom
                                                .selectedIDs[0]
                                          ).advice,
                                        option_text:
                                          $state.testOptionsLiom.number != 0
                                            ? $state.testOptionsLiom.number.toString()
                                            : $state.variable.options.find(
                                                option =>
                                                  option.id ===
                                                  $state.testOptionsLiom
                                                    .selectedIDs[0]
                                              ).text,
                                        option_metric_fa:
                                          $state.variable.options.find(
                                            option =>
                                              option.id ===
                                              $state.testOptionsLiom
                                                .selectedIDs[0]
                                          ).metric_fa
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction3"] != null &&
                        typeof $steps["invokeGlobalAction3"] === "object" &&
                        typeof $steps["invokeGlobalAction3"].then === "function"
                      ) {
                        $steps["invokeGlobalAction3"] = await $steps[
                          "invokeGlobalAction3"
                        ];
                      }

                      $steps["invokeGlobalAction6"] = (
                        $state.variable?.question?.metricChecks
                          ? $state.variable?.question?.metricChecks !== "" &&
                            $state.variable?.question?.metricChecks !== null
                          : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/metricCheck",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      question_id: $state.nextQuesionId,
                                      session_id: $state.sessionId,
                                      user_id: $state.userId,
                                      type: $state.type
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction6"] != null &&
                        typeof $steps["invokeGlobalAction6"] === "object" &&
                        typeof $steps["invokeGlobalAction6"].then === "function"
                      ) {
                        $steps["invokeGlobalAction6"] = await $steps[
                          "invokeGlobalAction6"
                        ];
                      }

                      $steps["smartCalc"] = (
                        $state.variable?.question?.smartCalc ? true : false
                      )
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/smartCalc",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      question_id: $state.nextQuesionId,
                                      session_id: $state.sessionId,
                                      user_id: $state.userId,
                                      question_type: $state.type
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["smartCalc"] != null &&
                        typeof $steps["smartCalc"] === "object" &&
                        typeof $steps["smartCalc"].then === "function"
                      ) {
                        $steps["smartCalc"] = await $steps["smartCalc"];
                      }

                      $steps["next"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["next"]
                              },
                              operation: 0,
                              value:
                                $steps.invokeGlobalAction3?.data
                                  ?.nextQuestionId || ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["next"] != null &&
                        typeof $steps["next"] === "object" &&
                        typeof $steps["next"].then === "function"
                      ) {
                        $steps["next"] = await $steps["next"];
                      }

                      $steps["updateNextQuesionId"] =
                        $state.ferst == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["nextQuesionId"]
                                },
                                operation: 0,
                                value: (() => {
                                  if (!$steps.smartCalc?.data) {
                                    if (
                                      $state.next == "" ||
                                      $state.next == "-2"
                                    ) {
                                      if ($state.retestTest) {
                                        if (
                                          $steps.invokeGlobalAction6?.data &&
                                          $steps.invokeGlobalAction6?.data
                                            ?.nextQuestionId != -2
                                        ) {
                                          return $steps.invokeGlobalAction6
                                            ?.data.nextQuestionId;
                                        } else {
                                          return $state.variable.options.find(
                                            option =>
                                              option.id ==
                                              $state.testOptionsLiom
                                                .selectedIDs[0]
                                          ).nextQuesion_id;
                                        }
                                      } else {
                                        return parseInt(
                                          $ctx.query.nextQuesion_id
                                        );
                                      }
                                    } else return parseInt($state.next);
                                  } else
                                    return $steps.smartCalc?.data
                                      ?.nextQuestionId;
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateNextQuesionId"] != null &&
                        typeof $steps["updateNextQuesionId"] === "object" &&
                        typeof $steps["updateNextQuesionId"].then === "function"
                      ) {
                        $steps["updateNextQuesionId"] = await $steps[
                          "updateNextQuesionId"
                        ];
                      }

                      $steps["runCode6"] =
                        $state.nextQuesionId == -1
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.testChat[
                                      $state.testChat.length - 1
                                    ] = {
                                      text: "سوالات به اتمام رسید\u060C حالا روی دکمه دیدن نتیجه کلیک کنید تا وضعیت شما آنالیز شود.",
                                      from: "system"
                                    };
                                    $state.numberTest = $state.totalTest;
                                    var messageBox =
                                      window.document.getElementById("chatBox");
                                    if (messageBox)
                                      return (messageBox.scrollTop =
                                        messageBox.scrollHeight);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode6"] != null &&
                        typeof $steps["runCode6"] === "object" &&
                        typeof $steps["runCode6"].then === "function"
                      ) {
                        $steps["runCode6"] = await $steps["runCode6"];
                      }

                      $steps["invokeGlobalAction"] =
                        $state.ferst == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/selfTestSession",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        type: $state.type,
                                        user_id: $state.userId
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $state.ferst == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "https://n8n.staas.ir/webhook/selfTestQuestion",
                                  (() => {
                                    try {
                                      return {
                                        type: $state.type,
                                        question_id: $state.nextQuesionId
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["runCode2"] =
                        $state.ferst == false &&
                        !(
                          $steps.invokeGlobalAction?.data?.question?.lock ==
                            1 &&
                          $state.orginNotLook &&
                          $state.buy == false
                        )
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var a = {
                                      question:
                                        $steps.invokeGlobalAction.data.question,
                                      text: $steps.invokeGlobalAction.data
                                        .question.question,
                                      from: "system",
                                      btnText:
                                        $steps.invokeGlobalAction.data.options
                                          .length == 1
                                          ? $steps.invokeGlobalAction.data
                                              .options[0].text
                                          : "ارسال",
                                      options:
                                        $steps.invokeGlobalAction.data.options
                                    };
                                    $state.testChat[
                                      $state.testChat.length - 1
                                    ] = a;
                                    $state.sessionId =
                                      $steps.invokeGlobalAction.data.session_id;
                                    $state.testOptionsLiom.selectedIDs =
                                      $steps.invokeGlobalAction.data.options
                                        .length == 1
                                        ? [
                                            $steps.invokeGlobalAction.data
                                              .options[0].id
                                          ]
                                        : [];
                                    var textBoxes =
                                      document.querySelectorAll(".text-box");
                                    textBoxes.forEach(textBox => {
                                      textBox.style.display = "none";
                                      textBox.offsetWidth;
                                      textBox.style.display = "inline-block";
                                      requestAnimationFrame(() => {
                                        textBox.style.display = "inline-block";
                                      });
                                    });
                                    var messageBox =
                                      window.document.getElementById("chatBox");
                                    if (messageBox)
                                      return (messageBox.scrollTop =
                                        messageBox.scrollHeight);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["runCode3"] =
                        $state.ferst == true &&
                        !(
                          $steps.invokeGlobalAction2?.data?.question?.lock ==
                            1 &&
                          $state.orginNotLook &&
                          $state.buy == false
                        )
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var a = {
                                      question:
                                        $steps.invokeGlobalAction2.data
                                          .question,
                                      text: $steps.invokeGlobalAction2.data
                                        ?.question?.question,
                                      from: "system",
                                      btnText:
                                        $steps.invokeGlobalAction2.data?.options
                                          ?.length == 1
                                          ? $steps.invokeGlobalAction2.data
                                              ?.options[0].text
                                          : "ارسال",
                                      options:
                                        $steps.invokeGlobalAction2.data.options
                                    };
                                    $state.testChat[
                                      $state.testChat.length - 1
                                    ] = a;
                                    $state.testOptionsLiom.selectedIDs =
                                      $steps.invokeGlobalAction2.data?.options
                                        ?.length == 1
                                        ? [
                                            $steps.invokeGlobalAction2?.data
                                              ?.options[0].id
                                          ]
                                        : [];
                                    var textBoxes =
                                      document.querySelectorAll(".text-box");
                                    textBoxes.forEach(textBox => {
                                      textBox.style.display = "none";
                                      textBox.offsetWidth;
                                      textBox.style.display = "inline-block";
                                      requestAnimationFrame(() => {
                                        textBox.style.display = "inline-block";
                                      });
                                    });
                                    var messageBox =
                                      window.document.getElementById("chatBox");
                                    if (messageBox)
                                      return (messageBox.scrollTop =
                                        messageBox.scrollHeight);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode3"] != null &&
                        typeof $steps["runCode3"] === "object" &&
                        typeof $steps["runCode3"].then === "function"
                      ) {
                        $steps["runCode3"] = await $steps["runCode3"];
                      }

                      $steps["runCode4"] =
                        (($steps.invokeGlobalAction2?.data?.question?.lock ==
                          1 &&
                          $state.orginNotLook) ||
                          ($steps.invokeGlobalAction1?.data?.question?.lock ==
                            1 &&
                            $state.orginNotLook)) &&
                        $state.buy == false
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.testChat[
                                      $state.testChat.length - 1
                                    ] = {
                                      text: "ممنون که تا اینجا همراه من بودی! برای ادامه گفت‌وگو و بررسی دلیل نامنظمی قاعدگی\u060C لطفاً هزینه مربوطه را پرداخت کن. ما در تلاشیم بهترین تجربه را برایت فراهم کنیم.",
                                      from: "system"
                                    };
                                    $state.variable = {
                                      question:
                                        $steps.invokeGlobalAction2.data
                                          .question,
                                      text: $steps.invokeGlobalAction2.data
                                        .question.question,
                                      from: "system",
                                      btnText:
                                        $steps.invokeGlobalAction2.data.options
                                          ?.length == 1
                                          ? $steps.invokeGlobalAction2.data
                                              .options[0].text
                                          : "ارسال",
                                      options:
                                        $steps.invokeGlobalAction2.data.options
                                    };
                                    var messageBox =
                                      window.document.getElementById("chatBox");
                                    if (messageBox)
                                      return (messageBox.scrollTop =
                                        messageBox.scrollHeight);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode4"] != null &&
                        typeof $steps["runCode4"] === "object" &&
                        typeof $steps["runCode4"].then === "function"
                      ) {
                        $steps["runCode4"] = await $steps["runCode4"];
                      }

                      $steps["updateNumberTest"] =
                        $state.ferst == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["numberTest"]
                                },
                                operation: 0,
                                value: $state.numberTest + 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateNumberTest"] != null &&
                        typeof $steps["updateNumberTest"] === "object" &&
                        typeof $steps["updateNumberTest"].then === "function"
                      ) {
                        $steps["updateNumberTest"] = await $steps[
                          "updateNumberTest"
                        ];
                      }

                      $steps["invokeGlobalAction5"] =
                        $state.ferst == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/service/log",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId: $state.userId,
                                        pageName: "self-test",
                                        action: "Start-test",
                                        extraData: {
                                          sessionId: $state.sessionId
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                    }
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction5"] != null &&
                        typeof $steps["invokeGlobalAction5"] === "object" &&
                        typeof $steps["invokeGlobalAction5"].then === "function"
                      ) {
                        $steps["invokeGlobalAction5"] = await $steps[
                          "invokeGlobalAction5"
                        ];
                      }

                      $steps["updateFerst"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["ferst"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateFerst"] != null &&
                        typeof $steps["updateFerst"] === "object" &&
                        typeof $steps["updateFerst"].then === "function"
                      ) {
                        $steps["updateFerst"] = await $steps["updateFerst"];
                      }

                      $steps["updateRetestTest"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["retestTest"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRetestTest"] != null &&
                        typeof $steps["updateRetestTest"] === "object" &&
                        typeof $steps["updateRetestTest"].then === "function"
                      ) {
                        $steps["updateRetestTest"] = await $steps[
                          "updateRetestTest"
                        ];
                      }

                      $steps["updateShowgreen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["showgreen"]
                              },
                              operation: 0,
                              value: []
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShowgreen"] != null &&
                        typeof $steps["updateShowgreen"] === "object" &&
                        typeof $steps["updateShowgreen"].then === "function"
                      ) {
                        $steps["updateShowgreen"] = await $steps[
                          "updateShowgreen"
                        ];
                      }

                      $steps["invokeGlobalAction4"] = true
                        ? (() => {
                            const actionArgs = { args: [800] };
                            return $globalActions["Fragment.wait"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction4"] != null &&
                        typeof $steps["invokeGlobalAction4"] === "object" &&
                        typeof $steps["invokeGlobalAction4"].then === "function"
                      ) {
                        $steps["invokeGlobalAction4"] = await $steps[
                          "invokeGlobalAction4"
                        ];
                      }

                      $steps["runCode5"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var messageBox =
                                    window.document.getElementById("chatBox");
                                  if (messageBox) {
                                    var inputBox =
                                      document.getElementById("selectBox");
                                    messageBox.style.paddingBottom = `${
                                      inputBox.offsetHeight + 20
                                    }px`;
                                    messageBox.scrollTop =
                                      messageBox.scrollHeight;
                                  }
                                  return ($state.testOptionsLiom.number = 0);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode5"] != null &&
                        typeof $steps["runCode5"] === "object" &&
                        typeof $steps["runCode5"].then === "function"
                      ) {
                        $steps["runCode5"] = await $steps["runCode5"];
                      }
                    }}
                    onNumberChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "testOptionsLiom",
                        "number"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onResulr={async event => {
                      const $steps = {};

                      $steps["updateDialogOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDialogOpen"] != null &&
                        typeof $steps["updateDialogOpen"] === "object" &&
                        typeof $steps["updateDialogOpen"].then === "function"
                      ) {
                        $steps["updateDialogOpen"] = await $steps[
                          "updateDialogOpen"
                        ];
                      }
                    }}
                    onSelectedIDsChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "testOptionsLiom",
                        "selectedIDs"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    p={(() => {
                      try {
                        return (() => {
                          return $state.shoping.price_rial.toLocaleString();
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    retestTest={(() => {
                      try {
                        return $state.retestTest;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    selectedIDs={generateStateValueProp($state, [
                      "testOptionsLiom",
                      "selectedIDs"
                    ])}
                    showgreen={(() => {
                      try {
                        return $state.showgreen.length != 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    t={(() => {
                      try {
                        return $state.shoping?.type_fa;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    {(() => {
                      try {
                        return $state.edit;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m0ODd
                        )}
                      >
                        {
                          "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0627\u0633\u062e ! \u0644\u0637\u0641\u0627 \u06af\u0632\u06cc\u0646\u0647 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                        }
                      </div>
                    ) : null}
                  </TestOptionsLiom>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return (
                            $state.variable.question?.lock == 1 &&
                            !$ctx.query.buy &&
                            $ctx.query.app == "liom"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return (
                            $state.variable.question?.lock == 1 &&
                            $state.orginNotLook &&
                            !$ctx.query.buy &&
                            $ctx.query.app == "liom"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    data-plasmic-name={"peyliom"}
                    data-plasmic-override={overrides.peyliom}
                    className={classNames(projectcss.all, sty.peyliom)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tmi79)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3QNky
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vCmVm
                          )}
                        >
                          {
                            "\u0628\u0627 \u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0641\u0647\u0645\u06cc \u0686\u0631\u0627 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0646\u0627\u0645\u0646\u0638\u0645\u0647 \u0648 \u06af\u0627\u0645\u200c\u0647\u0627\u06cc \u0644\u0627\u0632\u0645 \u0631\u0648 \u0628\u0631\u0627\u06cc \u0628\u0647\u0628\u0648\u062f \u0628\u0631\u062f\u0627\u0631\u06cc."
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yMsKs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6KAp7
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.shop.data.result.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fzriJ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lw1Sg
                            )}
                          >
                            {(() => {
                              try {
                                return $state.shop.data?.result?.fullPrice;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jM7SQ
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.shop.data.result.fullPrice.toLocaleString() +
                                        " تومان "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "120000000";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dkBnr
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.shop.data.result.price.toLocaleString() +
                                      " تومان "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "300000 \u062a\u0648\u0645\u0627\u0646";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cdaYx
                            )}
                          >
                            {"50%"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <ButtonLiom
                      data-plasmic-name={"buttonLiom"}
                      data-plasmic-override={overrides.buttonLiom}
                      className={classNames("__wab_instance", sty.buttonLiom)}
                      color={generateStateValueProp($state, [
                        "buttonLiom",
                        "color"
                      ])}
                      endIcon={
                        <Icon111Icon
                          className={classNames(projectcss.all, sty.svg__a8EU)}
                          role={"img"}
                        />
                      }
                      isDisabled={(() => {
                        try {
                          return $state.loadinkBotten;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      load={generateStateValueProp($state, [
                        "buttonLiom",
                        "load"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadinkBotten"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadinkBotten"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadinkBotten"] != null &&
                          typeof $steps["updateLoadinkBotten"] === "object" &&
                          typeof $steps["updateLoadinkBotten"].then ===
                            "function"
                        ) {
                          $steps["updateLoadinkBotten"] = await $steps[
                            "updateLoadinkBotten"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/selfTest/shopBuy",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        merchantID: $state.shopId,
                                        amount: $state.shop.data.result.price,
                                        type: "selfTest",
                                        text: $state.shop.data.result.title,
                                        value: 1,
                                        userId: $state.userId,
                                        callback:
                                          "https://n8n.staas.ir/webhook/selfTestPayment",
                                        extraData: {
                                          user_id: $state.userId,
                                          session_id: $state.sessionId,
                                          type: $ctx.query.type
                                        },
                                        redirectUrl: `https://tools.liom.app/self-test/?user_id=${$state.userId}&type=${$state.type}&app=${$ctx.query.app}&nextQuesion_id=${$state.nextQuesionId}&session_id=${$state.sessionId}&inApp=${$ctx.query.inApp}`
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  undefined
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["runCode"] =
                          $steps.invokeGlobalAction?.data?.success == true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return window.open(
                                      $steps.invokeGlobalAction.data.result,
                                      "_self"
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    let b = $state.testChat;
                                    return localStorage.setItem(
                                      "test",
                                      JSON.stringify(b)
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["updateLoadinkBotten2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadinkBotten"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadinkBotten2"] != null &&
                          typeof $steps["updateLoadinkBotten2"] === "object" &&
                          typeof $steps["updateLoadinkBotten2"].then ===
                            "function"
                        ) {
                          $steps["updateLoadinkBotten2"] = await $steps[
                            "updateLoadinkBotten2"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      showEndIcon={(() => {
                        try {
                          return $state.loadinkBotten;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "showEndIcon";
                          }
                          throw e;
                        }
                      })()}
                    >
                      {(() => {
                        try {
                          return !$state.loadinkBotten;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tf8IY
                          )}
                        >
                          {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                        </div>
                      ) : null}
                    </ButtonLiom>
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return (
                            $state.variable.question?.lock == 1 &&
                            $state.buy == false &&
                            $ctx.query.app != "liom"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return (
                            $state.variable.question?.lock == 1 &&
                            $state.orginNotLook &&
                            !$ctx.query.buy &&
                            $ctx.query.app != "liom"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    data-plasmic-name={"peyPardakht24"}
                    data-plasmic-override={overrides.peyPardakht24}
                    className={classNames(projectcss.all, sty.peyPardakht24)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Po84
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rfjx4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vsD4A
                          )}
                        >
                          {
                            "\u0628\u0627 \u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0641\u0647\u0645\u06cc \u0686\u0631\u0627 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0646\u0627\u0645\u0646\u0638\u0645\u0647 \u0648 \u06af\u0627\u0645\u200c\u0647\u0627\u06cc \u0644\u0627\u0632\u0645 \u0631\u0648 \u0628\u0631\u0627\u06cc \u0628\u0647\u0628\u0648\u062f \u0628\u0631\u062f\u0627\u0631\u06cc."
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5GxOe
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kM18M
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.shop.data.result.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tu96O
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fLmCw
                            )}
                          >
                            {(() => {
                              try {
                                return $state.shop.data?.result?.fullPrice;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___34E
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.shop.data.result.fullPrice.toLocaleString() +
                                        " تومان "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "120000000";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gr2AA
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.shop.data.result.price.toLocaleString() +
                                      " تومان "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "300000 \u062a\u0648\u0645\u0627\u0646";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5Ddji
                            )}
                          >
                            {"50%"}
                          </div>
                        </div>
                      </div>
                    </div>
                    <Paziresh24Button
                      children2={"\u067e\u0631\u062f\u0627\u062e\u062a "}
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__qwVsn
                      )}
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__zlFcS)}
                          role={"img"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $state.loadinkBotten;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadinkBotten"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadinkBotten"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadinkBotten"] != null &&
                          typeof $steps["updateLoadinkBotten"] === "object" &&
                          typeof $steps["updateLoadinkBotten"].then ===
                            "function"
                        ) {
                          $steps["updateLoadinkBotten"] = await $steps[
                            "updateLoadinkBotten"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/selfTestPaymentPasiresh24",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        amount:
                                          $state.shop.data.result.price * 10,
                                        purchase_id: $state.shop.data.result.id,
                                        return_link: `https://tools.liom.app/self-test/?user_id=${$state.userId}&token=${$ctx.query.token}&origin_user_id=${$ctx.query.origin_user_id}&type=${$state.type}&app=${$ctx.query.app}&nextQuesion_id=${$state.nextQuesionId}&session_id=${$state.sessionId}&inApp=${$ctx.query.inApp}`,
                                        title: $state.shop.data.result.title
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  undefined
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["variable3"]
                                },
                                operation: 0,
                                value: $steps.invokeGlobalAction?.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["runCode"] =
                          $steps.invokeGlobalAction?.data?.status == true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return window.open(
                                      $steps.invokeGlobalAction.data.data
                                        .payment_link,
                                      "_self"
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["runCode2"] =
                          $steps.invokeGlobalAction?.data?.status == true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      let b = $state.testChat;
                                      localStorage.setItem(
                                        "test",
                                        JSON.stringify(b)
                                      );
                                      return localStorage.setItem(
                                        "receipt_id",
                                        $steps.invokeGlobalAction.data.data
                                          .receipt_id
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["updateLoadinkBotten2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadinkBotten"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadinkBotten2"] != null &&
                          typeof $steps["updateLoadinkBotten2"] === "object" &&
                          typeof $steps["updateLoadinkBotten2"].then ===
                            "function"
                        ) {
                          $steps["updateLoadinkBotten2"] = await $steps[
                            "updateLoadinkBotten2"
                          ];
                        }
                      }}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__pDjh)}
                          role={"img"}
                        />
                      }
                    />
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.nextQuesionId == -1;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hc0LI)}
                  >
                    <Paziresh24Button
                      children2={
                        (() => {
                          try {
                            return !$state.loadinkBotten;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gRmS
                            )}
                            data-i18n={"result"}
                          >
                            {
                              "\u062f\u06cc\u062f\u0646 \u0646\u062a\u06cc\u062c\u0647"
                            }
                          </div>
                        ) : null
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__iyNRv
                      )}
                      color={"green"}
                      endIcon={
                        <Icon111Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6V1EU
                          )}
                          role={"img"}
                        />
                      }
                      isDisabled={(() => {
                        try {
                          return $state.loadinkBotten;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      loading={(() => {
                        try {
                          return $state.loadinkBotten;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "loading";
                          }
                          throw e;
                        }
                      })()}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateLoadinkBotten"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadinkBotten"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadinkBotten"] != null &&
                          typeof $steps["updateLoadinkBotten"] === "object" &&
                          typeof $steps["updateLoadinkBotten"].then ===
                            "function"
                        ) {
                          $steps["updateLoadinkBotten"] = await $steps[
                            "updateLoadinkBotten"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/service/log",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId: $state.userId,
                                        pageName: "self-test",
                                        action: "Test-result",
                                        extraData: {
                                          sessionId: $state.sessionId
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                    }
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return `https://tools.liom.app/result?session_id=${$state.sessionId}&user_id=${$state.userId}&app=${$ctx.query.app}&token=${$ctx.query.token}&origin_user_id=${$ctx.query.origin_user_id}&origin=${$ctx.query.origin}&inApp=${$ctx.query.inApp}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    let b = $state.testChat;
                                    return localStorage.setItem(
                                      "test",
                                      JSON.stringify(b)
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }
                      }}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__k8MFy)}
                          role={"img"}
                        />
                      }
                    />
                  </div>
                ) : null}
              </Reveal>
            </div>
          </section>
        ) : null}
        <Embed
          data-plasmic-name={"favicon"}
          data-plasmic-override={overrides.favicon}
          className={classNames("__wab_instance", sty.favicon)}
          code={
            "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n<script src=\"https://developer.eitaa.com/eitaa-web-app.js\">\r\n</script>\r\n<script>\r\n  window.Eitaa.WebApp.ready();\r\n  window.Eitaa.WebApp.expand();\r\n  window.Eitaa.WebApp.isClosingConfirmationEnabled = true;\r\n</script>\r\n"
          }
        />

        <Paziresh24Modal
          data-plasmic-name={"dialog"}
          data-plasmic-override={overrides.dialog}
          body={
            <div className={classNames(projectcss.all, sty.freeBox__rymi9)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.showgreen;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.buttonLiom3),
                    color: generateStateValueProp($state, [
                      "buttonLiom3",
                      __plasmic_idx_0,
                      "color"
                    ]),
                    key: currentIndex,
                    load: generateStateValueProp($state, [
                      "buttonLiom3",
                      __plasmic_idx_0,
                      "load"
                    ]),
                    onClick: async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `https://tools.liom.app/result/?session_id=${currentItem.id}&user_id=${currentItem.user_id}&Share=true&app=${$ctx.query.app}&origin=${$ctx.query.origin}&inApp=${$ctx.query.inApp}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return `/result`;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    },
                    onColorChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom3",
                          __plasmic_idx_0,
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    },
                    onLoadChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom3",
                          __plasmic_idx_0,
                          "load"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "buttonLiom3[].color",
                        initFunc: ({ $props, $state, $queries }) => "softGreen"
                      },
                      {
                        name: "buttonLiom3[].load",
                        initFunc: ({ $props, $state, $queries }) => false
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <ButtonLiom
                      data-plasmic-name={"buttonLiom3"}
                      data-plasmic-override={overrides.buttonLiom3}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nYq0E
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                var birthDate = currentItem.timestamp
                                  .split(" ")[0]
                                  .split("-");
                                let gy = parseInt(birthDate[0]);
                                let gm = parseInt(birthDate[1]);
                                let gd = parseInt(birthDate[2]);
                                let shamsiMonthDays = [
                                  31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                                ];

                                let miladiDaysInMonth = [
                                  31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                                ];

                                let isLeapYear =
                                  gy % 4 === 0 &&
                                  (gy % 100 !== 0 || gy % 400 === 0);
                                if (isLeapYear) {
                                  miladiDaysInMonth[1] = 29;
                                }
                                let daysPassedMiladi = gd;
                                for (let i = 0; i < gm - 1; i++) {
                                  daysPassedMiladi += miladiDaysInMonth[i];
                                }
                                let shamsiNewYearDay = new Date(gy, 2, 21);
                                let shamsiStartDayInMiladi = Math.floor(
                                  (shamsiNewYearDay - new Date(gy, 0, 1)) /
                                    (1000 * 60 * 60 * 24)
                                );
                                let daysPassedInShamsiYear =
                                  daysPassedMiladi - shamsiStartDayInMiladi;
                                if (daysPassedInShamsiYear < 0) {
                                  gy--;
                                  shamsiNewYearDay = new Date(gy, 2, 21);
                                  shamsiStartDayInMiladi = Math.floor(
                                    (shamsiNewYearDay - new Date(gy, 0, 1)) /
                                      (1000 * 60 * 60 * 24)
                                  );
                                  daysPassedInShamsiYear =
                                    daysPassedMiladi +
                                    (365 - shamsiStartDayInMiladi);
                                  if (isLeapYear) {
                                    daysPassedInShamsiYear++;
                                  }
                                }
                                let jy = gy - 621;
                                let jm = 0;
                                let jd = daysPassedInShamsiYear;
                                for (
                                  let i = 0;
                                  i < shamsiMonthDays.length;
                                  i++
                                ) {
                                  if (jd <= shamsiMonthDays[i]) {
                                    jm = i + 1;
                                    break;
                                  } else {
                                    jd -= shamsiMonthDays[i];
                                  }
                                }
                                let formattedMonth = jm < 10 ? `0${jm}` : jm;
                                let formattedDay = jd < 10 ? `0${jd}` : jd;
                                let farsiTranslation;
                                switch (currentItem.type) {
                                  case "irregular":
                                    farsiTranslation = "نامنظم قاعدگی";
                                    break;
                                  case "pregnantOrNot":
                                    farsiTranslation = "باردارم یا نه";
                                    break;
                                  case "prematureEjaculation":
                                    farsiTranslation = "زودانزالی";
                                    break;
                                  case "advancedIrregular":
                                    farsiTranslation = "نامنظمی پیشرفته";
                                    break;
                                  case "chlamydia":
                                    farsiTranslation = "کلامیدیا";
                                    break;
                                  case "skin":
                                    farsiTranslation = "پوست";
                                    break;
                                  default:
                                    farsiTranslation = "";
                                    break;
                                }
                                return `نتیجه تست ${farsiTranslation}  در تاریخ : ${jy}/${formattedMonth}/${formattedDay}`;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Button";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </ButtonLiom>
                  );
                })();
              })}
            </div>
          }
          className={classNames("__wab_instance", sty.dialog)}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["dialog", "open"])}
          title={
            <div className={classNames(projectcss.all, sty.freeBox__gyOfv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k70Z
                )}
                data-i18n={"previous.title"}
              >
                {
                  "\u0646\u062a\u0627\u06cc\u062c \u062a\u0633\u062a \u0647\u0627\u06cc \u0642\u0628\u0644\u06cc"
                }
              </div>
            </div>
          }
          trigger={null}
        />

        <Paziresh24Modal
          data-plasmic-name={"dialog2"}
          data-plasmic-override={overrides.dialog2}
          body={
            <ApiRequest
              data-plasmic-name={"shop"}
              data-plasmic-override={overrides.shop}
              body={(() => {
                try {
                  return {
                    shopId: $state.shopId
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.shop)}
              errorDisplay={null}
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__ogomZ)}>
                  <Icon111Icon
                    className={classNames(projectcss.all, sty.svg__eNwsz)}
                    role={"img"}
                  />
                </div>
              }
              method={"POST"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["shop", "data"]).apply(
                  null,
                  eventArgs
                );

                (async data => {
                  const $steps = {};

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = { args: [2000] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateLoading"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loading"]
                          },
                          operation: 0,
                          value:
                            $steps.invokeGlobalAction?.data?.success == true ||
                            $steps.invokeGlobalAction4?.data?.success == true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoading"] != null &&
                    typeof $steps["updateLoading"] === "object" &&
                    typeof $steps["updateLoading"].then === "function"
                  ) {
                    $steps["updateLoading"] = await $steps["updateLoading"];
                  }
                }).apply(null, eventArgs);
              }}
              shouldFetch={true}
              url={"https://n8n.staas.ir/webhook/selfTest/shop"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__g2VuF)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__vi1Gs)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xjXfU
                    )}
                  >
                    {
                      "\u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0633\u062a \u0633\u0644\u0627\u0645\u062a"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nYbpm
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.shop.data.result.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__q6Dc0)}
                  dir={"rtl"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ulBfG)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v9Jau)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__au7Hq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__llNk3
                          )}
                        >
                          {""}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yQkXd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j7Ur4
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.shop.data.result.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zXKx
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wn3Xz
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shop.data.result.fullPrice.toLocaleString();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mjeq8
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.shop.data.result.price.toLocaleString() +
                                    " تومان "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__omKfw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___47Ues
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shop.data.result.badge;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bUcOj
                        )}
                      >
                        {
                          "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kGcM
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nKwd
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              allowClear: false,
                              autoFocus: false,
                              bordered: false,
                              className: classNames(
                                "__wab_instance",
                                sty.input4
                              ),
                              disabled: false,
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["input4", "value"],
                                  AntdInput_Helpers
                                ).apply(null, eventArgs);
                              },
                              placeholder:
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                              prefix: (
                                <Icon10Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___7Qq1
                                  )}
                                  role={"img"}
                                />
                              ),

                              readOnly: false,
                              size: "small",
                              suffix: null,
                              value: generateStateValueProp($state, [
                                "input4",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "input4.value"
                                }
                              ],
                              [],
                              AntdInput_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <AntdInput
                                data-plasmic-name={"input4"}
                                data-plasmic-override={overrides.input4}
                                {...child$Props}
                              />
                            );
                          })()}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qir8S
                            )}
                          />
                        </div>
                        <ButtonLiom
                          data-plasmic-name={"button12"}
                          data-plasmic-override={overrides.button12}
                          className={classNames("__wab_instance", sty.button12)}
                          color={generateStateValueProp($state, [
                            "button12",
                            "color"
                          ])}
                          load={generateStateValueProp($state, [
                            "button12",
                            "load"
                          ])}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button12",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onLoadChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "button12",
                                "load"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___342Wb
                            )}
                          >
                            {"\u062a\u0627\u06cc\u06cc\u062f"}
                          </div>
                        </ButtonLiom>
                      </div>
                      <ButtonLiom
                        data-plasmic-name={"buttonLiom6"}
                        data-plasmic-override={overrides.buttonLiom6}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonLiom6
                        )}
                        color={generateStateValueProp($state, [
                          "buttonLiom6",
                          "color"
                        ])}
                        endIcon={
                          <Icon111Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wEuC1
                            )}
                            role={"img"}
                          />
                        }
                        isDisabled={(() => {
                          try {
                            return $state.loadinkBotten;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        load={generateStateValueProp($state, [
                          "buttonLiom6",
                          "load"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateLoadinkBotten"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadinkBotten"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadinkBotten"] != null &&
                            typeof $steps["updateLoadinkBotten"] === "object" &&
                            typeof $steps["updateLoadinkBotten"].then ===
                              "function"
                          ) {
                            $steps["updateLoadinkBotten"] = await $steps[
                              "updateLoadinkBotten"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/selfTest/shopBuy",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          merchantID:
                                            "15e7df9e-5bef-4640-a597-ee501e65ff8c",
                                          id: $state.shopId,
                                          amount: $state.shop.data.result.price,
                                          type: `selfTest_${$ctx.query.type}`,
                                          text: $state.shop.data.result.title,
                                          value: 1,
                                          userId: $state.userId,
                                          callback:
                                            "https://n8n.staas.ir/webhook/selfTestPayment",
                                          extraData: {
                                            price:
                                              $state.shop.data.result.price,
                                            user_id: $state.userId,
                                            session_id: $state.sessionId,
                                            type: $ctx.query.type
                                          },
                                          redirectUrl: $state.redirectUrl
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    undefined
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["runCode"] =
                            $steps.invokeGlobalAction?.data?.success == true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return window.open(
                                        $steps.invokeGlobalAction.data.result,
                                        "_self"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["runCode2"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      let b = $state.testChat;
                                      return localStorage.setItem(
                                        "test",
                                        JSON.stringify(b)
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode2"] != null &&
                            typeof $steps["runCode2"] === "object" &&
                            typeof $steps["runCode2"].then === "function"
                          ) {
                            $steps["runCode2"] = await $steps["runCode2"];
                          }

                          $steps["updateLoadinkBotten2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadinkBotten"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadinkBotten2"] != null &&
                            typeof $steps["updateLoadinkBotten2"] ===
                              "object" &&
                            typeof $steps["updateLoadinkBotten2"].then ===
                              "function"
                          ) {
                            $steps["updateLoadinkBotten2"] = await $steps[
                              "updateLoadinkBotten2"
                            ];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "buttonLiom6",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "buttonLiom6",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        showEndIcon={(() => {
                          try {
                            return $state.loadinkBotten;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "showEndIcon";
                            }
                            throw e;
                          }
                        })()}
                      >
                        {(() => {
                          try {
                            return !$state.loadinkBotten;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__d38Jr
                            )}
                          >
                            {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                          </div>
                        ) : null}
                      </ButtonLiom>
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__h1IyH)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__fhS60)}
                  displayHeight={"15px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liom_tools/images/image36.svg",
                    fullWidth: 22,
                    fullHeight: 20,
                    aspectRatio: 1.1
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fbuyw
                  )}
                >
                  {
                    "\u0628\u0631\u0627\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0627\u0628\u0632\u0627\u0631 \u062a\u0633\u062a \u0633\u0644\u0627\u0645\u062a \u060c \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f."
                  }
                </div>
              </div>
            </ApiRequest>
          }
          className={classNames("__wab_instance", sty.dialog2)}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["dialog2", "open"])}
          title={null}
          trigger={null}
        />

        {(() => {
          try {
            return $state.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___1Hpgz)}
            style={(() => {
              try {
                return {
                  height: "100dvh"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            {(() => {
              try {
                return (() => {
                  var urlParams = new window.URLSearchParams(
                    window.location.search
                  );
                  return urlParams.get("app") != "liom";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__uaLit)}
                role={"img"}
              />
            ) : null}
            {(() => {
              try {
                return (() => {
                  var urlParams = new window.URLSearchParams(
                    window.location.search
                  );
                  return urlParams.get("app") == "liom";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__kgnAq)}
                role={"img"}
              />
            ) : null}
          </div>
        ) : null}
        {(() => {
          try {
            return $state.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__mD9W)}
            style={(() => {
              try {
                return {
                  height: "100dvh"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            {(() => {
              try {
                return (() => {
                  var urlParams = new window.URLSearchParams(
                    window.location.search
                  );
                  return urlParams.get("app") != "liom";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__l4PRq)}
                role={"img"}
              />
            ) : null}
            {(() => {
              try {
                return (() => {
                  var urlParams = new window.URLSearchParams(
                    window.location.search
                  );
                  return urlParams.get("app") == "liom";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__kl6W7)}
                role={"img"}
              />
            ) : null}
          </div>
        ) : null}
        <AntdModal
          data-plasmic-name={"modal"}
          data-plasmic-override={overrides.modal}
          className={classNames("__wab_instance", sty.modal)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_hamdast_sdk
          )}
          hideFooter={true}
          maskClosable={false}
          modalContentClassName={classNames({
            [sty["pcls_Bi3Znl7ElEiz"]]: hasVariant(
              globalVariants,
              "screen",
              "mobileOnly"
            ),
            [sty["pcls_TbOn5nOiI_qs"]]: true
          })}
          modalScopeClassName={sty["modal__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["modal", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["modal", "open"])}
          title={null}
          trigger={null}
        >
          {(() => {
            try {
              return $state.status.toUpperCase() === "OK";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__gd2U)}>
              <div className={classNames(projectcss.all, sty.freeBox___5JxJ9)}>
                <EmojiHappySquareSvgrepoComSvg2Icon
                  className={classNames(projectcss.all, sty.svg__vHyEk)}
                  role={"img"}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___8Dz03)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y5K4A
                  )}
                  data-i18n={"paysuccess.title"}
                >
                  {
                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b4Mg3
                  )}
                  data-i18n={"paysuccess.description"}
                >
                  {
                    "\u0627\u0632 \u062e\u0631\u06cc\u062f\u062a \u0645\u0645\u0646\u0648\u0646\u06cc\u0645! \u06af\u0641\u062a\u06af\u0648 \u0641\u0639\u0627\u0644 \u0634\u062f \u0648 \u062d\u0627\u0644\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647 \u0633\u0648\u0627\u0644\u0627\u062a\u062a \u062f\u0631\u0628\u0627\u0631\u0647 \u0633\u0644\u0627\u0645\u062a \u0648 \u0628\u062f\u0646\u062a \u067e\u0627\u0633\u062e \u0628\u062f\u06cc \u0648  \u0628\u0647 \u0633\u0644\u0627\u0645\u062a\u06cc \u062e\u0648\u062f\u062a \u0631\u0633\u06cc\u062f\u06af\u06cc \u06a9\u0646\u06cc."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g8LmD
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc >"
                    : "Enter some text"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__iUi6R)}>
                <ButtonLiom
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3)}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  endIcon={
                    <Icon12Icon
                      className={classNames(projectcss.all, sty.svg__j4U1T)}
                      role={"img"}
                    />
                  }
                  load={generateStateValueProp($state, ["button3", "load"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStatus"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["status"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStatus"] != null &&
                      typeof $steps["updateStatus"] === "object" &&
                      typeof $steps["updateStatus"].then === "function"
                    ) {
                      $steps["updateStatus"] = await $steps["updateStatus"];
                    }

                    $steps["updateBuy"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["buy"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateBuy"] != null &&
                      typeof $steps["updateBuy"] === "object" &&
                      typeof $steps["updateBuy"].then === "function"
                    ) {
                      $steps["updateBuy"] = await $steps["updateBuy"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const searchParams = new URLSearchParams(
                                  window.location.search
                                );
                                searchParams.delete("status");
                                searchParams.set("buy", "true");
                                const newUrl = `${
                                  window.location.pathname
                                }?${searchParams.toString()}`;
                                window.history.replaceState(null, "", newUrl);
                                return window.location.reload();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "load"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__id937
                    )}
                    data-i18n={"paysuccess.btn"}
                  >
                    {"\u062a\u0627\u06cc\u06cc\u062f"}
                  </div>
                </ButtonLiom>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__mqWcN)} />

          <ApiRequest
            data-plasmic-name={"shop2"}
            data-plasmic-override={overrides.shop2}
            body={(() => {
              try {
                return { shopId: $state.shopId };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.shop2)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop2", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop2", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop2", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = { args: [2000] };
                      return $globalActions["Fragment.wait"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateLoading"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value:
                          $steps.invokeGlobalAction?.data?.success == true ||
                          $steps.invokeGlobalAction4?.data?.success == true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoading"] != null &&
                  typeof $steps["updateLoading"] === "object" &&
                  typeof $steps["updateLoading"].then === "function"
                ) {
                  $steps["updateLoading"] = await $steps["updateLoading"];
                }
              }).apply(null, eventArgs);
            }}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/selfTest/shop"}
          >
            {(() => {
              try {
                return $state.status.toUpperCase() == "NOK";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___60P5P)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4V5E2)}
                >
                  <EmojiSadSquareSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___3Bzdx)}
                    role={"img"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__dwtdu)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4KOyK
                    )}
                    data-i18n={"payunsuccess.title"}
                  >
                    {
                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dbYkD
                    )}
                    data-i18n={"payunsuccess.description"}
                  >
                    {
                      "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f . "
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sFt8
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc >"
                      : "Enter some text"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__uq9Xa)}>
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom8"}
                    data-plasmic-override={overrides.buttonLiom8}
                    className={classNames("__wab_instance", sty.buttonLiom8)}
                    color={generateStateValueProp($state, [
                      "buttonLiom8",
                      "color"
                    ])}
                    endIcon={
                      <Icon111Icon
                        className={classNames(projectcss.all, sty.svg__l4Ax9)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    load={generateStateValueProp($state, [
                      "buttonLiom8",
                      "load"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadinkBotten"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten"] != null &&
                        typeof $steps["updateLoadinkBotten"] === "object" &&
                        typeof $steps["updateLoadinkBotten"].then === "function"
                      ) {
                        $steps["updateLoadinkBotten"] = await $steps[
                          "updateLoadinkBotten"
                        ];
                      }

                      $steps["invokeGlobalAction"] =
                        $ctx.query.gw != "paziresh24"
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/selfTest/shopBuy",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        merchantID:
                                          "15e7df9e-5bef-4640-a597-ee501e65ff8c",
                                        id: $state.shopId,
                                        amount: $state.shop2.data.result.price,
                                        type: "selfTest",
                                        text: $state.shop2.data.result.title,
                                        value: 1,
                                        userId: $state.userId,
                                        callback:
                                          "https://n8n.staas.ir/webhook/selfTestPayment",
                                        extraData: {
                                          user_id: $state.userId,
                                          session_id: $state.sessionId,
                                          type: $ctx.query.type
                                        },
                                        redirectUrl: $state.redirectUrl
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  undefined
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.invokeGlobalAction?.data?.success == true &&
                        $ctx.query.gw != "paziresh24"
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.open(
                                    $steps.invokeGlobalAction.data.result,
                                    "_self"
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["runCode2"] =
                        $ctx.query.gw == "paziresh24"
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    console.log("pay");
                                    return window.hamdast.payment
                                      .pay({
                                        product_key: $state.productKey,
                                        payload: null
                                      })
                                      .then(function ({ event, ...payload }) {
                                        console.log(event);
                                        if (
                                          event === "HAMDAST_PAYMENT_SUCCESS"
                                        ) {
                                          $state.status = "OK";
                                          const receipt_id = payload.receipt_id;
                                          fetch(
                                            "https://n8n.staas.ir/webhook/pasiresh24/pay",
                                            {
                                              method: "POST",
                                              headers: {
                                                "Content-Type":
                                                  "application/json"
                                              },
                                              body: JSON.stringify({
                                                receipt_id: receipt_id
                                              })
                                            }
                                          )
                                            .then(response => response.json())
                                            .then(data => {
                                              console.log(
                                                "تایید پرداخت:",
                                                data
                                              );
                                            })
                                            .catch(err => {
                                              console.error(
                                                "خطا در تایید پرداخت:",
                                                err
                                              );
                                            });
                                        } else if (
                                          event === "HAMDAST_PAYMENT_CANCEL"
                                        ) {
                                          $state.status = "NOK";
                                          console.log("پرداخت لغو شد.");
                                        } else if (
                                          event === "HAMDAST_PAYMENT_ERROR"
                                        ) {
                                          $state.status = "NOK";
                                          console.log("پرداخت ناموفق بود.");
                                        }
                                      })
                                      .catch(function (error) {
                                        console.error(
                                          "خطای کلی در فرآیند پرداخت:",
                                          error
                                        );
                                      });
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["updateLoadinkBotten2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten2"] != null &&
                        typeof $steps["updateLoadinkBotten2"] === "object" &&
                        typeof $steps["updateLoadinkBotten2"].then ===
                          "function"
                      ) {
                        $steps["updateLoadinkBotten2"] = await $steps[
                          "updateLoadinkBotten2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom8",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom8",
                          "load"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()}
                  >
                    {(() => {
                      try {
                        return !$state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dyyIt
                        )}
                        data-i18n={"payunsuccess.btn"}
                      >
                        {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                      </div>
                    ) : null}
                  </ButtonLiom>
                </div>
              </div>
            ) : null}
          </ApiRequest>
        </AntdModal>
        <div className={classNames(projectcss.all, sty.freeBox__pVrt2)}>
          <div
            data-plasmic-name={"rate2"}
            data-plasmic-override={overrides.rate2}
            className={classNames(projectcss.all, sty.rate2)}
            onClick={async event => {
              const $steps = {};

              $steps["updateCommentsOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["comments", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCommentsOpen"] != null &&
                typeof $steps["updateCommentsOpen"] === "object" &&
                typeof $steps["updateCommentsOpen"].then === "function"
              ) {
                $steps["updateCommentsOpen"] = await $steps[
                  "updateCommentsOpen"
                ];
              }
            }}
            style={(() => {
              try {
                return {
                  margin:
                    new window.URLSearchParams(window.location.search).get(
                      "inApp"
                    ) == "test"
                      ? "-120px"
                      : "0px"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bnLTr
              )}
              data-i18n={"score"}
            >
              {"\u0627\u0645\u062a\u06cc\u0627\u0632 : "}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sCusy
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return $state.rate;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__beiZ)}>
              <Embed
                className={classNames("__wab_instance", sty.embedHtml__sp9I)}
                code={(() => {
                  try {
                    return `<div id="ratingContainer" style="display: flex; direction: ltr;"></div>

<style>
  .starWrapper {
    width: 40px;
    position: relative;
  }

  .starWrapper svg {
    width: 100%;
    height: 100%;
    display: block;
  }

  .coloredSection {
    color: #8e44ad;
    position: absolute;
    top: 0;
    left: 0;
    overflow: hidden;
    clip-path: inset(0 100% 0 0);
    width: 100%;
    height: 100%;
  }

  .backgroundSection {
    color: lightgray;
    position: relative;
    width: 100%;
    height: 100%;
  }
</style>

<script>
function generateStars(score) {
  const container = document.getElementById('ratingContainer');
  container.innerHTML = '';
  container.style.direction = 'ltr';

  const starSVG = '<svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg">' +
    '<path d="M9.15316 5.40838C10.4198 3.13613 11.0531 2 12 2C12.9469 2 13.5802 3.13612 14.8468 5.40837L15.1745 5.99623C15.5345 6.64193 15.7144 6.96479 15.9951 7.17781C16.2757 7.39083 16.6251 7.4699 17.3241 7.62805L17.9605 7.77203C20.4201 8.32856 21.65 8.60682 21.9426 9.54773C22.2352 10.4886 21.3968 11.4691 19.7199 13.4299L19.2861 13.9372C18.8096 14.4944 18.5713 14.773 18.4641 15.1177C18.357 15.4624 18.393 15.8341 18.465 16.5776L18.5306 17.2544C18.7841 19.8706 18.9109 21.1787 18.1449 21.7602C17.3788 22.3417 16.2273 21.8115 13.9243 20.7512L13.3285 20.4768C12.6741 20.1755 12.3469 20.0248 12 20.0248C11.6531 20.0248 11.3259 20.1755 10.6715 20.4768L10.0757 20.7512C7.77268 21.8115 6.62118 22.3417 5.85515 21.7602C5.08912 21.1787 5.21588 19.8706 5.4694 17.2544L5.53498 16.5776C5.60703 15.8341 5.64305 15.4624 5.53586 15.1177C5.42868 14.773 5.19043 14.4944 4.71392 13.9372L4.2801 13.4299C2.60325 11.4691 1.76482 10.4886 2.05742 9.54773C2.35002 8.60682 3.57986 8.32856 6.03954 7.77203L6.67589 7.62805C7.37485 7.4699 7.72433 7.39083 8.00494 7.17781C8.28555 6.96479 8.46553 6.64194 8.82547 5.99623L9.15316 5.40838Z"/>' +
  '</svg>';

  for (let i = 0; i < 5; i++) {
    const wrap = document.createElement('div');
    wrap.className = 'starWrapper';

    const base = document.createElement('div');
    base.className = 'backgroundSection';
    base.innerHTML = starSVG;

    const fill = document.createElement('div');
    fill.className = 'coloredSection';
    fill.innerHTML = starSVG;

    let percent = Math.min(Math.max(score - i, 0), 1) * 100;
    fill.style.clipPath = 'inset(0 ' + (100 - percent) + '% 0 0)';

    wrap.appendChild(base);
    wrap.appendChild(fill);
    container.appendChild(wrap);
  }
}

// اجرای نمونه
generateStars(${$state.rate});
</script>`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "<div id=\"stars\" style=\"display: flex; direction: ltr;\"></div>\r\n\r\n<style>\r\n  .star {\r\n    font-size: 16px;\r\n    color: lightgray;\r\n    position: relative;\r\n    width: 16px;\r\n    height: 16px;\r\n    overflow: hidden;\r\n    text-align: left;\r\n  }\r\n  .star .fill {\r\n    direction: ltr;\r\n    color: #8e44ad;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-align: left;\r\n    width: 0;\r\n  }\r\n</style>\r\n\r\n<script>\r\nfunction renderStars(rating) {\r\n  const starsContainer = document.getElementById('stars');\r\n  starsContainer.innerHTML = '';\r\n  starsContainer.style.direction = 'ltr'; // \u062e\u06cc\u0644\u06cc \u0645\u0647\u0645 \u0627\u0633\u062a \u0627\u06cc\u0646\u062c\u0627 \u0628\u0627\u0634\u062f\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    const star = document.createElement('div');\r\n    star.classList.add('star');\r\n\r\n    const fill = document.createElement('div');\r\n    fill.classList.add('fill');\r\n    fill.innerText = '\u2605';\r\n\r\n    const empty = document.createElement('div');\r\n    empty.innerText = '\u2605';\r\n\r\n    let fillPercent = Math.min(Math.max(rating - i, 0), 1) * 100;\r\n    fill.style.width = fillPercent + '%';\r\n\r\n    star.appendChild(fill);\r\n    star.appendChild(empty);\r\n    starsContainer.appendChild(star);\r\n  }\r\n}\r\n\r\n// \u0627\u06cc\u0646\u062c\u0627 \u0627\u0645\u062a\u06cc\u0627\u0632 \u0628\u062f\u0647:\r\nrenderStars(3.2);\r\n</script>\r\n";
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </div>
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__zbw1H)}
            code={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? '<!-- \r\n<div class="dropdown" id="langDropdown">\r\n  <div class="toggle" tabindex="0">\r\n    <span class="flag" id="selectedFlag">fa</span>\r\n      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: 15px; height: 15px;">\r\n    <path d="M20.58 19.37L17.59 11.01C17.38 10.46 16.91 10.12 16.37 10.12C15.83 10.12 15.37 10.46 15.14 11.03L12.16 19.37C12.02 19.76 12.22 20.19 12.61 20.33C13 20.47 13.43 20.27 13.57 19.88L14.19 18.15H18.54L19.16 19.88C19.27 20.19 19.56 20.38 19.87 20.38C19.95 20.38 20.04 20.37 20.12 20.34C20.51 20.2 20.71 19.77 20.57 19.38L20.58 19.37ZM14.74 16.64L16.38 12.05L18.02 16.64H14.74ZM12.19 7.85C9.92999 11.42 7.89 13.58 5.41 15.02C5.29 15.09 5.16 15.12 5.04 15.12C4.78 15.12 4.53 14.99 4.39 14.75C4.18 14.39 4.3 13.93 4.66 13.73C6.75999 12.51 8.48 10.76 10.41 7.86H4.12C3.71 7.86 3.37 7.52 3.37 7.11C3.37 6.7 3.71 6.36 4.12 6.36H7.87V4.38C7.87 3.97 8.21 3.63 8.62 3.63C9.02999 3.63 9.37 3.97 9.37 4.38V6.36H13.12C13.53 6.36 13.87 6.7 13.87 7.11C13.87 7.52 13.53 7.86 13.12 7.86H12.18L12.19 7.85ZM12.23 15.12C12.1 15.12 11.97 15.09 11.85 15.02C11.2 14.64 10.57 14.22 9.97999 13.78C9.64999 13.53 9.58 13.06 9.83 12.73C10.08 12.4 10.55 12.33 10.88 12.58C11.42 12.99 12.01 13.37 12.61 13.72C12.97 13.93 13.09 14.39 12.88 14.75C12.74 14.99 12.49 15.12 12.23 15.12Z" fill="#000000"></path>\r\n  </svg>\r\n  </div>\r\n  <ul class="menu" role="listbox" aria-label="Select Language">\r\n    <li data-lang="en" role="option" aria-selected="false"><span class="flag"> en </span> English</li>\r\n    <li data-lang="fa" role="option" aria-selected="true"><span class="flag"> fa </span> \u0641\u0627\u0631\u0633\u06cc</li>\r\n    <li data-lang="ar" role="option" aria-selected="false"><span class="flag"> ar </span> \u0627\u0644\u0639\u0631\u0628\u064a\u0629</li>\r\n  </ul>\r\n</div>\r\n\r\n\r\n<script src="https://tools.liom.app/plasmic/i18next.min.js"></script>\r\n<script>\r\n  const resources = {\r\n    en: {\r\n      translation: {\r\n        "title": "Health Assistant",\r\n        "score": "Score:",\r\n        "score.title": "Ratings and Reviews",\r\n        "score.numberOf": "out of 5",\r\n        "score.number": "0 people",\r\n        "score.description": "In this section, you can read the experiences and opinions of other users who have taken this test before you. After completing the test, we\u2019d love it if you shared your experience with us and other users.",\r\n        "paysuccess.title": "Payment Successful",\r\n        "paysuccess.description": "Thanks for your purchase! The conversation has been activated and now you can answer questions about your health and body, and take better care of yourself.",\r\n        "paysuccess.btn": "Confirm",\r\n        "payunsuccess.title": "Payment Unsuccessful",\r\n        "payunsuccess.description": "It seems something went wrong and the transaction was not completed. Please click the retry button again.",\r\n        "payunsuccess.btn": "Retry",\r\n        "btn.pay": "Pay and Start Test",\r\n        "btn.result": "View Previous Results",\r\n        "previous.title":"Previous Test Results",\r\n        "start": "Let\'s start",\r\n        "startp": "Let\'s start",\r\n        "no.comment": "No comments to display."\r\n\r\n      }\r\n    },\r\n    fa: {\r\n      translation: {\r\n        "title": "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a",\r\n        "score": "\u0627\u0645\u062a\u06cc\u0627\u0632 :",\r\n        "score.title": "\u0646\u0638\u0631\u0627\u062a \u0648 \u0627\u0645\u062a\u06cc\u0627\u0632 \u0647\u0627",\r\n        "score.numberOf": "\u0627\u0632 5",\r\n        "score.number": "0  \u0646\u0641\u0631",\r\n        "score.description": "\u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u062a\u062c\u0631\u0628\u06cc\u0627\u062a \u0648 \u062f\u06cc\u062f\u06af\u0627\u0647\u200c\u0647\u0627\u06cc \u0633\u0627\u06cc\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646\u06cc \u0631\u0627 \u0628\u062e\u0648\u0627\u0646\u06cc\u062f \u06a9\u0647 \u067e\u06cc\u0634 \u0627\u0632 \u0634\u0645\u0627 \u0627\u06cc\u0646 \u062a\u0633\u062a \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647\u200c\u0627\u0646\u062f. \u067e\u0633 \u0627\u0632 \u067e\u0627\u06cc\u0627\u0646 \u062a\u0633\u062a\u060c \u062e\u0648\u0634\u062d\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u06cc\u0645 \u0627\u06af\u0631  \u0634\u0645\u0627 \u0647\u0645 \u062a\u062c\u0631\u0628\u0647\u200c\u062a\u0627\u0646 \u0631\u0627 \u0628\u0627 \u0645\u0627 \u0648 \u062f\u06cc\u06af\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u06af\u0630\u0627\u0631\u06cc\u062f.",\r\n        "paysuccess.title": "\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642",\r\n        "paysuccess.description": "\u0627\u0632 \u062e\u0631\u06cc\u062f\u062a \u0645\u0645\u0646\u0648\u0646\u06cc\u0645! \u06af\u0641\u062a\u06af\u0648 \u0641\u0639\u0627\u0644 \u0634\u062f \u0648 \u062d\u0627\u0644\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647 \u0633\u0648\u0627\u0644\u0627\u062a\u062a \u062f\u0631\u0628\u0627\u0631\u0647 \u0633\u0644\u0627\u0645\u062a \u0648 \u0628\u062f\u0646\u062a \u067e\u0627\u0633\u062e \u0628\u062f\u06cc \u0648  \u0628\u0647 \u0633\u0644\u0627\u0645\u062a\u06cc \u062e\u0648\u062f\u062a \u0631\u0633\u06cc\u062f\u06af\u06cc \u06a9\u0646\u06cc.",\r\n        "paysuccess.btn": "\u062a\u0627\u06cc\u06cc\u062f",\r\n        "payunsuccess.title": "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642",\r\n        "payunsuccess.description": "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f.",\r\n        "payunsuccess.btn": "\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f",\r\n        "btn.pay": "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u0634\u0631\u0648\u0639 \u062a\u0633\u062a",\r\n        "btn.result": "\u062f\u06cc\u062f\u0646 \u0646\u062a\u0627\u06cc\u062c \u0642\u0628\u0644\u06cc",\r\n        "previous.title":"\u0646\u062a\u0627\u06cc\u062c \u062a\u0633\u062a\u200c\u0647\u0627\u06cc \u0642\u0628\u0644\u06cc",\r\n        "start": "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",\r\n        "startp": "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",\r\n        "no.comment": "\u0646\u0638\u0631\u06cc \u0628\u0631\u0627\u06cc \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."\r\n      }\r\n    },\r\n    ar: {\r\n      translation: {\r\n        "title": "\u0645\u0633\u0627\u0639\u062f \u0627\u0644\u0635\u062d\u0629",\r\n        "score": "\u0627\u0644\u062a\u0642\u064a\u064a\u0645:",\r\n        "score.title": "\u0627\u0644\u0645\u0631\u0627\u062c\u0639\u0627\u062a \u0648\u0627\u0644\u062a\u0642\u064a\u064a\u0645\u0627\u062a",\r\n        "score.numberOf": "\u0645\u0646 5",\r\n        "score.number": "0 \u0623\u0634\u062e\u0627\u0635",\r\n        "score.description": "\u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0642\u0633\u0645\u060c \u064a\u0645\u0643\u0646\u0643 \u0642\u0631\u0627\u0621\u0629 \u062a\u062c\u0627\u0631\u0628 \u0648\u0622\u0631\u0627\u0621 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0627\u0644\u0622\u062e\u0631\u064a\u0646 \u0627\u0644\u0630\u064a\u0646 \u0642\u0627\u0645\u0648\u0627 \u0628\u0647\u0630\u0627 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0642\u0628\u0644\u0643. \u0628\u0639\u062f \u0627\u0644\u0627\u0646\u062a\u0647\u0627\u0621 \u0645\u0646 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u060c \u064a\u0633\u0639\u062f\u0646\u0627 \u0623\u0646 \u062a\u0634\u0627\u0631\u0643 \u062a\u062c\u0631\u0628\u062a\u0643 \u0645\u0639\u0646\u0627 \u0648\u0645\u0639 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0627\u0644\u0622\u062e\u0631\u064a\u0646.",\r\n        "paysuccess.title": "\u062a\u0645 \u0627\u0644\u062f\u0641\u0639 \u0628\u0646\u062c\u0627\u062d",\r\n        "paysuccess.description": "\u0634\u0643\u0631\u064b\u0627 \u0639\u0644\u0649 \u0634\u0631\u0627\u0626\u0643! \u062a\u0645 \u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u0645\u062d\u0627\u062f\u062b\u0629 \u0648\u0627\u0644\u0622\u0646 \u064a\u0645\u0643\u0646\u0643 \u0627\u0644\u0625\u062c\u0627\u0628\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0633\u0626\u0644\u0629 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0635\u062d\u062a\u0643 \u0648\u062c\u0633\u0645\u0643 \u0648\u0627\u0644\u0639\u0646\u0627\u064a\u0629 \u0628\u0646\u0641\u0633\u0643.",\r\n        "paysuccess.btn": "\u062a\u0623\u0643\u064a\u062f",\r\n        "payunsuccess.title": "\u0641\u0634\u0644 \u0627\u0644\u062f\u0641\u0639",\r\n        "payunsuccess.description": "\u064a\u0628\u062f\u0648 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0645\u0634\u0643\u0644\u0629 \u0648\u0644\u0645 \u062a\u0643\u062a\u0645\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629. \u0627\u0644\u0631\u062c\u0627\u0621 \u0627\u0644\u0636\u063a\u0637 \u0639\u0644\u0649 \u0632\u0631 \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649.",\r\n        "payunsuccess.btn": "\u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649",\r\n        "btn.pay": "\u0627\u0644\u062f\u0641\u0639 \u0648\u0628\u062f\u0621 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631",\r\n        "btn.result": "\u0639\u0631\u0636 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0633\u0627\u0628\u0642\u0629",\r\n        "previous.title":"\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629",\r\n        "start": "\u0644\u0646\u0628\u062f\u0623",\r\n        "startp": "\u0644\u0646\u0628\u062f\u0623",\r\n        "no.comment": "\u0644\u0627 \u062a\u0648\u062c\u062f \u062a\u0639\u0644\u064a\u0642\u0627\u062a \u0644\u0639\u0631\u0636\u0647\u0627."\r\n\r\n      }\r\n    }\r\n  };\r\nconst dropdown = document.getElementById(\'langDropdown\');\r\nconst toggle = dropdown.querySelector(\'.toggle\');\r\nconst menu = dropdown.querySelector(\'.menu\');\r\nconst selectedFlag = document.getElementById(\'selectedFlag\');\r\nconst options = menu.querySelectorAll(\'li\');\r\n\r\n  function createI18nManager({ i18nextInstance, root = document.body }) {\r\n    const translatedElements = new WeakMap();\r\n\r\n    const translateElement = el => {\r\n      const key = el.getAttribute(\'data-i18n\');\r\n      if (!key || !i18nextInstance.t) return;\r\n      const translated = i18nextInstance.t(key);\r\n      if (el.textContent.trim() !== translated.trim()) {\r\n        el.textContent = translated;\r\n        translatedElements.set(el, key);\r\n      }\r\n    };\r\n\r\n    const translateAll = () => {\r\n      root.querySelectorAll(\'[data-i18n]\').forEach(translateElement);\r\n        if (i18nextInstance.language === \'en\') {\r\n            document.body.classList.add(\'english-font\');\r\n          } else {\r\n            document.body.classList.remove(\'english-font\');\r\n        }\r\n      document.body.dir = [\'fa\', \'ar\'].includes(i18nextInstance.language) ? \'rtl\' : \'ltr\';\r\n    };\r\n\r\n    const observer = new MutationObserver(mutations => {\r\n      mutations.forEach(m => {\r\n        m.addedNodes.forEach(node => {\r\n          if (node.nodeType !== 1) return;\r\n          if (node.matches?.(\'[data-i18n]\')) translateElement(node);\r\n          node.querySelectorAll?.(\'[data-i18n]\').forEach(translateElement);\r\n        });\r\n      });\r\n    });\r\n\r\n    observer.observe(root, { childList: true, subtree: true });\r\n\r\n    i18nextInstance.on(\'languageChanged\', () => {\r\n      translateAll();\r\n    });\r\n\r\n    return { translateAll, disconnect: () => observer.disconnect() };\r\n  }\r\n\r\n  i18next.init({\r\n    lng: \'fa\',\r\n    debug: false,\r\n    resources\r\n  }).then(() => {\r\n    const i18nManager = createI18nManager({ i18nextInstance: i18next });\r\n\r\n    // \u0627\u0646\u062a\u062e\u0627\u0628 \u0632\u0628\u0627\u0646\r\n    // const options = document.querySelectorAll(\'#langDropdown [data-lang]\');\r\n    // const selectedFlag = document.getElementById(\'selectedFlag\');\r\n\r\n    options.forEach(li => {\r\n      li.addEventListener(\'click\', () => {\r\n        const lang = li.getAttribute(\'data-lang\');\r\n        localStorage.setItem(\'selectedLang\', lang);\r\n        selectedFlag.textContent = lang;\r\n        dropdown.classList.toggle(\'open\');\r\n        window.location.reload(); \r\n      });\r\n    });\r\n    toggle.onclick = () => dropdown.classList.toggle(\'open\');\r\n\r\n  document.addEventListener(\'click\', e => {\r\n    if (!dropdown.contains(e.target)) dropdown.classList.remove(\'open\');\r\n  });\r\n\r\n  toggle.onkeydown = e => {\r\n    if (e.key === \'Enter\' || e.key === \' \') {\r\n      e.preventDefault();\r\n      dropdown.classList.toggle(\'open\');\r\n    }\r\n  };\r\n\r\n    // \u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0648\u0644\u06cc\u0647 \u0632\u0628\u0627\u0646\r\n    const urlLang = new URLSearchParams(window.location.search).get(\'lang\');\r\n    const savedLang = localStorage.getItem(\'selectedLang\');\r\n    const initialLang = urlLang || savedLang || \'fa\';\r\n    if (urlLang) {\r\n  localStorage.setItem(\'selectedLang\', urlLang);\r\n\r\n  // \u062d\u0630\u0641 lang \u0627\u0632 URL \u0628\u062f\u0648\u0646 \u0631\u06cc\u0644\u0648\u062f \u0635\u0641\u062d\u0647\r\n  urlParams.delete(\'lang\');\r\n  const newUrl = window.location.pathname + (urlParams.toString() ? \'?\' + urlParams.toString() : \'\');\r\n  history.replaceState(null, \'\', newUrl);\r\n}\r\n    i18next.changeLanguage(initialLang);\r\n    selectedFlag.textContent = initialLang;\r\n  });\r\n</script> \r\n\r\n -->\r\n'
                : '<!-- \r\n<div class="dropdown" id="langDropdown">\r\n  <div class="toggle" tabindex="0">\r\n    <span class="flag" id="selectedFlag">fa</span>\r\n      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: 15px; height: 15px;">\r\n    <path d="M20.58 19.37L17.59 11.01C17.38 10.46 16.91 10.12 16.37 10.12C15.83 10.12 15.37 10.46 15.14 11.03L12.16 19.37C12.02 19.76 12.22 20.19 12.61 20.33C13 20.47 13.43 20.27 13.57 19.88L14.19 18.15H18.54L19.16 19.88C19.27 20.19 19.56 20.38 19.87 20.38C19.95 20.38 20.04 20.37 20.12 20.34C20.51 20.2 20.71 19.77 20.57 19.38L20.58 19.37ZM14.74 16.64L16.38 12.05L18.02 16.64H14.74ZM12.19 7.85C9.92999 11.42 7.89 13.58 5.41 15.02C5.29 15.09 5.16 15.12 5.04 15.12C4.78 15.12 4.53 14.99 4.39 14.75C4.18 14.39 4.3 13.93 4.66 13.73C6.75999 12.51 8.48 10.76 10.41 7.86H4.12C3.71 7.86 3.37 7.52 3.37 7.11C3.37 6.7 3.71 6.36 4.12 6.36H7.87V4.38C7.87 3.97 8.21 3.63 8.62 3.63C9.02999 3.63 9.37 3.97 9.37 4.38V6.36H13.12C13.53 6.36 13.87 6.7 13.87 7.11C13.87 7.52 13.53 7.86 13.12 7.86H12.18L12.19 7.85ZM12.23 15.12C12.1 15.12 11.97 15.09 11.85 15.02C11.2 14.64 10.57 14.22 9.97999 13.78C9.64999 13.53 9.58 13.06 9.83 12.73C10.08 12.4 10.55 12.33 10.88 12.58C11.42 12.99 12.01 13.37 12.61 13.72C12.97 13.93 13.09 14.39 12.88 14.75C12.74 14.99 12.49 15.12 12.23 15.12Z" fill="#000000"></path>\r\n  </svg>\r\n  </div>\r\n  <ul class="menu" role="listbox" aria-label="Select Language">\r\n    <li data-lang="en" role="option" aria-selected="false"><span class="flag"> en </span> English</li>\r\n    <li data-lang="fa" role="option" aria-selected="true"><span class="flag"> fa </span> \u0641\u0627\u0631\u0633\u06cc</li>\r\n    <li data-lang="ar" role="option" aria-selected="false"><span class="flag"> ar </span> \u0627\u0644\u0639\u0631\u0628\u064a\u0629</li>\r\n  </ul>\r\n</div>\r\n\r\n\r\n<script src="https://tools.liom.app/plasmic/i18next.min.js"></script>\r\n<script>\r\n  const resources = {\r\n    en: {\r\n      translation: {\r\n        "title": "Health Assistant",\r\n        "score": "Score:",\r\n        "score.title": "Ratings and Reviews",\r\n        "score.numberOf": "out of 5",\r\n        "score.number": "0 people",\r\n        "score.description": "In this section, you can read the experiences and opinions of other users who have taken this test before you. After completing the test, we\u2019d love it if you shared your experience with us and other users.",\r\n        "paysuccess.title": "Payment Successful",\r\n        "paysuccess.description": "Thanks for your purchase! The conversation has been activated and now you can answer questions about your health and body, and take better care of yourself.",\r\n        "paysuccess.btn": "Confirm",\r\n        "payunsuccess.title": "Payment Unsuccessful",\r\n        "payunsuccess.description": "It seems something went wrong and the transaction was not completed. Please click the retry button again.",\r\n        "payunsuccess.btn": "Retry",\r\n        "btn.pay": "Pay and Start Test",\r\n        "btn.result": "View Previous Results",\r\n        "previous.title":"Previous Test Results",\r\n        "start": "Let\'s start",\r\n        "startp": "Let\'s start",\r\n        "no.comment": "No comments to display."\r\n\r\n      }\r\n    },\r\n    fa: {\r\n      translation: {\r\n        "title": "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a",\r\n        "score": "\u0627\u0645\u062a\u06cc\u0627\u0632 :",\r\n        "score.title": "\u0646\u0638\u0631\u0627\u062a \u0648 \u0627\u0645\u062a\u06cc\u0627\u0632 \u0647\u0627",\r\n        "score.numberOf": "\u0627\u0632 5",\r\n        "score.number": "0  \u0646\u0641\u0631",\r\n        "score.description": "\u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u062a\u062c\u0631\u0628\u06cc\u0627\u062a \u0648 \u062f\u06cc\u062f\u06af\u0627\u0647\u200c\u0647\u0627\u06cc \u0633\u0627\u06cc\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646\u06cc \u0631\u0627 \u0628\u062e\u0648\u0627\u0646\u06cc\u062f \u06a9\u0647 \u067e\u06cc\u0634 \u0627\u0632 \u0634\u0645\u0627 \u0627\u06cc\u0646 \u062a\u0633\u062a \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647\u200c\u0627\u0646\u062f. \u067e\u0633 \u0627\u0632 \u067e\u0627\u06cc\u0627\u0646 \u062a\u0633\u062a\u060c \u062e\u0648\u0634\u062d\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u06cc\u0645 \u0627\u06af\u0631  \u0634\u0645\u0627 \u0647\u0645 \u062a\u062c\u0631\u0628\u0647\u200c\u062a\u0627\u0646 \u0631\u0627 \u0628\u0627 \u0645\u0627 \u0648 \u062f\u06cc\u06af\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u06af\u0630\u0627\u0631\u06cc\u062f.",\r\n        "paysuccess.title": "\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642",\r\n        "paysuccess.description": "\u0627\u0632 \u062e\u0631\u06cc\u062f\u062a \u0645\u0645\u0646\u0648\u0646\u06cc\u0645! \u06af\u0641\u062a\u06af\u0648 \u0641\u0639\u0627\u0644 \u0634\u062f \u0648 \u062d\u0627\u0644\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647 \u0633\u0648\u0627\u0644\u0627\u062a\u062a \u062f\u0631\u0628\u0627\u0631\u0647 \u0633\u0644\u0627\u0645\u062a \u0648 \u0628\u062f\u0646\u062a \u067e\u0627\u0633\u062e \u0628\u062f\u06cc \u0648  \u0628\u0647 \u0633\u0644\u0627\u0645\u062a\u06cc \u062e\u0648\u062f\u062a \u0631\u0633\u06cc\u062f\u06af\u06cc \u06a9\u0646\u06cc.",\r\n        "paysuccess.btn": "\u062a\u0627\u06cc\u06cc\u062f",\r\n        "payunsuccess.title": "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642",\r\n        "payunsuccess.description": "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f.",\r\n        "payunsuccess.btn": "\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f",\r\n        "btn.pay": "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u0634\u0631\u0648\u0639 \u062a\u0633\u062a",\r\n        "btn.result": "\u062f\u06cc\u062f\u0646 \u0646\u062a\u0627\u06cc\u062c \u0642\u0628\u0644\u06cc",\r\n        "previous.title":"\u0646\u062a\u0627\u06cc\u062c \u062a\u0633\u062a\u200c\u0647\u0627\u06cc \u0642\u0628\u0644\u06cc",\r\n        "start": "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",\r\n        "startp": "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",\r\n        "no.comment": "\u0646\u0638\u0631\u06cc \u0628\u0631\u0627\u06cc \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."\r\n      }\r\n    },\r\n    ar: {\r\n      translation: {\r\n        "title": "\u0645\u0633\u0627\u0639\u062f \u0627\u0644\u0635\u062d\u0629",\r\n        "score": "\u0627\u0644\u062a\u0642\u064a\u064a\u0645:",\r\n        "score.title": "\u0627\u0644\u0645\u0631\u0627\u062c\u0639\u0627\u062a \u0648\u0627\u0644\u062a\u0642\u064a\u064a\u0645\u0627\u062a",\r\n        "score.numberOf": "\u0645\u0646 5",\r\n        "score.number": "0 \u0623\u0634\u062e\u0627\u0635",\r\n        "score.description": "\u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0642\u0633\u0645\u060c \u064a\u0645\u0643\u0646\u0643 \u0642\u0631\u0627\u0621\u0629 \u062a\u062c\u0627\u0631\u0628 \u0648\u0622\u0631\u0627\u0621 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0627\u0644\u0622\u062e\u0631\u064a\u0646 \u0627\u0644\u0630\u064a\u0646 \u0642\u0627\u0645\u0648\u0627 \u0628\u0647\u0630\u0627 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u0642\u0628\u0644\u0643. \u0628\u0639\u062f \u0627\u0644\u0627\u0646\u062a\u0647\u0627\u0621 \u0645\u0646 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u060c \u064a\u0633\u0639\u062f\u0646\u0627 \u0623\u0646 \u062a\u0634\u0627\u0631\u0643 \u062a\u062c\u0631\u0628\u062a\u0643 \u0645\u0639\u0646\u0627 \u0648\u0645\u0639 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u064a\u0646 \u0627\u0644\u0622\u062e\u0631\u064a\u0646.",\r\n        "paysuccess.title": "\u062a\u0645 \u0627\u0644\u062f\u0641\u0639 \u0628\u0646\u062c\u0627\u062d",\r\n        "paysuccess.description": "\u0634\u0643\u0631\u064b\u0627 \u0639\u0644\u0649 \u0634\u0631\u0627\u0626\u0643! \u062a\u0645 \u062a\u0641\u0639\u064a\u0644 \u0627\u0644\u0645\u062d\u0627\u062f\u062b\u0629 \u0648\u0627\u0644\u0622\u0646 \u064a\u0645\u0643\u0646\u0643 \u0627\u0644\u0625\u062c\u0627\u0628\u0629 \u0639\u0644\u0649 \u0627\u0644\u0623\u0633\u0626\u0644\u0629 \u0627\u0644\u0645\u062a\u0639\u0644\u0642\u0629 \u0628\u0635\u062d\u062a\u0643 \u0648\u062c\u0633\u0645\u0643 \u0648\u0627\u0644\u0639\u0646\u0627\u064a\u0629 \u0628\u0646\u0641\u0633\u0643.",\r\n        "paysuccess.btn": "\u062a\u0623\u0643\u064a\u062f",\r\n        "payunsuccess.title": "\u0641\u0634\u0644 \u0627\u0644\u062f\u0641\u0639",\r\n        "payunsuccess.description": "\u064a\u0628\u062f\u0648 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0645\u0634\u0643\u0644\u0629 \u0648\u0644\u0645 \u062a\u0643\u062a\u0645\u0644 \u0627\u0644\u0645\u0639\u0627\u0645\u0644\u0629. \u0627\u0644\u0631\u062c\u0627\u0621 \u0627\u0644\u0636\u063a\u0637 \u0639\u0644\u0649 \u0632\u0631 \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649.",\r\n        "payunsuccess.btn": "\u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649",\r\n        "btn.pay": "\u0627\u0644\u062f\u0641\u0639 \u0648\u0628\u062f\u0621 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631",\r\n        "btn.result": "\u0639\u0631\u0636 \u0627\u0644\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0633\u0627\u0628\u0642\u0629",\r\n        "previous.title":"\u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u0627\u062a \u0627\u0644\u0633\u0627\u0628\u0642\u0629",\r\n        "start": "\u0644\u0646\u0628\u062f\u0623",\r\n        "startp": "\u0644\u0646\u0628\u062f\u0623",\r\n        "no.comment": "\u0644\u0627 \u062a\u0648\u062c\u062f \u062a\u0639\u0644\u064a\u0642\u0627\u062a \u0644\u0639\u0631\u0636\u0647\u0627."\r\n\r\n      }\r\n    }\r\n  };\r\nconst dropdown = document.getElementById(\'langDropdown\');\r\nconst toggle = dropdown.querySelector(\'.toggle\');\r\nconst menu = dropdown.querySelector(\'.menu\');\r\nconst selectedFlag = document.getElementById(\'selectedFlag\');\r\nconst options = menu.querySelectorAll(\'li\');\r\n\r\n  function createI18nManager({ i18nextInstance, root = document.body }) {\r\n    const translatedElements = new WeakMap();\r\n\r\n    const translateElement = el => {\r\n      const key = el.getAttribute(\'data-i18n\');\r\n      if (!key || !i18nextInstance.t) return;\r\n      const translated = i18nextInstance.t(key);\r\n      if (el.textContent.trim() !== translated.trim()) {\r\n        el.textContent = translated;\r\n        translatedElements.set(el, key);\r\n      }\r\n    };\r\n\r\n    const translateAll = () => {\r\n      root.querySelectorAll(\'[data-i18n]\').forEach(translateElement);\r\n        if (i18nextInstance.language === \'en\') {\r\n            document.body.classList.add(\'english-font\');\r\n          } else {\r\n            document.body.classList.remove(\'english-font\');\r\n        }\r\n      document.body.dir = [\'fa\', \'ar\'].includes(i18nextInstance.language) ? \'rtl\' : \'ltr\';\r\n    };\r\n\r\n    const observer = new MutationObserver(mutations => {\r\n      mutations.forEach(m => {\r\n        m.addedNodes.forEach(node => {\r\n          if (node.nodeType !== 1) return;\r\n          if (node.matches?.(\'[data-i18n]\')) translateElement(node);\r\n          node.querySelectorAll?.(\'[data-i18n]\').forEach(translateElement);\r\n        });\r\n      });\r\n    });\r\n\r\n    observer.observe(root, { childList: true, subtree: true });\r\n\r\n    i18nextInstance.on(\'languageChanged\', () => {\r\n      translateAll();\r\n    });\r\n\r\n    return { translateAll, disconnect: () => observer.disconnect() };\r\n  }\r\n\r\n  i18next.init({\r\n    lng: \'fa\',\r\n    debug: false,\r\n    resources\r\n  }).then(() => {\r\n    const i18nManager = createI18nManager({ i18nextInstance: i18next });\r\n\r\n    // \u0627\u0646\u062a\u062e\u0627\u0628 \u0632\u0628\u0627\u0646\r\n    // const options = document.querySelectorAll(\'#langDropdown [data-lang]\');\r\n    // const selectedFlag = document.getElementById(\'selectedFlag\');\r\n\r\n    options.forEach(li => {\r\n      li.addEventListener(\'click\', () => {\r\n        const lang = li.getAttribute(\'data-lang\');\r\n        localStorage.setItem(\'selectedLang\', lang);\r\n        selectedFlag.textContent = lang;\r\n        dropdown.classList.toggle(\'open\');\r\n        window.location.reload(); \r\n      });\r\n    });\r\n    toggle.onclick = () => dropdown.classList.toggle(\'open\');\r\n\r\n  document.addEventListener(\'click\', e => {\r\n    if (!dropdown.contains(e.target)) dropdown.classList.remove(\'open\');\r\n  });\r\n\r\n  toggle.onkeydown = e => {\r\n    if (e.key === \'Enter\' || e.key === \' \') {\r\n      e.preventDefault();\r\n      dropdown.classList.toggle(\'open\');\r\n    }\r\n  };\r\n\r\n    // \u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0648\u0644\u06cc\u0647 \u0632\u0628\u0627\u0646\r\n    const urlLang = new URLSearchParams(window.location.search).get(\'lang\');\r\n    const savedLang = localStorage.getItem(\'selectedLang\');\r\n    const initialLang = urlLang || savedLang || \'fa\';\r\n    if (urlLang) {\r\n  localStorage.setItem(\'selectedLang\', urlLang);\r\n\r\n  // \u062d\u0630\u0641 lang \u0627\u0632 URL \u0628\u062f\u0648\u0646 \u0631\u06cc\u0644\u0648\u062f \u0635\u0641\u062d\u0647\r\n  urlParams.delete(\'lang\');\r\n  const newUrl = window.location.pathname + (urlParams.toString() ? \'?\' + urlParams.toString() : \'\');\r\n  history.replaceState(null, \'\', newUrl);\r\n}\r\n    i18next.changeLanguage(initialLang);\r\n    selectedFlag.textContent = initialLang;\r\n  });\r\n</script> \r\n\r\n -->\r\n'
            }
          />
        </div>
        <AntdModal
          data-plasmic-name={"rateinfo"}
          data-plasmic-override={overrides.rateinfo}
          className={classNames("__wab_instance", sty.rateinfo)}
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_hamdast_sdk
          )}
          hideFooter={true}
          modalScopeClassName={sty["rateinfo__modal"]}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["rateinfo", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["rateinfo", "open"])}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6C6Jr
              )}
            >
              {
                "\u0646\u062d\u0648\u0647 \u0645\u062d\u0627\u0633\u0628\u0647 \u0627\u0645\u062a\u06cc\u0627\u0632"
              }
            </div>
          }
          trigger={null}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fyxSs)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__raXdu
              )}
            >
              {
                "\u0627\u0645\u062a\u06cc\u0627\u0632 \u0646\u0645\u0627\u06cc\u0634 \u062f\u0627\u062f\u0647 \u0634\u062f\u0647\u060c \u0627\u0632 \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u0646\u0638\u0631\u0627\u062a \u0648 \u0627\u0645\u062a\u06cc\u0627\u0632\u0647\u0627\u06cc \u062b\u0628\u062a\u200c\u0634\u062f\u0647 \u062a\u0648\u0633\u0637 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u062f\u0631 \u0646\u0638\u0631\u0633\u0646\u062c\u06cc\u200c\u0647\u0627 \u0628\u0647 \u062f\u0633\u062a \u0622\u0645\u062f\u0647 \u0648 \u0646\u0634\u0627\u0646\u200c\u062f\u0647\u0646\u062f\u0647 \u0633\u0637\u062d \u0631\u0636\u0627\u06cc\u062a \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0627\u0633\u062a."
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___162Ul)}>
              <ButtonLiom
                data-plasmic-name={"buttonLiom4"}
                data-plasmic-override={overrides.buttonLiom4}
                className={classNames("__wab_instance", sty.buttonLiom4)}
                color={generateStateValueProp($state, ["buttonLiom4", "color"])}
                load={generateStateValueProp($state, ["buttonLiom4", "load"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateRateinfoOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["rateinfo", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateRateinfoOpen"] != null &&
                    typeof $steps["updateRateinfoOpen"] === "object" &&
                    typeof $steps["updateRateinfoOpen"].then === "function"
                  ) {
                    $steps["updateRateinfoOpen"] = await $steps[
                      "updateRateinfoOpen"
                    ];
                  }

                  $steps["updateCommentsOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["comments", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCommentsOpen"] != null &&
                    typeof $steps["updateCommentsOpen"] === "object" &&
                    typeof $steps["updateCommentsOpen"].then === "function"
                  ) {
                    $steps["updateCommentsOpen"] = await $steps[
                      "updateCommentsOpen"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom4", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom4", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wRIl
                  )}
                >
                  {
                    "\u0645\u0634\u0627\u0647\u062f\u0647 \u0646\u0638\u0631\u0627\u062a"
                  }
                </div>
              </ButtonLiom>
              <ButtonLiom
                data-plasmic-name={"buttonLiom2"}
                data-plasmic-override={overrides.buttonLiom2}
                className={classNames("__wab_instance", sty.buttonLiom2)}
                color={generateStateValueProp($state, ["buttonLiom2", "color"])}
                load={generateStateValueProp($state, ["buttonLiom2", "load"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateRateinfoOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["rateinfo", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateRateinfoOpen"] != null &&
                    typeof $steps["updateRateinfoOpen"] === "object" &&
                    typeof $steps["updateRateinfoOpen"].then === "function"
                  ) {
                    $steps["updateRateinfoOpen"] = await $steps[
                      "updateRateinfoOpen"
                    ];
                  }

                  $steps["updateTestChat"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["testChat"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateTestChat"] != null &&
                    typeof $steps["updateTestChat"] === "object" &&
                    typeof $steps["updateTestChat"].then === "function"
                  ) {
                    $steps["updateTestChat"] = await $steps["updateTestChat"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom2", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom2", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zexZe
                  )}
                >
                  {"\u0645\u062a\u0648\u062c\u0647 \u0634\u062f\u0645"}
                </div>
              </ButtonLiom>
            </div>
          </div>
        </AntdModal>
        <Paziresh24Modal
          data-plasmic-name={"comments"}
          data-plasmic-override={overrides.comments}
          body={
            <ApiRequest
              data-plasmic-name={"comment"}
              data-plasmic-override={overrides.comment}
              className={classNames("__wab_instance", sty.comment)}
              errorDisplay={null}
              loadingDisplay={
                <div className={classNames(projectcss.all, sty.freeBox__tovxa)}>
                  <Icon111Icon
                    className={classNames(projectcss.all, sty.svg__ab80T)}
                    role={"img"}
                  />
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["comment", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["comment", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["comment", "data"]).apply(
                  null,
                  eventArgs
                );
              }}
              params={(() => {
                try {
                  return {
                    selfTest_id:
                      parseInt(window.sessionStorage.getItem("testID")) || 1
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              shouldFetch={true}
              url={"https://n8n.staas.ir/webhook/selfTest_comments"}
            >
              <div className={classNames(projectcss.all, sty.freeBox__uKerc)}>
                {(() => {
                  try {
                    return $state.comment.data.list.length == 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9LMxh
                    )}
                    data-i18n={"no.comment"}
                  >
                    {
                      "\u0646\u0638\u0631\u06cc \u0628\u0631\u0627\u06cc \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                    }
                  </div>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox___53UI0)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cHgjg)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sIuhj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wPwF
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.rate;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kl9Wp
                        )}
                        data-i18n={"score.numberOf"}
                      >
                        {" \u0627\u0632 5"}
                      </div>
                    </div>
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml__t2Vx3
                      )}
                      code={(() => {
                        try {
                          return `<div id="rateBox" style="display: flex; direction: ltr;"></div>

<style>
  .iconWrap {
    width: 40px;       /* عرض بزرگ‌تر */
    position: relative;
  }

  .iconWrap svg {
    width: 100%;
    height: 100%;
    display: block;
  }

  .filledPart {
    color: #8e44ad;
    position: absolute;
    top: 0;
    left: 0;
    overflow: hidden;
    clip-path: inset(0 100% 0 0); /* ← تغییر می‌کند در جاوااسکریپت */
    width: 100%;
    height: 100%;
  }

  .basePart {
    color: lightgray;
    position: relative;
    width: 100%;
    height: 100%;
  }
</style>

<script>
function drawRating(score) {
  const container = document.getElementById('rateBox');
  container.innerHTML = '';
  container.style.direction = 'ltr';

  const starSVG = '<svg viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">' +
    '<path d=\"M9.15316 5.40838C10.4198 3.13613 11.0531 2 12 2C12.9469 2 13.5802 3.13612 14.8468 5.40837L15.1745 5.99623C15.5345 6.64193 15.7144 6.96479 15.9951 7.17781C16.2757 7.39083 16.6251 7.4699 17.3241 7.62805L17.9605 7.77203C20.4201 8.32856 21.65 8.60682 21.9426 9.54773C22.2352 10.4886 21.3968 11.4691 19.7199 13.4299L19.2861 13.9372C18.8096 14.4944 18.5713 14.773 18.4641 15.1177C18.357 15.4624 18.393 15.8341 18.465 16.5776L18.5306 17.2544C18.7841 19.8706 18.9109 21.1787 18.1449 21.7602C17.3788 22.3417 16.2273 21.8115 13.9243 20.7512L13.3285 20.4768C12.6741 20.1755 12.3469 20.0248 12 20.0248C11.6531 20.0248 11.3259 20.1755 10.6715 20.4768L10.0757 20.7512C7.77268 21.8115 6.62118 22.3417 5.85515 21.7602C5.08912 21.1787 5.21588 19.8706 5.4694 17.2544L5.53498 16.5776C5.60703 15.8341 5.64305 15.4624 5.53586 15.1177C5.42868 14.773 5.19043 14.4944 4.71392 13.9372L4.2801 13.4299C2.60325 11.4691 1.76482 10.4886 2.05742 9.54773C2.35002 8.60682 3.57986 8.32856 6.03954 7.77203L6.67589 7.62805C7.37485 7.4699 7.72433 7.39083 8.00494 7.17781C8.28555 6.96479 8.46553 6.64194 8.82547 5.99623L9.15316 5.40838Z\"/>' +
  '</svg>';

  for (let i = 0; i < 5; i++) {
    const wrap = document.createElement('div');
    wrap.className = 'iconWrap';

    const base = document.createElement('div');
    base.className = 'basePart';
    base.innerHTML = starSVG;

    const fill = document.createElement('div');
    fill.className = 'filledPart';
    fill.innerHTML = starSVG;

    let percent = Math.min(Math.max(score - i, 0), 1) * 100;
    fill.style.clipPath = 'inset(0 ' + (100 - percent) + '% 0 0)';

    wrap.appendChild(base);
    wrap.appendChild(fill);
    container.appendChild(wrap);
  }
}

// اجرای نمونه
drawRating(${$state.rate});
</script>
`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "<div id=\"rateBox\" style=\"display: flex; direction: ltr;\"></div>\r\n\r\n<style>\r\n  .iconWrap {\r\n    width: 40px;       /* \u0639\u0631\u0636 \u0628\u0632\u0631\u06af\u200c\u062a\u0631 */\r\n    position: relative;\r\n  }\r\n\r\n  .iconWrap svg {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n  }\r\n\r\n  .filledPart {\r\n    color: #8e44ad;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    overflow: hidden;\r\n    clip-path: inset(0 100% 0 0); /* \u2190 \u062a\u063a\u06cc\u06cc\u0631 \u0645\u06cc\u200c\u06a9\u0646\u062f \u062f\u0631 \u062c\u0627\u0648\u0627\u0627\u0633\u06a9\u0631\u06cc\u067e\u062a */\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .basePart {\r\n    color: lightgray;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n</style>\r\n\r\n<script>\r\nfunction drawRating(score) {\r\n  const container = document.getElementById('rateBox');\r\n  container.innerHTML = '';\r\n  container.style.direction = 'ltr';\r\n\r\n  const starSVG = `\r\n  <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M9.15316 5.40838C10.4198 3.13613 11.0531 2 12 2C12.9469 2 13.5802 3.13612 14.8468 5.40837L15.1745 5.99623C15.5345 6.64193 15.7144 6.96479 15.9951 7.17781C16.2757 7.39083 16.6251 7.4699 17.3241 7.62805L17.9605 7.77203C20.4201 8.32856 21.65 8.60682 21.9426 9.54773C22.2352 10.4886 21.3968 11.4691 19.7199 13.4299L19.2861 13.9372C18.8096 14.4944 18.5713 14.773 18.4641 15.1177C18.357 15.4624 18.393 15.8341 18.465 16.5776L18.5306 17.2544C18.7841 19.8706 18.9109 21.1787 18.1449 21.7602C17.3788 22.3417 16.2273 21.8115 13.9243 20.7512L13.3285 20.4768C12.6741 20.1755 12.3469 20.0248 12 20.0248C11.6531 20.0248 11.3259 20.1755 10.6715 20.4768L10.0757 20.7512C7.77268 21.8115 6.62118 22.3417 5.85515 21.7602C5.08912 21.1787 5.21588 19.8706 5.4694 17.2544L5.53498 16.5776C5.60703 15.8341 5.64305 15.4624 5.53586 15.1177C5.42868 14.773 5.19043 14.4944 4.71392 13.9372L4.2801 13.4299C2.60325 11.4691 1.76482 10.4886 2.05742 9.54773C2.35002 8.60682 3.57986 8.32856 6.03954 7.77203L6.67589 7.62805C7.37485 7.4699 7.72433 7.39083 8.00494 7.17781C8.28555 6.96479 8.46553 6.64194 8.82547 5.99623L9.15316 5.40838Z\"/>\r\n  </svg>`;\r\n\r\n  for (let i = 0; i < 5; i++) {\r\n    const wrap = document.createElement('div');\r\n    wrap.className = 'iconWrap';\r\n\r\n    const base = document.createElement('div');\r\n    base.className = 'basePart';\r\n    base.innerHTML = starSVG;\r\n\r\n    const fill = document.createElement('div');\r\n    fill.className = 'filledPart';\r\n    fill.innerHTML = starSVG;\r\n\r\n    let percent = Math.min(Math.max(score - i, 0), 1) * 100;\r\n    fill.style.clipPath = `inset(0 ${100 - percent}% 0 0)`;\r\n\r\n    wrap.appendChild(base);\r\n    wrap.appendChild(fill);\r\n    container.appendChild(wrap);\r\n  }\r\n}\r\n\r\n// \u0627\u062c\u0631\u0627\u06cc \u0646\u0645\u0648\u0646\u0647\r\ndrawRating(3.5);\r\n</script>\r\n";
                          }
                          throw e;
                        }
                      })()}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bjIe
                      )}
                      data-i18n={"score.number"}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.cRate.toLocaleString() + "  نفر  ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x6G7U
                    )}
                    data-i18n={"score.description"}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u062a\u062c\u0631\u0628\u06cc\u0627\u062a \u0648 \u062f\u06cc\u062f\u06af\u0627\u0647\u200c\u0647\u0627\u06cc \u0633\u0627\u06cc\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646\u06cc \u0631\u0627 \u0628\u062e\u0648\u0627\u0646\u06cc\u062f \u06a9\u0647 \u067e\u06cc\u0634 \u0627\u0632 \u0634\u0645\u0627 \u0627\u06cc\u0646 \u062a\u0633\u062a \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647\u200c\u0627\u0646\u062f. \u067e\u0633 \u0627\u0632 \u067e\u0627\u06cc\u0627\u0646 \u062a\u0633\u062a\u060c \u062e\u0648\u0634\u062d\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u06cc\u0645 \u0627\u06af\u0631 "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u00a0\u0634\u0645\u0627 \u0647\u0645 \u062a\u062c\u0631\u0628\u0647\u200c\u062a\u0627\u0646 \u0631\u0627 \u0628\u0627 \u0645\u0627 \u0648 \u062f\u06cc\u06af\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u06af\u0630\u0627\u0631\u06cc\u062f."
                          }
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u062f\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u062a\u062c\u0631\u0628\u06cc\u0627\u062a \u0648 \u062f\u06cc\u062f\u06af\u0627\u0647\u200c\u0647\u0627\u06cc \u0633\u0627\u06cc\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646\u06cc \u0631\u0627 \u0628\u062e\u0648\u0627\u0646\u06cc\u062f \u06a9\u0647 \u067e\u06cc\u0634 \u0627\u0632 \u0634\u0645\u0627 \u0627\u06cc\u0646 \u062a\u0633\u062a \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647\u200c\u0627\u0646\u062f. \u067e\u0633 \u0627\u0632 \u067e\u0627\u06cc\u0627\u0646 \u062a\u0633\u062a\u060c \u062e\u0648\u0634\u062d\u0627\u0644 \u0645\u06cc\u200c\u0634\u0648\u06cc\u0645 \u0627\u06af\u0631 "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u00a0\u0634\u0645\u0627 \u0647\u0645 \u062a\u062c\u0631\u0628\u0647\u200c\u062a\u0627\u0646 \u0631\u0627 \u0628\u0627 \u0645\u0627 \u0648 \u062f\u06cc\u06af\u0631 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u0628\u06af\u0630\u0627\u0631\u06cc\u062f."
                          }
                        </span>
                      </React.Fragment>
                    )}
                  </div>
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.comment.data.list;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const user = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qeu81)}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yDlfe
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yPqap
                          )}
                          style={(() => {
                            try {
                              return (() => {
                                const colors = [
                                  "#3498db",
                                  "#2ecc71",
                                  "#9b59b6",
                                  "#e67e22",
                                  "#e74c3c",
                                  "#1abc9c",
                                  "#34495e",
                                  "#f39c12",
                                  "#7f8c8d",
                                  "#16a085",
                                  "#2980b9",
                                  "#8e44ad",
                                  "#c0392b",
                                  "#d35400"
                                ];

                                function getRandomColor() {
                                  const randomIndex = Math.floor(
                                    Math.random() * colors.length
                                  );
                                  return colors[randomIndex];
                                }
                                return { backgroundColor: getRandomColor() };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Ocim
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (user.name || "کاربر بی‌نام").split(
                                    ""
                                  )[0];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uiLj9
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ztDNx
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oiPj9
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return user.name || "کاربر بی‌نام";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06a9\u0627\u0631\u0628\u0631 \u0628\u06cc \u0646\u0627\u0645";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bGi9S
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const selectedLang =
                                        localStorage.getItem("selectedLang") ||
                                        "fa";
                                      let locale;
                                      switch (selectedLang) {
                                        case "fa":
                                          locale = "fa-IR";
                                          break;
                                        case "ar":
                                          locale = "ar-SA";
                                          break;
                                        case "en":
                                        default:
                                          locale = "en-US";
                                      }
                                      return new Date(
                                        user.timestamp
                                      ).toLocaleDateString(locale);
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "1403 /2 /3";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o7Al
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return [5, 4, 3, 2, 1];
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <Stars
                                  data-plasmic-name={"stars"}
                                  data-plasmic-override={overrides.stars}
                                  activ={(() => {
                                    try {
                                      return currentItem <= user.rate;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "activ";
                                      }
                                      throw e;
                                    }
                                  })()}
                                  children={null}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.stars
                                  )}
                                  key={currentIndex}
                                />
                              );
                            })}
                          </div>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k4Z7I
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return user.comment;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  );
                })}
              </div>
            </ApiRequest>
          }
          className={classNames("__wab_instance", sty.comments)}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["comments", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          open={generateStateValueProp($state, ["comments", "open"])}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__svq3B
              )}
              data-i18n={"score.title"}
            >
              {
                "\u0646\u0638\u0631\u0627\u062a \u0648 \u0627\u0645\u062a\u06cc\u0627\u0632 \u0647\u0627"
              }
            </div>
          }
          trigger={null}
        />

        {(() => {
          try {
            return !$state.loading && $state.errorload;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"error"}
            data-plasmic-override={overrides.error}
            className={classNames(projectcss.all, sty.error)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__e1V4D)}>
              <Icon118Icon
                className={classNames(projectcss.all, sty.svg__hgqx5)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__juuky
                )}
              >
                {
                  "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                }
              </div>
            </div>
            <ButtonLiom
              data-plasmic-name={"buttonLiom5"}
              data-plasmic-override={overrides.buttonLiom5}
              className={classNames("__wab_instance", sty.buttonLiom5)}
              color={generateStateValueProp($state, ["buttonLiom5", "color"])}
              endIcon={
                <Icon167Icon
                  className={classNames(projectcss.all, sty.svg___1WRsn)}
                  role={"img"}
                />
              }
              load={generateStateValueProp($state, ["buttonLiom5", "load"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.location.reload();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom5", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom5", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              showEndIcon={true}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wqhG
                )}
              >
                {
                  "\u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0645\u062c\u062f\u062f"
                }
              </div>
            </ButtonLiom>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "hamdast",
    "headerLiom",
    "paziresh24Avatar",
    "progress",
    "messageLiom",
    "section",
    "testOptionsLiom",
    "peyliom",
    "buttonLiom",
    "peyPardakht24",
    "favicon",
    "dialog",
    "buttonLiom3",
    "dialog2",
    "shop",
    "input4",
    "button12",
    "buttonLiom6",
    "modal",
    "button3",
    "shop2",
    "buttonLiom8",
    "rate2",
    "rateinfo",
    "buttonLiom4",
    "buttonLiom2",
    "comments",
    "comment",
    "stars",
    "error",
    "buttonLiom5"
  ],
  sideEffect: ["sideEffect"],
  hamdast: ["hamdast"],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  progress: ["progress"],
  messageLiom: ["messageLiom"],
  section: [
    "section",
    "testOptionsLiom",
    "peyliom",
    "buttonLiom",
    "peyPardakht24"
  ],
  testOptionsLiom: ["testOptionsLiom"],
  peyliom: ["peyliom", "buttonLiom"],
  buttonLiom: ["buttonLiom"],
  peyPardakht24: ["peyPardakht24"],
  favicon: ["favicon"],
  dialog: ["dialog", "buttonLiom3"],
  buttonLiom3: ["buttonLiom3"],
  dialog2: ["dialog2", "shop", "input4", "button12", "buttonLiom6"],
  shop: ["shop", "input4", "button12", "buttonLiom6"],
  input4: ["input4"],
  button12: ["button12"],
  buttonLiom6: ["buttonLiom6"],
  modal: ["modal", "button3", "shop2", "buttonLiom8"],
  button3: ["button3"],
  shop2: ["shop2", "buttonLiom8"],
  buttonLiom8: ["buttonLiom8"],
  rate2: ["rate2"],
  rateinfo: ["rateinfo", "buttonLiom4", "buttonLiom2"],
  buttonLiom4: ["buttonLiom4"],
  buttonLiom2: ["buttonLiom2"],
  comments: ["comments", "comment", "stars"],
  comment: ["comment", "stars"],
  stars: ["stars"],
  error: ["error", "buttonLiom5"],
  buttonLiom5: ["buttonLiom5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  hamdast: typeof Embed;
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  progress: typeof AntdProgress;
  messageLiom: typeof MessageLiom;
  section: "section";
  testOptionsLiom: typeof TestOptionsLiom;
  peyliom: "div";
  buttonLiom: typeof ButtonLiom;
  peyPardakht24: "div";
  favicon: typeof Embed;
  dialog: typeof Paziresh24Modal;
  buttonLiom3: typeof ButtonLiom;
  dialog2: typeof Paziresh24Modal;
  shop: typeof ApiRequest;
  input4: typeof AntdInput;
  button12: typeof ButtonLiom;
  buttonLiom6: typeof ButtonLiom;
  modal: typeof AntdModal;
  button3: typeof ButtonLiom;
  shop2: typeof ApiRequest;
  buttonLiom8: typeof ButtonLiom;
  rate2: "div";
  rateinfo: typeof AntdModal;
  buttonLiom4: typeof ButtonLiom;
  buttonLiom2: typeof ButtonLiom;
  comments: typeof Paziresh24Modal;
  comment: typeof ApiRequest;
  stars: typeof Stars;
  error: "div";
  buttonLiom5: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfTest__VariantsArgs;
    args?: PlasmicSelfTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfTest__ArgProps,
          internalVariantPropNames: PlasmicSelfTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfTest";
  } else {
    func.displayName = `PlasmicSelfTest.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfTest = Object.assign(
  // Top-level PlasmicSelfTest renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    hamdast: makeNodeComponent("hamdast"),
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    progress: makeNodeComponent("progress"),
    messageLiom: makeNodeComponent("messageLiom"),
    section: makeNodeComponent("section"),
    testOptionsLiom: makeNodeComponent("testOptionsLiom"),
    peyliom: makeNodeComponent("peyliom"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    peyPardakht24: makeNodeComponent("peyPardakht24"),
    favicon: makeNodeComponent("favicon"),
    dialog: makeNodeComponent("dialog"),
    buttonLiom3: makeNodeComponent("buttonLiom3"),
    dialog2: makeNodeComponent("dialog2"),
    shop: makeNodeComponent("shop"),
    input4: makeNodeComponent("input4"),
    button12: makeNodeComponent("button12"),
    buttonLiom6: makeNodeComponent("buttonLiom6"),
    modal: makeNodeComponent("modal"),
    button3: makeNodeComponent("button3"),
    shop2: makeNodeComponent("shop2"),
    buttonLiom8: makeNodeComponent("buttonLiom8"),
    rate2: makeNodeComponent("rate2"),
    rateinfo: makeNodeComponent("rateinfo"),
    buttonLiom4: makeNodeComponent("buttonLiom4"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    comments: makeNodeComponent("comments"),
    comment: makeNodeComponent("comment"),
    stars: makeNodeComponent("stars"),
    error: makeNodeComponent("error"),
    buttonLiom5: makeNodeComponent("buttonLiom5"),

    // Metadata about props expected for PlasmicSelfTest
    internalVariantProps: PlasmicSelfTest__VariantProps,
    internalArgProps: PlasmicSelfTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | دستیار سلامت",
      description:
        "از دلایل عقب جلو شدن پریود خود،  در کمتر از چند دقیقه و بدون انتظار برای پزشک آگاه شوید",
      ogImageSrc:
        "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",
      canonical: ""
    }
  }
);

export default PlasmicSelfTest;
/* prettier-ignore-end */
