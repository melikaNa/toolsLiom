// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 5IOCSv5V9vzY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import MessageLiom from "../../MessageLiom"; // plasmic-import: xCdoITDvZVKn/component
import TestOptionsLiom from "../../TestOptionsLiom"; // plasmic-import: DvUx8-VJCAy9/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent

import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfTest.module.css"; // plasmic-import: 5IOCSv5V9vzY/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: CIGrIuwcL9LP/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon

createPlasmicElementProxy;

export type PlasmicSelfTest__VariantMembers = {};
export type PlasmicSelfTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfTest__VariantsArgs;
export const PlasmicSelfTest__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfTest__ArgsType = {};
type ArgPropType = keyof PlasmicSelfTest__ArgsType;
export const PlasmicSelfTest__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfTest__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  messageLiom?: Flex__<typeof MessageLiom>;
  testOptionsLiom?: Flex__<typeof TestOptionsLiom>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  progress?: Flex__<typeof AntdProgress>;
  timer?: Flex__<typeof Timer>;
  user?: Flex__<typeof ApiRequest>;
  apiRequest2?: Flex__<typeof ApiRequest>;
};

export interface DefaultSelfTestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfTest__RenderFunc(props: {
  variants: PlasmicSelfTest__VariantsArgs;
  args: PlasmicSelfTest__ArgsType;
  overrides: PlasmicSelfTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "testChat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (
                  $ctx.query.nextQuesion_id == "" ||
                  $ctx.query.nextQuesion_id == null
                ) {
                  return [
                    {
                      text: "سلام بر شما\uD83D\uDC4B امیدوارم روح و جسم شما همیشه سالم باشد\u2764️",
                      from: "system",
                      type: "answer"
                    },
                    {
                      text: "من ابزاری هستم تا به شما کمک میکنم بتوانید در کمتر از چند دقیقه\u060C از سلامت خود اطمینان حاصل کنید و فرآیند خودتشخیصی اولیه را انجام دهید",
                      from: "system"
                    },
                    {
                      text: 'این ابزار به کمک و دانش متخصصین و پزشکان ایجاد شده و شبیه سازی یک ویزیت واقعی است. با گرفتن شرح حال شما به تشخیص "بدون حضور دکتر" کمک میکند',
                      from: "system"
                    },
                    {
                      text: "آماده ای خودتشخیصی را شروع کنیم\u061F",
                      question: { lock: 0 },
                      from: "system",
                      btnText: "شروع کنیم.",
                      options: [
                        {
                          id: 1,
                          text: "شروع کنیم."
                        }
                      ]
                    }
                  ];
                } else {
                  return JSON.parse(localStorage.getItem("test"));
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\ud83d\udc4b \u0633\u0644\u0627\u0645!",
                    from: "system",
                    type: "answer"
                  },
                  {
                    text: "\u0645\u0646 \u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a \u0634\u0645\u0627 \u0647\u0633\u062a\u0645.",
                    from: "system"
                  },
                  {
                    text: "\u067e\u0627\u0633\u062e\u200c\u0647\u0627\u06cc \u0645\u0646 \u0628\u0647 \u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u062a\u0648\u0644\u06cc\u062f \u0645\u06cc\u200c\u0634\u0648\u0646\u062f\u060c \u0627\u0645\u0627 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u06af\u0633\u062a\u0631\u062f\u0647 \u0648 \u062f\u0627\u062f\u0647\u200c\u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637 \u062a\u0647\u06cc\u0647 \u0634\u062f\u0647\u200c\u0627\u0646\u062f.\u0645\u0646 \u0627\u06cc\u0646\u062c\u0627 \u0647\u0633\u062a\u0645 \u062a\u0627 \u062f\u0631 \u0645\u0648\u0631\u062f \u0645\u0634\u06a9\u0644\u062a \u0628\u0627 \u0634\u0645\u0627 \u0635\u062d\u0628\u062a \u06a9\u0646\u0645 \ud83d\ude0a.",
                    from: "system"
                  },
                  {
                    text: "\u0622\u0645\u0627\u062f\u0647 \u0627\u06cc \u0635\u062d\u0628\u062a \u0631\u0648 \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645\u061f",
                    question: { lock: 0 },
                    from: "system",
                    btnText:
                      "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645.",
                    options: [
                      {
                        id: 1,
                        text: "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645."
                      }
                    ]
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "testOptionsLiom.selectedIDs",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.UserId;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "ferst",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.nextQuesion_id == null ||
                $ctx.query.nextQuesion_id == ""
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextQuesionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.testChat
                  .slice()
                  .reverse()
                  .find(item => item.question);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.session_id == "" ||
                $ctx.query.session_id == null
                ? 0
                : parseInt($ctx.query.session_id);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lock",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadinkBotten",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "totalTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 20
      },
      {
        path: "retestTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.nextQuesion_id == "" ||
                $ctx.query.nextQuesion_id == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
          onLoad={async event => {
            const $steps = {};
          }}
        >
          <HeaderLiom
            data-plasmic-name={"headerLiom"}
            data-plasmic-override={overrides.headerLiom}
            className={classNames("__wab_instance", sty.headerLiom)}
            slot={
              <Paziresh24Avatar
                data-plasmic-name={"paziresh24Avatar"}
                data-plasmic-override={overrides.paziresh24Avatar}
                className={classNames("__wab_instance", sty.paziresh24Avatar)}
                src={(() => {
                  try {
                    return $ctx.query.app == "liom"
                      ? "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png"
                      : "https://www.paziresh24.com/_next/static/media/logo.5e03fe79.svg";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            }
          >
            {
              "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a"
            }
          </HeaderLiom>
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__fwEj,
              "messegeBox"
            )}
          >
            <Reveal
              big={false}
              cascade={false}
              className={classNames("__wab_instance", sty.reveal__simfe)}
              delay={0}
              direction={"up"}
              duration={1000}
              effect={"fade"}
              triggerOnce={true}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.testChat;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <MessageLiom
                    data-plasmic-name={"messageLiom"}
                    data-plasmic-override={overrides.messageLiom}
                    className={classNames("__wab_instance", sty.messageLiom)}
                    endMessege={(() => {
                      try {
                        return (
                          $state.testChat[currentIndex].from === "system" &&
                          ($state.testChat[currentIndex + 1]?.from !==
                            "system" ||
                            $state.testChat.length - 1 === currentIndex)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    liomAnswer={(() => {
                      try {
                        return (
                          currentItem.from == "user" && $ctx.query.app == "liom"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loadingMessage={(() => {
                      try {
                        return currentItem.text == "loading";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    pazireshAnswer={(() => {
                      try {
                        return currentItem.from == "user";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___91S8B
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Lorem ipsum dolor sit amet,";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </MessageLiom>
                );
              })}
            </Reveal>
          </div>
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__ssEaT,
              "selectBox"
            )}
          >
            <Reveal
              big={true}
              className={classNames("__wab_instance", sty.reveal__ekaj9)}
              direction={"up"}
              triggerOnce={true}
            >
              {(() => {
                try {
                  return (
                    $state.testChat[$state.testChat.length - 1].options !=
                      null &&
                    !(
                      $state.variable.question.lock == 1 &&
                      $ctx.query.app == "liom"
                    ) &&
                    $state.nextQuesionId != -1
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <TestOptionsLiom
                  data-plasmic-name={"testOptionsLiom"}
                  data-plasmic-override={overrides.testOptionsLiom}
                  app={(() => {
                    try {
                      return $ctx.query.app;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.testOptionsLiom, {
                    [sty.testOptionsLiomglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants",
                        "unnamedVariant"
                      )
                  })}
                  data={(() => {
                    try {
                      return $state.testChat[$state.testChat.length - 1];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  ferst={(() => {
                    try {
                      return $state.ferst;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  onClick24={async event => {
                    const $steps = {};

                    $steps["updateNextQuesionId"] =
                      $state.ferst == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["nextQuesionId"]
                              },
                              operation: 0,
                              value: (() => {
                                if ($state.retestTest)
                                  return $state.variable.options.find(
                                    option =>
                                      option.id ===
                                      $state.testOptionsLiom.selectedIDs[0]
                                  ).nextQuesion_id;
                                else return parseInt($ctx.query.nextQuesion_id);
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateNextQuesionId"] != null &&
                      typeof $steps["updateNextQuesionId"] === "object" &&
                      typeof $steps["updateNextQuesionId"].then === "function"
                    ) {
                      $steps["updateNextQuesionId"] = await $steps[
                        "updateNextQuesionId"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.testChat.push({
                                  text:
                                    $state.testOptionsLiom.selectedIDs
                                      .length !== 0
                                      ? $state.testOptionsLiom.selectedIDs
                                          .map(
                                            id =>
                                              $state.testChat[
                                                $state.testChat.length - 1
                                              ].options.filter(
                                                option => option.id === id
                                              )[0]?.text
                                          )
                                          .join(" \n ")
                                      : $state.testChat[
                                          $state.testChat.length - 1
                                        ].options[0]?.text,
                                  from: "user",
                                  type: "answer"
                                });
                                if ($state.retestTest) {
                                  for (
                                    let i = 0;
                                    i <
                                    $state.testOptionsLiom.selectedIDs.length;
                                    i++
                                  ) {
                                    let selectedOption = $state.testChat[
                                      $state.testChat.length - 2
                                    ]?.options.filter(
                                      option =>
                                        option.id ===
                                        $state.testOptionsLiom.selectedIDs[i]
                                    )[0];
                                    if (
                                      selectedOption &&
                                      selectedOption.advice
                                    ) {
                                      $state.testChat.push({
                                        text: selectedOption.advice,
                                        from: "system"
                                      });
                                    }
                                  }
                                }
                                $state.testChat.push({
                                  text: "loading",
                                  from: "system"
                                });
                                return window.scrollTo({
                                  top: document.body.scrollHeight,
                                  behavior: "smooth"
                                });
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction3"] =
                      $state.ferst == true && $state.retestTest == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/selfTestLogs",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      session_id: $state.sessionId,
                                      user_id: $state.userId,
                                      question_id: $state.variable.question.id,
                                      option_id:
                                        $state.testOptionsLiom.selectedIDs[0],
                                      option_metric:
                                        $state.variable.options.find(
                                          option =>
                                            option.id ===
                                            $state.testOptionsLiom
                                              .selectedIDs[0]
                                        ).metric,
                                      option_score:
                                        $state.variable.options.find(
                                          option =>
                                            option.id ===
                                            $state.testOptionsLiom
                                              .selectedIDs[0]
                                        ).score,
                                      question_text:
                                        $state.variable.question.question,
                                      question_type: $state.type,
                                      option_advice:
                                        $state.variable.options.find(
                                          option =>
                                            option.id ===
                                            $state.testOptionsLiom
                                              .selectedIDs[0]
                                        ).advice,
                                      option_text: $state.variable.options.find(
                                        option =>
                                          option.id ===
                                          $state.testOptionsLiom.selectedIDs[0]
                                      ).text,
                                      option_metric_fa:
                                        $state.variable.options.find(
                                          option =>
                                            option.id ===
                                            $state.testOptionsLiom
                                              .selectedIDs[0]
                                        ).metric_fa
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["runCode6"] =
                      $state.nextQuesionId == -1
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.testChat[$state.testChat.length - 1] =
                                    {
                                      text: "سوالات خودتشخیصی به اتمام رسید\u060C حالا روی دکمه دیدن نتیجه کلیک کنید تا وضعیت شما آنالیز شود.",
                                      from: "system"
                                    };
                                  return window.scrollTo({
                                    top: document.body.scrollHeight,
                                    behavior: "smooth"
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode6"] != null &&
                      typeof $steps["runCode6"] === "object" &&
                      typeof $steps["runCode6"].then === "function"
                    ) {
                      $steps["runCode6"] = await $steps["runCode6"];
                    }

                    $steps["invokeGlobalAction"] =
                      $state.ferst == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/selfTestSession",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      type: $state.type,
                                      user_id: $state.userId
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $state.ferst == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "https://n8n.staas.ir/webhook/selfTestQuestion",
                                (() => {
                                  try {
                                    return {
                                      type: $state.type,
                                      question_id: $state.nextQuesionId
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["runCode2"] =
                      $state.ferst == false &&
                      !(
                        $steps.invokeGlobalAction?.data?.question?.lock == 1 &&
                        $ctx.query.app == "liom"
                      )
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let a = {
                                    question:
                                      $steps.invokeGlobalAction.data.question,
                                    text: $steps.invokeGlobalAction.data
                                      .question.question,
                                    from: "system",
                                    btnText:
                                      $steps.invokeGlobalAction.data.options
                                        .length == 1
                                        ? $steps.invokeGlobalAction.data
                                            .options[0].text
                                        : "ارسال",
                                    options:
                                      $steps.invokeGlobalAction.data.options
                                  };
                                  $state.testChat[$state.testChat.length - 1] =
                                    a;
                                  $state.sessionId =
                                    $steps.invokeGlobalAction.data.session_id;
                                  $state.testOptionsLiom.selectedIDs =
                                    $steps.invokeGlobalAction.data.options
                                      .length == 1
                                      ? [
                                          $steps.invokeGlobalAction.data
                                            .options[0].id
                                        ]
                                      : [];
                                  return window.scrollTo({
                                    top: document.body.scrollHeight,
                                    behavior: "smooth"
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }

                    $steps["runCode3"] =
                      $state.ferst == true &&
                      !(
                        $steps.invokeGlobalAction2?.data?.question?.lock == 1 &&
                        $ctx.query.app == "liom"
                      )
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let a = {
                                    question:
                                      $steps.invokeGlobalAction2.data.question,
                                    text: $steps.invokeGlobalAction2.data
                                      .question.question,
                                    from: "system",
                                    btnText:
                                      $steps.invokeGlobalAction2.data.options
                                        ?.length == 1
                                        ? $steps.invokeGlobalAction2.data
                                            .options[0].text
                                        : "ارسال",
                                    options:
                                      $steps.invokeGlobalAction2.data.options
                                  };
                                  $state.testChat[$state.testChat.length - 1] =
                                    a;
                                  $state.testOptionsLiom.selectedIDs =
                                    $steps.invokeGlobalAction2.data.options
                                      .length == 1
                                      ? [
                                          $steps.invokeGlobalAction2.data
                                            .options[0].id
                                        ]
                                      : [];
                                  return window.scrollTo({
                                    top: document.body.scrollHeight,
                                    behavior: "smooth"
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode3"] != null &&
                      typeof $steps["runCode3"] === "object" &&
                      typeof $steps["runCode3"].then === "function"
                    ) {
                      $steps["runCode3"] = await $steps["runCode3"];
                    }

                    $steps["runCode4"] =
                      ($steps.invokeGlobalAction2?.data?.question?.lock == 1 ||
                        $steps.invokeGlobalAction1?.data?.question?.lock ==
                          1) &&
                      $ctx.query.app == "liom"
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.testChat[$state.testChat.length - 1] =
                                    {
                                      text: "ممنون که تا اینجا همراه من بودی! برای ادامه گفت‌وگو و دریافت خدمات بیشتر\u060C لطفاً هزینه مربوطه را پرداخت کن. ما در تلاشیم بهترین تجربه را برایت فراهم کنیم.",
                                      from: "system"
                                    };
                                  $state.variable = {
                                    question:
                                      $steps.invokeGlobalAction2.data.question,
                                    text: $steps.invokeGlobalAction2.data
                                      .question.question,
                                    from: "system",
                                    btnText:
                                      $steps.invokeGlobalAction2.data.options
                                        ?.length == 1
                                        ? $steps.invokeGlobalAction2.data
                                            .options[0].text
                                        : "ارسال",
                                    options:
                                      $steps.invokeGlobalAction2.data.options
                                  };
                                  return window.scrollTo({
                                    top: document.body.scrollHeight,
                                    behavior: "smooth"
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode4"] != null &&
                      typeof $steps["runCode4"] === "object" &&
                      typeof $steps["runCode4"].then === "function"
                    ) {
                      $steps["runCode4"] = await $steps["runCode4"];
                    }

                    $steps["updateNumberTest"] =
                      $state.ferst == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["numberTest"]
                              },
                              operation: 0,
                              value: $state.numberTest + 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateNumberTest"] != null &&
                      typeof $steps["updateNumberTest"] === "object" &&
                      typeof $steps["updateNumberTest"].then === "function"
                    ) {
                      $steps["updateNumberTest"] = await $steps[
                        "updateNumberTest"
                      ];
                    }

                    $steps["updateFerst"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["ferst"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFerst"] != null &&
                      typeof $steps["updateFerst"] === "object" &&
                      typeof $steps["updateFerst"].then === "function"
                    ) {
                      $steps["updateFerst"] = await $steps["updateFerst"];
                    }

                    $steps["updateRetestTest"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["retestTest"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRetestTest"] != null &&
                      typeof $steps["updateRetestTest"] === "object" &&
                      typeof $steps["updateRetestTest"].then === "function"
                    ) {
                      $steps["updateRetestTest"] = await $steps[
                        "updateRetestTest"
                      ];
                    }

                    $steps["invokeGlobalAction4"] = true
                      ? (() => {
                          const actionArgs = { args: [1000] };
                          return $globalActions["Fragment.wait"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction4"] != null &&
                      typeof $steps["invokeGlobalAction4"] === "object" &&
                      typeof $steps["invokeGlobalAction4"].then === "function"
                    ) {
                      $steps["invokeGlobalAction4"] = await $steps[
                        "invokeGlobalAction4"
                      ];
                    }

                    $steps["runCode5"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.scrollTo({
                                top: document.body.scrollHeight,
                                behavior: "smooth"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode5"] != null &&
                      typeof $steps["runCode5"] === "object" &&
                      typeof $steps["runCode5"].then === "function"
                    ) {
                      $steps["runCode5"] = await $steps["runCode5"];
                    }
                  }}
                  onSelectedIDsChange={generateStateOnChangeProp($state, [
                    "testOptionsLiom",
                    "selectedIDs"
                  ])}
                  selectedIDs={generateStateValueProp($state, [
                    "testOptionsLiom",
                    "selectedIDs"
                  ])}
                />
              ) : null}
              {(() => {
                try {
                  return (
                    $state.variable.question.lock == 1 &&
                    $ctx.query.app == "liom"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qtre0)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tmi79)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3QNky
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__r8DyR
                        )}
                      >
                        {
                          "\u0627\u06af\u0647 \u062f\u0648\u0633\u062a \u062f\u0627\u0631\u06cc \u06af\u0641\u062a\u06af\u0648 \u0631\u0648 \u0627\u062f\u0627\u0645\u0647 \u0628\u062f\u06cc\u0645\u060c \u0644\u0637\u0641\u0627\u064b \u0647\u0632\u06cc\u0646\u0647 \u0631\u0648 \u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0646. "
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yMsKs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6KAp7
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.apiRequest2.data.result.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return $state.apiRequest2.data?.result?.fullPrice;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g3NvD
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.apiRequest2.data.result.fullPrice.toLocaleString();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "120000000";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      ) : null}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__diIpI
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jwgTd
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  $state.apiRequest2.data.result.price.toLocaleString() +
                                  " تومان "
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "300000 \u062a\u0648\u0645\u0627\u0646";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aIs2K
                          )}
                        >
                          {"50%"}
                        </div>
                      </Stack__>
                    </div>
                  </div>
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom"}
                    data-plasmic-override={overrides.buttonLiom}
                    className={classNames("__wab_instance", sty.buttonLiom)}
                    color={generateStateValueProp($state, [
                      "buttonLiom",
                      "color"
                    ])}
                    endIcon={
                      <Icon111Icon
                        className={classNames(projectcss.all, sty.svg__a8EU)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadinkBotten"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten"] != null &&
                        typeof $steps["updateLoadinkBotten"] === "object" &&
                        typeof $steps["updateLoadinkBotten"].then === "function"
                      ) {
                        $steps["updateLoadinkBotten"] = await $steps[
                          "updateLoadinkBotten"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/selfTest/shopBuy",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      id: "91d5973e-eefd-4753-a611-ac6d37357184",
                                      offCode: "",
                                      userId: $ctx.query.UserId,
                                      refCode: "hrWgK5mZv",
                                      redirectUrl:
                                        "https://apps.liom.app/shop-result?r=" +
                                        "hrWgK5mZv" +
                                        "&m=" +
                                        "hrWgK5mZv" +
                                        "&buyId=" +
                                        "hrWgK5mZv" +
                                        "&offCode=" +
                                        "gyft" +
                                        "&valueShop=" +
                                        "gygyuyt" +
                                        "-" +
                                        "jhgjghyg" +
                                        "&price=" +
                                        "kuhuyutyutut" +
                                        "&manId=" +
                                        "jgyghyfdfd"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization:
                                          $state.user.data.result.token
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.invokeGlobalAction?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.open(
                                    $steps.invokeGlobalAction.data.result,
                                    "_blank"
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["runCode2"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let b = $state.testChat;
                                  b[b.length - 1] = {
                                    text: "آماده ای گفتگو رو ادامه بدیم\u061F",
                                    question: { lock: 0 },
                                    from: "system",
                                    btnText: "ادامه گفتگو",
                                    options: [
                                      {
                                        id: -50,
                                        text: "ادامه گفتگو"
                                      }
                                    ]
                                  };
                                  return localStorage.setItem(
                                    "test",
                                    JSON.stringify(b)
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["updateLoadinkBotten2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten2"] != null &&
                        typeof $steps["updateLoadinkBotten2"] === "object" &&
                        typeof $steps["updateLoadinkBotten2"].then ===
                          "function"
                      ) {
                        $steps["updateLoadinkBotten2"] = await $steps[
                          "updateLoadinkBotten2"
                        ];
                      }
                    }}
                    onColorChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom",
                        "color"
                      ])(eventArgs[0]);
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()}
                  >
                    {(() => {
                      try {
                        return !$state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tf8IY
                        )}
                      >
                        {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                      </div>
                    ) : null}
                  </ButtonLiom>
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.nextQuesionId == -1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hc0LI)}
                >
                  <Paziresh24Button
                    data-plasmic-name={"paziresh24Button"}
                    data-plasmic-override={overrides.paziresh24Button}
                    children2={
                      (() => {
                        try {
                          return !$state.loadinkBotten;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gRmS
                          )}
                        >
                          {
                            "\u062f\u06cc\u062f\u0646 \u0646\u062a\u06cc\u062c\u0647"
                          }
                        </div>
                      ) : null
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.paziresh24Button
                    )}
                    color={"green"}
                    endIcon={
                      <Icon111Icon
                        className={classNames(projectcss.all, sty.svg___6V1EU)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadinkBotten"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten"] != null &&
                        typeof $steps["updateLoadinkBotten"] === "object" &&
                        typeof $steps["updateLoadinkBotten"].then === "function"
                      ) {
                        $steps["updateLoadinkBotten"] = await $steps[
                          "updateLoadinkBotten"
                        ];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return window.open(
                                  `https://tools.liom.app/result?session_id=${$state.sessionId}&user_id=${$state.userId}&app=${$ctx.query.app}`,
                                  "_self"
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["runCode2"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let b = $state.testChat;
                                  b[b.length - 1] = {
                                    text: "آماده ای گفتگو رو ادامه بدیم\u061F",
                                    question: { lock: 0 },
                                    from: "system",
                                    btnText: "ادامه گفتگو",
                                    options: [
                                      {
                                        id: -50,
                                        text: "ادامه گفتگو"
                                      }
                                    ]
                                  };
                                  return localStorage.setItem(
                                    "test",
                                    JSON.stringify(b)
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["updateLoadinkBotten2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten2"] != null &&
                        typeof $steps["updateLoadinkBotten2"] === "object" &&
                        typeof $steps["updateLoadinkBotten2"].then ===
                          "function"
                      ) {
                        $steps["updateLoadinkBotten2"] = await $steps[
                          "updateLoadinkBotten2"
                        ];
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />
                </Stack__>
              ) : null}
            </Reveal>
          </div>
          <AntdProgress
            data-plasmic-name={"progress"}
            data-plasmic-override={overrides.progress}
            className={classNames("__wab_instance", sty.progress)}
            gradient={[]}
            percent={(() => {
              try {
                return $state.numberTest / ($state.totalTest / 100);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 0;
                }
                throw e;
              }
            })()}
            showInfo={false}
            strokeWidth={
              hasVariant(globalVariants, "screen", "mobileOnly") ? 5 : 6
            }
            type={"line"}
          />

          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={1}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const inputBox = document.querySelector(".selectBox");
                          const textBox = document.querySelector(".messegeBox");
                          if (inputBox.style.display === "none") {
                            return (textBox.style.paddingBottom = "8px");
                          } else {
                            return (textBox.style.paddingBottom = `${
                              inputBox.offsetHeight + 20
                            }px`);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] =
                $state.testChat[$state.testChat.length - 1].options[0].id == -50
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.scrollTo({
                            top: document.body.scrollHeight,
                            behavior: "smooth"
                          });
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
            runWhileEditing={false}
          />

          <ApiRequest
            data-plasmic-name={"user"}
            data-plasmic-override={overrides.user}
            className={classNames("__wab_instance", sty.user)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={generateStateOnChangeProp($state, ["user", "error"])}
            onLoading={generateStateOnChangeProp($state, ["user", "loading"])}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["user", "data"]).apply(
                null,
                eventArgs
              );
              (async data => {
                const $steps = {};

                $steps["updateToken"] =
                  $state.user?.data?.result?.token != null
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["token"]
                          },
                          operation: 0,
                          value: $state.user.data.result.token
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateToken"] != null &&
                  typeof $steps["updateToken"] === "object" &&
                  typeof $steps["updateToken"].then === "function"
                ) {
                  $steps["updateToken"] = await $steps["updateToken"];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  userId: $ctx.query.UserId
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/selfTest/getUser"}
          />

          <ApiRequest
            data-plasmic-name={"apiRequest2"}
            data-plasmic-override={overrides.apiRequest2}
            body={(() => {
              try {
                return {
                  userId: $ctx.query.UserId,
                  shopId: "91d5973e-eefd-4753-a611-ac6d37357184",
                  token: $state.user.data.result.token
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.apiRequest2)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"POST"}
            onError={generateStateOnChangeProp($state, [
              "apiRequest2",
              "error"
            ])}
            onLoading={generateStateOnChangeProp($state, [
              "apiRequest2",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "apiRequest2",
              "data"
            ])}
            url={"https://n8n.staas.ir/webhook/selfTest/shop"}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "paziresh24Avatar",
    "messageLiom",
    "testOptionsLiom",
    "buttonLiom",
    "paziresh24Button",
    "progress",
    "timer",
    "user",
    "apiRequest2"
  ],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  messageLiom: ["messageLiom"],
  testOptionsLiom: ["testOptionsLiom"],
  buttonLiom: ["buttonLiom"],
  paziresh24Button: ["paziresh24Button"],
  progress: ["progress"],
  timer: ["timer"],
  user: ["user"],
  apiRequest2: ["apiRequest2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  messageLiom: typeof MessageLiom;
  testOptionsLiom: typeof TestOptionsLiom;
  buttonLiom: typeof ButtonLiom;
  paziresh24Button: typeof Paziresh24Button;
  progress: typeof AntdProgress;
  timer: typeof Timer;
  user: typeof ApiRequest;
  apiRequest2: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfTest__VariantsArgs;
    args?: PlasmicSelfTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelfTest__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfTest__ArgProps,
          internalVariantPropNames: PlasmicSelfTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfTest";
  } else {
    func.displayName = `PlasmicSelfTest.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfTest = Object.assign(
  // Top-level PlasmicSelfTest renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    messageLiom: makeNodeComponent("messageLiom"),
    testOptionsLiom: makeNodeComponent("testOptionsLiom"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    progress: makeNodeComponent("progress"),
    timer: makeNodeComponent("timer"),
    user: makeNodeComponent("user"),
    apiRequest2: makeNodeComponent("apiRequest2"),

    // Metadata about props expected for PlasmicSelfTest
    internalVariantProps: PlasmicSelfTest__VariantProps,
    internalArgProps: PlasmicSelfTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfTest;
/* prettier-ignore-end */
