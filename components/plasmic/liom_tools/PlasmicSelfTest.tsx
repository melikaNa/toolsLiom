// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 5IOCSv5V9vzY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import MessageLiom from "../../MessageLiom"; // plasmic-import: xCdoITDvZVKn/component
import TestOptionsLiom from "../../TestOptionsLiom"; // plasmic-import: DvUx8-VJCAy9/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant
import { useScreenVariants as useScreenVariantsyg4Uf6WCaaLe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YG4uf6WCaaLe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfTest.module.css"; // plasmic-import: 5IOCSv5V9vzY/css

import XIcon from "../hamdast_sdk/icons/PlasmicIcon__X"; // plasmic-import: S0M2VMEAEs7X/icon
import Icon119Icon from "./icons/PlasmicIcon__Icon119"; // plasmic-import: JdBtCI53tCN5/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: 3GJi3NV2X6Zg/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: ZqTOLr82hcYp/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: d7z2iEn8tiSD/icon
import EmojiHappySquareSvgrepoComSvg2Icon from "./icons/PlasmicIcon__EmojiHappySquareSvgrepoComSvg2"; // plasmic-import: VTuVNgeUH3X6/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 7vleC7ixE4k4/icon
import EmojiSadSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmojiSadSquareSvgrepoComSvg"; // plasmic-import: frqiW1UAlfdr/icon

createPlasmicElementProxy;

export type PlasmicSelfTest__VariantMembers = {};
export type PlasmicSelfTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfTest__VariantsArgs;
export const PlasmicSelfTest__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfTest__ArgsType = {};
type ArgPropType = keyof PlasmicSelfTest__ArgsType;
export const PlasmicSelfTest__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfTest__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  progress?: Flex__<typeof AntdProgress>;
  messageLiom?: Flex__<typeof MessageLiom>;
  testOptionsLiom?: Flex__<typeof TestOptionsLiom>;
  peyliom?: Flex__<"div">;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  peyPardakht24?: Flex__<"div">;
  user?: Flex__<typeof ApiRequest>;
  timer?: Flex__<typeof Timer>;
  embedHtml?: Flex__<typeof Embed>;
  favicon?: Flex__<typeof Embed>;
  dialog?: Flex__<typeof Paziresh24Dialog>;
  buttonLiom3?: Flex__<typeof ButtonLiom>;
  dialog2?: Flex__<typeof Paziresh24Dialog>;
  shop?: Flex__<typeof ApiRequest>;
  img?: Flex__<typeof PlasmicImg__>;
  input4?: Flex__<typeof AntdInput>;
  button12?: Flex__<typeof ButtonLiom>;
  buttonLiom6?: Flex__<typeof ButtonLiom>;
  modal?: Flex__<typeof AntdModal>;
  apiRequest2?: Flex__<typeof ApiRequest>;
  button3?: Flex__<typeof ButtonLiom>;
  shop2?: Flex__<typeof ApiRequest>;
  buttonLiom8?: Flex__<typeof ButtonLiom>;
};

export interface DefaultSelfTestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfTest__RenderFunc(props: {
  variants: PlasmicSelfTest__VariantsArgs;
  args: PlasmicSelfTest__ArgsType;
  overrides: PlasmicSelfTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "testChat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (
                  $ctx.query.nextQuesion_id == "" ||
                  $ctx.query.nextQuesion_id == null
                ) {
                  return [];
                } else {
                  return JSON.parse(localStorage.getItem("test"));
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\u0633\u0644\u0627\u0645\ud83d\udc4b\n \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645\u060c \u067e\u0631\u06cc\u0648\u062f \u062a\u0631\u06a9\u0631 \u0648 \u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a \u0628\u0627\u0646\u0648\u0627\u0646 \u06a9\u0647 \u0628\u0635\u0648\u0631\u062a \u062a\u062e\u0635\u0635\u06cc \u0631\u0648\u06cc \u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc \u06a9\u0627\u0631 \u0645\u06cc\u06a9\u0646\u0645.",
                    from: "system"
                  },
                  {
                    text: "\u0634\u0645\u0627 \u0628\u0627 \u067e\u0627\u0633\u062e \u0628\u0647 30 \u0633\u0648\u0627\u0644 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u062f\u0631 \u06a9\u0645\u062a\u0631 \u0627\u0632 5 \u062f\u0642\u06cc\u0642\u0647 \u0639\u0644\u062a \u0646\u0627\u0645\u0646\u0638\u0645 \u0634\u062f\u0646 \u067e\u0631\u06cc\u0648\u062f \u062e\u0648\u062f \u0631\u0627 \u0628\u062f\u0627\u0646\u06cc\u062f \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0645\u0631\u0627\u062c\u0639\u0647 \u06a9\u0646\u06cc\u062f.",
                    from: "system"
                  },
                  {
                    text: "\u0633\u0644\u0627\u0645\u062a \u0648 \u0631\u0627\u062d\u062a\u06cc \u0634\u0645\u0627 \u062f\u063a\u062f\u063a\u0647 \u0627\u0635\u0644\u06cc \u0644\u06cc\u0648\u0645 \u0648 \u067e\u0630\u06cc\u0631\u0634 \u06f2\u06f4 \u0627\u0633\u062a\u2764\ufe0f\ud83e\udd1d\ud83c\udffb.",
                    from: "system"
                  },
                  {
                    text: "\u0622\u0645\u0627\u062f\u0647 \u0627\u06cc \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645\u061f",
                    question: { lock: 0 },
                    from: "system",
                    btnText:
                      "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",
                    options: [
                      {
                        id: 1,
                        text: "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645"
                      }
                    ]
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "testOptionsLiom.selectedIDs",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("user_id");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "ferst",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.nextQuesion_id == null ||
                $ctx.query.nextQuesion_id == ""
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextQuesionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.testChat
                  .slice()
                  .reverse()
                  .find(item => item.question);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.session_id == "" ||
                $ctx.query.session_id == null
                ? 0
                : parseInt($ctx.query.session_id);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lock",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadinkBotten",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "totalTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 35
      },
      {
        path: "retestTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.nextQuesion_id == "" ||
                $ctx.query.nextQuesion_id == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "edit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "green"
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.status == "" || $ctx.query.status == null
                ? ""
                : $ctx.query.status;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buy",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showgreen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "authCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "data",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "infoTest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "a0becceb-8ca9-49c0-a9d3-7c192f85129c"
      },
      {
        path: "orginNotLook",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let urlOrigin =
                  $ctx.query.origin ||
                  new URLSearchParams(window.location.search).get("origin");
                return !(
                  urlOrigin == "pazireshBlog" ||
                  urlOrigin == "pazireshSearch" ||
                  urlOrigin == "liomSelfCare"
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button12.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonLiom6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "free",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.status != "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://tools.liom.app/self-test/?user_id=${$state.userId}&type=${$state.type}&app=${$ctx.query.app}&session_id=${$state.sessionId}&inApp=${$ctx.query.inApp}&origin=${$ctx.query.origin}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "shop2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonLiom8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsqiBuxNlixBgQ(),
    screen: useScreenVariantsyg4Uf6WCaaLe()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicSelfTest.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSelfTest.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSelfTest.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicSelfTest.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicSelfTest.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicSelfTest.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicSelfTest.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicSelfTest.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["invokeGlobalAction"] = localStorage.getItem("receipt_id")
              ? (() => {
                  const actionArgs = {
                    args: [
                      "PUT",
                      "https://n8n.staas.ir/webhook/selfTestPaymentPasiresh24",
                      undefined,
                      (() => {
                        try {
                          return {
                            receipt_id: localStorage.getItem("receipt_id")
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      {}
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["invokeGlobalAction2"] = localStorage.getItem("receipt_id")
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://n8n.staas.ir/webhook/selfTestPayment",
                      undefined,
                      (() => {
                        try {
                          return {
                            status: $steps.invokeGlobalAction.data.status
                              ? "OK"
                              : "NOK",
                            extra: {
                              user_id: localStorage.getItem("user_id"),
                              session_id: new URLSearchParams(
                                window.location.search
                              ).get("session_id")
                            },
                            id: localStorage.getItem("receipt_id")
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction2"] != null &&
              typeof $steps["invokeGlobalAction2"] === "object" &&
              typeof $steps["invokeGlobalAction2"].then === "function"
            ) {
              $steps["invokeGlobalAction2"] = await $steps[
                "invokeGlobalAction2"
              ];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        if (window.location.href.includes("?token")) {
                          window.location.href = window.location.href.replace(
                            "?token=",
                            "&token="
                          );
                        }
                        var urlParams = new URLSearchParams(
                          window.location.search
                        );
                        var app = urlParams.get("app");
                        var originUserId = urlParams.has("origin_user_id")
                          ? urlParams.get("origin_user_id")
                          : null;
                        if (!urlParams.has("type")) {
                          window.location.href =
                            window.location.href + "&type=irregular";
                        }
                        if (
                          $steps.invokeGlobalAction?.data?.status == true &&
                          localStorage.getItem("receipt_id")
                        ) {
                          $state.status = "OK";
                          localStorage.removeItem("receipt_id");
                        } else if (
                          $steps.invokeGlobalAction?.data &&
                          !$steps.invokeGlobalAction?.data?.status &&
                          localStorage.getItem("receipt_id")
                        ) {
                          $state.status = "NOK";
                          localStorage.removeItem("receipt_id");
                        }
                        if (urlParams.has("home-page")) {
                          return window.sessionStorage.setItem(
                            "home-page",
                            urlParams.get("home-page")
                          );
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["updateTestChat5"] =
                new URLSearchParams(window.location.search).get("origin") ===
                "eata"
                  ? (() => {
                      const actionArgs = { args: [3000] };
                      return $globalActions["Fragment.wait"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["updateTestChat5"] != null &&
                typeof $steps["updateTestChat5"] === "object" &&
                typeof $steps["updateTestChat5"].then === "function"
              ) {
                $steps["updateTestChat5"] = await $steps["updateTestChat5"];
              }

              $steps["selfTestUser"] =
                !localStorage.getItem("user_id") &&
                new URLSearchParams(window.location.search).get("origin") ===
                  "eata"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://n8n.staas.ir/webhook/selfTestUser",
                          (() => {
                            try {
                              return {
                                origin_user_id:
                                  window.Eitaa?.WebApp?.initDataUnsafe?.user?.id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["selfTestUser"] != null &&
                typeof $steps["selfTestUser"] === "object" &&
                typeof $steps["selfTestUser"].then === "function"
              ) {
                $steps["selfTestUser"] = await $steps["selfTestUser"];
              }

              $steps["selfTestUserPost"] =
                $steps.selfTestUser?.data?.success != true &&
                !localStorage.getItem("user_id")
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.staas.ir/webhook/selfTestUser",
                          undefined,
                          (() => {
                            try {
                              return {
                                mobile: null,
                                email: null,
                                name:
                                  new URLSearchParams(
                                    window.location.search
                                  ).get("origin") === "eata"
                                    ? window.Eitaa?.WebApp?.initDataUnsafe?.user
                                        ?.first_name +
                                        " " +
                                        window.Eitaa?.WebApp?.initDataUnsafe
                                          ?.user?.last_name || ""
                                    : "",
                                origin:
                                  new URLSearchParams(
                                    window.location.search
                                  ).get("origin") ||
                                  new URLSearchParams(
                                    window.location.search
                                  ).get("app") ||
                                  "liomSite",
                                origin_user_id:
                                  new URLSearchParams(
                                    window.location.search
                                  ).get("origin") === "eata"
                                    ? window.Eitaa?.WebApp?.initDataUnsafe?.user
                                        ?.id || ""
                                    : new URLSearchParams(
                                        window.location.search
                                      ).get("user_id") ||
                                      new URLSearchParams(
                                        window.location.search
                                      ).get("userId") ||
                                      $state.data.userId ||
                                      "null"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["selfTestUserPost"] != null &&
                typeof $steps["selfTestUserPost"] === "object" &&
                typeof $steps["selfTestUserPost"].then === "function"
              ) {
                $steps["selfTestUserPost"] = await $steps["selfTestUserPost"];
              }

              $steps["localStorag"] =
                $steps.selfTestUser?.data?.success == true ||
                $steps.selfTestUserPost?.data?.success == true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return localStorage.setItem(
                            "user_id",
                            $steps.selfTestUserPost?.data?.user_id ||
                              $steps.selfTestUser?.data?.user_id
                          );
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["localStorag"] != null &&
                typeof $steps["localStorag"] === "object" &&
                typeof $steps["localStorag"].then === "function"
              ) {
                $steps["localStorag"] = await $steps["localStorag"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://n8n.staas.ir/webhook/addUserSelfTest",
                        (() => {
                          try {
                            return {
                              type:
                                $ctx.query.type ||
                                new URLSearchParams(window.location.search).get(
                                  "type"
                                ),
                              user_id: localStorage.getItem("user_id")
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateTestChat6"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["shopId"]
                      },
                      operation: 0,
                      value: $steps.invokeGlobalAction?.data?.info?.shopId
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTestChat6"] != null &&
                typeof $steps["updateTestChat6"] === "object" &&
                typeof $steps["updateTestChat6"].then === "function"
              ) {
                $steps["updateTestChat6"] = await $steps["updateTestChat6"];
              }

              $steps["updateTestChat2"] = $steps.invokeGlobalAction?.data?.info
                ?.numberOfquestion
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["totalTest"]
                      },
                      operation: 0,
                      value:
                        $steps.invokeGlobalAction?.data?.info.numberOfquestion
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTestChat2"] != null &&
                typeof $steps["updateTestChat2"] === "object" &&
                typeof $steps["updateTestChat2"].then === "function"
              ) {
                $steps["updateTestChat2"] = await $steps["updateTestChat2"];
              }

              $steps["updateTestChat7"] = $steps.invokeGlobalAction?.data
                ?.canStart
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["free"]
                      },
                      operation: 0,
                      value: $steps.invokeGlobalAction?.data?.canStart
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTestChat7"] != null &&
                typeof $steps["updateTestChat7"] === "object" &&
                typeof $steps["updateTestChat7"].then === "function"
              ) {
                $steps["updateTestChat7"] = await $steps["updateTestChat7"];
              }

              $steps["updateTestChat"] = $steps.invokeGlobalAction?.data?.info
                ?.festText
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["testChat"]
                      },
                      operation: 0,
                      value: (() => {
                        if (
                          $ctx.query.nextQuesion_id == "" ||
                          $ctx.query.nextQuesion_id == null
                        ) {
                          return JSON.parse(
                            $steps.invokeGlobalAction.data.info.festText
                          );
                        } else {
                          return JSON.parse(localStorage.getItem("test"));
                        }
                      })()
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTestChat"] != null &&
                typeof $steps["updateTestChat"] === "object" &&
                typeof $steps["updateTestChat"].then === "function"
              ) {
                $steps["updateTestChat"] = await $steps["updateTestChat"];
              }

              $steps["retestTest"] =
                $state.retestTest == false
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.testChat[$state.testChat.length - 1] =
                            {
                              text: "آماده ای گفتگو رو ادامه بدیم\u061F",
                              question: { lock: 0 },
                              from: "system",
                              btnText: "ادامه گفتگو",
                              options: [
                                {
                                  id: -50,
                                  text: "ادامه گفتگو"
                                }
                              ]
                            });
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["retestTest"] != null &&
                typeof $steps["retestTest"] === "object" &&
                typeof $steps["retestTest"].then === "function"
              ) {
                $steps["retestTest"] = await $steps["retestTest"];
              }

              $steps["testIds"] =
                $state.retestTest == false
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["testOptionsLiom", "selectedIDs"]
                        },
                        operation: 0,
                        value: [-50]
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["testIds"] != null &&
                typeof $steps["testIds"] === "object" &&
                typeof $steps["testIds"].then === "function"
              ) {
                $steps["testIds"] = await $steps["testIds"];
              }

              $steps["refreshDown"] =
                $state.testChat[$state.testChat.length - 1]?.options[0]?.id ==
                -50
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return window.scrollTo({
                            top: document.body.scrollHeight,
                            behavior: "smooth"
                          });
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["refreshDown"] != null &&
                typeof $steps["refreshDown"] === "object" &&
                typeof $steps["refreshDown"].then === "function"
              ) {
                $steps["refreshDown"] = await $steps["refreshDown"];
              }

              $steps["numberOfQ"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const type =
                            $ctx.query.type ||
                            new URLSearchParams(window.location.search).get(
                              "type"
                            ) ||
                            "";
                          if (
                            $steps.invokeGlobalAction?.data?.info
                              .numberOfquestion
                          ) {
                            $state.totalTest =
                              $steps.invokeGlobalAction?.data?.info
                                .numberOfquestion || 35;
                            $state.numberTest = 0;
                            if (
                              $ctx.query.nextQuesion_id != null &&
                              $ctx.query.nextQuesion_id !== ""
                            ) {
                              return ($state.numberTest = 10);
                            }
                          } else if (type !== "") {
                            $state.totalTest = 51;
                            return ($state.numberTest = 40);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["numberOfQ"] != null &&
                typeof $steps["numberOfQ"] === "object" &&
                typeof $steps["numberOfQ"].then === "function"
              ) {
                $steps["numberOfQ"] = await $steps["numberOfQ"];
              }

              $steps["result"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/resultList",
                        (() => {
                          try {
                            return { user_id: localStorage.getItem("user_id") };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["result"] != null &&
                typeof $steps["result"] === "object" &&
                typeof $steps["result"].then === "function"
              ) {
                $steps["result"] = await $steps["result"];
              }

              $steps["showgreen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["showgreen"]
                      },
                      operation: 0,
                      value: $steps.result?.data?.data || []
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["showgreen"] != null &&
                typeof $steps["showgreen"] === "object" &&
                typeof $steps["showgreen"].then === "function"
              ) {
                $steps["showgreen"] = await $steps["showgreen"];
              }

              $steps["updateTestChat3"] =
                new URLSearchParams(window.location.search).get("origin") ===
                "eata"
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            window.Eitaa.WebApp.MainButton.text = "لیوم";
                            window.Eitaa.WebApp.MainButton.disable();
                            window.Eitaa.WebApp.MainButton.color = "#ffffff";
                            window.Eitaa.WebApp.MainButton.textColor =
                              "#ffffff";
                            return window.Eitaa.WebApp.MainButton.show();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateTestChat3"] != null &&
                typeof $steps["updateTestChat3"] === "object" &&
                typeof $steps["updateTestChat3"].then === "function"
              ) {
                $steps["updateTestChat3"] = await $steps["updateTestChat3"];
              }

              $steps["updateTestChat4"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loading"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTestChat4"] != null &&
                typeof $steps["updateTestChat4"] === "object" &&
                typeof $steps["updateTestChat4"].then === "function"
              ) {
                $steps["updateTestChat4"] = await $steps["updateTestChat4"];
              }

              $steps["log"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.liom.app/service/log",
                        undefined,
                        (() => {
                          try {
                            return {
                              userId: $state.userId,
                              pageName: `self-test-${
                                $ctx.query.type ||
                                new URLSearchParams(window.location.search).get(
                                  "type"
                                )
                              }`,
                              action: `onLoad-${
                                $ctx.query.type ||
                                new URLSearchParams(window.location.search).get(
                                  "type"
                                )
                              }`,
                              extraData: {}
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return {
                              headers: {
                                "Content-Type": "application/json",
                                Authorization:
                                  "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["log"] != null &&
                typeof $steps["log"] === "object" &&
                typeof $steps["log"].then === "function"
              ) {
                $steps["log"] = await $steps["log"];
              }
            }}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return (
                      new URLSearchParams(window.location.search).get(
                        "inApp"
                      ) != "true"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return (
                      new URLSearchParams(window.location.search).get(
                        "inApp"
                      ) != "true"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
              slot={
                <React.Fragment>
                  {(() => {
                    try {
                      return window.sessionStorage.getItem("home-page") != null;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <XIcon
                      className={classNames(projectcss.all, sty.svg__fkEs)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.open(
                                    window.sessionStorage.getItem("home-page"),
                                    "_self"
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      role={"img"}
                    />
                  ) : null}
                  <Paziresh24Avatar
                    data-plasmic-name={"paziresh24Avatar"}
                    data-plasmic-override={overrides.paziresh24Avatar}
                    className={classNames(
                      "__wab_instance",
                      sty.paziresh24Avatar
                    )}
                    src={(() => {
                      try {
                        return "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </React.Fragment>
              }
              slot2={null}
            >
              {
                "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a"
              }
            </HeaderLiom>
          ) : null}
          <div
            className={classNames(projectcss.all, sty.freeBox__eKo7V)}
            style={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return {
                        top:
                          window.location.href.includes("paziresh24") ||
                          window.location.href.includes("eata")
                            ? "-9px"
                            : ""
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return {
                        top:
                          new URLSearchParams(window.location.search).get(
                            "inApp"
                          ) == "true"
                            ? "-10px"
                            : ""
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
          >
            <AntdProgress
              data-plasmic-name={"progress"}
              data-plasmic-override={overrides.progress}
              className={classNames("__wab_instance", sty.progress)}
              gradient={[]}
              percent={(() => {
                try {
                  return $state.numberTest / ($state.totalTest / 100) - 0.1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 0;
                  }
                  throw e;
                }
              })()}
              showInfo={false}
              strokeColor={(() => {
                try {
                  return (() => {
                    if ($ctx.query.app == "liom") return "#EF6FB7";
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              strokeWidth={
                hasVariant(globalVariants, "screen", "mobileOnly") ? 5 : 6
              }
              successPercent={undefined}
              type={"line"}
            />
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__fwEj, ``)}
            id={"messegeBox"}
          >
            <Reveal
              big={false}
              cascade={false}
              className={classNames("__wab_instance", sty.reveal__simfe)}
              delay={0}
              direction={"up"}
              duration={1000}
              effect={"fade"}
              triggerOnce={true}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.testChat;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <MessageLiom
                    data-plasmic-name={"messageLiom"}
                    data-plasmic-override={overrides.messageLiom}
                    className={classNames("__wab_instance", sty.messageLiom)}
                    endMessege={(() => {
                      try {
                        return (
                          $state.testChat[currentIndex].from === "system" &&
                          ($state.testChat[currentIndex + 1]?.from !==
                            "system" ||
                            $state.testChat.length - 1 === currentIndex)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    hint={(() => {
                      try {
                        return currentItem.tip;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    inApp={(() => {
                      try {
                        return (
                          new URLSearchParams(window.location.search).get(
                            "inApp"
                          ) == "true"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    liomAnswer={(() => {
                      try {
                        return (
                          currentItem.from == "user" && $ctx.query.app == "liom"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loadingMessage={(() => {
                      try {
                        return currentItem.loading == true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    pazireshAnswer={(() => {
                      try {
                        return currentItem.from == "user";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    slot={
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const lastUserMessage =
                                $state.testChat
                                  .slice()
                                  .reverse()
                                  .find(item => item.from === "user") || false;
                              return (
                                lastUserMessage &&
                                lastUserMessage.id === currentItem.id &&
                                currentItem.text != "شروع کنیم" &&
                                currentItem.text != "ادامه گفتگو" &&
                                $state.retestTest == true
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c1Ue
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateEdit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["edit"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateEdit"] != null &&
                                typeof $steps["updateEdit"] === "object" &&
                                typeof $steps["updateEdit"].then === "function"
                              ) {
                                $steps["updateEdit"] = await $steps[
                                  "updateEdit"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          const reversedIndex = $state.testChat
                                            .slice()
                                            .reverse()
                                            .findIndex(item => item.question);
                                          if (reversedIndex !== -1) {
                                            const originalIndex =
                                              $state.testChat.length -
                                              1 -
                                              reversedIndex;
                                            const previousReversedIndex =
                                              $state.testChat
                                                .slice(0, originalIndex)
                                                .reverse()
                                                .findIndex(
                                                  item => item.question
                                                );
                                            if (previousReversedIndex !== -1) {
                                              const previousOriginalIndex =
                                                originalIndex -
                                                1 -
                                                previousReversedIndex;
                                              return $state.testChat.splice(
                                                previousOriginalIndex + 1
                                              );
                                            }
                                          }
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "PUT",
                                        "https://n8n.staas.ir/webhook/selfTestLogs",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              session_id: $state.sessionId,
                                              question_id:
                                                $state.testChat[
                                                  $state.testChat.length - 1
                                                ].question.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                          >
                            <Icon119Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__fCcuL
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              const lastUserMessage =
                                $state.testChat
                                  .slice()
                                  .reverse()
                                  .find(
                                    item =>
                                      item.from === "system" && item.tip == true
                                  ) || false;
                              return (
                                lastUserMessage &&
                                lastUserMessage.id === currentItem.id &&
                                currentItem.text != "شروع کنیم" &&
                                currentItem.text != "ادامه گفتگو" &&
                                $state.retestTest == true
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__t3OzC
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateEdit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["edit"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateEdit"] != null &&
                                typeof $steps["updateEdit"] === "object" &&
                                typeof $steps["updateEdit"].then === "function"
                              ) {
                                $steps["updateEdit"] = await $steps[
                                  "updateEdit"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          const reversedIndex = $state.testChat
                                            .slice()
                                            .reverse()
                                            .findIndex(item => item.question);
                                          if (reversedIndex !== -1) {
                                            const originalIndex =
                                              $state.testChat.length -
                                              1 -
                                              reversedIndex;
                                            const previousReversedIndex =
                                              $state.testChat
                                                .slice(0, originalIndex)
                                                .reverse()
                                                .findIndex(
                                                  item => item.question
                                                );
                                            if (previousReversedIndex !== -1) {
                                              const previousOriginalIndex =
                                                originalIndex -
                                                1 -
                                                previousReversedIndex;
                                              return $state.testChat.splice(
                                                previousOriginalIndex + 1
                                              );
                                            }
                                          }
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateTestChat2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "PUT",
                                        "https://n8n.staas.ir/webhook/selfTestLogs",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              session_id: $state.sessionId,
                                              question_id:
                                                $state.testChat[
                                                  $state.testChat.length - 1
                                                ].question.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat2"] != null &&
                                typeof $steps["updateTestChat2"] === "object" &&
                                typeof $steps["updateTestChat2"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat2"] = await $steps[
                                  "updateTestChat2"
                                ];
                              }
                            }}
                          >
                            <Icon119Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__o5Pbm
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__m641N
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return "ویرایش پاسخ";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___91S8B,
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "text-box "
                          : undefined
                      )}
                      style={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? {
                              display: "inline-block",
                              width: "auto",
                              "overflow-wrap": "break-word"
                            }
                          : undefined
                      }
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Lorem ipsum dolor sit amet,";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </MessageLiom>
                );
              })}
            </Reveal>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__ssEaT, ``)}
            id={"selectBox"}
          >
            <Reveal
              big={true}
              className={classNames("__wab_instance", sty.reveal__ekaj9)}
              direction={"up"}
              triggerOnce={true}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return (
                          $state.testChat[$state.testChat.length - 1].options !=
                            null &&
                          !(
                            $state.variable.question?.lock == 1 &&
                            $state.orginNotLook &&
                            $state.buy == false
                          ) &&
                          $state.nextQuesionId != -1 &&
                          $state.status == ""
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          $state.testChat[$state.testChat.length - 1].options !=
                            null &&
                          !(
                            $state.variable.question?.lock == 1 &&
                            $state.orginNotLook &&
                            $state.buy == false
                          ) &&
                          $state.nextQuesionId != -1 &&
                          $state.status == ""
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <TestOptionsLiom
                  data-plasmic-name={"testOptionsLiom"}
                  data-plasmic-override={overrides.testOptionsLiom}
                  app={(() => {
                    try {
                      return $ctx.query.app;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  buy={(() => {
                    try {
                      return (
                        $ctx.query.buy == "true" && !$state.free && !$state.buy
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  buyClick={async event => {
                    const $steps = {};

                    $steps["updateDialog2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog2", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialog2Open"] != null &&
                      typeof $steps["updateDialog2Open"] === "object" &&
                      typeof $steps["updateDialog2Open"].then === "function"
                    ) {
                      $steps["updateDialog2Open"] = await $steps[
                        "updateDialog2Open"
                      ];
                    }
                  }}
                  className={classNames("__wab_instance", sty.testOptionsLiom, {
                    [sty.testOptionsLiomglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                      hasVariant(
                        globalVariants,
                        "unnamedGlobalGroupOfVariants",
                        "unnamedVariant"
                      )
                  })}
                  data={(() => {
                    try {
                      return $state.testChat[$state.testChat.length - 1];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  ferst={(() => {
                    try {
                      return $state.ferst;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  onClick24={async event => {
                    const $steps = {};

                    $steps["updateEdit"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["edit"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateEdit"] != null &&
                      typeof $steps["updateEdit"] === "object" &&
                      typeof $steps["updateEdit"].then === "function"
                    ) {
                      $steps["updateEdit"] = await $steps["updateEdit"];
                    }

                    $steps["updateNextQuesionId"] =
                      $state.ferst == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["nextQuesionId"]
                              },
                              operation: 0,
                              value: (() => {
                                if ($state.retestTest)
                                  return $state.variable.options.find(
                                    option =>
                                      option.id ===
                                      $state.testOptionsLiom.selectedIDs[0]
                                  ).nextQuesion_id;
                                else return parseInt($ctx.query.nextQuesion_id);
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateNextQuesionId"] != null &&
                      typeof $steps["updateNextQuesionId"] === "object" &&
                      typeof $steps["updateNextQuesionId"].then === "function"
                    ) {
                      $steps["updateNextQuesionId"] = await $steps[
                        "updateNextQuesionId"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.testChat.push({
                                  id:
                                    $state.testOptionsLiom.selectedIDs
                                      .length !== 0
                                      ? $state.testOptionsLiom.selectedIDs
                                          .map(
                                            id =>
                                              $state.testChat[
                                                $state.testChat.length - 1
                                              ].options.filter(
                                                option => option.id === id
                                              )[0]?.id
                                          )
                                          .join(" \n ")
                                      : $state.testChat[
                                          $state.testChat.length - 1
                                        ].options[0]?.id,
                                  text:
                                    $state.testOptionsLiom.selectedIDs
                                      .length !== 0
                                      ? $state.testOptionsLiom.selectedIDs
                                          .map(
                                            id =>
                                              $state.testChat[
                                                $state.testChat.length - 1
                                              ].options.filter(
                                                option => option.id === id
                                              )[0]?.text
                                          )
                                          .join(" \n ")
                                      : $state.testChat[
                                          $state.testChat.length - 1
                                        ].options[0]?.text,
                                  from: "user",
                                  type: "answer"
                                });
                                if ($state.retestTest) {
                                  for (
                                    let i = 0;
                                    i <
                                    $state.testOptionsLiom.selectedIDs.length;
                                    i++
                                  ) {
                                    let selectedOption = $state.testChat[
                                      $state.testChat.length - 2
                                    ]?.options.filter(
                                      option =>
                                        option.id ===
                                        $state.testOptionsLiom.selectedIDs[i]
                                    )[0];
                                    if (
                                      selectedOption &&
                                      selectedOption.advice
                                    ) {
                                      $state.testChat.push({
                                        text: selectedOption.advice,
                                        from: "system"
                                      });
                                    }
                                    if (selectedOption && selectedOption.tip) {
                                      $state.testChat.push({
                                        text: selectedOption.tip,
                                        tip: true,
                                        from: "system"
                                      });
                                    }
                                  }
                                }
                                if (
                                  $state.ferst == false &&
                                  $state.type == "irregular"
                                ) {
                                  $state.testChat.push({
                                    text: "حدودا 14 علت برای نامنظم شدن قاعدگی وجود دارد. من به کمک پاسخ های شما آنها را بررسی می کنم و در آخر نتیجه را بازگو می کنم. تا کار های لازم برای رفع این نامنظمی را انجام دهید\nدر پاسخ دادن به سوالات دقت و شکیبایی کافی را داشته باشید",
                                    from: "system"
                                  });
                                }
                                $state.testChat.push({
                                  loading: true,
                                  text: "               ",
                                  from: "system"
                                });
                                return window.scrollTo({
                                  top: document.body.scrollHeight,
                                  behavior: "smooth"
                                });
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction3"] =
                      $state.ferst == true && $state.retestTest == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/selfTestLogs",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      session_id: $state.sessionId,
                                      user_id: $state.userId,
                                      question_id: $state.variable.question.id,
                                      option_id:
                                        $state.testOptionsLiom.selectedIDs[0],
                                      option_metric:
                                        $state.variable.options.find(
                                          option =>
                                            option.id ===
                                            $state.testOptionsLiom
                                              .selectedIDs[0]
                                        ).metric,
                                      option_score:
                                        $state.variable.options.find(
                                          option =>
                                            option.id ===
                                            $state.testOptionsLiom
                                              .selectedIDs[0]
                                        ).score,
                                      question_text:
                                        $state.variable.question.question,
                                      question_type: $state.type,
                                      option_advice:
                                        $state.variable.options.find(
                                          option =>
                                            option.id ===
                                            $state.testOptionsLiom
                                              .selectedIDs[0]
                                        ).advice,
                                      option_text: $state.variable.options.find(
                                        option =>
                                          option.id ===
                                          $state.testOptionsLiom.selectedIDs[0]
                                      ).text,
                                      option_metric_fa:
                                        $state.variable.options.find(
                                          option =>
                                            option.id ===
                                            $state.testOptionsLiom
                                              .selectedIDs[0]
                                        ).metric_fa
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["runCode6"] =
                      $state.nextQuesionId == -1
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.testChat[$state.testChat.length - 1] =
                                    {
                                      text: "سوالات به اتمام رسید\u060C حالا روی دکمه دیدن نتیجه کلیک کنید تا وضعیت شما آنالیز شود.",
                                      from: "system"
                                    };
                                  $state.numberTest = $state.totalTest;
                                  return window.scrollTo({
                                    top: document.body.scrollHeight,
                                    behavior: "smooth"
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode6"] != null &&
                      typeof $steps["runCode6"] === "object" &&
                      typeof $steps["runCode6"].then === "function"
                    ) {
                      $steps["runCode6"] = await $steps["runCode6"];
                    }

                    $steps["invokeGlobalAction"] =
                      $state.ferst == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/selfTestSession",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      type: $state.type,
                                      user_id: $state.userId
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $state.ferst == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "https://n8n.staas.ir/webhook/selfTestQuestion",
                                (() => {
                                  try {
                                    return {
                                      type: $state.type,
                                      question_id: $state.nextQuesionId
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["runCode2"] =
                      $state.ferst == false &&
                      !(
                        $steps.invokeGlobalAction?.data?.question?.lock == 1 &&
                        $state.orginNotLook &&
                        $state.buy == false
                      )
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var a = {
                                    question:
                                      $steps.invokeGlobalAction.data.question,
                                    text: $steps.invokeGlobalAction.data
                                      .question.question,
                                    from: "system",
                                    btnText:
                                      $steps.invokeGlobalAction.data.options
                                        .length == 1
                                        ? $steps.invokeGlobalAction.data
                                            .options[0].text
                                        : "ارسال",
                                    options:
                                      $steps.invokeGlobalAction.data.options
                                  };
                                  $state.testChat[$state.testChat.length - 1] =
                                    a;
                                  $state.sessionId =
                                    $steps.invokeGlobalAction.data.session_id;
                                  $state.testOptionsLiom.selectedIDs =
                                    $steps.invokeGlobalAction.data.options
                                      .length == 1
                                      ? [
                                          $steps.invokeGlobalAction.data
                                            .options[0].id
                                        ]
                                      : [];
                                  var textBoxes =
                                    document.querySelectorAll(".text-box");
                                  textBoxes.forEach(textBox => {
                                    textBox.style.display = "none";
                                    textBox.offsetWidth;
                                    textBox.style.display = "inline-block";
                                    requestAnimationFrame(() => {
                                      textBox.style.display = "inline-block";
                                    });
                                  });
                                  return window.scrollTo({
                                    top: document.body.scrollHeight,
                                    behavior: "smooth"
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }

                    $steps["runCode3"] =
                      $state.ferst == true &&
                      !(
                        $steps.invokeGlobalAction2?.data?.question?.lock == 1 &&
                        $state.orginNotLook &&
                        $state.buy == false
                      )
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  var a = {
                                    question:
                                      $steps.invokeGlobalAction2.data.question,
                                    text: $steps.invokeGlobalAction2.data
                                      .question.question,
                                    from: "system",
                                    btnText:
                                      $steps.invokeGlobalAction2.data.options
                                        ?.length == 1
                                        ? $steps.invokeGlobalAction2.data
                                            .options[0].text
                                        : "ارسال",
                                    options:
                                      $steps.invokeGlobalAction2.data.options
                                  };
                                  $state.testChat[$state.testChat.length - 1] =
                                    a;
                                  $state.testOptionsLiom.selectedIDs =
                                    $steps.invokeGlobalAction2.data.options
                                      .length == 1
                                      ? [
                                          $steps.invokeGlobalAction2.data
                                            .options[0].id
                                        ]
                                      : [];
                                  var textBoxes =
                                    document.querySelectorAll(".text-box");
                                  textBoxes.forEach(textBox => {
                                    textBox.style.display = "none";
                                    textBox.offsetWidth;
                                    textBox.style.display = "inline-block";
                                    requestAnimationFrame(() => {
                                      textBox.style.display = "inline-block";
                                    });
                                  });
                                  return window.scrollTo({
                                    top: document.body.scrollHeight,
                                    behavior: "smooth"
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode3"] != null &&
                      typeof $steps["runCode3"] === "object" &&
                      typeof $steps["runCode3"].then === "function"
                    ) {
                      $steps["runCode3"] = await $steps["runCode3"];
                    }

                    $steps["runCode4"] =
                      (($steps.invokeGlobalAction2?.data?.question?.lock == 1 &&
                        $state.orginNotLook) ||
                        ($steps.invokeGlobalAction1?.data?.question?.lock ==
                          1 &&
                          $state.orginNotLook)) &&
                      $state.buy == false
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.testChat[$state.testChat.length - 1] =
                                    {
                                      text: "ممنون که تا اینجا همراه من بودی! برای ادامه گفت‌وگو و بررسی دلیل نامنظمی قاعدگی\u060C لطفاً هزینه مربوطه را پرداخت کن. ما در تلاشیم بهترین تجربه را برایت فراهم کنیم.",
                                      from: "system"
                                    };
                                  $state.variable = {
                                    question:
                                      $steps.invokeGlobalAction2.data.question,
                                    text: $steps.invokeGlobalAction2.data
                                      .question.question,
                                    from: "system",
                                    btnText:
                                      $steps.invokeGlobalAction2.data.options
                                        ?.length == 1
                                        ? $steps.invokeGlobalAction2.data
                                            .options[0].text
                                        : "ارسال",
                                    options:
                                      $steps.invokeGlobalAction2.data.options
                                  };
                                  return window.scrollTo({
                                    top: document.body.scrollHeight,
                                    behavior: "smooth"
                                  });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode4"] != null &&
                      typeof $steps["runCode4"] === "object" &&
                      typeof $steps["runCode4"].then === "function"
                    ) {
                      $steps["runCode4"] = await $steps["runCode4"];
                    }

                    $steps["updateNumberTest"] =
                      $state.ferst == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["numberTest"]
                              },
                              operation: 0,
                              value: $state.numberTest + 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateNumberTest"] != null &&
                      typeof $steps["updateNumberTest"] === "object" &&
                      typeof $steps["updateNumberTest"].then === "function"
                    ) {
                      $steps["updateNumberTest"] = await $steps[
                        "updateNumberTest"
                      ];
                    }

                    $steps["invokeGlobalAction5"] =
                      $state.ferst == false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/service/log",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      userId: $state.userId,
                                      pageName: "self-test",
                                      action: "Start-test",
                                      extraData: { sessionId: $state.sessionId }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                {
                                  headers: {
                                    "Content-Type": "application/json",
                                    Authorization:
                                      "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                  }
                                }
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction5"] != null &&
                      typeof $steps["invokeGlobalAction5"] === "object" &&
                      typeof $steps["invokeGlobalAction5"].then === "function"
                    ) {
                      $steps["invokeGlobalAction5"] = await $steps[
                        "invokeGlobalAction5"
                      ];
                    }

                    $steps["updateFerst"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["ferst"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFerst"] != null &&
                      typeof $steps["updateFerst"] === "object" &&
                      typeof $steps["updateFerst"].then === "function"
                    ) {
                      $steps["updateFerst"] = await $steps["updateFerst"];
                    }

                    $steps["updateRetestTest"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["retestTest"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRetestTest"] != null &&
                      typeof $steps["updateRetestTest"] === "object" &&
                      typeof $steps["updateRetestTest"].then === "function"
                    ) {
                      $steps["updateRetestTest"] = await $steps[
                        "updateRetestTest"
                      ];
                    }

                    $steps["invokeGlobalAction4"] = true
                      ? (() => {
                          const actionArgs = { args: [800] };
                          return $globalActions["Fragment.wait"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction4"] != null &&
                      typeof $steps["invokeGlobalAction4"] === "object" &&
                      typeof $steps["invokeGlobalAction4"].then === "function"
                    ) {
                      $steps["invokeGlobalAction4"] = await $steps[
                        "invokeGlobalAction4"
                      ];
                    }

                    $steps["runCode5"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.scrollTo({
                                top: document.body.scrollHeight,
                                behavior: "smooth"
                              });
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode5"] != null &&
                      typeof $steps["runCode5"] === "object" &&
                      typeof $steps["runCode5"].then === "function"
                    ) {
                      $steps["runCode5"] = await $steps["runCode5"];
                    }

                    $steps["updateShowgreen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showgreen"]
                            },
                            operation: 0,
                            value: []
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShowgreen"] != null &&
                      typeof $steps["updateShowgreen"] === "object" &&
                      typeof $steps["updateShowgreen"].then === "function"
                    ) {
                      $steps["updateShowgreen"] = await $steps[
                        "updateShowgreen"
                      ];
                    }
                  }}
                  onResulr={async event => {
                    const $steps = {};

                    $steps["updateDialogOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialogOpen"] != null &&
                      typeof $steps["updateDialogOpen"] === "object" &&
                      typeof $steps["updateDialogOpen"].then === "function"
                    ) {
                      $steps["updateDialogOpen"] = await $steps[
                        "updateDialogOpen"
                      ];
                    }
                  }}
                  onSelectedIDsChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "testOptionsLiom",
                      "selectedIDs"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  retestTest={(() => {
                    try {
                      return $state.retestTest;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  selectedIDs={generateStateValueProp($state, [
                    "testOptionsLiom",
                    "selectedIDs"
                  ])}
                  showgreen={(() => {
                    try {
                      return $state.showgreen.length != 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                >
                  {(() => {
                    try {
                      return $state.edit;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m0ODd
                      )}
                    >
                      {
                        "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0627\u0633\u062e ! \u0644\u0637\u0641\u0627 \u06af\u0632\u06cc\u0646\u0647 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                      }
                    </div>
                  ) : null}
                </TestOptionsLiom>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return (
                          $state.variable.question?.lock == 1 &&
                          !$ctx.query.buy &&
                          $ctx.query.app == "liom"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          $state.variable.question?.lock == 1 &&
                          $state.orginNotLook &&
                          !$ctx.query.buy &&
                          $ctx.query.app == "liom"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"peyliom"}
                  data-plasmic-override={overrides.peyliom}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.peyliom)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tmi79)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3QNky
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vCmVm
                        )}
                      >
                        {
                          "\u0628\u0627 \u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0641\u0647\u0645\u06cc \u0686\u0631\u0627 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0646\u0627\u0645\u0646\u0638\u0645\u0647 \u0648 \u06af\u0627\u0645\u200c\u0647\u0627\u06cc \u0644\u0627\u0632\u0645 \u0631\u0648 \u0628\u0631\u0627\u06cc \u0628\u0647\u0628\u0648\u062f \u0628\u0631\u062f\u0627\u0631\u06cc."
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yMsKs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6KAp7
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.shop.data.result.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fzriJ
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lw1Sg
                          )}
                        >
                          {(() => {
                            try {
                              return $state.shop.data?.result?.fullPrice;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jM7SQ
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.shop.data.result.fullPrice.toLocaleString() +
                                      " تومان "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "120000000";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dkBnr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.shop.data.result.price.toLocaleString() +
                                    " تومان "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "300000 \u062a\u0648\u0645\u0627\u0646";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cdaYx
                          )}
                        >
                          {"50%"}
                        </div>
                      </Stack__>
                    </div>
                  </div>
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom"}
                    data-plasmic-override={overrides.buttonLiom}
                    className={classNames("__wab_instance", sty.buttonLiom)}
                    color={generateStateValueProp($state, [
                      "buttonLiom",
                      "color"
                    ])}
                    endIcon={
                      <Icon111Icon
                        className={classNames(projectcss.all, sty.svg__a8EU)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadinkBotten"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten"] != null &&
                        typeof $steps["updateLoadinkBotten"] === "object" &&
                        typeof $steps["updateLoadinkBotten"].then === "function"
                      ) {
                        $steps["updateLoadinkBotten"] = await $steps[
                          "updateLoadinkBotten"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/selfTest/shopBuy",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      merchantID: $state.shopId,
                                      amount: $state.shop.data.result.price,
                                      type: "selfTest",
                                      text: $state.shop.data.result.title,
                                      value: 1,
                                      userId: $state.userId,
                                      callback:
                                        "https://n8n.staas.ir/webhook/selfTestPayment",
                                      extraData: {
                                        user_id: $state.userId,
                                        session_id: $state.sessionId,
                                        type: $ctx.query.type
                                      },
                                      redirectUrl: `https://tools.liom.app/self-test/?user_id=${$state.userId}&type=${$state.type}&app=${$ctx.query.app}&nextQuesion_id=${$state.nextQuesionId}&session_id=${$state.sessionId}&inApp=${$ctx.query.inApp}`
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.invokeGlobalAction?.data?.success == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.open(
                                    $steps.invokeGlobalAction.data.result,
                                    "_self"
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["runCode2"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let b = $state.testChat;
                                  return localStorage.setItem(
                                    "test",
                                    JSON.stringify(b)
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["updateLoadinkBotten2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten2"] != null &&
                        typeof $steps["updateLoadinkBotten2"] === "object" &&
                        typeof $steps["updateLoadinkBotten2"].then ===
                          "function"
                      ) {
                        $steps["updateLoadinkBotten2"] = await $steps[
                          "updateLoadinkBotten2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()}
                  >
                    {(() => {
                      try {
                        return !$state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tf8IY
                        )}
                      >
                        {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                      </div>
                    ) : null}
                  </ButtonLiom>
                </Stack__>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return (
                          $state.variable.question?.lock == 1 &&
                          $state.buy == false &&
                          $ctx.query.app != "liom"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          $state.variable.question?.lock == 1 &&
                          $state.orginNotLook &&
                          !$ctx.query.buy &&
                          $ctx.query.app != "liom"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"peyPardakht24"}
                  data-plasmic-override={overrides.peyPardakht24}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.peyPardakht24)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4Po84)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rfjx4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vsD4A
                        )}
                      >
                        {
                          "\u0628\u0627 \u0627\u06cc\u0646 \u0627\u0628\u0632\u0627\u0631 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0641\u0647\u0645\u06cc \u0686\u0631\u0627 \u0642\u0627\u0639\u062f\u06af\u06cc\u062a \u0646\u0627\u0645\u0646\u0638\u0645\u0647 \u0648 \u06af\u0627\u0645\u200c\u0647\u0627\u06cc \u0644\u0627\u0632\u0645 \u0631\u0648 \u0628\u0631\u0627\u06cc \u0628\u0647\u0628\u0648\u062f \u0628\u0631\u062f\u0627\u0631\u06cc."
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5GxOe
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kM18M
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.shop.data.result.title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tu96O
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fLmCw
                          )}
                        >
                          {(() => {
                            try {
                              return $state.shop.data?.result?.fullPrice;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___34E
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.shop.data.result.fullPrice.toLocaleString() +
                                      " تومان "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "120000000";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gr2AA
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    $state.shop.data.result.price.toLocaleString() +
                                    " تومان "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "300000 \u062a\u0648\u0645\u0627\u0646";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5Ddji
                          )}
                        >
                          {"50%"}
                        </div>
                      </Stack__>
                    </div>
                  </div>
                  <Paziresh24Button
                    children2={"\u067e\u0631\u062f\u0627\u062e\u062a "}
                    className={classNames(
                      "__wab_instance",
                      sty.paziresh24Button__qwVsn
                    )}
                    endIcon={
                      <ChevronLeftIcon
                        className={classNames(projectcss.all, sty.svg__zlFcS)}
                        role={"img"}
                      />
                    }
                    loading={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadinkBotten"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten"] != null &&
                        typeof $steps["updateLoadinkBotten"] === "object" &&
                        typeof $steps["updateLoadinkBotten"].then === "function"
                      ) {
                        $steps["updateLoadinkBotten"] = await $steps[
                          "updateLoadinkBotten"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/selfTestPaymentPasiresh24",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      amount:
                                        $state.shop.data.result.price * 10,
                                      purchase_id: $state.shop.data.result.id,
                                      return_link: `https://tools.liom.app/self-test/?user_id=${$state.userId}&token=${$ctx.query.token}&origin_user_id=${$ctx.query.origin_user_id}&type=${$state.type}&app=${$ctx.query.app}&nextQuesion_id=${$state.nextQuesionId}&session_id=${$state.sessionId}&inApp=${$ctx.query.inApp}`,
                                      title: $state.shop.data.result.title
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["invokeGlobalAction2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["variable3"]
                              },
                              operation: 0,
                              value: $steps.invokeGlobalAction?.data
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.invokeGlobalAction?.data?.status == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.open(
                                    $steps.invokeGlobalAction.data.data
                                      .payment_link,
                                    "_self"
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["runCode2"] =
                        $steps.invokeGlobalAction?.data?.status == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    let b = $state.testChat;
                                    localStorage.setItem(
                                      "test",
                                      JSON.stringify(b)
                                    );
                                    return localStorage.setItem(
                                      "receipt_id",
                                      $steps.invokeGlobalAction.data.data
                                        .receipt_id
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }

                      $steps["updateLoadinkBotten2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten2"] != null &&
                        typeof $steps["updateLoadinkBotten2"] === "object" &&
                        typeof $steps["updateLoadinkBotten2"].then ===
                          "function"
                      ) {
                        $steps["updateLoadinkBotten2"] = await $steps[
                          "updateLoadinkBotten2"
                        ];
                      }
                    }}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__pDjh)}
                        role={"img"}
                      />
                    }
                  />
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.nextQuesionId == -1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hc0LI)}
                >
                  <Paziresh24Button
                    children2={
                      (() => {
                        try {
                          return !$state.loadinkBotten;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gRmS
                          )}
                        >
                          {
                            "\u062f\u06cc\u062f\u0646 \u0646\u062a\u06cc\u062c\u0647"
                          }
                        </div>
                      ) : null
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.paziresh24Button__iyNRv
                    )}
                    color={"green"}
                    endIcon={
                      <Icon111Icon
                        className={classNames(projectcss.all, sty.svg___6V1EU)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loading={(() => {
                      try {
                        return $state.loadinkBotten;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "loading";
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadinkBotten"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadinkBotten"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadinkBotten"] != null &&
                        typeof $steps["updateLoadinkBotten"] === "object" &&
                        typeof $steps["updateLoadinkBotten"].then === "function"
                      ) {
                        $steps["updateLoadinkBotten"] = await $steps[
                          "updateLoadinkBotten"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/service/log",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      userId: $state.userId,
                                      pageName: "self-test",
                                      action: "Test-result",
                                      extraData: { sessionId: $state.sessionId }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                {
                                  headers: {
                                    "Content-Type": "application/json",
                                    Authorization:
                                      "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                  }
                                }
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return `https://tools.liom.app/result?session_id=${$state.sessionId}&user_id=${$state.userId}&app=${$ctx.query.app}&token=${$ctx.query.token}&origin_user_id=${$ctx.query.origin_user_id}&origin=${$ctx.query.origin}&inApp=${$ctx.query.inApp}`;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["runCode2"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  let b = $state.testChat;
                                  return localStorage.setItem(
                                    "test",
                                    JSON.stringify(b)
                                  );
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode2"] != null &&
                        typeof $steps["runCode2"] === "object" &&
                        typeof $steps["runCode2"].then === "function"
                      ) {
                        $steps["runCode2"] = await $steps["runCode2"];
                      }
                    }}
                    startIcon={
                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__k8MFy)}
                        role={"img"}
                      />
                    }
                  />
                </Stack__>
              ) : null}
            </Reveal>
          </div>
          {(() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__ymmfB)}>
              <ApiRequest
                data-plasmic-name={"user"}
                data-plasmic-override={overrides.user}
                className={classNames("__wab_instance", sty.user)}
                config={(() => {
                  try {
                    return {
                      headers: { Authorization: "Bearer " + $ctx.query.token }
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["user", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["user", "loading"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["user", "data"]).apply(
                    null,
                    eventArgs
                  );

                  (async data => {
                    const $steps = {};

                    $steps["updateToken"] =
                      $state.user?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["token"]
                              },
                              operation: 0,
                              value: $state.user.data.result.user.access_token
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateToken"] != null &&
                      typeof $steps["updateToken"] === "object" &&
                      typeof $steps["updateToken"].then === "function"
                    ) {
                      $steps["updateToken"] = await $steps["updateToken"];
                    }

                    $steps["invokeGlobalAction"] =
                      $state.user?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PUT",
                                "https://n8n.staas.ir/webhook/selfTestUser",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      mobile:
                                        $state.user.data.result.user.mobile ||
                                        "",
                                      email:
                                        $state.user.data.result.user.email ||
                                        "",
                                      name:
                                        $state.user.data.result.user.name || "",
                                      user_id: $state.userId
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                url={"https://api.liom.app/rest/user/profile"}
              />
            </div>
          ) : null}
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={0.3}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var inputBox = document.getElementById("selectBox");
                          var textBox = document.getElementById("messegeBox");
                          if (inputBox.style.display === "none") {
                            return (textBox.style.paddingBottom = "8px");
                          } else {
                            return (textBox.style.paddingBottom = `${
                              inputBox.offsetHeight + 20
                            }px`);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            runWhileEditing={false}
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<!-- Hotjar Tracking Code for tools.liom.app -->\r\n<script>\r\n    (function(h,o,t,j,a,r){\r\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\r\n        h._hjSettings={hjid:5253188,hjsv:6};\r\n        a=o.getElementsByTagName('head')[0];\r\n        r=o.createElement('script');r.async=1;\r\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\r\n        a.appendChild(r);\r\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\r\n</script>"
            }
          />

          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n<script src=\"https://developer.eitaa.com/eitaa-web-app.js\">\r\n</script>\r\n<script>\r\n  window.Eitaa.WebApp.ready();\r\n  window.Eitaa.WebApp.expand();\r\n  window.Eitaa.WebApp.isClosingConfirmationEnabled = true;\r\n</script>\r\n"
            }
          />

          <Paziresh24Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            body={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rymi9)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.showgreen;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.buttonLiom3),
                      color: generateStateValueProp($state, [
                        "buttonLiom3",
                        __plasmic_idx_0,
                        "color"
                      ]),
                      key: currentIndex,
                      onClick: async event => {
                        const $steps = {};

                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return `https://tools.liom.app/result/?session_id=${currentItem.id}&user_id=${currentItem.user_id}&Share=true&app=${$ctx.query.app}&origin=${$ctx.query.origin}&inApp=${$ctx.query.inApp}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return `/result`;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      },
                      onColorChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom3",
                            __plasmic_idx_0,
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "buttonLiom3[].color",
                          initFunc: ({ $props, $state, $queries }) =>
                            "softGreen"
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <ButtonLiom
                        data-plasmic-name={"buttonLiom3"}
                        data-plasmic-override={overrides.buttonLiom3}
                        {...child$Props}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nYq0E
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  var birthDate = currentItem.timestamp
                                    .split(" ")[0]
                                    .split("-");
                                  let gy = parseInt(birthDate[0]);
                                  let gm = parseInt(birthDate[1]);
                                  let gd = parseInt(birthDate[2]);
                                  let shamsiMonthDays = [
                                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30,
                                    29
                                  ];

                                  let miladiDaysInMonth = [
                                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,
                                    31
                                  ];

                                  let isLeapYear =
                                    gy % 4 === 0 &&
                                    (gy % 100 !== 0 || gy % 400 === 0);
                                  if (isLeapYear) {
                                    miladiDaysInMonth[1] = 29;
                                  }
                                  let daysPassedMiladi = gd;
                                  for (let i = 0; i < gm - 1; i++) {
                                    daysPassedMiladi += miladiDaysInMonth[i];
                                  }
                                  let shamsiNewYearDay = new Date(gy, 2, 21);
                                  let shamsiStartDayInMiladi = Math.floor(
                                    (shamsiNewYearDay - new Date(gy, 0, 1)) /
                                      (1000 * 60 * 60 * 24)
                                  );
                                  let daysPassedInShamsiYear =
                                    daysPassedMiladi - shamsiStartDayInMiladi;
                                  if (daysPassedInShamsiYear < 0) {
                                    gy--;
                                    shamsiNewYearDay = new Date(gy, 2, 21);
                                    shamsiStartDayInMiladi = Math.floor(
                                      (shamsiNewYearDay - new Date(gy, 0, 1)) /
                                        (1000 * 60 * 60 * 24)
                                    );
                                    daysPassedInShamsiYear =
                                      daysPassedMiladi +
                                      (365 - shamsiStartDayInMiladi);
                                    if (isLeapYear) {
                                      daysPassedInShamsiYear++;
                                    }
                                  }
                                  let jy = gy - 621;
                                  let jm = 0;
                                  let jd = daysPassedInShamsiYear;
                                  for (
                                    let i = 0;
                                    i < shamsiMonthDays.length;
                                    i++
                                  ) {
                                    if (jd <= shamsiMonthDays[i]) {
                                      jm = i + 1;
                                      break;
                                    } else {
                                      jd -= shamsiMonthDays[i];
                                    }
                                  }
                                  let formattedMonth = jm < 10 ? `0${jm}` : jm;
                                  let formattedDay = jd < 10 ? `0${jd}` : jd;
                                  return `نتیجه تست نامنظمی قاعدگی تاریخ : ${jy}/${formattedMonth}/${formattedDay}`;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Button";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </ButtonLiom>
                    );
                  })();
                })}
              </Stack__>
            }
            className={classNames("__wab_instance", sty.dialog)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k70Z
                )}
              >
                {
                  "\u0646\u062a\u0627\u06cc\u062c \u062a\u0633\u062a \u0647\u0627\u06cc \u0642\u0628\u0644\u06cc"
                }
              </div>
            }
            trigger={null}
          />

          <Paziresh24Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            body={
              <ApiRequest
                data-plasmic-name={"shop"}
                data-plasmic-override={overrides.shop}
                body={(() => {
                  try {
                    return {
                      shopId: $state.shopId
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.shop)}
                errorDisplay={null}
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ogomZ)}
                  >
                    <Icon111Icon
                      className={classNames(projectcss.all, sty.svg__eNwsz)}
                      role={"img"}
                    />
                  </div>
                }
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["shop", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["shop", "loading"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["shop", "data"]).apply(
                    null,
                    eventArgs
                  );

                  (async data => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = { args: [2000] };
                          return $globalActions["Fragment.wait"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value:
                              $steps.invokeGlobalAction?.data?.success ==
                                true ||
                              $steps.invokeGlobalAction4?.data?.success == true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }
                  }).apply(null, eventArgs);
                }}
                url={"https://n8n.staas.ir/webhook/selfTest/shop"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__g2VuF)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vi1Gs)}
                    dir={"rtl"}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__h1IyH)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"15px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"auto"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_tools/images/image36.svg",
                          fullWidth: 22,
                          fullHeight: 20,
                          aspectRatio: 1.1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fbuyw
                        )}
                      >
                        {
                          "\u0628\u0631\u0627\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0632 \u0627\u0628\u0632\u0627\u0631 \u062a\u0633\u062a \u0633\u0644\u0627\u0645\u062a \u060c \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f."
                        }
                      </div>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xjXfU
                      )}
                    >
                      {
                        "\u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0633\u062a \u0633\u0644\u0627\u0645\u062a"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nYbpm
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.shop.data.result.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__q6Dc0)}
                    dir={"rtl"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ulBfG)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__v9Jau
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__au7Hq
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__llNk3
                            )}
                          >
                            {""}
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yQkXd
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j7Ur4
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.shop.data.result.title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zXKx
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wn3Xz
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shop.data.result.fullPrice.toLocaleString();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mjeq8
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $state.shop.data.result.price.toLocaleString() +
                                      " تومان "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__omKfw
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___47Ues
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shop.data.result.badge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bUcOj
                          )}
                        >
                          {
                            "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                          }
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kGcM
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nKwd
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                allowClear: false,
                                autoFocus: false,
                                bordered: false,
                                className: classNames(
                                  "__wab_instance",
                                  sty.input4
                                ),
                                disabled: false,
                                onChange: async (...eventArgs: any) => {
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["input4", "value"],
                                    AntdInput_Helpers
                                  ).apply(null, eventArgs);
                                },
                                placeholder:
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                prefix: (
                                  <Icon10Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___7Qq1
                                    )}
                                    role={"img"}
                                  />
                                ),

                                readOnly: false,
                                size: "small",
                                suffix: null,
                                value: generateStateValueProp($state, [
                                  "input4",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "input4.value"
                                  }
                                ],
                                [],
                                AntdInput_Helpers ?? {},
                                child$Props
                              );

                              return (
                                <AntdInput
                                  data-plasmic-name={"input4"}
                                  data-plasmic-override={overrides.input4}
                                  {...child$Props}
                                />
                              );
                            })()}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__qir8S
                              )}
                            />
                          </div>
                          <ButtonLiom
                            data-plasmic-name={"button12"}
                            data-plasmic-override={overrides.button12}
                            className={classNames(
                              "__wab_instance",
                              sty.button12
                            )}
                            color={generateStateValueProp($state, [
                              "button12",
                              "color"
                            ])}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button12",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___342Wb
                              )}
                            >
                              {"\u062a\u0627\u06cc\u06cc\u062f"}
                            </div>
                          </ButtonLiom>
                        </Stack__>
                        <ButtonLiom
                          data-plasmic-name={"buttonLiom6"}
                          data-plasmic-override={overrides.buttonLiom6}
                          className={classNames(
                            "__wab_instance",
                            sty.buttonLiom6
                          )}
                          color={generateStateValueProp($state, [
                            "buttonLiom6",
                            "color"
                          ])}
                          endIcon={
                            <Icon111Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wEuC1
                              )}
                              role={"img"}
                            />
                          }
                          isDisabled={(() => {
                            try {
                              return $state.loadinkBotten;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateLoadinkBotten"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loadinkBotten"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoadinkBotten"] != null &&
                              typeof $steps["updateLoadinkBotten"] ===
                                "object" &&
                              typeof $steps["updateLoadinkBotten"].then ===
                                "function"
                            ) {
                              $steps["updateLoadinkBotten"] = await $steps[
                                "updateLoadinkBotten"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://n8n.staas.ir/webhook/selfTest/shopBuy",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            merchantID:
                                              "c5b0a564-1cf5-4dd7-a0cb-f4f42c89b043",
                                            id: $state.shopId,
                                            amount:
                                              $state.shop.data.result.price,
                                            type: "selfTest",
                                            text: $state.shop.data.result.title,
                                            value: 1,
                                            userId: $state.userId,
                                            callback:
                                              "https://n8n.staas.ir/webhook/selfTestPayment",
                                            extraData: {
                                              user_id: $state.userId,
                                              session_id: $state.sessionId,
                                              type: $ctx.query.type
                                            },
                                            redirectUrl: $state.redirectUrl
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      undefined
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }

                            $steps["runCode"] =
                              $steps.invokeGlobalAction?.data?.success == true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.open(
                                          $steps.invokeGlobalAction.data.result,
                                          "_self"
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["runCode2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        let b = $state.testChat;
                                        return localStorage.setItem(
                                          "test",
                                          JSON.stringify(b)
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode2"] != null &&
                              typeof $steps["runCode2"] === "object" &&
                              typeof $steps["runCode2"].then === "function"
                            ) {
                              $steps["runCode2"] = await $steps["runCode2"];
                            }

                            $steps["updateLoadinkBotten2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loadinkBotten"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoadinkBotten2"] != null &&
                              typeof $steps["updateLoadinkBotten2"] ===
                                "object" &&
                              typeof $steps["updateLoadinkBotten2"].then ===
                                "function"
                            ) {
                              $steps["updateLoadinkBotten2"] = await $steps[
                                "updateLoadinkBotten2"
                              ];
                            }
                          }}
                          onColorChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "buttonLiom6",
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showEndIcon={(() => {
                            try {
                              return $state.loadinkBotten;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "showEndIcon";
                              }
                              throw e;
                            }
                          })()}
                        >
                          {(() => {
                            try {
                              return !$state.loadinkBotten;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__d38Jr
                              )}
                            >
                              {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                            </div>
                          ) : null}
                        </ButtonLiom>
                      </Stack__>
                    </div>
                  </Stack__>
                </div>
              </ApiRequest>
            }
            className={classNames("__wab_instance", sty.dialog2)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog2", "open"])}
            title={null}
            trigger={null}
          />

          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___1Hpgz)}>
              {(() => {
                try {
                  return (() => {
                    var urlParams = new URLSearchParams(window.location.search);
                    return urlParams.get("app") != "liom";
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Icon111Icon
                  className={classNames(projectcss.all, sty.svg__uaLit)}
                  role={"img"}
                />
              ) : null}
              {(() => {
                try {
                  return (() => {
                    var urlParams = new URLSearchParams(window.location.search);
                    return urlParams.get("app") == "liom";
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Icon111Icon
                  className={classNames(projectcss.all, sty.svg__kgnAq)}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              plasmic_hamdast_sdk_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_Bi3Znl7ElEiz"]]: hasVariant(
                globalVariants,
                "screen",
                "mobileOnly"
              ),
              [sty["pcls_TbOn5nOiI_qs"]]: true
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
          >
            <ApiRequest
              data-plasmic-name={"apiRequest2"}
              data-plasmic-override={overrides.apiRequest2}
              className={classNames("__wab_instance", sty.apiRequest2)}
              errorDisplay={null}
              loadingDisplay={
                <div
                  className={classNames(projectcss.all, sty.freeBox___14Iru)}
                >
                  <Icon111Icon
                    className={classNames(projectcss.all, sty.svg___6FlTt)}
                    role={"img"}
                  />
                </div>
              }
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest2",
                  "error"
                ]).apply(null, eventArgs);
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest2",
                  "loading"
                ]).apply(null, eventArgs);
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "apiRequest2",
                  "data"
                ]).apply(null, eventArgs);

                (async data => {
                  const $steps = {};

                  $steps["runCode"] = $state.apiRequest2?.data?.success
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              if ($state.apiRequest2?.data?.statusBuy != "") {
                                if (
                                  $state.apiRequest2.data.statusBuy.toUpperCase() ===
                                  "OK"
                                )
                                  return ($state.status = "OK");
                                else return ($state.status = "NOK");
                              } else return ($state.status = "NOK");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateTestChat"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["testChat"]
                          },
                          operation: 0
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateTestChat"] != null &&
                    typeof $steps["updateTestChat"] === "object" &&
                    typeof $steps["updateTestChat"].then === "function"
                  ) {
                    $steps["updateTestChat"] = await $steps["updateTestChat"];
                  }
                }).apply(null, eventArgs);
              }}
              params={(() => {
                try {
                  return {
                    type:
                      $ctx.query.type ||
                      new URLSearchParams(window.location.search).get("type"),
                    user_id: $state.userId
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              url={"https://n8n.staas.ir/webhook/selfTestPayment"}
            >
              {(() => {
                try {
                  return $state.status.toUpperCase() === "OK";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gd2U)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5JxJ9)}
                  >
                    <EmojiHappySquareSvgrepoComSvg2Icon
                      className={classNames(projectcss.all, sty.svg__vHyEk)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8Dz03)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y5K4A
                      )}
                    >
                      {
                        "\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642"
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b4Mg3
                      )}
                    >
                      {
                        "\u0627\u0632 \u062e\u0631\u06cc\u062f\u062a \u0645\u0645\u0646\u0648\u0646\u06cc\u0645! \u06af\u0641\u062a\u06af\u0648 \u0641\u0639\u0627\u0644 \u0634\u062f \u0648 \u062d\u0627\u0644\u0627 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647 \u0633\u0648\u0627\u0644\u0627\u062a\u062a \u062f\u0631\u0628\u0627\u0631\u0647 \u0633\u0644\u0627\u0645\u062a \u0648 \u0628\u062f\u0646\u062a \u067e\u0627\u0633\u062e \u0628\u062f\u06cc \u0648  \u0628\u0647 \u0633\u0644\u0627\u0645\u062a\u06cc \u062e\u0648\u062f\u062a \u0631\u0633\u06cc\u062f\u06af\u06cc \u06a9\u0646\u06cc."
                      }
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g8LmD
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc >"
                        : "Enter some text"}
                    </div>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__iUi6R)}
                  >
                    <ButtonLiom
                      data-plasmic-name={"button3"}
                      data-plasmic-override={overrides.button3}
                      className={classNames("__wab_instance", sty.button3)}
                      color={generateStateValueProp($state, [
                        "button3",
                        "color"
                      ])}
                      endIcon={
                        <Icon12Icon
                          className={classNames(projectcss.all, sty.svg__j4U1T)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateStatus"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["status"]
                                },
                                operation: 0,
                                value: ""
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateStatus"] != null &&
                          typeof $steps["updateStatus"] === "object" &&
                          typeof $steps["updateStatus"].then === "function"
                        ) {
                          $steps["updateStatus"] = await $steps["updateStatus"];
                        }

                        $steps["updateBuy"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["buy"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateBuy"] != null &&
                          typeof $steps["updateBuy"] === "object" &&
                          typeof $steps["updateBuy"].then === "function"
                        ) {
                          $steps["updateBuy"] = await $steps["updateBuy"];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const searchParams = new URLSearchParams(
                                      window.location.search
                                    );
                                    searchParams.delete("status");
                                    searchParams.set("buy", "true");
                                    const newUrl = `${
                                      window.location.pathname
                                    }?${searchParams.toString()}`;
                                    return window.history.replaceState(
                                      null,
                                      "",
                                      newUrl
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button3",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__id937
                        )}
                      >
                        {"\u062a\u0627\u06cc\u06cc\u062f"}
                      </div>
                    </ButtonLiom>
                  </Stack__>
                </Stack__>
              ) : null}
              <ApiRequest
                data-plasmic-name={"shop2"}
                data-plasmic-override={overrides.shop2}
                body={(() => {
                  try {
                    return { shopId: $state.shopId };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.shop2)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["shop2", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["shop2", "loading"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["shop2", "data"]).apply(
                    null,
                    eventArgs
                  );

                  (async data => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = { args: [2000] };
                          return $globalActions["Fragment.wait"]?.apply(null, [
                            ...actionArgs.args
                          ]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading"]
                            },
                            operation: 0,
                            value:
                              $steps.invokeGlobalAction?.data?.success ==
                                true ||
                              $steps.invokeGlobalAction4?.data?.success == true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading"] != null &&
                      typeof $steps["updateLoading"] === "object" &&
                      typeof $steps["updateLoading"].then === "function"
                    ) {
                      $steps["updateLoading"] = await $steps["updateLoading"];
                    }
                  }).apply(null, eventArgs);
                }}
                url={"https://n8n.staas.ir/webhook/selfTest/shop"}
              >
                {(() => {
                  try {
                    return $state.status.toUpperCase() == "NOK";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___60P5P)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4V5E2
                      )}
                    >
                      <EmojiSadSquareSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg___3Bzdx)}
                        role={"img"}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dwtdu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4KOyK
                        )}
                      >
                        {
                          "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dbYkD
                        )}
                      >
                        {
                          "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f . "
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sFt8
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc >"
                          : "Enter some text"}
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uq9Xa)}
                    >
                      <ButtonLiom
                        data-plasmic-name={"buttonLiom8"}
                        data-plasmic-override={overrides.buttonLiom8}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonLiom8
                        )}
                        color={generateStateValueProp($state, [
                          "buttonLiom8",
                          "color"
                        ])}
                        endIcon={
                          <Icon111Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__l4Ax9
                            )}
                            role={"img"}
                          />
                        }
                        isDisabled={(() => {
                          try {
                            return $state.loadinkBotten;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateLoadinkBotten"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadinkBotten"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadinkBotten"] != null &&
                            typeof $steps["updateLoadinkBotten"] === "object" &&
                            typeof $steps["updateLoadinkBotten"].then ===
                              "function"
                          ) {
                            $steps["updateLoadinkBotten"] = await $steps[
                              "updateLoadinkBotten"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/selfTest/shopBuy",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          merchantID:
                                            "c5b0a564-1cf5-4dd7-a0cb-f4f42c89b043",
                                          id: $state.shopId,
                                          amount:
                                            $state.shop2.data.result.price,
                                          type: "selfTest",
                                          text: $state.shop2.data.result.title,
                                          value: 1,
                                          userId: $state.userId,
                                          callback:
                                            "https://n8n.staas.ir/webhook/selfTestPayment",
                                          extraData: {
                                            user_id: $state.userId,
                                            session_id: $state.sessionId,
                                            type: $ctx.query.type
                                          },
                                          redirectUrl: $state.redirectUrl
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    undefined
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["runCode"] =
                            $steps.invokeGlobalAction?.data?.success == true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return window.open(
                                        $steps.invokeGlobalAction.data.result,
                                        "_self"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["updateLoadinkBotten2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["loadinkBotten"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateLoadinkBotten2"] != null &&
                            typeof $steps["updateLoadinkBotten2"] ===
                              "object" &&
                            typeof $steps["updateLoadinkBotten2"].then ===
                              "function"
                          ) {
                            $steps["updateLoadinkBotten2"] = await $steps[
                              "updateLoadinkBotten2"
                            ];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "buttonLiom8",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        showEndIcon={(() => {
                          try {
                            return $state.loadinkBotten;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "showEndIcon";
                            }
                            throw e;
                          }
                        })()}
                      >
                        {(() => {
                          try {
                            return !$state.loadinkBotten;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dyyIt
                            )}
                          >
                            {
                              "\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"
                            }
                          </div>
                        ) : null}
                      </ButtonLiom>
                    </Stack__>
                  </Stack__>
                ) : null}
              </ApiRequest>
            </ApiRequest>
            <div className={classNames(projectcss.all, sty.freeBox__mqWcN)} />
          </AntdModal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "headerLiom",
    "paziresh24Avatar",
    "progress",
    "messageLiom",
    "testOptionsLiom",
    "peyliom",
    "buttonLiom",
    "peyPardakht24",
    "user",
    "timer",
    "embedHtml",
    "favicon",
    "dialog",
    "buttonLiom3",
    "dialog2",
    "shop",
    "img",
    "input4",
    "button12",
    "buttonLiom6",
    "modal",
    "apiRequest2",
    "button3",
    "shop2",
    "buttonLiom8"
  ],
  sideEffect: ["sideEffect"],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  progress: ["progress"],
  messageLiom: ["messageLiom"],
  testOptionsLiom: ["testOptionsLiom"],
  peyliom: ["peyliom", "buttonLiom"],
  buttonLiom: ["buttonLiom"],
  peyPardakht24: ["peyPardakht24"],
  user: ["user"],
  timer: ["timer"],
  embedHtml: ["embedHtml"],
  favicon: ["favicon"],
  dialog: ["dialog", "buttonLiom3"],
  buttonLiom3: ["buttonLiom3"],
  dialog2: ["dialog2", "shop", "img", "input4", "button12", "buttonLiom6"],
  shop: ["shop", "img", "input4", "button12", "buttonLiom6"],
  img: ["img"],
  input4: ["input4"],
  button12: ["button12"],
  buttonLiom6: ["buttonLiom6"],
  modal: ["modal", "apiRequest2", "button3", "shop2", "buttonLiom8"],
  apiRequest2: ["apiRequest2", "button3", "shop2", "buttonLiom8"],
  button3: ["button3"],
  shop2: ["shop2", "buttonLiom8"],
  buttonLiom8: ["buttonLiom8"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  progress: typeof AntdProgress;
  messageLiom: typeof MessageLiom;
  testOptionsLiom: typeof TestOptionsLiom;
  peyliom: "div";
  buttonLiom: typeof ButtonLiom;
  peyPardakht24: "div";
  user: typeof ApiRequest;
  timer: typeof Timer;
  embedHtml: typeof Embed;
  favicon: typeof Embed;
  dialog: typeof Paziresh24Dialog;
  buttonLiom3: typeof ButtonLiom;
  dialog2: typeof Paziresh24Dialog;
  shop: typeof ApiRequest;
  img: typeof PlasmicImg__;
  input4: typeof AntdInput;
  button12: typeof ButtonLiom;
  buttonLiom6: typeof ButtonLiom;
  modal: typeof AntdModal;
  apiRequest2: typeof ApiRequest;
  button3: typeof ButtonLiom;
  shop2: typeof ApiRequest;
  buttonLiom8: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfTest__VariantsArgs;
    args?: PlasmicSelfTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSelfTest__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfTest__ArgProps,
          internalVariantPropNames: PlasmicSelfTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfTest";
  } else {
    func.displayName = `PlasmicSelfTest.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfTest = Object.assign(
  // Top-level PlasmicSelfTest renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    progress: makeNodeComponent("progress"),
    messageLiom: makeNodeComponent("messageLiom"),
    testOptionsLiom: makeNodeComponent("testOptionsLiom"),
    peyliom: makeNodeComponent("peyliom"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    peyPardakht24: makeNodeComponent("peyPardakht24"),
    user: makeNodeComponent("user"),
    timer: makeNodeComponent("timer"),
    embedHtml: makeNodeComponent("embedHtml"),
    favicon: makeNodeComponent("favicon"),
    dialog: makeNodeComponent("dialog"),
    buttonLiom3: makeNodeComponent("buttonLiom3"),
    dialog2: makeNodeComponent("dialog2"),
    shop: makeNodeComponent("shop"),
    img: makeNodeComponent("img"),
    input4: makeNodeComponent("input4"),
    button12: makeNodeComponent("button12"),
    buttonLiom6: makeNodeComponent("buttonLiom6"),
    modal: makeNodeComponent("modal"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    button3: makeNodeComponent("button3"),
    shop2: makeNodeComponent("shop2"),
    buttonLiom8: makeNodeComponent("buttonLiom8"),

    // Metadata about props expected for PlasmicSelfTest
    internalVariantProps: PlasmicSelfTest__VariantProps,
    internalArgProps: PlasmicSelfTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | دستیار سلامت",
      description:
        "از دلایل عقب جلو شدن پریود خود،  در کمتر از چند دقیقه و بدون انتظار برای پزشک آگاه شوید",
      ogImageSrc:
        "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",
      canonical: ""
    }
  }
);

export default PlasmicSelfTest;
/* prettier-ignore-end */
