/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: bmZmPfCWacWw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog3 from "../../Dialog3"; // plasmic-import: UHX61U1xmtjA/component
import RadioGrop from "../../RadioGrop"; // plasmic-import: oaU2G97TOKr2/component
import { TextArea } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as TextArea_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicUnLike.module.css"; // plasmic-import: bmZmPfCWacWw/css

import Icon199Icon from "./icons/PlasmicIcon__Icon199"; // plasmic-import: xwPh58EuABnD/icon
import Icon203Icon from "./icons/PlasmicIcon__Icon203"; // plasmic-import: 4DfHlBfqDNRo/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon

createPlasmicElementProxy;

export type PlasmicUnLike__VariantMembers = {
  warning: "warning";
  unLike: "unLike";
};
export type PlasmicUnLike__VariantsArgs = {
  warning?: SingleBooleanChoiceArg<"warning">;
  unLike?: SingleBooleanChoiceArg<"unLike">;
};
type VariantPropType = keyof PlasmicUnLike__VariantsArgs;
export const PlasmicUnLike__VariantProps = new Array<VariantPropType>(
  "warning",
  "unLike"
);

export type PlasmicUnLike__ArgsType = { onClick?: (event: any) => void };
type ArgPropType = keyof PlasmicUnLike__ArgsType;
export const PlasmicUnLike__ArgProps = new Array<ArgPropType>("onClick");

export type PlasmicUnLike__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  dialog3?: Flex__<typeof Dialog3>;
  radioGrop?: Flex__<typeof RadioGrop>;
  antdInputTextArea?: Flex__<typeof TextArea>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
};

export interface DefaultUnLikeProps {
  onClick?: (event: any) => void;
  warning?: SingleBooleanChoiceArg<"warning">;
  unLike?: SingleBooleanChoiceArg<"unLike">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUnLike__RenderFunc(props: {
  variants: PlasmicUnLike__VariantsArgs;
  args: PlasmicUnLike__ArgsType;
  overrides: PlasmicUnLike__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "warning",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.warning
      },
      {
        path: "unLike",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unLike
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "buttonLiom.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "feedback",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0627\u0632 \u0634\u062e\u0635\u06cc\u062a \u062e\u0648\u0634\u0645 \u0646\u06cc\u0627\u0645\u062f",
          "\u0627\u0632 \u0633\u0628\u06a9 \u067e\u0627\u0633\u062e\u200c\u06af\u0648\u06cc\u06cc \u062e\u0648\u0634\u0645 \u0646\u06cc\u0627\u0645\u062f",
          "\u0627\u0632 \u0646\u0638\u0631 \u0627\u0637\u0644\u0627\u0639\u0627\u062a\u06cc \u062f\u0642\u06cc\u0642 \u0646\u0628\u0648\u062f",
          "\u0645\u0648\u0627\u0631\u062f \u0628\u06cc\u0634\u062a\u0631..."
        ]
      },
      {
        path: "antdInputTextArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", TextArea_Helpers)
      },
      {
        path: "feed",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootunLike]: hasVariant($state, "unLike", "unLike"),
          [sty.rootwarning]: hasVariant($state, "warning", "warning")
        }
      )}
    >
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "unLike", "unLike") ? Icon203Icon : Icon199Icon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgunLike]: hasVariant($state, "unLike", "unLike")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateDialog3Opendialog"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["dialog3", "opendialog"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDialog3Opendialog"] != null &&
            typeof $steps["updateDialog3Opendialog"] === "object" &&
            typeof $steps["updateDialog3Opendialog"].then === "function"
          ) {
            $steps["updateDialog3Opendialog"] = await $steps[
              "updateDialog3Opendialog"
            ];
          }
        }}
        role={"img"}
      />

      <Dialog3
        data-plasmic-name={"dialog3"}
        data-plasmic-override={overrides.dialog3}
        className={classNames("__wab_instance", sty.dialog3, {
          [sty.dialog3unLike]: hasVariant($state, "unLike", "unLike")
        })}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog3", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        opendialog={generateStateValueProp($state, ["dialog3", "opendialog"])}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qxyrX)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kLq9R
            )}
          >
            {"\u062b\u0628\u062a \u0628\u0627\u0632\u062e\u0648\u0631\u062f"}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___3OyVn)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.feedback;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <RadioGrop
                  data-plasmic-name={"radioGrop"}
                  data-plasmic-override={overrides.radioGrop}
                  className={classNames("__wab_instance", sty.radioGrop)}
                  color={"grey"}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateFeed"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["feed"]
                            },
                            operation: 0,
                            value: currentItem
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateFeed"] != null &&
                      typeof $steps["updateFeed"] === "object" &&
                      typeof $steps["updateFeed"].then === "function"
                    ) {
                      $steps["updateFeed"] = await $steps["updateFeed"];
                    }
                  }}
                  selected={(() => {
                    try {
                      return currentItem == $state.feed;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  style2={"meddiom"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e1GdG
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </RadioGrop>
              );
            })}
          </Stack__>
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.antdInputTextArea),
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "value",
                  ["antdInputTextArea", "value"],
                  TextArea_Helpers
                ).apply(null, eventArgs);
              },
              placeholder:
                "\u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0646\u0638\u0631\u062a\u0648\u0646 \u0631\u0648 \u0628\u0627 \u0645\u0627 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0634\u062a\u06cc\u062f \u0645\u0645\u0646\u0648\u0646\u06cc\u0645. \u0627\u06af\u0647 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u06cc \u0628\u0631\u0627\u06cc \u0628\u0647\u062a\u0631 \u0634\u062f\u0646 \u062f\u0627\u0631\u06cc\u0645\u060c \u0645\u0634\u062a\u0627\u0642\u06cc\u0645 \u0628\u0634\u0646\u0648\u06cc\u0645.",
              value: generateStateValueProp($state, [
                "antdInputTextArea",
                "value"
              ])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "value",
                  plasmicStateName: "antdInputTextArea.value"
                }
              ],
              [],
              TextArea_Helpers ?? {},
              child$Props
            );

            return (
              <TextArea
                data-plasmic-name={"antdInputTextArea"}
                data-plasmic-override={overrides.antdInputTextArea}
                {...child$Props}
              />
            );
          })()}
          <ButtonLiom
            data-plasmic-name={"buttonLiom"}
            data-plasmic-override={overrides.buttonLiom}
            className={classNames("__wab_instance", sty.buttonLiom)}
            color={generateStateValueProp($state, ["buttonLiom", "color"])}
            load={generateStateValueProp($state, ["buttonLiom", "load"])}
            onClick={async event => {
              const $steps = {};

              $steps["updateUnLike"] = true
                ? (() => {
                    const actionArgs = { vgroup: "unLike", operation: 4 };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }

                      $stateSet($state, vgroup, true);
                      return true;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUnLike"] != null &&
                typeof $steps["updateUnLike"] === "object" &&
                typeof $steps["updateUnLike"].then === "function"
              ) {
                $steps["updateUnLike"] = await $steps["updateUnLike"];
              }

              $steps["runOnClick"] = true
                ? (() => {
                    const actionArgs = { eventRef: $props["onClick"] };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runOnClick"] != null &&
                typeof $steps["runOnClick"] === "object" &&
                typeof $steps["runOnClick"].then === "function"
              ) {
                $steps["runOnClick"] = await $steps["runOnClick"];
              }
            }}
            onColorChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["buttonLiom", "color"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onLoadChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["buttonLiom", "load"])(
                  eventArgs[0]
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            size={"compact"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eRbv9
              )}
            >
              {"\u062b\u0628\u062a"}
            </div>
          </ButtonLiom>
        </Stack__>
      </Dialog3>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "svg",
    "dialog3",
    "radioGrop",
    "antdInputTextArea",
    "buttonLiom"
  ],
  svg: ["svg"],
  dialog3: ["dialog3", "radioGrop", "antdInputTextArea", "buttonLiom"],
  radioGrop: ["radioGrop"],
  antdInputTextArea: ["antdInputTextArea"],
  buttonLiom: ["buttonLiom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  dialog3: typeof Dialog3;
  radioGrop: typeof RadioGrop;
  antdInputTextArea: typeof TextArea;
  buttonLiom: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnLike__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnLike__VariantsArgs;
    args?: PlasmicUnLike__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnLike__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnLike__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUnLike__ArgProps,
          internalVariantPropNames: PlasmicUnLike__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUnLike__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnLike";
  } else {
    func.displayName = `PlasmicUnLike.${nodeName}`;
  }
  return func;
}

export const PlasmicUnLike = Object.assign(
  // Top-level PlasmicUnLike renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    dialog3: makeNodeComponent("dialog3"),
    radioGrop: makeNodeComponent("radioGrop"),
    antdInputTextArea: makeNodeComponent("antdInputTextArea"),
    buttonLiom: makeNodeComponent("buttonLiom"),

    // Metadata about props expected for PlasmicUnLike
    internalVariantProps: PlasmicUnLike__VariantProps,
    internalArgProps: PlasmicUnLike__ArgProps
  }
);

export default PlasmicUnLike;
/* prettier-ignore-end */
