/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: HSNJ0v5oD6xT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSendIcon.module.css"; // plasmic-import: HSNJ0v5oD6xT/css

import Icon100Icon from "./icons/PlasmicIcon__Icon100"; // plasmic-import: 2D6zlhfqx1AB/icon
import Icon149Icon from "./icons/PlasmicIcon__Icon149"; // plasmic-import: jsdnX88Z30Rv/icon

createPlasmicElementProxy;

export type PlasmicSendIcon__VariantMembers = {
  disable: "disable";
  loading: "loading";
};
export type PlasmicSendIcon__VariantsArgs = {
  disable?: SingleBooleanChoiceArg<"disable">;
  loading?: SingleBooleanChoiceArg<"loading">;
};
type VariantPropType = keyof PlasmicSendIcon__VariantsArgs;
export const PlasmicSendIcon__VariantProps = new Array<VariantPropType>(
  "disable",
  "loading"
);

export type PlasmicSendIcon__ArgsType = {
  onClick?: (event: any) => void;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  diable?: boolean;
  onDiableChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSendIcon__ArgsType;
export const PlasmicSendIcon__ArgProps = new Array<ArgPropType>(
  "onClick",
  "load",
  "onLoadChange",
  "diable",
  "onDiableChange"
);

export type PlasmicSendIcon__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultSendIconProps {
  onClick?: (event: any) => void;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  diable?: boolean;
  onDiableChange?: (val: string) => void;
  disable?: SingleBooleanChoiceArg<"disable">;
  loading?: SingleBooleanChoiceArg<"loading">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSendIcon__RenderFunc(props: {
  variants: PlasmicSendIcon__VariantsArgs;
  args: PlasmicSendIcon__ArgsType;
  overrides: PlasmicSendIcon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "disable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.diable;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.disable
      },
      {
        path: "load",
        type: "writable",
        variableType: "boolean",

        valueProp: "load",
        onChangeProp: "onLoadChange"
      },
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.load;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.loading
      },
      {
        path: "diable",
        type: "writable",
        variableType: "boolean",

        valueProp: "diable",
        onChangeProp: "onDiableChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        { [sty.rootdisable]: hasVariant($state, "disable", "disable") }
      )}
      id={"sendicon"}
      onClick={args.onClick}
      style={
        hasVariant($state, "disable", "disable")
          ? (() => {
              try {
                return {
                  "pointer-events": "none",
                  "user-select": "none",
                  cursor: "default"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          : undefined
      }
    >
      <Icon100Icon
        className={classNames(projectcss.all, sty.svg__etqbk, {
          [sty.svgdisable__etqbkLq58W]: hasVariant(
            $state,
            "disable",
            "disable"
          ),
          [sty.svgloading__etqbkJaXvO]: hasVariant($state, "loading", "loading")
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxdisable]: hasVariant($state, "disable", "disable"),
          [sty.freeBoxloading]: hasVariant($state, "loading", "loading"),
          [sty.freeBoxloading_disable]:
            hasVariant($state, "disable", "disable") &&
            hasVariant($state, "loading", "loading")
        })}
      >
        <Icon149Icon
          className={classNames(projectcss.all, sty.svg__xLsFm, {
            [sty.svgloading__xLsFmjaXvO]: hasVariant(
              $state,
              "loading",
              "loading"
            )
          })}
          role={"img"}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSendIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSendIcon__VariantsArgs;
    args?: PlasmicSendIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSendIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSendIcon__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSendIcon__ArgProps,
          internalVariantPropNames: PlasmicSendIcon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSendIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSendIcon";
  } else {
    func.displayName = `PlasmicSendIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicSendIcon = Object.assign(
  // Top-level PlasmicSendIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSendIcon
    internalVariantProps: PlasmicSendIcon__VariantProps,
    internalArgProps: PlasmicSendIcon__ArgProps
  }
);

export default PlasmicSendIcon;
/* prettier-ignore-end */
