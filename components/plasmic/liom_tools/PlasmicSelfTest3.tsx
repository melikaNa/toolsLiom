/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: YAFmtSuqOhn7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import MessageLiom from "../../MessageLiom"; // plasmic-import: xCdoITDvZVKn/component
import SendIcon from "../../SendIcon"; // plasmic-import: HSNJ0v5oD6xT/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfTest3.module.css"; // plasmic-import: YAFmtSuqOhn7/css

import Icon119Icon from "./icons/PlasmicIcon__Icon119"; // plasmic-import: JdBtCI53tCN5/icon
import Icon147Icon from "./icons/PlasmicIcon__Icon147"; // plasmic-import: yU3FWAJzfOsT/icon

createPlasmicElementProxy;

export type PlasmicSelfTest3__VariantMembers = {};
export type PlasmicSelfTest3__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfTest3__VariantsArgs;
export const PlasmicSelfTest3__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfTest3__ArgsType = {};
type ArgPropType = keyof PlasmicSelfTest3__ArgsType;
export const PlasmicSelfTest3__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfTest3__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  messageLiom?: Flex__<typeof MessageLiom>;
  section?: Flex__<"section">;
  bottomInput?: Flex__<"div">;
  sendIcon?: Flex__<typeof SendIcon>;
  textArea?: Flex__<typeof AntdTextArea>;
  embedHtml?: Flex__<typeof Embed>;
  favicon?: Flex__<typeof Embed>;
};

export interface DefaultSelfTest3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfTest3__RenderFunc(props: {
  variants: PlasmicSelfTest3__VariantsArgs;
  args: PlasmicSelfTest3__ArgsType;
  overrides: PlasmicSelfTest3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "testChat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (
                  $ctx.query.nextQuesion_id == "" ||
                  $ctx.query.nextQuesion_id == null
                ) {
                  return [];
                } else {
                  return JSON.parse(localStorage.getItem("test"));
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\u0633\u0644\u0627\u0645\ud83d\udc4b\n \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645\u060c \u067e\u0631\u06cc\u0648\u062f \u062a\u0631\u06a9\u0631 \u0648 \u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a \u0628\u0627\u0646\u0648\u0627\u0646 \u06a9\u0647 \u0628\u0635\u0648\u0631\u062a \u062a\u062e\u0635\u0635\u06cc \u0631\u0648\u06cc \u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc \u06a9\u0627\u0631 \u0645\u06cc\u06a9\u0646\u0645.",
                    from: "system"
                  },
                  {
                    text: "\u0634\u0645\u0627 \u0628\u0627 \u067e\u0627\u0633\u062e \u0628\u0647 30 \u0633\u0648\u0627\u0644 \u0645\u06cc\u062a\u0648\u0627\u0646\u06cc\u062f \u062f\u0631 \u06a9\u0645\u062a\u0631 \u0627\u0632 5 \u062f\u0642\u06cc\u0642\u0647 \u0639\u0644\u062a \u0646\u0627\u0645\u0646\u0638\u0645 \u0634\u062f\u0646 \u067e\u0631\u06cc\u0648\u062f \u062e\u0648\u062f \u0631\u0627 \u0628\u062f\u0627\u0646\u06cc\u062f \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0645\u0631\u0627\u062c\u0639\u0647 \u06a9\u0646\u06cc\u062f.",
                    from: "system"
                  },
                  {
                    text: "\u0633\u0644\u0627\u0645\u062a \u0648 \u0631\u0627\u062d\u062a\u06cc \u0634\u0645\u0627 \u062f\u063a\u062f\u063a\u0647 \u0627\u0635\u0644\u06cc \u0644\u06cc\u0648\u0645 \u0648 \u067e\u0630\u06cc\u0631\u0634 \u06f2\u06f4 \u0627\u0633\u062a\u2764\ufe0f\ud83e\udd1d\ud83c\udffb.",
                    from: "system"
                  },
                  {
                    text: "\u0622\u0645\u0627\u062f\u0647 \u0627\u06cc \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645\u061f",
                    question: { lock: 0 },
                    from: "system",
                    btnText:
                      "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",
                    options: [
                      {
                        id: 1,
                        text: "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645"
                      }
                    ]
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("user_id");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "ferst",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.nextQuesion_id == null ||
                $ctx.query.nextQuesion_id == ""
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextQuesionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.testChat
                  .slice()
                  .reverse()
                  .find(item => item.question);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.session_id == "" ||
                $ctx.query.session_id == null
                ? 0
                : parseInt($ctx.query.session_id);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lock",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadinkBotten",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "totalTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 35
      },
      {
        path: "retestTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.nextQuesion_id == "" ||
                $ctx.query.nextQuesion_id == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "edit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.status == "" || $ctx.query.status == null
                ? ""
                : $ctx.query.status;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "buy",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showgreen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "authCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "data",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "infoTest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "a0becceb-8ca9-49c0-a9d3-7c192f85129c"
      },
      {
        path: "orginNotLook",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let urlOrigin =
                  $ctx.query.origin ||
                  new URLSearchParams(window.location.search).get("origin");
                return !(
                  urlOrigin == "pazireshBlog" ||
                  urlOrigin == "pazireshSearch" ||
                  urlOrigin == "liomSelfCare"
                );
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "free",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://tools.liom.app/self-test/?user_id=${$state.userId}&type=${$state.type}&app=${$ctx.query.app}&session_id=${$state.sessionId}&inApp=${$ctx.query.inApp}&origin=${$ctx.query.origin}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "sendIcon.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sendIcon.diable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicSelfTest3.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSelfTest3.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSelfTest3.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicSelfTest3.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicSelfTest3.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicSelfTest3.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicSelfTest3.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicSelfTest3.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__q3H8G, ``)}
            id={"messegeBox"}
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal__gOcQz)}
              direction={"up"}
              effect={"fade"}
              triggerOnce={true}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.testChat;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <MessageLiom
                    data-plasmic-name={"messageLiom"}
                    data-plasmic-override={overrides.messageLiom}
                    className={classNames("__wab_instance", sty.messageLiom)}
                    endMessege={(() => {
                      try {
                        return (
                          $state.testChat[currentIndex].from === "system" &&
                          ($state.testChat[currentIndex + 1]?.from !==
                            "system" ||
                            $state.testChat.length - 1 === currentIndex)
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    hint={(() => {
                      try {
                        return currentItem.tip;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    key={currentIndex}
                    liomAnswer={(() => {
                      try {
                        return currentItem.from == "user";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    loadingMessage={(() => {
                      try {
                        return currentItem.loading == true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    slot={
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const lastUserMessage =
                                $state.testChat
                                  .slice()
                                  .reverse()
                                  .find(item => item.from === "user") || false;
                              return (
                                lastUserMessage &&
                                lastUserMessage.id === currentItem.id &&
                                currentItem.text != "شروع کنیم" &&
                                currentItem.text != "ادامه گفتگو" &&
                                $state.retestTest == true
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__i7ZZr
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateEdit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["edit"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateEdit"] != null &&
                                typeof $steps["updateEdit"] === "object" &&
                                typeof $steps["updateEdit"].then === "function"
                              ) {
                                $steps["updateEdit"] = await $steps[
                                  "updateEdit"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          const reversedIndex = $state.testChat
                                            .slice()
                                            .reverse()
                                            .findIndex(item => item.question);
                                          if (reversedIndex !== -1) {
                                            const originalIndex =
                                              $state.testChat.length -
                                              1 -
                                              reversedIndex;
                                            const previousReversedIndex =
                                              $state.testChat
                                                .slice(0, originalIndex)
                                                .reverse()
                                                .findIndex(
                                                  item => item.question
                                                );
                                            if (previousReversedIndex !== -1) {
                                              const previousOriginalIndex =
                                                originalIndex -
                                                1 -
                                                previousReversedIndex;
                                              return $state.testChat.splice(
                                                previousOriginalIndex + 1
                                              );
                                            }
                                          }
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "PUT",
                                        "https://n8n.staas.ir/webhook/selfTestLogs",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              session_id: $state.sessionId,
                                              question_id:
                                                $state.testChat[
                                                  $state.testChat.length - 1
                                                ].question.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                          >
                            <Icon119Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__o8Twn
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return (() => {
                              const lastUserMessage =
                                $state.testChat
                                  .slice()
                                  .reverse()
                                  .find(
                                    item =>
                                      item.from === "system" && item.tip == true
                                  ) || false;
                              return (
                                lastUserMessage &&
                                lastUserMessage.id === currentItem.id &&
                                currentItem.text != "شروع کنیم" &&
                                currentItem.text != "ادامه گفتگو" &&
                                $state.retestTest == true
                              );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ejyo
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateEdit"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["edit"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateEdit"] != null &&
                                typeof $steps["updateEdit"] === "object" &&
                                typeof $steps["updateEdit"].then === "function"
                              ) {
                                $steps["updateEdit"] = await $steps[
                                  "updateEdit"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          const reversedIndex = $state.testChat
                                            .slice()
                                            .reverse()
                                            .findIndex(item => item.question);
                                          if (reversedIndex !== -1) {
                                            const originalIndex =
                                              $state.testChat.length -
                                              1 -
                                              reversedIndex;
                                            const previousReversedIndex =
                                              $state.testChat
                                                .slice(0, originalIndex)
                                                .reverse()
                                                .findIndex(
                                                  item => item.question
                                                );
                                            if (previousReversedIndex !== -1) {
                                              const previousOriginalIndex =
                                                originalIndex -
                                                1 -
                                                previousReversedIndex;
                                              return $state.testChat.splice(
                                                previousOriginalIndex + 1
                                              );
                                            }
                                          }
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateTestChat2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "PUT",
                                        "https://n8n.staas.ir/webhook/selfTestLogs",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              session_id: $state.sessionId,
                                              question_id:
                                                $state.testChat[
                                                  $state.testChat.length - 1
                                                ].question.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat2"] != null &&
                                typeof $steps["updateTestChat2"] === "object" &&
                                typeof $steps["updateTestChat2"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat2"] = await $steps[
                                  "updateTestChat2"
                                ];
                              }
                            }}
                          >
                            <Icon119Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lIgvb
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cXWyX
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return "ویرایش پاسخ";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                      </React.Fragment>
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xuGb,
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "text-box "
                          : undefined
                      )}
                      style={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? {
                              display: "inline-block",
                              width: "auto",
                              "overflow-wrap": "break-word"
                            }
                          : undefined
                      }
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Lorem ipsum dolor sit amet,";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </MessageLiom>
                );
              })}
            </Reveal>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__ogV8W, ``)}
            id={"selectBox"}
          >
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
              style={(() => {
                try {
                  return {
                    position: $state.testChat?.length == 0 ? "unset" : "fixed",
                    left: 0,
                    right: 0,
                    bottom: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {(() => {
                try {
                  return $state.testChat?.length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wIlWq)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__emle6)}
                  >
                    <Icon147Icon
                      className={classNames(projectcss.all, sty.svg__nLlyh)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5H9Bp
                      )}
                    >
                      {
                        "\u0633\u0644\u0627\u0645! \u0645\u0646 \u062f\u0633\u062a\u06cc\u0627\u0631 \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645."
                      }
                    </div>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___40HTe
                    )}
                  >
                    {
                      "\u0686\u06af\u0648\u0646\u0647 \u0645\u06cc \u062a\u0648\u0627\u0646\u0645 \u0628\u0647 \u0634\u0645\u0627 \u06a9\u0645\u06a9 \u06a9\u0646\u0645\u061f"
                    }
                  </div>
                </Stack__>
              ) : null}
              <div
                className={classNames(projectcss.all, sty.freeBox__bfXx7, ``)}
                id={"selectBox"}
              >
                <Reveal
                  big={true}
                  className={classNames("__wab_instance", sty.reveal___90VRg)}
                  direction={"up"}
                  triggerOnce={true}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"bottomInput"}
                    data-plasmic-override={overrides.bottomInput}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.bottomInput)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lrTqz)}
                    >
                      <SendIcon
                        data-plasmic-name={"sendIcon"}
                        data-plasmic-override={overrides.sendIcon}
                        className={classNames("__wab_instance", sty.sendIcon)}
                        diable={generateStateValueProp($state, [
                          "sendIcon",
                          "diable"
                        ])}
                        disable={(() => {
                          try {
                            return $state.textArea.value == "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "disable";
                            }
                            throw e;
                          }
                        })()}
                        load={generateStateValueProp($state, [
                          "sendIcon",
                          "load"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] =
                            $state.textArea.value != ""
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return $state.testChat.push({
                                        text: $state.textArea.value,
                                        from: "user"
                                      });
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["updateTextAreaValue"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["textArea", "value"]
                                  },
                                  operation: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, undefined);
                                  return undefined;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTextAreaValue"] != null &&
                            typeof $steps["updateTextAreaValue"] === "object" &&
                            typeof $steps["updateTextAreaValue"].then ===
                              "function"
                          ) {
                            $steps["updateTextAreaValue"] = await $steps[
                              "updateTextAreaValue"
                            ];
                          }
                        }}
                        onDiableChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "sendIcon",
                            "diable"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "sendIcon",
                            "load"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      />

                      {(() => {
                        const child$Props = {
                          autoSize: true,
                          className: classNames("__wab_instance", sty.textArea),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["textArea", "value"],
                              AntdTextArea_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u067e\u06cc\u0627\u0645 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...",
                          value: generateStateValueProp($state, [
                            "textArea",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "textArea.value"
                            }
                          ],
                          [],
                          AntdTextArea_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdTextArea
                            data-plasmic-name={"textArea"}
                            data-plasmic-override={overrides.textArea}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </Stack__>
                </Reveal>
              </div>
            </section>
          </div>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<!-- Hotjar Tracking Code for tools.liom.app -->\r\n<script>\r\n    (function(h,o,t,j,a,r){\r\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\r\n        h._hjSettings={hjid:5253188,hjsv:6};\r\n        a=o.getElementsByTagName('head')[0];\r\n        r=o.createElement('script');r.async=1;\r\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\r\n        a.appendChild(r);\r\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\r\n</script>"
            }
          />

          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n<script src=\"https://developer.eitaa.com/eitaa-web-app.js\">\r\n</script>\r\n<script>\r\n  window.Eitaa.WebApp.ready();\r\n  window.Eitaa.WebApp.expand();\r\n  window.Eitaa.WebApp.isClosingConfirmationEnabled = true;\r\n</script>\r\n"
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "messageLiom",
    "section",
    "bottomInput",
    "sendIcon",
    "textArea",
    "embedHtml",
    "favicon"
  ],
  sideEffect: ["sideEffect"],
  messageLiom: ["messageLiom"],
  section: ["section", "bottomInput", "sendIcon", "textArea"],
  bottomInput: ["bottomInput", "sendIcon", "textArea"],
  sendIcon: ["sendIcon"],
  textArea: ["textArea"],
  embedHtml: ["embedHtml"],
  favicon: ["favicon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  messageLiom: typeof MessageLiom;
  section: "section";
  bottomInput: "div";
  sendIcon: typeof SendIcon;
  textArea: typeof AntdTextArea;
  embedHtml: typeof Embed;
  favicon: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfTest3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfTest3__VariantsArgs;
    args?: PlasmicSelfTest3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfTest3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfTest3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfTest3__ArgProps,
          internalVariantPropNames: PlasmicSelfTest3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfTest3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfTest3";
  } else {
    func.displayName = `PlasmicSelfTest3.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfTest3 = Object.assign(
  // Top-level PlasmicSelfTest3 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    messageLiom: makeNodeComponent("messageLiom"),
    section: makeNodeComponent("section"),
    bottomInput: makeNodeComponent("bottomInput"),
    sendIcon: makeNodeComponent("sendIcon"),
    textArea: makeNodeComponent("textArea"),
    embedHtml: makeNodeComponent("embedHtml"),
    favicon: makeNodeComponent("favicon"),

    // Metadata about props expected for PlasmicSelfTest3
    internalVariantProps: PlasmicSelfTest3__VariantProps,
    internalArgProps: PlasmicSelfTest3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | دستیار سلامت",
      description:
        "از دلایل عقب جلو شدن پریود خود،  در کمتر از چند دقیقه و بدون انتظار برای پزشک آگاه شوید",
      ogImageSrc:
        "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",
      canonical: ""
    }
  }
);

export default PlasmicSelfTest3;
/* prettier-ignore-end */
