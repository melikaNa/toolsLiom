/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: GZp0kN_ckwXR

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: aEno43N2WkPr/component
import { Textarea } from "@/fragment/components/textarea"; // plasmic-import: XUxm6L64GVQD/codeComponent
import { Select } from "@/fragment/components/select"; // plasmic-import: P0EOGSZ4bQLZ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicAppAndEditItem.module.css"; // plasmic-import: GZp0kN_ckwXR/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: HUASOsr4ah0C/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon

createPlasmicElementProxy;

export type PlasmicAppAndEditItem__VariantMembers = {
  type: "textarea" | "select";
};
export type PlasmicAppAndEditItem__VariantsArgs = {
  type?: SingleChoiceArg<"textarea" | "select">;
};
type VariantPropType = keyof PlasmicAppAndEditItem__VariantsArgs;
export const PlasmicAppAndEditItem__VariantProps = new Array<VariantPropType>(
  "type"
);

export type PlasmicAppAndEditItem__ArgsType = { currentItem?: any };
type ArgPropType = keyof PlasmicAppAndEditItem__ArgsType;
export const PlasmicAppAndEditItem__ArgProps = new Array<ArgPropType>(
  "currentItem"
);

export type PlasmicAppAndEditItem__OverridesType = {
  root?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  textarea?: Flex__<typeof Textarea>;
  select?: Flex__<typeof Select>;
};

export interface DefaultAppAndEditItemProps {
  currentItem?: any;
  type?: SingleChoiceArg<"textarea" | "select">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAppAndEditItem__RenderFunc(props: {
  variants: PlasmicAppAndEditItem__VariantsArgs;
  args: PlasmicAppAndEditItem__ArgsType;
  overrides: PlasmicAppAndEditItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        {
          [sty.roottype_select]: hasVariant($state, "type", "select"),
          [sty.roottype_textarea]: hasVariant($state, "type", "textarea")
        }
      )}
    >
      <TextInput
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput}
        className={classNames("__wab_instance", sty.textInput, {
          [sty.textInputtype_select]: hasVariant($state, "type", "select"),
          [sty.textInputtype_textarea]: hasVariant($state, "type", "textarea")
        })}
        color={"gray"}
        onChange={async (...eventArgs: any) => {
          ((...eventArgs) => {
            generateStateOnChangeProp($state, ["textInput", "value"])(
              (e => e.target?.value).apply(null, eventArgs)
            );
          }).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        placeholder={(() => {
          try {
            return $props.currentItem.placeholder;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        size={"longh"}
        value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___3Oura
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.currentItem.label;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </TextInput>
      <div
        className={classNames(projectcss.all, sty.freeBox__slpZ3, {
          [sty.freeBoxtype_select__slpZ33PzTa]: hasVariant(
            $state,
            "type",
            "select"
          ),
          [sty.freeBoxtype_textarea__slpZ34UbQb]: hasVariant(
            $state,
            "type",
            "textarea"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__q5RZ)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0UrJk,
              {
                [sty.texttype_select___0UrJk3PzTa]: hasVariant(
                  $state,
                  "type",
                  "select"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <Textarea
          data-plasmic-name={"textarea"}
          data-plasmic-override={overrides.textarea}
          className={classNames("__wab_instance", sty.textarea, {
            [sty.textareatype_textarea]: hasVariant($state, "type", "textarea")
          })}
          disabled={false}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["textarea", "value"]).apply(
              null,
              eventArgs
            );
          }}
          placeholder={(() => {
            try {
              return $props.currentItem.placeholder;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          value={generateStateValueProp($state, ["textarea", "value"])}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__tSjvj, {
          [sty.freeBoxtype_select__tSjvj3PzTa]: hasVariant(
            $state,
            "type",
            "select"
          ),
          [sty.freeBoxtype_textarea__tSjvj4UbQb]: hasVariant(
            $state,
            "type",
            "textarea"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__z7As3, {
            [sty.freeBoxtype_select__z7As33PzTa]: hasVariant(
              $state,
              "type",
              "select"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5CI4,
              {
                [sty.texttype_select___5CI43PzTa]: hasVariant(
                  $state,
                  "type",
                  "select"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <Select
          data-plasmic-name={"select"}
          data-plasmic-override={overrides.select}
          onChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["select", "value"]).apply(
              null,
              eventArgs
            );
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["select", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["select", "open"])}
          options={
            hasVariant($state, "type", "select")
              ? (() => {
                  try {
                    return $props.currentItem.options;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : undefined
          }
          placeholder={
            hasVariant($state, "type", "select")
              ? (() => {
                  try {
                    return $props.currentItem.placeholder;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : undefined
          }
          triggerClassName={classNames("__wab_instance", sty.select, {
            [sty.selecttype_select]: hasVariant($state, "type", "select")
          })}
          value={generateStateValueProp($state, ["select", "value"])}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textarea", "select"],
  textInput: ["textInput"],
  textarea: ["textarea"],
  select: ["select"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: typeof TextInput;
  textarea: typeof Textarea;
  select: typeof Select;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAppAndEditItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAppAndEditItem__VariantsArgs;
    args?: PlasmicAppAndEditItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAppAndEditItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAppAndEditItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppAndEditItem__ArgProps,
          internalVariantPropNames: PlasmicAppAndEditItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppAndEditItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAppAndEditItem";
  } else {
    func.displayName = `PlasmicAppAndEditItem.${nodeName}`;
  }
  return func;
}

export const PlasmicAppAndEditItem = Object.assign(
  // Top-level PlasmicAppAndEditItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    textarea: makeNodeComponent("textarea"),
    select: makeNodeComponent("select"),

    // Metadata about props expected for PlasmicAppAndEditItem
    internalVariantProps: PlasmicAppAndEditItem__VariantProps,
    internalArgProps: PlasmicAppAndEditItem__ArgProps
  }
);

export default PlasmicAppAndEditItem;
/* prettier-ignore-end */
