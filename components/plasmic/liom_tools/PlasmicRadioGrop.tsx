/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: oaU2G97TOKr2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicRadioGrop.module.css"; // plasmic-import: oaU2G97TOKr2/css

createPlasmicElementProxy;

export type PlasmicRadioGrop__VariantMembers = {
  selected: "selected";
  selectedLine: "selectedLine";
  disable: "disable";
  color: "light";
  style2: "line";
};
export type PlasmicRadioGrop__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  selectedLine?: SingleBooleanChoiceArg<"selectedLine">;
  disable?: SingleBooleanChoiceArg<"disable">;
  color?: SingleChoiceArg<"light">;
  style2?: SingleChoiceArg<"line">;
};
type VariantPropType = keyof PlasmicRadioGrop__VariantsArgs;
export const PlasmicRadioGrop__VariantProps = new Array<VariantPropType>(
  "selected",
  "selectedLine",
  "disable",
  "color",
  "style2"
);

export type PlasmicRadioGrop__ArgsType = {
  onClick?: (event: any) => void;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicRadioGrop__ArgsType;
export const PlasmicRadioGrop__ArgProps = new Array<ArgPropType>(
  "onClick",
  "children"
);

export type PlasmicRadioGrop__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultRadioGropProps {
  onClick?: (event: any) => void;
  children?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  selectedLine?: SingleBooleanChoiceArg<"selectedLine">;
  disable?: SingleBooleanChoiceArg<"disable">;
  color?: SingleChoiceArg<"light">;
  style2?: SingleChoiceArg<"line">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRadioGrop__RenderFunc(props: {
  variants: PlasmicRadioGrop__VariantsArgs;
  args: PlasmicRadioGrop__ArgsType;
  overrides: PlasmicRadioGrop__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      },
      {
        path: "selectedLine",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selectedLine
      },
      {
        path: "disable",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.disable
      },
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "style2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.style2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcolor_light]: hasVariant($state, "color", "light"),
          [sty.rootcolor_light_selected]:
            hasVariant($state, "color", "light") &&
            hasVariant($state, "selected", "selected"),
          [sty.rootdisable]: hasVariant($state, "disable", "disable"),
          [sty.rootselectedLine]: hasVariant(
            $state,
            "selectedLine",
            "selectedLine"
          ),
          [sty.rootselected]: hasVariant($state, "selected", "selected"),
          [sty.rootstyle2_line]: hasVariant($state, "style2", "line")
        }
      )}
      onClick={args.onClick}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxselected]: hasVariant($state, "selected", "selected")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencolor_light_selected]:
              hasVariant($state, "color", "light") &&
              hasVariant($state, "selected", "selected"),
            [sty.slotTargetChildrenselected]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRadioGrop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRadioGrop__VariantsArgs;
    args?: PlasmicRadioGrop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRadioGrop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRadioGrop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRadioGrop__ArgProps,
          internalVariantPropNames: PlasmicRadioGrop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRadioGrop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioGrop";
  } else {
    func.displayName = `PlasmicRadioGrop.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioGrop = Object.assign(
  // Top-level PlasmicRadioGrop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicRadioGrop
    internalVariantProps: PlasmicRadioGrop__VariantProps,
    internalArgProps: PlasmicRadioGrop__ArgProps
  }
);

export default PlasmicRadioGrop;
/* prettier-ignore-end */
