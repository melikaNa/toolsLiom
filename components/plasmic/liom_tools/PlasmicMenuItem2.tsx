/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: c1iZWmLE5b0C

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MenuIcon from "../../MenuIcon"; // plasmic-import: 3ZUDI6Br_xQP/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicMenuItem2.module.css"; // plasmic-import: c1iZWmLE5b0C/css

createPlasmicElementProxy;

export type PlasmicMenuItem2__VariantMembers = {
  select: "select";
};
export type PlasmicMenuItem2__VariantsArgs = {
  select?: SingleBooleanChoiceArg<"select">;
};
type VariantPropType = keyof PlasmicMenuItem2__VariantsArgs;
export const PlasmicMenuItem2__VariantProps = new Array<VariantPropType>(
  "select"
);

export type PlasmicMenuItem2__ArgsType = {
  text?: string;
  icon?: string;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicMenuItem2__ArgsType;
export const PlasmicMenuItem2__ArgProps = new Array<ArgPropType>(
  "text",
  "icon",
  "onClick"
);

export type PlasmicMenuItem2__OverridesType = {
  frame2?: Flex__<"div">;
  vuesaxLinearStickynote?: Flex__<"div">;
  vuesaxLinearStickynote2?: Flex__<"div">;
  menuIcon?: Flex__<typeof MenuIcon>;
  text?: Flex__<"div">;
};

export interface DefaultMenuItem2Props {
  text?: string;
  icon?: string;
  onClick?: (event: any) => void;
  select?: SingleBooleanChoiceArg<"select">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuItem2__RenderFunc(props: {
  variants: PlasmicMenuItem2__VariantsArgs;
  args: PlasmicMenuItem2__ArgsType;
  overrides: PlasmicMenuItem2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.select
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"frame2"}
      data-plasmic-override={overrides.frame2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.frame2,
        { [sty.frame2select]: hasVariant($state, "select", "select") }
      )}
      onClick={args.onClick}
    >
      <div
        data-plasmic-name={"vuesaxLinearStickynote"}
        data-plasmic-override={overrides.vuesaxLinearStickynote}
        className={classNames(projectcss.all, sty.vuesaxLinearStickynote)}
      >
        <div
          data-plasmic-name={"vuesaxLinearStickynote2"}
          data-plasmic-override={overrides.vuesaxLinearStickynote2}
          className={classNames(projectcss.all, sty.vuesaxLinearStickynote2)}
        >
          <MenuIcon
            data-plasmic-name={"menuIcon"}
            data-plasmic-override={overrides.menuIcon}
            className={classNames("__wab_instance", sty.menuIcon, {
              [sty.menuIconselect]: hasVariant($state, "select", "select")
            })}
            icons={(() => {
              try {
                return $props.icon;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()}
            select={hasVariant($state, "select", "select") ? true : undefined}
          />
        </div>
      </div>
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textselect]: hasVariant($state, "select", "select")
        })}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.text;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Journal";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame2: [
    "frame2",
    "vuesaxLinearStickynote",
    "vuesaxLinearStickynote2",
    "menuIcon",
    "text"
  ],
  vuesaxLinearStickynote: [
    "vuesaxLinearStickynote",
    "vuesaxLinearStickynote2",
    "menuIcon"
  ],
  vuesaxLinearStickynote2: ["vuesaxLinearStickynote2", "menuIcon"],
  menuIcon: ["menuIcon"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame2: "div";
  vuesaxLinearStickynote: "div";
  vuesaxLinearStickynote2: "div";
  menuIcon: typeof MenuIcon;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuItem2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuItem2__VariantsArgs;
    args?: PlasmicMenuItem2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMenuItem2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMenuItem2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuItem2__ArgProps,
          internalVariantPropNames: PlasmicMenuItem2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuItem2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame2") {
    func.displayName = "PlasmicMenuItem2";
  } else {
    func.displayName = `PlasmicMenuItem2.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuItem2 = Object.assign(
  // Top-level PlasmicMenuItem2 renders the root element
  makeNodeComponent("frame2"),
  {
    // Helper components rendering sub-elements
    vuesaxLinearStickynote: makeNodeComponent("vuesaxLinearStickynote"),
    vuesaxLinearStickynote2: makeNodeComponent("vuesaxLinearStickynote2"),
    menuIcon: makeNodeComponent("menuIcon"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicMenuItem2
    internalVariantProps: PlasmicMenuItem2__VariantProps,
    internalArgProps: PlasmicMenuItem2__ArgProps
  }
);

export default PlasmicMenuItem2;
/* prettier-ignore-end */
