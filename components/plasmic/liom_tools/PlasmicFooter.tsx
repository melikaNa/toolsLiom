/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: AFZenyV8x-fk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ToggleButton from "../../ToggleButton"; // plasmic-import: hJkBKlfOka10/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from ""; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from ""; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: AFZenyV8x-fk/css

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {
  state: "hasCompleted" | "singularLeft" | "empty";
};
export type PlasmicFooter__VariantsArgs = {
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>("state");

export type PlasmicFooter__ArgsType = {
  tasks?: any;
  onShownTypeChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>(
  "tasks",
  "onShownTypeChange"
);

export type PlasmicFooter__OverridesType = {
  footerContainer?: Flex__<"div">;
};

export interface DefaultFooterProps {
  tasks?: any;
  onShownTypeChange?: (val: string) => void;
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state
      },
      {
        path: "shownType",
        type: "readonly",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "all",

        onChangeProp: "onShownTypeChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"footerContainer"}
      data-plasmic-override={overrides.footerContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.footerContainer,
        {
          [sty.footerContainerstate_hasCompleted]: hasVariant(
            $state,
            "state",
            "hasCompleted"
          )
        }
      )}
    >
      {(
        hasVariant($state, "state", "empty")
          ? false
          : hasVariant($state, "state", "singularLeft")
          ? true
          : hasVariant($state, "state", "hasCompleted")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__x7ELb, {
            [sty.freeBoxstate_empty__x7ELbaTzdQ]: hasVariant(
              $state,
              "state",
              "empty"
            ),
            [sty.freeBoxstate_hasCompleted__x7ELbNHqCq]: hasVariant(
              $state,
              "state",
              "hasCompleted"
            ),
            [sty.freeBoxstate_singularLeft__x7ELbpRxWd]: hasVariant(
              $state,
              "state",
              "singularLeft"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gty5K,
              {
                [sty.textstate_empty__gty5KaTzdQ]: hasVariant(
                  $state,
                  "state",
                  "empty"
                ),
                [sty.textstate_hasCompleted__gty5KnHqCq]: hasVariant(
                  $state,
                  "state",
                  "hasCompleted"
                ),
                [sty.textstate_singularLeft__gty5KpRxWd]: hasVariant(
                  $state,
                  "state",
                  "singularLeft"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.tasks.length === 1
                    ? "1 item left"
                    : `${$props.tasks.length} items left`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "N items left";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__grqx3)}>
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__gBq8V)}
          onClick={async () => {
            const $steps = {};

            $steps["updateShownType"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["shownType"]
                    },
                    operation: 0,
                    value: "all"
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateShownType"] != null &&
              typeof $steps["updateShownType"] === "object" &&
              typeof $steps["updateShownType"].then === "function"
            ) {
              $steps["updateShownType"] = await $steps["updateShownType"];
            }
          }}
          state={$state.shownType === "all" ? "selected" : undefined}
        >
          {"All"}
        </ToggleButton>
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__wsXl0)}
          onClick={async () => {
            const $steps = {};

            $steps["updateShownType"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["shownType"]
                    },
                    operation: 0,
                    value: "completed"
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateShownType"] != null &&
              typeof $steps["updateShownType"] === "object" &&
              typeof $steps["updateShownType"].then === "function"
            ) {
              $steps["updateShownType"] = await $steps["updateShownType"];
            }
          }}
          state={$state.shownType === "completed" ? "selected" : undefined}
        >
          {"Completed"}
        </ToggleButton>
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__zj8En, {
            [sty.toggleButtonstate_hasCompleted__zj8EnnHqCq]: hasVariant(
              $state,
              "state",
              "hasCompleted"
            )
          })}
          onClick={async () => {
            const $steps = {};

            $steps["updateShownType"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["shownType"]
                    },
                    operation: 0,
                    value: "active"
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateShownType"] != null &&
              typeof $steps["updateShownType"] === "object" &&
              typeof $steps["updateShownType"].then === "function"
            ) {
              $steps["updateShownType"] = await $steps["updateShownType"];
            }
          }}
          state={$state.shownType === "active" ? "selected" : undefined}
        >
          {"Active"}
        </ToggleButton>
      </div>
      {(hasVariant($state, "state", "hasCompleted") ? true : false) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rUYnQ,
            {
              [sty.textstate_hasCompleted__rUYnQnHqCq]: hasVariant(
                $state,
                "state",
                "hasCompleted"
              )
            }
          )}
        >
          {"Clear completed"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footerContainer: ["footerContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footerContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footerContainer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footerContainer"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
