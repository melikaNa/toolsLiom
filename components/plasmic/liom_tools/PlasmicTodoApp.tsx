/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 0tl2vrm8DsM8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import ضصث from "../../\u0636\u0635\u062B"; // plasmic-import: Wp2hMbrqceGU/component
import Task from "../../Task"; // plasmic-import: tjopq3d9TECK/component
import Footer from "../../Footer"; // plasmic-import: AFZenyV8x-fk/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicTodoApp.module.css"; // plasmic-import: 0tl2vrm8DsM8/css

createPlasmicElementProxy;

export type PlasmicTodoApp__VariantMembers = {
  state: "empty";
};
export type PlasmicTodoApp__VariantsArgs = {
  state?: SingleChoiceArg<"empty">;
};
type VariantPropType = keyof PlasmicTodoApp__VariantsArgs;
export const PlasmicTodoApp__VariantProps = new Array<VariantPropType>("state");

export type PlasmicTodoApp__ArgsType = {};
type ArgPropType = keyof PlasmicTodoApp__ArgsType;
export const PlasmicTodoApp__ArgProps = new Array<ArgPropType>();

export type PlasmicTodoApp__OverridesType = {
  root?: Flex__<"div">;
  appTitle?: Flex__<"div">;
  appBody?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  ضصیش?: Flex__<typeof ضصث>;
  tasksContainer?: Flex__<"div">;
  task?: Flex__<typeof Task>;
  footer?: Flex__<typeof Footer>;
  fakeStack?: Flex__<"div">;
};

export interface DefaultTodoAppProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTodoApp__RenderFunc(props: {
  variants: PlasmicTodoApp__VariantsArgs;
  args: PlasmicTodoApp__ArgsType;
  overrides: PlasmicTodoApp__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "state",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.state
      },
      {
        path: "footer.shownType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    tasks: usePlasmicDataOp(() => {
      return {
        sourceId: "wRV1ZvJALFdNnnYHscHeaX",
        opId: "10583641-5231-4675-aef4-6a062548a80a",
        userArgs: {},
        cacheKey: `plasmic.$.10583641-5231-4675-aef4-6a062548a80a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_hamdast_sdk,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootstate_empty]: hasVariant($state, "state", "empty")
            }
          )}
        >
          <div
            data-plasmic-name={"appTitle"}
            data-plasmic-override={overrides.appTitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.appTitle,
              {
                [sty.appTitleglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              }
            )}
          >
            {"-----------"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wsJnP)} />

          <div
            className={classNames(projectcss.all, sty.freeBox___5M5DD, {
              [sty.freeBoxglobal_theme_dark___5M5DDe9E9C]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div
              data-plasmic-name={"appBody"}
              data-plasmic-override={overrides.appBody}
              className={classNames(projectcss.all, sty.appBody, {
                [sty.appBodyglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            >
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link, {
                  [sty.linkstate_empty]: hasVariant($state, "state", "empty")
                })}
                component={Link}
                platform={"nextjs"}
              >
                <ضصث
                  data-plasmic-name={"\u0636\u0635\u06cc\u0634"}
                  data-plasmic-override={overrides.ضصیش}
                  className={classNames("__wab_instance", sty.ضصیش, {
                    [sty.ضصیشglobal_theme_dark]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    ),
                    [sty.ضصیشstate_empty]: hasVariant($state, "state", "empty")
                  })}
                  state={
                    hasVariant($state, "state", "empty") ? "empty" : undefined
                  }
                />
              </PlasmicLink__>
              {(hasVariant($state, "state", "empty") ? false : true) ? (
                <div
                  data-plasmic-name={"tasksContainer"}
                  data-plasmic-override={overrides.tasksContainer}
                  className={classNames(projectcss.all, sty.tasksContainer, {
                    [sty.tasksContainerstate_empty]: hasVariant(
                      $state,
                      "state",
                      "empty"
                    )
                  })}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.tasks.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Task
                        data-plasmic-name={"task"}
                        data-plasmic-override={overrides.task}
                        className={classNames("__wab_instance", sty.task, {
                          [sty.taskglobal_theme_dark]: hasVariant(
                            globalVariants,
                            "theme",
                            "dark"
                          ),
                          [sty.taskstate_empty]: hasVariant(
                            $state,
                            "state",
                            "empty"
                          )
                        })}
                        key={currentIndex}
                        task={(() => {
                          try {
                            return currentItem;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
              ) : null}
              {(hasVariant($state, "state", "empty") ? false : true) ? (
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer, {
                    [sty.footerstate_empty]: hasVariant(
                      $state,
                      "state",
                      "empty"
                    )
                  })}
                  onShownTypeChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "footer",
                      "shownType"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  state={
                    $queries.tasks?.data?.some(t => t.done)
                      ? "HasCompleted"
                      : undefined
                  }
                  tasks={(() => {
                    try {
                      return $queries.tasks.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </div>
            {(hasVariant($state, "state", "empty") ? false : true) ? (
              <div
                data-plasmic-name={"fakeStack"}
                data-plasmic-override={overrides.fakeStack}
                className={classNames(projectcss.all, sty.fakeStack, {
                  [sty.fakeStackstate_empty]: hasVariant(
                    $state,
                    "state",
                    "empty"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__ggPUt, {
                    [sty.freeBoxglobal_theme_dark__ggPUte9E9C]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__qqsjL, {
                    [sty.freeBoxglobal_theme_dark__qqsjLe9E9C]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                />
              </div>
            ) : null}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zvGx)} />

          <div className={classNames(projectcss.all, sty.freeBox___9Gu6C)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bo8Ul
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "\u0622\u06cc\u0627 \u0645\u0646 \u062f\u0686\u0627\u0631 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0647\u0633\u062a\u0645\u061f"
                : "--"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uNWb
              )}
            >
              {"\u0627\u0646\u062c\u0627\u0645 \u062a\u0633\u062a"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appTitle",
    "appBody",
    "link",
    "\u0636\u0635\u06cc\u0634",
    "tasksContainer",
    "task",
    "footer",
    "fakeStack"
  ],
  appTitle: ["appTitle"],
  appBody: [
    "appBody",
    "link",
    "\u0636\u0635\u06cc\u0634",
    "tasksContainer",
    "task",
    "footer"
  ],
  link: ["link", "\u0636\u0635\u06cc\u0634"],
  ضصیش: ["\u0636\u0635\u06cc\u0634"],
  tasksContainer: ["tasksContainer", "task"],
  task: ["task"],
  footer: ["footer"],
  fakeStack: ["fakeStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  appTitle: "div";
  appBody: "div";
  link: "a";
  ضصیش: typeof ضصث;
  tasksContainer: "div";
  task: typeof Task;
  footer: typeof Footer;
  fakeStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTodoApp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTodoApp__VariantsArgs;
    args?: PlasmicTodoApp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTodoApp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTodoApp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTodoApp__ArgProps,
          internalVariantPropNames: PlasmicTodoApp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTodoApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoApp";
  } else {
    func.displayName = `PlasmicTodoApp.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicTodoApp = Object.assign(
  // Top-level PlasmicTodoApp renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    appBody: makeNodeComponent("appBody"),
    link: makeNodeComponent("link"),
    ضصیش: makeNodeComponent("\u0636\u0635\u06cc\u0634"),
    tasksContainer: makeNodeComponent("tasksContainer"),
    task: makeNodeComponent("task"),
    footer: makeNodeComponent("footer"),
    fakeStack: makeNodeComponent("fakeStack"),

    // Metadata about props expected for PlasmicTodoApp
    internalVariantProps: PlasmicTodoApp__VariantProps,
    internalArgProps: PlasmicTodoApp__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTodoApp;
/* prettier-ignore-end */
