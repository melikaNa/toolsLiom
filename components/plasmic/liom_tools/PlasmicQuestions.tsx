/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: FWZ-50v74wL5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from ""; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicQuestions.module.css"; // plasmic-import: FWZ-50v74wL5/css

import AddIcon from "./icons/PlasmicIcon__Add"; // plasmic-import: BEaDFfeC-k7e/icon
import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: DKNPGeqS4vK8/icon
import Icon104Icon from "./icons/PlasmicIcon__Icon104"; // plasmic-import: kIvBdNtH0rBG/icon

createPlasmicElementProxy;

export type PlasmicQuestions__VariantMembers = {
  questions: "questions";
};
export type PlasmicQuestions__VariantsArgs = {
  questions?: SingleBooleanChoiceArg<"questions">;
};
type VariantPropType = keyof PlasmicQuestions__VariantsArgs;
export const PlasmicQuestions__VariantProps = new Array<VariantPropType>(
  "questions"
);

export type PlasmicQuestions__ArgsType = { tests?: any };
type ArgPropType = keyof PlasmicQuestions__ArgsType;
export const PlasmicQuestions__ArgProps = new Array<ArgPropType>("tests");

export type PlasmicQuestions__OverridesType = {
  root?: Flex__<"div">;
  empty1?: Flex__<"div">;
  frame21?: Flex__<"div">;
  vuesaxLinearAdd3?: Flex__<"div">;
  vuesaxLinearAdd4?: Flex__<"div">;
  figmaPaste?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  figmaPaste2?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
};

export interface DefaultQuestionsProps {
  tests?: any;
  questions?: SingleBooleanChoiceArg<"questions">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicQuestions__RenderFunc(props: {
  variants: PlasmicQuestions__VariantsArgs;
  args: PlasmicQuestions__ArgsType;
  overrides: PlasmicQuestions__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          tests: [
            {
              json: {
                id: 4,
                type: "advancedIrregular",
                type_fa:
                  "\u0628\u0631\u0631\u0633\u06cc \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 \u0642\u0627\u0639\u062f\u06af\u06cc \u0646\u0627\u0645\u0646\u0638\u0645"
              },
              pairedItem: { item: 0 }
            },
            {
              json: {
                id: 15,
                type: "IronDeficiency",
                type_fa: "\u0641\u0642\u0631 \u0622\u0647\u0646"
              },
              pairedItem: { item: 1 }
            },
            {
              json: {
                id: 16,
                type: "VaginalHealthCheck",
                type_fa:
                  "\u0628\u0631\u0631\u0633\u06cc \u0633\u0644\u0627\u0645\u062a \u0648\u0627\u0698\u0646"
              },
              pairedItem: { item: 2 }
            },
            {
              json: {
                id: 18,
                type: "advancedPregnancy",
                type_fa:
                  "\u0628\u0627\u0631\u062f\u0627\u0631\u06cc \u067e\u06cc\u0634\u0631\u0641\u062a\u0647"
              },
              pairedItem: { item: 3 }
            },
            {
              json: {
                id: 20,
                type: "advancedPcos",
                type_fa:
                  "\u0628\u0631\u0631\u0633\u06cc \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 \u062a\u0646\u0628\u0644\u06cc \u062a\u062e\u0645\u062f\u0627\u0646 (PCOS)"
              },
              pairedItem: { item: 4 }
            },
            {
              json: {
                id: 21,
                type: "thyroid",
                type_fa: "\u062a\u06cc\u0631\u0648\u0626\u06cc\u062f"
              },
              pairedItem: { item: 5 }
            },
            {
              json: {
                id: 23,
                type: "IDA",
                type_fa:
                  "\u06a9\u0645\u200c\u062e\u0648\u0646\u06cc \u0641\u0642\u0631 \u0622\u0647\u0646"
              },
              pairedItem: { item: 6 }
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "questions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.questions
      },
      {
        path: "currentTest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.root,
        { [sty.rootquestions]: hasVariant($state, "questions", "questions") }
      )}
    >
      {(() => {
        try {
          return $props.tests.length == 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__eSfSs)}>
          <div
            data-plasmic-name={"empty1"}
            data-plasmic-override={overrides.empty1}
            className={classNames(projectcss.all, sty.empty1)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__h1Ul
            )}
          >
            {
              "\u062a\u0633\u062a\u06cc \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9Pe4
            )}
          >
            {"Click Create to display the information"}
          </div>
          <div
            data-plasmic-name={"frame21"}
            data-plasmic-override={overrides.frame21}
            className={classNames(projectcss.all, sty.frame21)}
          >
            <div
              data-plasmic-name={"vuesaxLinearAdd3"}
              data-plasmic-override={overrides.vuesaxLinearAdd3}
              className={classNames(projectcss.all, sty.vuesaxLinearAdd3)}
            >
              <div
                data-plasmic-name={"vuesaxLinearAdd4"}
                data-plasmic-override={overrides.vuesaxLinearAdd4}
                className={classNames(projectcss.all, sty.vuesaxLinearAdd4)}
              >
                <AddIcon
                  className={classNames(projectcss.all, sty.svg__fmxO)}
                  role={"img"}
                />
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___32UEx
              )}
            >
              {"Create"}
            </div>
          </div>
        </div>
      ) : null}
      {(
        hasVariant($state, "questions", "questions")
          ? true
          : (() => {
              try {
                return $props.tests.length != 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <div
          data-plasmic-name={"figmaPaste"}
          data-plasmic-override={overrides.figmaPaste}
          className={classNames(projectcss.all, sty.figmaPaste, {
            [sty.figmaPastequestions]: hasVariant(
              $state,
              "questions",
              "questions"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qoMJh,
              {
                [sty.textquestions__qoMJhSfYlg]: hasVariant(
                  $state,
                  "questions",
                  "questions"
                )
              }
            )}
          >
            {"\u062a\u0633\u062a \u0647\u0627"}
          </div>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg___8Gyoz)}
            role={"img"}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__uzK, {
              [sty.freeBoxquestions__uzKSfYlg]: hasVariant(
                $state,
                "questions",
                "questions"
              )
            })}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.tests;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"frame22"}
                  data-plasmic-override={overrides.frame22}
                  className={classNames(projectcss.all, sty.frame22, {
                    [sty.frame22questions]: hasVariant(
                      $state,
                      "questions",
                      "questions"
                    )
                  })}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateQuestions"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "questions",
                            operation: 4,
                            value: "questions"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateQuestions"] != null &&
                      typeof $steps["updateQuestions"] === "object" &&
                      typeof $steps["updateQuestions"].then === "function"
                    ) {
                      $steps["updateQuestions"] = await $steps[
                        "updateQuestions"
                      ];
                    }

                    $steps["updateCurrentTest"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["currentTest"]
                            },
                            operation: 0,
                            value: currentItem.json
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCurrentTest"] != null &&
                      typeof $steps["updateCurrentTest"] === "object" &&
                      typeof $steps["updateCurrentTest"].then === "function"
                    ) {
                      $steps["updateCurrentTest"] = await $steps[
                        "updateCurrentTest"
                      ];
                    }
                  }}
                >
                  <div
                    data-plasmic-name={"frame23"}
                    data-plasmic-override={overrides.frame23}
                    className={classNames(projectcss.all, sty.frame23)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wAdda
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.json.type_fa;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Lorem ipsum";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__axX
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.json.type;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et ...";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nigHp)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3ZgB1
                      )}
                    >
                      {"\u0633\u0648\u0627\u0644\u0627\u062a"}
                    </div>
                    <Icon104Icon
                      className={classNames(projectcss.all, sty.svg__aMpue)}
                      role={"img"}
                    />
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ) : null}
      {(hasVariant($state, "questions", "questions") ? true : false) ? (
        <div
          data-plasmic-name={"figmaPaste2"}
          data-plasmic-override={overrides.figmaPaste2}
          className={classNames(projectcss.all, sty.figmaPaste2, {
            [sty.figmaPaste2questions]: hasVariant(
              $state,
              "questions",
              "questions"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wMuFs,
              {
                [sty.textquestions__wMuFsSfYlg]: hasVariant(
                  $state,
                  "questions",
                  "questions"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `سوالات ${$state.currentTest["type_fa"]}`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u062a\u0633\u062a \u0647\u0627";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Line3Icon
            className={classNames(projectcss.all, sty.svg__cBcSg)}
            role={"img"}
          />

          <div
            className={classNames(projectcss.all, sty.freeBox__oXfw9, {
              [sty.freeBoxquestions__oXfw9SfYlg]: hasVariant(
                $state,
                "questions",
                "questions"
              )
            })}
          />
        </div>
      ) : null}
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        body={(() => {
          try {
            return `سوالات ${$state.currentTest["type_fa"]}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.apiRequest)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mubTg
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__usXsz
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        shouldFetch={(() => {
          try {
            return $state.currentTest != {};
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={"https://n8n.staas.ir/webhook/docterPanel/questions"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "empty1",
    "frame21",
    "vuesaxLinearAdd3",
    "vuesaxLinearAdd4",
    "figmaPaste",
    "frame22",
    "frame23",
    "figmaPaste2",
    "apiRequest"
  ],
  empty1: ["empty1"],
  frame21: ["frame21", "vuesaxLinearAdd3", "vuesaxLinearAdd4"],
  vuesaxLinearAdd3: ["vuesaxLinearAdd3", "vuesaxLinearAdd4"],
  vuesaxLinearAdd4: ["vuesaxLinearAdd4"],
  figmaPaste: ["figmaPaste", "frame22", "frame23"],
  frame22: ["frame22", "frame23"],
  frame23: ["frame23"],
  figmaPaste2: ["figmaPaste2"],
  apiRequest: ["apiRequest"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  empty1: "div";
  frame21: "div";
  vuesaxLinearAdd3: "div";
  vuesaxLinearAdd4: "div";
  figmaPaste: "div";
  frame22: "div";
  frame23: "div";
  figmaPaste2: "div";
  apiRequest: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuestions__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuestions__VariantsArgs;
    args?: PlasmicQuestions__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuestions__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicQuestions__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicQuestions__ArgProps,
          internalVariantPropNames: PlasmicQuestions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicQuestions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestions";
  } else {
    func.displayName = `PlasmicQuestions.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestions = Object.assign(
  // Top-level PlasmicQuestions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    empty1: makeNodeComponent("empty1"),
    frame21: makeNodeComponent("frame21"),
    vuesaxLinearAdd3: makeNodeComponent("vuesaxLinearAdd3"),
    vuesaxLinearAdd4: makeNodeComponent("vuesaxLinearAdd4"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    figmaPaste2: makeNodeComponent("figmaPaste2"),
    apiRequest: makeNodeComponent("apiRequest"),

    // Metadata about props expected for PlasmicQuestions
    internalVariantProps: PlasmicQuestions__VariantProps,
    internalArgProps: PlasmicQuestions__ArgProps
  }
);

export default PlasmicQuestions;
/* prettier-ignore-end */
