/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: fpnVV5gYHPGq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import RadioGrop from "../../RadioGrop"; // plasmic-import: oaU2G97TOKr2/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsyg4Uf6WCaaLe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YG4uf6WCaaLe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicNewPage3.module.css"; // plasmic-import: fpnVV5gYHPGq/css

import Icon106Icon from "./icons/PlasmicIcon__Icon106"; // plasmic-import: otphAWl8l3Dm/icon
import Icon215Icon from "./icons/PlasmicIcon__Icon215"; // plasmic-import: v7PgNy8ZeH6X/icon

createPlasmicElementProxy;

export type PlasmicNewPage3__VariantMembers = {};
export type PlasmicNewPage3__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage3__VariantsArgs;
export const PlasmicNewPage3__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage3__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage3__ArgsType;
export const PlasmicNewPage3__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage3__OverridesType = {
  root?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultNewPage3Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage3__RenderFunc(props: {
  variants: PlasmicNewPage3__VariantsArgs;
  args: PlasmicNewPage3__ArgsType;
  overrides: PlasmicNewPage3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "page",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Result"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyg4Uf6WCaaLe()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__kDlnc)}>
            <RadioGrop
              className={classNames("__wab_instance", sty.radioGrop__dIk3N)}
              color={"light"}
              onClick={async event => {
                const $steps = {};

                $steps["updatePage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["page"]
                        },
                        operation: 0,
                        value: "Result"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePage"] != null &&
                  typeof $steps["updatePage"] === "object" &&
                  typeof $steps["updatePage"].then === "function"
                ) {
                  $steps["updatePage"] = await $steps["updatePage"];
                }
              }}
              selected={(() => {
                try {
                  return $state.page == "Result";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              style2={"line"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Wtf
                )}
              >
                {"\u0646\u062a\u06cc\u062c\u0647 \u0647\u0627"}
              </div>
            </RadioGrop>
            <RadioGrop
              className={classNames("__wab_instance", sty.radioGrop__naDzw)}
              color={"light"}
              onClick={async event => {
                const $steps = {};

                $steps["updatePage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["page"]
                        },
                        operation: 0,
                        value: "prescription"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePage"] != null &&
                  typeof $steps["updatePage"] === "object" &&
                  typeof $steps["updatePage"].then === "function"
                ) {
                  $steps["updatePage"] = await $steps["updatePage"];
                }
              }}
              selected={(() => {
                try {
                  return $state.page == "prescription";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "selected";
                  }
                  throw e;
                }
              })()}
              style2={"line"}
            >
              <Icon106Icon
                className={classNames(projectcss.all, sty.svg__nccBx)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1InX
                )}
              >
                {"\u0646\u0633\u062e\u0647 \u0647\u0627\u06cc \u0645\u0646"}
              </div>
            </RadioGrop>
          </div>
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            className={classNames("__wab_instance", sty.reveal)}
            effect={"fade"}
            triggerOnce={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox__gUd2C)}>
              <div className={classNames(projectcss.all, sty.freeBox__qzxOx)}>
                <div className={classNames(projectcss.all, sty.freeBox__eu7A)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gu1GP
                    )}
                  >
                    {
                      "\u0639\u0646\u0648\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nlsIe
                    )}
                  >
                    {
                      "\u0645\u062f\u062a \u0632\u0645\u0627\u0646 \u0628\u0627\u0642\u06cc\u0645\u0627\u0646\u062f\u0647"
                    }
                  </div>
                </div>
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={"<hr></hr>"}
                />

                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  []
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7P0Ar
                      )}
                      key={currentIndex}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q2VIi
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0639\u0646\u0648\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aDkjN
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                if (currentItem.always) {
                                  return "فعال برای همیشه";
                                } else {
                                  var t = currentItem.time;
                                  const targetDate = new Date(
                                    t.year,
                                    t.month,
                                    t.day,
                                    t.hour,
                                    t.minute,
                                    t.second
                                  );
                                  const currentDate = new Date();
                                  const totalHoursRemaining =
                                    $$.dateFns.differenceInHours(
                                      targetDate,
                                      currentDate
                                    );
                                  const daysRemaining = Math.floor(
                                    totalHoursRemaining / 24
                                  );
                                  const hoursRemaining =
                                    totalHoursRemaining % 24;
                                  return `${daysRemaining} روز ${hoursRemaining} ساعت`;
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u062f\u062a \u0632\u0645\u0627\u0646 \u0628\u0627\u0642\u06cc\u0645\u0627\u0646\u062f\u0647";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  );
                })}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___4If02)}>
                <Icon215Icon
                  className={classNames(projectcss.all, sty.svg__ikYih)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jn8Nt
                  )}
                >
                  {
                    "\u0627\u0641\u0632\u0648\u062f\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                  }
                </div>
              </div>
            </div>
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "reveal", "embedHtml"],
  reveal: ["reveal", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reveal: typeof Reveal;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage3__VariantsArgs;
    args?: PlasmicNewPage3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage3__ArgProps,
          internalVariantPropNames: PlasmicNewPage3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage3";
  } else {
    func.displayName = `PlasmicNewPage3.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewPage3 = Object.assign(
  // Top-level PlasmicNewPage3 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicNewPage3
    internalVariantProps: PlasmicNewPage3__VariantProps,
    internalArgProps: PlasmicNewPage3__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage3;
/* prettier-ignore-end */
