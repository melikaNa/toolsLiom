/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: gxk8D7G3VD04

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicDoctorInfo.module.css"; // plasmic-import: gxk8D7G3VD04/css

import ArrowDownIcon from "./icons/PlasmicIcon__ArrowDown"; // plasmic-import: 54npbOr9loMt/icon

createPlasmicElementProxy;

export type PlasmicDoctorInfo__VariantMembers = {};
export type PlasmicDoctorInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicDoctorInfo__VariantsArgs;
export const PlasmicDoctorInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicDoctorInfo__ArgsType = { doctorInfo?: any };
type ArgPropType = keyof PlasmicDoctorInfo__ArgsType;
export const PlasmicDoctorInfo__ArgProps = new Array<ArgPropType>("doctorInfo");

export type PlasmicDoctorInfo__OverridesType = {
  frame18?: Flex__<"div">;
  frame17?: Flex__<"div">;
  frame16?: Flex__<"div">;
  frame15?: Flex__<"div">;
  vuesaxBoldArrowDown?: Flex__<"div">;
  vuesaxBoldArrowDown2?: Flex__<"div">;
  svg?: Flex__<"svg">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultDoctorInfoProps {
  doctorInfo?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDoctorInfo__RenderFunc(props: {
  variants: PlasmicDoctorInfo__VariantsArgs;
  args: PlasmicDoctorInfo__ArgsType;
  overrides: PlasmicDoctorInfo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          doctorInfo: {
            id: 2,
            name: "\u062f\u06a9\u062a\u0631 \u062d\u0633\u06cc\u0646 \u0645\u0646\u0635\u0648\u0631\u06a9\u06cc\u0627\u0626\u06cc",
            image: "https://liom.storage.c2.liara.space/dr_1.jpeg",
            userName: "dhmkkmhdbb",
            expert: "\u067e\u0632\u0634\u06a9 \u0639\u0645\u0648\u0645\u06cc"
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"frame18"}
      data-plasmic-override={overrides.frame18}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.frame18
      )}
    >
      <div
        data-plasmic-name={"frame17"}
        data-plasmic-override={overrides.frame17}
        className={classNames(projectcss.all, sty.frame17)}
      >
        <div
          data-plasmic-name={"frame16"}
          data-plasmic-override={overrides.frame16}
          className={classNames(projectcss.all, sty.frame16)}
        >
          <div
            data-plasmic-name={"frame15"}
            data-plasmic-override={overrides.frame15}
            className={classNames(projectcss.all, sty.frame15)}
          >
            <div
              data-plasmic-name={"vuesaxBoldArrowDown"}
              data-plasmic-override={overrides.vuesaxBoldArrowDown}
              className={classNames(projectcss.all, sty.vuesaxBoldArrowDown)}
            >
              <div
                data-plasmic-name={"vuesaxBoldArrowDown2"}
                data-plasmic-override={overrides.vuesaxBoldArrowDown2}
                className={classNames(projectcss.all, sty.vuesaxBoldArrowDown2)}
              >
                <ArrowDownIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2EyIz
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.doctorInfo.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Nokindow";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b2AcK
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.doctorInfo.expert;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Nokindow@gmail.com";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"48px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"48px"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.doctorInfo.image;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  src: "/plasmic/liom_tools/images/ellipse2.svg",
                  fullWidth: 48,
                  fullHeight: 48,
                  aspectRatio: undefined
                };
              }
              throw e;
            }
          })()}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  frame18: [
    "frame18",
    "frame17",
    "frame16",
    "frame15",
    "vuesaxBoldArrowDown",
    "vuesaxBoldArrowDown2",
    "svg",
    "img"
  ],
  frame17: [
    "frame17",
    "frame16",
    "frame15",
    "vuesaxBoldArrowDown",
    "vuesaxBoldArrowDown2",
    "svg",
    "img"
  ],
  frame16: [
    "frame16",
    "frame15",
    "vuesaxBoldArrowDown",
    "vuesaxBoldArrowDown2",
    "svg"
  ],
  frame15: ["frame15", "vuesaxBoldArrowDown", "vuesaxBoldArrowDown2", "svg"],
  vuesaxBoldArrowDown: ["vuesaxBoldArrowDown", "vuesaxBoldArrowDown2", "svg"],
  vuesaxBoldArrowDown2: ["vuesaxBoldArrowDown2", "svg"],
  svg: ["svg"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  frame18: "div";
  frame17: "div";
  frame16: "div";
  frame15: "div";
  vuesaxBoldArrowDown: "div";
  vuesaxBoldArrowDown2: "div";
  svg: "svg";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDoctorInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDoctorInfo__VariantsArgs;
    args?: PlasmicDoctorInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDoctorInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDoctorInfo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDoctorInfo__ArgProps,
          internalVariantPropNames: PlasmicDoctorInfo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDoctorInfo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame18") {
    func.displayName = "PlasmicDoctorInfo";
  } else {
    func.displayName = `PlasmicDoctorInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicDoctorInfo = Object.assign(
  // Top-level PlasmicDoctorInfo renders the root element
  makeNodeComponent("frame18"),
  {
    // Helper components rendering sub-elements
    frame17: makeNodeComponent("frame17"),
    frame16: makeNodeComponent("frame16"),
    frame15: makeNodeComponent("frame15"),
    vuesaxBoldArrowDown: makeNodeComponent("vuesaxBoldArrowDown"),
    vuesaxBoldArrowDown2: makeNodeComponent("vuesaxBoldArrowDown2"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicDoctorInfo
    internalVariantProps: PlasmicDoctorInfo__VariantProps,
    internalArgProps: PlasmicDoctorInfo__ArgProps
  }
);

export default PlasmicDoctorInfo;
/* prettier-ignore-end */
