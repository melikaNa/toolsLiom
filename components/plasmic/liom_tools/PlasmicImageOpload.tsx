/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: -SoKEb6qZYKB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicImageOpload.module.css"; // plasmic-import: -SoKEb6qZYKB/css

import Icon208Icon from "./icons/PlasmicIcon__Icon208"; // plasmic-import: 9THjoD4FD5L7/icon
import Icon216Icon from "./icons/PlasmicIcon__Icon216"; // plasmic-import: hMpu4DScncOm/icon
import Icon211Icon from "./icons/PlasmicIcon__Icon211"; // plasmic-import: dnEZodYx_LuK/icon

createPlasmicElementProxy;

export type PlasmicImageOpload__VariantMembers = {
  upload2: "upload2";
  docter: "docter";
};
export type PlasmicImageOpload__VariantsArgs = {
  upload2?: SingleBooleanChoiceArg<"upload2">;
  docter?: SingleBooleanChoiceArg<"docter">;
};
type VariantPropType = keyof PlasmicImageOpload__VariantsArgs;
export const PlasmicImageOpload__VariantProps = new Array<VariantPropType>(
  "upload2",
  "docter"
);

export type PlasmicImageOpload__ArgsType = {
  currentItem?: any;
  onClick?: (event: any) => void;
  _delete?: (event: any) => void;
  upload?: boolean;
  onUploadChange?: (val: string) => void;
  type?: string;
};
type ArgPropType = keyof PlasmicImageOpload__ArgsType;
export const PlasmicImageOpload__ArgProps = new Array<ArgPropType>(
  "currentItem",
  "onClick",
  "_delete",
  "upload",
  "onUploadChange",
  "type"
);

export type PlasmicImageOpload__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultImageOploadProps {
  currentItem?: any;
  onClick?: (event: any) => void;
  _delete?: (event: any) => void;
  upload?: boolean;
  onUploadChange?: (val: string) => void;
  type?: string;
  upload2?: SingleBooleanChoiceArg<"upload2">;
  docter?: SingleBooleanChoiceArg<"docter">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicImageOpload__RenderFunc(props: {
  variants: PlasmicImageOpload__VariantsArgs;
  args: PlasmicImageOpload__ArgsType;
  overrides: PlasmicImageOpload__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          type: "application/pdf"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "upload",
        type: "writable",
        variableType: "boolean",

        valueProp: "upload",
        onChangeProp: "onUploadChange"
      },
      {
        path: "upload2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.upload;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.upload2
      },
      {
        path: "docter",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.docter
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.root,
        {
          [sty.rootdocter]: hasVariant($state, "docter", "docter"),
          [sty.rootupload2]: hasVariant($state, "upload2", "upload2")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img, {
          [sty.imgdocter]: hasVariant($state, "docter", "docter"),
          [sty.imgupload2]: hasVariant($state, "upload2", "upload2")
        })}
        displayHeight={
          hasVariant($state, "docter", "docter") ? "120px" : "100px"
        }
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={
          hasVariant($state, "docter", "docter") ? "120px" : "100px"
        }
        loading={"lazy"}
        onClick={args.onClick}
        src={
          hasVariant($state, "upload2", "upload2") && triggers.hover_root
            ? (() => {
                try {
                  return (() => {
                    if ($props.type == "application/pdf") {
                      return "https://cdn-icons-png.flaticon.com/512/4208/4208479.png";
                    } else return $props.currentItem;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return (() => {
                    if ($props.type == "application/pdf") {
                      return "https://cdn-icons-png.flaticon.com/512/4208/4208479.png";
                    } else return $props.currentItem;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
        }
      />

      <PlasmicIcon__
        PlasmicIconType={
          hasVariant($state, "docter", "docter") && triggers.hover_root
            ? Icon216Icon
            : Icon208Icon
        }
        className={classNames(projectcss.all, sty.svg___5Dvc, {
          [sty.svgdocter___5Dvcd204E]: hasVariant($state, "docter", "docter"),
          [sty.svgupload2___5Dvcq61Ma]: hasVariant($state, "upload2", "upload2")
        })}
        onClick={args._delete}
        role={"img"}
      />

      {(
        hasVariant($state, "upload2", "upload2") && triggers.hover_root
          ? true
          : triggers.hover_root
          ? true
          : hasVariant($state, "upload2", "upload2")
          ? true
          : false
      ) ? (
        <PlasmicIcon__
          PlasmicIconType={
            hasVariant($state, "upload2", "upload2") ? Icon211Icon : Icon208Icon
          }
          className={classNames(projectcss.all, sty.svg__zvZid, {
            [sty.svgupload2__zvZidq61Ma]: hasVariant(
              $state,
              "upload2",
              "upload2"
            )
          })}
          onClick={async event => {
            const $steps = {};
          }}
          role={"img"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicImageOpload__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicImageOpload__VariantsArgs;
    args?: PlasmicImageOpload__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicImageOpload__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicImageOpload__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicImageOpload__ArgProps,
          internalVariantPropNames: PlasmicImageOpload__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicImageOpload__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicImageOpload";
  } else {
    func.displayName = `PlasmicImageOpload.${nodeName}`;
  }
  return func;
}

export const PlasmicImageOpload = Object.assign(
  // Top-level PlasmicImageOpload renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicImageOpload
    internalVariantProps: PlasmicImageOpload__VariantProps,
    internalArgProps: PlasmicImageOpload__ArgProps
  }
);

export default PlasmicImageOpload;
/* prettier-ignore-end */
