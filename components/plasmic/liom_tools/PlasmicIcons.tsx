/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 1fNx7Q7E4s-Q

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicIcons.module.css"; // plasmic-import: 1fNx7Q7E4s-Q/css

import Icon128Icon from "./icons/PlasmicIcon__Icon128"; // plasmic-import: d2qG9_uIS6xq/icon
import Icon132Icon from "./icons/PlasmicIcon__Icon132"; // plasmic-import: 6P3_ocT7yalm/icon
import Icon131Icon from "./icons/PlasmicIcon__Icon131"; // plasmic-import: 7X7cEzxwbg12/icon

createPlasmicElementProxy;

export type PlasmicIcons__VariantMembers = {
  unnamedGroupOfVariants: "d" | "t";
};
export type PlasmicIcons__VariantsArgs = {
  unnamedGroupOfVariants?: SingleChoiceArg<"d" | "t">;
};
type VariantPropType = keyof PlasmicIcons__VariantsArgs;
export const PlasmicIcons__VariantProps = new Array<VariantPropType>(
  "unnamedGroupOfVariants"
);

export type PlasmicIcons__ArgsType = {
  apiRequestData?: any;
  currentItem?: any;
};
type ArgPropType = keyof PlasmicIcons__ArgsType;
export const PlasmicIcons__ArgProps = new Array<ArgPropType>(
  "apiRequestData",
  "currentItem"
);

export type PlasmicIcons__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultIconsProps {
  apiRequestData?: any;
  currentItem?: any;
  unnamedGroupOfVariants?: SingleChoiceArg<"d" | "t">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIcons__RenderFunc(props: {
  variants: PlasmicIcons__VariantsArgs;
  args: PlasmicIcons__ArgsType;
  overrides: PlasmicIcons__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.root
      )}
    >
      <Icon128Icon
        className={classNames(projectcss.all, sty.svg___7SYax, {
          [sty.svgunnamedGroupOfVariants_d___7SYax0ChkY]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "d"
          ),
          [sty.svgunnamedGroupOfVariants_t___7SYaxK4DoA]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "t"
          )
        })}
        role={"img"}
      />

      {(
        hasVariant($state, "unnamedGroupOfVariants", "t")
          ? true
          : hasVariant($state, "unnamedGroupOfVariants", "d")
          ? true
          : (() => {
              try {
                return !($props.currentItem.action !== "" &&
                $state.apiRequest.data.extras.find(
                  a => a.type === $props.currentItem.option_metric.slice(0, -1)
                )
                  ? $state.apiRequest.data.extras.find(
                      a =>
                        a.type === $props.currentItem.option_metric.slice(0, -1)
                    ).isDone !== undefined
                    ? $state.apiRequest.data.extras.find(
                        a =>
                          a.type ===
                          $props.currentItem.option_metric.slice(0, -1)
                      ).isDone !== 1
                    : false
                  : false);
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <Icon132Icon
          className={classNames(projectcss.all, sty.svg__ikOjz, {
            [sty.svgunnamedGroupOfVariants_d__ikOjz0ChkY]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "d"
            ),
            [sty.svgunnamedGroupOfVariants_t__ikOjzK4DoA]: hasVariant(
              $state,
              "unnamedGroupOfVariants",
              "t"
            )
          })}
          role={"img"}
        />
      ) : null}
      <Icon131Icon
        className={classNames(projectcss.all, sty.svg__mav7, {
          [sty.svgunnamedGroupOfVariants_d__mav70ChkY]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "d"
          ),
          [sty.svgunnamedGroupOfVariants_t__mav7K4DoA]: hasVariant(
            $state,
            "unnamedGroupOfVariants",
            "t"
          )
        })}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIcons__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIcons__VariantsArgs;
    args?: PlasmicIcons__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIcons__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIcons__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIcons__ArgProps,
          internalVariantPropNames: PlasmicIcons__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIcons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIcons";
  } else {
    func.displayName = `PlasmicIcons.${nodeName}`;
  }
  return func;
}

export const PlasmicIcons = Object.assign(
  // Top-level PlasmicIcons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicIcons
    internalVariantProps: PlasmicIcons__VariantProps,
    internalArgProps: PlasmicIcons__ArgProps
  }
);

export default PlasmicIcons;
/* prettier-ignore-end */
