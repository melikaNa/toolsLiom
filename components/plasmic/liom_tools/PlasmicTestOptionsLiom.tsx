// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: DvUx8-VJCAy9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import OptionItemLiom from "../../OptionItemLiom"; // plasmic-import: 1NgrC_ROspzJ/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component

import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicTestOptionsLiom.module.css"; // plasmic-import: DvUx8-VJCAy9/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon

createPlasmicElementProxy;

export type PlasmicTestOptionsLiom__VariantMembers = {};
export type PlasmicTestOptionsLiom__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestOptionsLiom__VariantsArgs;
export const PlasmicTestOptionsLiom__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTestOptionsLiom__ArgsType = {
  data?: any;
  selectedIDs?: any;
  onSelectedIDsChange?: (val: string) => void;
  onClick24?: (event: any) => void;
  ferst?: boolean;
  retestTest?: boolean;
  app?: string;
  onClickliom?: (event: any) => void;
};
type ArgPropType = keyof PlasmicTestOptionsLiom__ArgsType;
export const PlasmicTestOptionsLiom__ArgProps = new Array<ArgPropType>(
  "data",
  "selectedIDs",
  "onSelectedIDsChange",
  "onClick24",
  "ferst",
  "retestTest",
  "app",
  "onClickliom"
);

export type PlasmicTestOptionsLiom__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  optionItemLiom?: Flex__<typeof OptionItemLiom>;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  button?: Flex__<typeof ButtonLiom>;
};

export interface DefaultTestOptionsLiomProps {
  data?: any;
  selectedIDs?: any;
  onSelectedIDsChange?: (val: string) => void;
  onClick24?: (event: any) => void;
  ferst?: boolean;
  retestTest?: boolean;
  app?: string;
  onClickliom?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestOptionsLiom__RenderFunc(props: {
  variants: PlasmicTestOptionsLiom__VariantsArgs;
  args: PlasmicTestOptionsLiom__ArgsType;
  overrides: PlasmicTestOptionsLiom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            text: " Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc id ligula imperdiet, finibus lacus vel, bibendum elit. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Proin maximus magna nisi, eget tincidunt leo semper ut. Morbi varius nulla quis ante consequat tincidunt. In sit amet euismod ipsum. Donec viverra turpis non ex sagittis suscipit. Pellentesque id finibus libero, vel aliquam justo. Pellentesque malesuada quam facilisis vulputate rhoncus. Suspendisse euismod vitae nunc eu sollicitudin.",
            from: "system",
            type: "qustion",
            btnText: "confirm",
            selectAll: false,
            options: [
              { id: 1, t1: "gozineh1" },
              { id: 12, t1: "gozinehdddd1" },
              { id: 31, t1: "gozineh1asdsfsdfdsf" },
              { id: 51, t1: "gozineh1   rergregrg" }
            ]
          },
          ferst: false,
          retestTest: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedIDs",
        type: "writable",
        variableType: "array",

        valueProp: "selectedIDs",
        onChangeProp: "onSelectedIDsChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.data.options.length > 1 ? $props.data.options : [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <OptionItemLiom
              data-plasmic-name={"optionItemLiom"}
              data-plasmic-override={overrides.optionItemLiom}
              className={classNames("__wab_instance", sty.optionItemLiom)}
              key={currentIndex}
              noLine={(() => {
                try {
                  return currentIndex == $props.data.options.length - 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateButton"] = $props.data.selectAll
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $state.selectedIDs.indexOf(currentItem.id) ==
                            -1
                            ? $state.selectedIDs.push(currentItem.id)
                            : ($state.selectedIDs = $state.selectedIDs.filter(
                                item => item !== currentItem.id
                              ));
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButton"] != null &&
                  typeof $steps["updateButton"] === "object" &&
                  typeof $steps["updateButton"].then === "function"
                ) {
                  $steps["updateButton"] = await $steps["updateButton"];
                }

                $steps["updateSelectedIDs2"] = !$props.data.selectAll
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectedIDs"]
                        },
                        operation: 0,
                        value: [currentItem.id]
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectedIDs2"] != null &&
                  typeof $steps["updateSelectedIDs2"] === "object" &&
                  typeof $steps["updateSelectedIDs2"].then === "function"
                ) {
                  $steps["updateSelectedIDs2"] = await $steps[
                    "updateSelectedIDs2"
                  ];
                }
              }}
              selctedOptionLiom={(() => {
                try {
                  return (
                    $state.selectedIDs.indexOf(currentItem.id) != -1 &&
                    $props.app == "liom"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              selctedOptionPaziresh={(() => {
                try {
                  return (
                    $state.selectedIDs.indexOf(currentItem.id) != -1 &&
                    $props.app != "liom"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p0O
                )}
              >
                <React.Fragment>{currentItem.text}</React.Fragment>
              </div>
            </OptionItemLiom>
          );
        })}
      </div>
      {(() => {
        try {
          return $props.app != "liom";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Paziresh24Button
          data-plasmic-name={"paziresh24Button"}
          data-plasmic-override={overrides.paziresh24Button}
          children2={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gFRfC
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.data.btnText;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Button";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.data.btnText;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Button";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          }
          className={classNames("__wab_instance", sty.paziresh24Button)}
          isDisabled={(() => {
            try {
              return (
                ($state.selectedIDs.length == 0 && $props.ferst == true) ||
                false ||
                ($state.selectedIDs.length == 0 && $props.retestTest == true)
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          onClick={args.onClick24}
        />
      ) : null}
      {(() => {
        try {
          return $props.app == "liom";
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <ButtonLiom
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          color={generateStateValueProp($state, ["button", "color"])}
          isDisabled={(() => {
            try {
              return (
                ($state.selectedIDs.length == 0 &&
                  $props.ferst == true &&
                  $props.retestTest == true) ||
                false
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()}
          onClick={args.onClick24}
          onColorChange={(...eventArgs) => {
            generateStateOnChangeProp($state, ["button", "color"])(
              eventArgs[0]
            );
          }}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.data.btnText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Button";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </ButtonLiom>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "optionItemLiom", "paziresh24Button", "button"],
  freeBox: ["freeBox", "optionItemLiom"],
  optionItemLiom: ["optionItemLiom"],
  paziresh24Button: ["paziresh24Button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  optionItemLiom: typeof OptionItemLiom;
  paziresh24Button: typeof Paziresh24Button;
  button: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestOptionsLiom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestOptionsLiom__VariantsArgs;
    args?: PlasmicTestOptionsLiom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestOptionsLiom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTestOptionsLiom__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestOptionsLiom__ArgProps,
          internalVariantPropNames: PlasmicTestOptionsLiom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestOptionsLiom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestOptionsLiom";
  } else {
    func.displayName = `PlasmicTestOptionsLiom.${nodeName}`;
  }
  return func;
}

export const PlasmicTestOptionsLiom = Object.assign(
  // Top-level PlasmicTestOptionsLiom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    optionItemLiom: makeNodeComponent("optionItemLiom"),
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicTestOptionsLiom
    internalVariantProps: PlasmicTestOptionsLiom__VariantProps,
    internalArgProps: PlasmicTestOptionsLiom__ArgProps
  }
);

export default PlasmicTestOptionsLiom;
/* prettier-ignore-end */
