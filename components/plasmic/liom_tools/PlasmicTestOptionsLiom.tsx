/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: DvUx8-VJCAy9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import OptionItemLiom from "../../OptionItemLiom"; // plasmic-import: 1NgrC_ROspzJ/component
import { Input } from "@plasmicpkgs/antd/skinny/registerInput";
import { inputHelpers as Input_Helpers } from "@plasmicpkgs/antd/skinny/registerInput";
import Selection from "../../Selection"; // plasmic-import: pIDdRrLwM58N/component
import SendIcon from "../../SendIcon"; // plasmic-import: HSNJ0v5oD6xT/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicTestOptionsLiom.module.css"; // plasmic-import: DvUx8-VJCAy9/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: 3GJi3NV2X6Zg/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: ZqTOLr82hcYp/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon

createPlasmicElementProxy;

export type PlasmicTestOptionsLiom__VariantMembers = {};
export type PlasmicTestOptionsLiom__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestOptionsLiom__VariantsArgs;
export const PlasmicTestOptionsLiom__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTestOptionsLiom__ArgsType = {
  data?: any;
  selectedIDs?: any;
  onSelectedIDsChange?: (val: string) => void;
  onClick24?: (event: any) => void;
  ferst?: boolean;
  retestTest?: boolean;
  app?: string;
  onResulr?: (event: any) => void;
  showgreen?: boolean;
  buyClick?: (event: any) => void;
  children?: React.ReactNode;
  buy?: boolean;
  number?: number;
  onNumberChange?: (val: string) => void;
  b?: string;
  p?: string;
  fp?: string;
  gw?: boolean;
  t?: string;
};
type ArgPropType = keyof PlasmicTestOptionsLiom__ArgsType;
export const PlasmicTestOptionsLiom__ArgProps = new Array<ArgPropType>(
  "data",
  "selectedIDs",
  "onSelectedIDsChange",
  "onClick24",
  "ferst",
  "retestTest",
  "app",
  "onResulr",
  "showgreen",
  "buyClick",
  "children",
  "buy",
  "number",
  "onNumberChange",
  "b",
  "p",
  "fp",
  "gw",
  "t"
);

export type PlasmicTestOptionsLiom__OverridesType = {
  root?: Flex__<"div">;
  optionItemLiom?: Flex__<typeof OptionItemLiom>;
  antdInput?: Flex__<typeof Input>;
  selection?: Flex__<typeof Selection>;
  sendIcon?: Flex__<typeof SendIcon>;
  antdInput2?: Flex__<typeof Input>;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  button?: Flex__<typeof ButtonLiom>;
  button4?: Flex__<typeof ButtonLiom>;
  button3?: Flex__<typeof ButtonLiom>;
  button2?: Flex__<typeof ButtonLiom>;
};

export interface DefaultTestOptionsLiomProps {
  data?: any;
  selectedIDs?: any;
  onSelectedIDsChange?: (val: string) => void;
  onClick24?: (event: any) => void;
  ferst?: boolean;
  retestTest?: boolean;
  app?: string;
  onResulr?: (event: any) => void;
  showgreen?: boolean;
  buyClick?: (event: any) => void;
  children?: React.ReactNode;
  buy?: boolean;
  number?: number;
  onNumberChange?: (val: string) => void;
  b?: string;
  p?: string;
  fp?: string;
  gw?: boolean;
  t?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestOptionsLiom__RenderFunc(props: {
  variants: PlasmicTestOptionsLiom__VariantsArgs;
  args: PlasmicTestOptionsLiom__ArgsType;
  overrides: PlasmicTestOptionsLiom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            text: " Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc id ligula imperdiet, finibus lacus vel, bibendum elit. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Proin maximus magna nisi, eget tincidunt leo semper ut. Morbi varius nulla quis ante consequat tincidunt. In sit amet euismod ipsum. Donec viverra turpis non ex sagittis suscipit. Pellentesque id finibus libero, vel aliquam justo. Pellentesque malesuada quam facilisis vulputate rhoncus. Suspendisse euismod vitae nunc eu sollicitudin.",
            from: "system",
            type: "qustion",
            btnText: "confirm",
            selectAll: false,
            options: [
              { id: 1, text: "gozineh1" },
              { id: 12, text: "gozinehdddd1" },
              { id: 31, text: "gozineh1asdsfsdfdsf" },
              { id: 51, text: "gozineh1   rergregrg" },
              { id: 12, text: "gozinehdddd1" },
              { id: 31, text: "gozineh1asdsfsdfdsf" },
              { id: 1, text: "gozineh1" },
              { id: 12, text: "gozinehdddd1" },
              { id: 31, text: "gozineh1asdsfsdfdsf" },
              { id: 51, text: "gozineh1   rergregrg" },
              { id: 12, text: "gozinehdddd1" },
              { id: 31, text: "gozineh1asdsfsdfdsf" }
            ]
          },
          ferst: true,
          retestTest: true,
          showgreen: false,
          buy: false,
          gw: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedIDs",
        type: "writable",
        variableType: "array",

        valueProp: "selectedIDs",
        onChangeProp: "onSelectedIDsChange"
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "green"
      },
      {
        path: "antdInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "antdInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", Input_Helpers)
      },
      {
        path: "input",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "sendIcon.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sendIcon.diable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.antdInput2.value.length == 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "number",
        type: "writable",
        variableType: "number",

        valueProp: "number",
        onChangeProp: "onNumberChange"
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.root
      )}
      style={(() => {
        try {
          return {
            background: $props.buy && $props.gw ? "transparent" : "white",
            "box-shadow": $props.buy && $props.gw ? "none" : ""
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rHKq5)}>
        {renderPlasmicSlot({
          defaultContents:
            "\u062f\u0631\u062d\u0627\u0644 \u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0627\u0633\u062e ! \u0644\u0637\u0641\u0627 \u06af\u0632\u06cc\u0646\u0647 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f.",
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__yDt3R)}>
        {(() => {
          try {
            return (
              $props.data.options.length > 1 &&
              $props.data.options.length < 7 &&
              $props.data.question?.answerType != "numberInput"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.data.options.length > 1
                    ? $props.data.options
                    : [];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <OptionItemLiom
                  data-plasmic-name={"optionItemLiom"}
                  data-plasmic-override={overrides.optionItemLiom}
                  className={classNames("__wab_instance", sty.optionItemLiom)}
                  key={currentIndex}
                  noLine={(() => {
                    try {
                      return currentIndex == $props.data.options.length - 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={args.onClick24}
                  onMouseDown={async event => {
                    const $steps = {};

                    $steps["updateSelectedIDs"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedIDs"]
                            },
                            operation: 0,
                            value: [currentItem.id]
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedIDs"] != null &&
                      typeof $steps["updateSelectedIDs"] === "object" &&
                      typeof $steps["updateSelectedIDs"].then === "function"
                    ) {
                      $steps["updateSelectedIDs"] = await $steps[
                        "updateSelectedIDs"
                      ];
                    }

                    $steps["runOnClick24"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["onClick24"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnClick24"] != null &&
                      typeof $steps["runOnClick24"] === "object" &&
                      typeof $steps["runOnClick24"].then === "function"
                    ) {
                      $steps["runOnClick24"] = await $steps["runOnClick24"];
                    }
                  }}
                  onTouchStart={async event => {
                    const $steps = {};

                    $steps["updateSelectedIDs"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectedIDs"]
                            },
                            operation: 0,
                            value: [currentItem.id]
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectedIDs"] != null &&
                      typeof $steps["updateSelectedIDs"] === "object" &&
                      typeof $steps["updateSelectedIDs"].then === "function"
                    ) {
                      $steps["updateSelectedIDs"] = await $steps[
                        "updateSelectedIDs"
                      ];
                    }

                    $steps["runOnClick24"] = true
                      ? (() => {
                          const actionArgs = { eventRef: $props["onClick24"] };
                          return (({ eventRef, args }) => {
                            return eventRef?.(...(args ?? []));
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runOnClick24"] != null &&
                      typeof $steps["runOnClick24"] === "object" &&
                      typeof $steps["runOnClick24"].then === "function"
                    ) {
                      $steps["runOnClick24"] = await $steps["runOnClick24"];
                    }
                  }}
                  selctedOptionLiom={(() => {
                    try {
                      return (
                        $state.selectedIDs.indexOf(currentItem.id) != -1 &&
                        $props.app == "liom"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  selctedOptionPaziresh={(() => {
                    try {
                      return (
                        $state.selectedIDs.indexOf(currentItem.id) != -1 &&
                        $props.app != "liom"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p0O
                    )}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSelectedIDs"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedIDs"]
                              },
                              operation: 0,
                              value: [currentItem.id]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedIDs"] != null &&
                        typeof $steps["updateSelectedIDs"] === "object" &&
                        typeof $steps["updateSelectedIDs"].then === "function"
                      ) {
                        $steps["updateSelectedIDs"] = await $steps[
                          "updateSelectedIDs"
                        ];
                      }
                    }}
                  >
                    <React.Fragment>{currentItem.text}</React.Fragment>
                  </div>
                </OptionItemLiom>
              );
            })
          : null}
        {(() => {
          try {
            return (
              $props.data.options.length > 6 &&
              $props.data.question?.answerType != "numberInput"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__oklJv)}>
            <div className={classNames(projectcss.all, sty.freeBox__vzHch)}>
              {(() => {
                const child$Props = {
                  bordered: false,
                  className: classNames("__wab_instance", sty.antdInput),
                  disabled: true,
                  id: "inputMobile",
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["antdInput", "value"],
                      Input_Helpers
                    ).apply(null, eventArgs);

                    (async event => {
                      const $steps = {};

                      $steps["updateButtonColor"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["button", "color"]
                              },
                              operation: 0
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateButtonColor"] != null &&
                        typeof $steps["updateButtonColor"] === "object" &&
                        typeof $steps["updateButtonColor"].then === "function"
                      ) {
                        $steps["updateButtonColor"] = await $steps[
                          "updateButtonColor"
                        ];
                      }
                    }).apply(null, eventArgs);
                  },
                  placeholder: (() => {
                    try {
                      return $props.data.text;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  size: "middle",
                  value: generateStateValueProp($state, ["antdInput", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "antdInput.value"
                    }
                  ],
                  [],
                  Input_Helpers ?? {},
                  child$Props
                );

                return (
                  <Input
                    data-plasmic-name={"antdInput"}
                    data-plasmic-override={overrides.antdInput}
                    {...child$Props}
                  />
                );
              })()}
              <div className={classNames(projectcss.all, sty.freeBox__yLm2N)} />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__eiRtl)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.data.options.length > 1
                      ? $props.data.options
                      : [];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Selection
                    data-plasmic-name={"selection"}
                    data-plasmic-override={overrides.selection}
                    className={classNames("__wab_instance", sty.selection)}
                    currentItem={currentItem}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateAntdInputValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["antdInput", "value"]
                              },
                              operation: 0,
                              value: currentItem.text
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateAntdInputValue"] != null &&
                        typeof $steps["updateAntdInputValue"] === "object" &&
                        typeof $steps["updateAntdInputValue"].then ===
                          "function"
                      ) {
                        $steps["updateAntdInputValue"] = await $steps[
                          "updateAntdInputValue"
                        ];
                      }

                      $steps["updateSelectedIDs"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedIDs"]
                              },
                              operation: 0,
                              value: [currentItem.id]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedIDs"] != null &&
                        typeof $steps["updateSelectedIDs"] === "object" &&
                        typeof $steps["updateSelectedIDs"].then === "function"
                      ) {
                        $steps["updateSelectedIDs"] = await $steps[
                          "updateSelectedIDs"
                        ];
                      }

                      $steps["runOnClick24"] = true
                        ? (() => {
                            const actionArgs = {
                              eventRef: $props["onClick24"]
                            };
                            return (({ eventRef, args }) => {
                              return eventRef?.(...(args ?? []));
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runOnClick24"] != null &&
                        typeof $steps["runOnClick24"] === "object" &&
                        typeof $steps["runOnClick24"].then === "function"
                      ) {
                        $steps["runOnClick24"] = await $steps["runOnClick24"];
                      }
                    }}
                    select={(() => {
                      try {
                        return currentItem.id == $state.selectedIDs[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
            </div>
          </div>
        ) : null}
        {(() => {
          try {
            return $props.data.question?.answerType == "numberInput";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox__gOfKr)}>
            <SendIcon
              data-plasmic-name={"sendIcon"}
              data-plasmic-override={overrides.sendIcon}
              className={classNames("__wab_instance", sty.sendIcon)}
              diable={generateStateValueProp($state, ["sendIcon", "diable"])}
              load={generateStateValueProp($state, ["sendIcon", "load"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = !$state.sendIcon.diable
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.number = parseInt(
                            $state.antdInput2.value
                          ));
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return ($state.selectedIDs = [
                              $props.data.options[0].id
                            ]);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["runOnClick24"] = !$state.sendIcon.diable
                  ? (() => {
                      const actionArgs = { eventRef: $props["onClick24"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnClick24"] != null &&
                  typeof $steps["runOnClick24"] === "object" &&
                  typeof $steps["runOnClick24"].then === "function"
                ) {
                  $steps["runOnClick24"] = await $steps["runOnClick24"];
                }
              }}
              onDiableChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["sendIcon", "diable"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["sendIcon", "load"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />

            {(() => {
              const child$Props = {
                bordered: false,
                className: classNames("__wab_instance", sty.antdInput2),
                disabled: (() => {
                  try {
                    return $state.input;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })(),
                id: "inputMobile",
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["antdInput2", "value"],
                    Input_Helpers
                  ).apply(null, eventArgs);

                  (async event => {
                    const $steps = {};
                  }).apply(null, eventArgs);
                },
                placeholder: (() => {
                  try {
                    return $props.data.text;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })(),
                size: "middle",
                type: "number",
                value: generateStateValueProp($state, ["antdInput2", "value"])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "antdInput2.value"
                  }
                ],
                [],
                Input_Helpers ?? {},
                child$Props
              );

              return (
                <Input
                  data-plasmic-name={"antdInput2"}
                  data-plasmic-override={overrides.antdInput2}
                  {...child$Props}
                />
              );
            })()}
            {(() => {
              try {
                return $state.input;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__kCh7H)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateInput"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["input"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateInput"] != null &&
                    typeof $steps["updateInput"] === "object" &&
                    typeof $steps["updateInput"].then === "function"
                  ) {
                    $steps["updateInput"] = await $steps["updateInput"];
                  }
                }}
              />
            ) : null}
          </div>
        ) : null}
      </div>
      {(() => {
        try {
          return (
            $props.app !== "liom" &&
            ($props.ferst === false ||
              ($props.ferst === true && $props.retestTest === false)) &&
            !$props.buy
          );
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Paziresh24Button
          data-plasmic-name={"paziresh24Button"}
          data-plasmic-override={overrides.paziresh24Button}
          children2={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gFRfC
              )}
              data-i18n={"startp"}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.data.btnText;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Button";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.data.btnText;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Button";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          }
          className={classNames("__wab_instance", sty.paziresh24Button)}
          endIcon={
            <ChevronLeftIcon
              className={classNames(projectcss.all, sty.svg__blxAp)}
              role={"img"}
            />
          }
          onClick={args.onClick24}
          startIcon={
            <ChevronRightIcon
              className={classNames(projectcss.all, sty.svg__fksLf)}
              role={"img"}
            />
          }
        />
      ) : null}
      {(() => {
        try {
          return (
            $props.app == "liom" &&
            ($props.ferst === false ||
              ($props.ferst === true && $props.retestTest === false)) &&
            !$props.buy
          );
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <ButtonLiom
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          color={generateStateValueProp($state, ["button", "color"])}
          load={generateStateValueProp($state, ["button", "load"])}
          onClick={args.onClick24}
          onColorChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button", "color"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button", "load"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tqXo8
            )}
            data-i18n={"start"}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.data.btnText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Button";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </ButtonLiom>
      ) : null}
      {(() => {
        try {
          return $props.buy && !$props.gw;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <ButtonLiom
          data-plasmic-name={"button4"}
          data-plasmic-override={overrides.button4}
          className={classNames("__wab_instance", sty.button4)}
          color={generateStateValueProp($state, ["button4", "color"])}
          load={generateStateValueProp($state, ["button4", "load"])}
          onClick={args.buyClick}
          onColorChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button4", "color"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button4", "load"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fKa8P
            )}
            data-i18n={"btn.pay"}
          >
            {
              "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u0634\u0631\u0648\u0639 \u062a\u0633\u062a"
            }
          </div>
        </ButtonLiom>
      ) : null}
      {(() => {
        try {
          return $props.buy && $props.gw;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__pyLuH)}>
          <div className={classNames(projectcss.all, sty.freeBox__aSdZt)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i8IcM
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.t;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__wbcd)}>
              <div className={classNames(projectcss.all, sty.freeBox__yhFkP)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__soPj
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.fp;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wrpq1
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.p + " تومان ";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              {(() => {
                try {
                  return $props.b;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7M5M6
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.b;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "60%";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
            </div>
          </div>
          {(() => {
            try {
              return $props.buy;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ButtonLiom
              data-plasmic-name={"button3"}
              data-plasmic-override={overrides.button3}
              className={classNames("__wab_instance", sty.button3)}
              color={generateStateValueProp($state, ["button3", "color"])}
              load={generateStateValueProp($state, ["button3", "load"])}
              onClick={args.buyClick}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button3", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i2Jnt
                )}
                data-i18n={"btn.pay"}
              >
                {
                  "\u067e\u0631\u062f\u0627\u062e\u062a \u0648 \u0634\u0631\u0648\u0639 \u062a\u0633\u062a"
                }
              </div>
            </ButtonLiom>
          ) : null}
        </div>
      ) : null}
      {(() => {
        try {
          return $props.showgreen;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <ButtonLiom
          data-plasmic-name={"button2"}
          data-plasmic-override={overrides.button2}
          className={classNames("__wab_instance", sty.button2)}
          color={generateStateValueProp($state, ["button2", "color"])}
          load={generateStateValueProp($state, ["button2", "load"])}
          onClick={args.onResulr}
          onColorChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button2", "color"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onLoadChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["button2", "load"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__oPxQg)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oaCrP
              )}
              data-i18n={"btn.result"}
            >
              {
                "\u062f\u06cc\u062f\u0646 \u0646\u062a\u0627\u06cc\u062c \u0642\u0628\u0644\u06cc"
              }
            </div>
          </div>
        </ButtonLiom>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "optionItemLiom",
    "antdInput",
    "selection",
    "sendIcon",
    "antdInput2",
    "paziresh24Button",
    "button",
    "button4",
    "button3",
    "button2"
  ],
  optionItemLiom: ["optionItemLiom"],
  antdInput: ["antdInput"],
  selection: ["selection"],
  sendIcon: ["sendIcon"],
  antdInput2: ["antdInput2"],
  paziresh24Button: ["paziresh24Button"],
  button: ["button"],
  button4: ["button4"],
  button3: ["button3"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  optionItemLiom: typeof OptionItemLiom;
  antdInput: typeof Input;
  selection: typeof Selection;
  sendIcon: typeof SendIcon;
  antdInput2: typeof Input;
  paziresh24Button: typeof Paziresh24Button;
  button: typeof ButtonLiom;
  button4: typeof ButtonLiom;
  button3: typeof ButtonLiom;
  button2: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestOptionsLiom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestOptionsLiom__VariantsArgs;
    args?: PlasmicTestOptionsLiom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestOptionsLiom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestOptionsLiom__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestOptionsLiom__ArgProps,
          internalVariantPropNames: PlasmicTestOptionsLiom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestOptionsLiom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestOptionsLiom";
  } else {
    func.displayName = `PlasmicTestOptionsLiom.${nodeName}`;
  }
  return func;
}

export const PlasmicTestOptionsLiom = Object.assign(
  // Top-level PlasmicTestOptionsLiom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    optionItemLiom: makeNodeComponent("optionItemLiom"),
    antdInput: makeNodeComponent("antdInput"),
    selection: makeNodeComponent("selection"),
    sendIcon: makeNodeComponent("sendIcon"),
    antdInput2: makeNodeComponent("antdInput2"),
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    button: makeNodeComponent("button"),
    button4: makeNodeComponent("button4"),
    button3: makeNodeComponent("button3"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicTestOptionsLiom
    internalVariantProps: PlasmicTestOptionsLiom__VariantProps,
    internalArgProps: PlasmicTestOptionsLiom__ArgProps
  }
);

export default PlasmicTestOptionsLiom;
/* prettier-ignore-end */
