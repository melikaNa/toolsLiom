/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: wBvVoEI4b3mw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Paziresh24LineClamp from "../../Paziresh24LineClamp"; // plasmic-import: xFfrwlkCaWS8/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import VigetLiom from "../../VigetLiom"; // plasmic-import: aok8o2KhU8vY/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import Switchbest from "../../Switchbest"; // plasmic-import: sHLRdvulrK-R/component
import TabWidget from "../../TabWidget"; // plasmic-import: TgQ-n3w6yOfs/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Input } from "@/fragment/components/input"; // plasmic-import: 31QElsfd4yPt/codeComponent
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicTest.module.css"; // plasmic-import: wBvVoEI4b3mw/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon153Icon from "./icons/PlasmicIcon__Icon153"; // plasmic-import: 8DNj9ESCY80y/icon
import Icon156Icon from "./icons/PlasmicIcon__Icon156"; // plasmic-import: 0H63FcZWihXr/icon
import Icon155Icon from "./icons/PlasmicIcon__Icon155"; // plasmic-import: a_FmExMhN0OI/icon
import Icon104Icon from "./icons/PlasmicIcon__Icon104"; // plasmic-import: kIvBdNtH0rBG/icon
import Icon186Icon from "./icons/PlasmicIcon__Icon186"; // plasmic-import: 2GtCxFv8ZMmH/icon
import Icon187Icon from "./icons/PlasmicIcon__Icon187"; // plasmic-import: htu_gIjJqtkY/icon
import Icon188Icon from "./icons/PlasmicIcon__Icon188"; // plasmic-import: 0UFwfDIVgQ7c/icon

createPlasmicElementProxy;

export type PlasmicTest__VariantMembers = {};
export type PlasmicTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicTest__VariantsArgs;
export const PlasmicTest__VariantProps = new Array<VariantPropType>();

export type PlasmicTest__ArgsType = {};
type ArgPropType = keyof PlasmicTest__ArgsType;
export const PlasmicTest__ArgProps = new Array<ArgPropType>();

export type PlasmicTest__OverridesType = {
  root?: Flex__<"div">;
  paziresh24LineClamp?: Flex__<typeof Paziresh24LineClamp>;
  button?: Flex__<typeof ButtonLiom>;
  vigetLiom?: Flex__<typeof VigetLiom>;
  popover?: Flex__<typeof AntdPopover>;
  button6?: Flex__<typeof ButtonLiom>;
  button7?: Flex__<typeof ButtonLiom>;
  switchbest?: Flex__<typeof Switchbest>;
  card15?: Flex__<"div">;
  button9?: Flex__<typeof ButtonLiom>;
  tabWidget?: Flex__<typeof TabWidget>;
  sideEffect?: Flex__<typeof SideEffect>;
  collapseBaby?: Flex__<typeof AntdSingleCollapse>;
  collapseMother?: Flex__<typeof AntdSingleCollapse>;
  collapseHealth?: Flex__<typeof AntdSingleCollapse>;
  name?: Flex__<typeof Input>;
  lastname?: Flex__<typeof Input>;
  fathername?: Flex__<typeof Input>;
  city?: Flex__<typeof Input>;
  location?: Flex__<typeof Input>;
  button5?: Flex__<typeof ButtonLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
};

export interface DefaultTestProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTest__RenderFunc(props: {
  variants: PlasmicTest__VariantsArgs;
  args: PlasmicTest__ArgsType;
  overrides: PlasmicTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "popover[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button6[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "button7[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "switchbest[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button9[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "collapseBaby.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapseMother.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "collapseHealth.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "lastname.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "fathername.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "city.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "location.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button6[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button7[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button9[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "button5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__oNhHy)}
            code={
              '  <script>\r\n(function generateI18nJson() {\r\n  const elements = document.querySelectorAll("body *");\r\n  const translations = {};\r\n  let count = 1;\r\n\r\n  elements.forEach(el => {\r\n    if (!el.hasAttribute("data-i18n")) {\r\n      const text = el.textContent.trim();\r\n      const hasVisibleText = text && !text.startsWith("<") && text.length > 1;\r\n      \r\n      if (hasVisibleText) {\r\n        const key = `text_${count++}`;\r\n        el.setAttribute("data-i18n", key);\r\n        translations[key] = text;\r\n      }\r\n    }\r\n  });\r\n\r\n  // \u062e\u0631\u0648\u062c\u06cc JSON \u062f\u0631 \u06a9\u0646\u0633\u0648\u0644\r\n  console.log("\ud83d\udd35 Generated fa.json:");\r\n  console.log(JSON.stringify(translations, null, 2));\r\n})();\r\n\r\n  </script>\r\n\r\n'
            }
          />

          <Paziresh24LineClamp
            data-plasmic-name={"paziresh24LineClamp"}
            data-plasmic-override={overrides.paziresh24LineClamp}
            className={classNames("__wab_instance", sty.paziresh24LineClamp)}
            numberOfLines={2}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sRsBv
              )}
            >
              {
                "\u0633\u0632\u0645\u062a\u062e\u0633\u06cc\u062e\u0639\u0647\u0632\u0633\u0627\u0627\u0632\u0633\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0627\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646   \u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\n\n\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646\u0646"
              }
            </div>
          </Paziresh24LineClamp>
          <div className={classNames(projectcss.all, sty.freeBox__d661F)}>
            <div className={classNames(projectcss.all, sty.freeBox__vYj9V)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__alpyf
                )}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return `<p>
    با اضافه کردن <b>همیار قاعدگی</b> می‌تونی به هر کسی که شماره‌شو وارد می‌کنی دسترسی بدی تا 
    <b>دوره‌های قاعدگیت</b> رو ببینه و تو لحظات سخت کنارت باشه و <b>بهتر درکت کنه ❤️</b>.
    اگه قابلیت <b>اطلاع‌رسانی با پیامک</b> رو فعال کنی، ما به طور خودکار وقتی تو دوران 
    <b>PMS، تخمک‌گذاری یا پریود</b> باشی، برای شخصی که انتخاب کردی <b>پیامک</b> می‌فرستیم.
    <br>
    تو این پیام‌ها نکاتی بهش می‌گیم که بتونه <b>بهتر درکت کنه و همراهت باشه</b>.
</p>
`;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "<p>\r\n    \u0628\u0627 \u0627\u0636\u0627\u0641\u0647 \u06a9\u0631\u062f\u0646 <b>\u0647\u0645\u06cc\u0627\u0631 \u0642\u0627\u0639\u062f\u06af\u06cc</b> \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647 \u0647\u0631 \u06a9\u0633\u06cc \u06a9\u0647 \u0634\u0645\u0627\u0631\u0647\u200c\u0634\u0648 \u0648\u0627\u0631\u062f \u0645\u06cc\u200c\u06a9\u0646\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u062f\u06cc \u062a\u0627 \r\n    <b>\u062f\u0648\u0631\u0647\u200c\u0647\u0627\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc\u062a</b> \u0631\u0648 \u0628\u0628\u06cc\u0646\u0647 \u0648 \u062a\u0648 \u0644\u062d\u0638\u0627\u062a \u0633\u062e\u062a \u06a9\u0646\u0627\u0631\u062a \u0628\u0627\u0634\u0647 \u0648 <b>\u0628\u0647\u062a\u0631 \u062f\u0631\u06a9\u062a \u06a9\u0646\u0647 \u2764\ufe0f</b>.\r\n    \u0627\u06af\u0647 \u0642\u0627\u0628\u0644\u06cc\u062a <b>\u0627\u0637\u0644\u0627\u0639\u200c\u0631\u0633\u0627\u0646\u06cc \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9</b> \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646\u06cc\u060c \u0645\u0627 \u0628\u0647 \u0637\u0648\u0631 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0648\u0642\u062a\u06cc \u062a\u0648 \u062f\u0648\u0631\u0627\u0646 \r\n    <b>PMS\u060c \u062a\u062e\u0645\u06a9\u200c\u06af\u0630\u0627\u0631\u06cc \u06cc\u0627 \u067e\u0631\u06cc\u0648\u062f</b> \u0628\u0627\u0634\u06cc\u060c \u0628\u0631\u0627\u06cc \u0634\u062e\u0635\u06cc \u06a9\u0647 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u06cc <b>\u067e\u06cc\u0627\u0645\u06a9</b> \u0645\u06cc\u200c\u0641\u0631\u0633\u062a\u06cc\u0645.\r\n</p>\r";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
              <ButtonLiom
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={generateStateValueProp($state, ["button", "color"])}
                load={generateStateValueProp($state, ["button", "load"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return fetch(
                                "https://libretranslate.com/translate",
                                {
                                  method: "POST",
                                  body: JSON.stringify({
                                    q: "سلام دنیا",
                                    source: "fa",
                                    target: "en",
                                    format: "text"
                                  }),
                                  headers: {
                                    "Content-Type": "application/json"
                                  }
                                }
                              )
                                .then(res => res.json())
                                .then(data => console.log(data.translatedText));
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hnsdU
                  )}
                >
                  {
                    "\u0627\u0641\u0632\u0648\u062f\u0646 \u0647\u0645\u06cc\u0627\u0631"
                  }
                </div>
              </ButtonLiom>
            </div>
            <VigetLiom
              data-plasmic-name={"vigetLiom"}
              data-plasmic-override={overrides.vigetLiom}
              className={classNames("__wab_instance", sty.vigetLiom)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bePzd
                )}
              >
                {
                  "\u0647\u0645\u06cc\u0627\u0631 \u0647\u0627\u06cc \u0645\u0646"
                }
              </div>
              <Embed
                className={classNames("__wab_instance", sty.embedHtml__nPzD)}
                code={"<hr></hr>"}
              />

              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                []
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uuoLg)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oJsnr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8NxFz
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.hamyar.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0639\u0644\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pOz2
                        )}
                      >
                        {""}
                      </div>
                      {(() => {
                        const child$Props = {
                          arrow: false,
                          className: classNames("__wab_instance", sty.popover),
                          content: (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__t45E2
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.button6
                                  ),
                                  color: generateStateValueProp($state, [
                                    "button6",
                                    __plasmic_idx_0,
                                    "color"
                                  ]),
                                  load: generateStateValueProp($state, [
                                    "button6",
                                    __plasmic_idx_0,
                                    "load"
                                  ]),
                                  onColorChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button6",
                                        __plasmic_idx_0,
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onLoadChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button6",
                                        __plasmic_idx_0,
                                        "load"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  showStartIcon: true,
                                  size: "compact",
                                  startIcon: (
                                    <Icon156Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__iBtZq
                                      )}
                                      role={"img"}
                                    />
                                  )
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "button6[].color",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => "clear"
                                    },
                                    {
                                      name: "button6[].load",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => false
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <ButtonLiom
                                    data-plasmic-name={"button6"}
                                    data-plasmic-override={overrides.button6}
                                    {...child$Props}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__oQyPs
                                      )}
                                    >
                                      {
                                        "\u0627\u0631\u0633\u0627\u0644 \u062f\u0639\u0648\u062a\u0646\u0627\u0645\u0647"
                                      }
                                    </div>
                                  </ButtonLiom>
                                );
                              })()}
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.button7
                                  ),
                                  color: generateStateValueProp($state, [
                                    "button7",
                                    __plasmic_idx_0,
                                    "color"
                                  ]),
                                  load: generateStateValueProp($state, [
                                    "button7",
                                    __plasmic_idx_0,
                                    "load"
                                  ]),
                                  onColorChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button7",
                                        __plasmic_idx_0,
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onLoadChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button7",
                                        __plasmic_idx_0,
                                        "load"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  showStartIcon: true,
                                  size: "compact",
                                  startIcon: (
                                    <Icon155Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___6UMgj
                                      )}
                                      role={"img"}
                                    />
                                  )
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "button7[].color",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => "clear"
                                    },
                                    {
                                      name: "button7[].load",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => false
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <ButtonLiom
                                    data-plasmic-name={"button7"}
                                    data-plasmic-override={overrides.button7}
                                    {...child$Props}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__m8Gse
                                      )}
                                    >
                                      {
                                        "\u062d\u0630\u0641 \u0647\u0645\u06cc\u0627\u0631"
                                      }
                                    </div>
                                  </ButtonLiom>
                                );
                              })()}
                            </div>
                          ),
                          contentText: "Popover contents",
                          defaultStylesClassName: classNames(
                            projectcss.root_reset,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            styleTokensClassNames
                          ),
                          mouseEnterDelay: 0,
                          mouseLeaveDelay: 0,
                          onOpenChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "popover",
                              __plasmic_idx_0,
                              "open"
                            ]).apply(null, eventArgs);
                          },
                          open: generateStateValueProp($state, [
                            "popover",
                            __plasmic_idx_0,
                            "open"
                          ]),
                          placement: "bottomLeft",
                          popoverScopeClassName: sty["popover__popover"],
                          title: null,
                          trigger: "click"
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "open",
                              plasmicStateName: "popover[].open"
                            }
                          ],
                          [__plasmic_idx_0],
                          undefined ?? {},
                          child$Props
                        );
                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "popover[].open",
                              initFunc: ({ $props, $state, $queries }) =>
                                undefined
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <AntdPopover
                            data-plasmic-name={"popover"}
                            data-plasmic-override={overrides.popover}
                            {...child$Props}
                          >
                            <Icon153Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kET7
                              )}
                              role={"img"}
                            />
                          </AntdPopover>
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qdGv0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eiMgi
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.hamyar.mobile;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "09038854947";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fyb2W
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ql0Fq
                          )}
                        >
                          {
                            "\u0627\u0637\u0644\u0627\u0639 \u0631\u0633\u0627\u0646\u06cc \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9"
                          }
                        </div>
                        {(() => {
                          const child$Props = {
                            children: null,
                            className: classNames(
                              "__wab_instance",
                              sty.switchbest
                            ),
                            isChecked:
                              generateStateValueProp($state, [
                                "switchbest",
                                __plasmic_idx_0,
                                "isChecked"
                              ]) ?? false,
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "switchbest",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "switchbest[].isChecked",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.rel.statusSms;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Switchbest
                              data-plasmic-name={"switchbest"}
                              data-plasmic-override={overrides.switchbest}
                              {...child$Props}
                            />
                          );
                        })()}
                      </div>
                    </div>
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml__zeOPt
                      )}
                      code={"<hr></hr>"}
                    />
                  </div>
                );
              })}
            </VigetLiom>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__uE8Hn)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "100%"
                  : "50%"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_tools/images/image80.png",
                fullWidth: 852,
                fullHeight: 879,
                aspectRatio: undefined
              }}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__paCXs)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              []
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"card15"}
                  data-plasmic-override={overrides.card15}
                  className={classNames(projectcss.all, sty.card15)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___39Cwv
                    )}
                    style={(() => {
                      try {
                        return {
                          color: currentItem.textColor
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0645\u0634\u0627\u0648\u0631\u0647 \u062f\u0631 \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0645\u0634\u06a9\u0644\u0627\u062a \u062c\u0646\u0633\u06cc ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.button9),
                      color: generateStateValueProp($state, [
                        "button9",
                        __plasmic_idx_0,
                        "color"
                      ]),
                      endIcon: (
                        <Icon104Icon
                          className={classNames(projectcss.all, sty.svg__ug4SD)}
                          role={"img"}
                        />
                      ),

                      load: generateStateValueProp($state, [
                        "button9",
                        __plasmic_idx_0,
                        "load"
                      ]),
                      onColorChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button9",
                            __plasmic_idx_0,
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onLoadChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "button9",
                            __plasmic_idx_0,
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      showEndIcon: true,
                      size: "minimal"
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "button9[].color",
                          initFunc: ({ $props, $state, $queries }) => undefined
                        },
                        {
                          name: "button9[].load",
                          initFunc: ({ $props, $state, $queries }) => false
                        }
                      ],
                      [__plasmic_idx_0]
                    );
                    return (
                      <ButtonLiom
                        data-plasmic-name={"button9"}
                        data-plasmic-override={overrides.button9}
                        {...child$Props}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mjh9P
                          )}
                        >
                          {
                            "\u0634\u0631\u0648\u0639 \u06af\u0641\u062a\u06af\u0648"
                          }
                        </div>
                      </ButtonLiom>
                    );
                  })()}
                </div>
              );
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__wKej4)}>
            <div className={classNames(projectcss.all, sty.freeBox__d4SpL)}>
              <div
                className={classNames(projectcss.all, sty.freeBox__l0HqL)}
                id={"my-scroll-list"}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return Array.from(
                        { length: 40 },
                        (_, index) => index + 1
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <TabWidget
                      data-plasmic-name={"tabWidget"}
                      data-plasmic-override={overrides.tabWidget}
                      className={classNames("__wab_instance", sty.tabWidget)}
                      currentItem={(() => {
                        try {
                          return currentItem;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      dark={(() => {
                        try {
                          return false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                    />
                  );
                })}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zkHlQ
                  )}
                >
                  {"Enter some text"}
                </div>
                <SideEffect
                  data-plasmic-name={"sideEffect"}
                  data-plasmic-override={overrides.sideEffect}
                  className={classNames("__wab_instance", sty.sideEffect)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wpBhW
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1RneI)}>
              <div className={classNames(projectcss.all, sty.freeBox___2Pah1)}>
                <div className={classNames(projectcss.all, sty.freeBox__qh3Px)}>
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__prqn)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gluq4
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iXgtK
                          )}
                        >
                          {""}
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__ecInm)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "15px"
                              : "20px"
                          }
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/liom_tools/images/image42.svg",
                            fullWidth: 24,
                            fullHeight: 24,
                            aspectRatio: 1
                          }}
                        />
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__lWslg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qlZak
                      )}
                    >
                      {""}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oAXL
                      )}
                    >
                      {""}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cc0Jl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uIepJ
                      )}
                    >
                      {""}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mJnu4
                      )}
                    >
                      {""}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__eWfA)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__sdyM3)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    height={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "120"
                        : "150"
                    }
                    loading={"lazy"}
                    width={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "120"
                        : "150"
                    }
                  />
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___7Xfu9)}>
            <div className={classNames(projectcss.all, sty.freeBox__ctvdL)}>
              {(() => {
                const child$Props = {
                  bordered: true,
                  className: classNames("__wab_instance", sty.collapseBaby),
                  expandIcon: (
                    <React.Fragment>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__khQ6B)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"15px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_tools/images/image32.svg",
                          fullWidth: 16,
                          fullHeight: 16,
                          aspectRatio: 1
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__l9Hpk)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"25px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_tools/images/image31.svg",
                          fullWidth: 16,
                          fullHeight: 16,
                          aspectRatio: 1
                        }}
                      />
                    </React.Fragment>
                  ),
                  expandIconPosition: "end",
                  ghost: true,
                  label2: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sjYFh
                      )}
                    >
                      {
                        "\u062a\u0648\u0636\u06cc\u062d \u0631\u0627\u062c\u0628 \u0628\u0686\u0647"
                      }
                    </div>
                  ),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "open",
                      ["collapseBaby", "open"],
                      AntdSingleCollapse_Helpers
                    ).apply(null, eventArgs);
                  },
                  open: generateStateValueProp($state, [
                    "collapseBaby",
                    "open"
                  ]),
                  showArrow: true,
                  size: "large"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "open",
                      plasmicStateName: "collapseBaby.open"
                    }
                  ],
                  [],
                  AntdSingleCollapse_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdSingleCollapse
                    data-plasmic-name={"collapseBaby"}
                    data-plasmic-override={overrides.collapseBaby}
                    {...child$Props}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__weiaB
                      )}
                    >
                      {""}
                    </div>
                  </AntdSingleCollapse>
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__f8TFd)}>
              {(() => {
                const child$Props = {
                  bordered: true,
                  className: classNames("__wab_instance", sty.collapseMother),
                  expandIcon: (
                    <React.Fragment>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__hWuO)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"15px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_tools/images/image32.svg",
                          fullWidth: 16,
                          fullHeight: 16,
                          aspectRatio: 1
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__cIlAt)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"25px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_tools/images/image31.svg",
                          fullWidth: 16,
                          fullHeight: 16,
                          aspectRatio: 1
                        }}
                      />
                    </React.Fragment>
                  ),
                  expandIconPosition: "end",
                  ghost: true,
                  label2: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u2Ytr
                      )}
                    >
                      {
                        "\u0635\u062d\u0628\u062a \u0628\u0627 \u0645\u0627\u062f\u0631"
                      }
                    </div>
                  ),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "open",
                      ["collapseMother", "open"],
                      AntdSingleCollapse_Helpers
                    ).apply(null, eventArgs);
                  },
                  open: generateStateValueProp($state, [
                    "collapseMother",
                    "open"
                  ]),
                  showArrow: true,
                  size: "large"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "open",
                      plasmicStateName: "collapseMother.open"
                    }
                  ],
                  [],
                  AntdSingleCollapse_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdSingleCollapse
                    data-plasmic-name={"collapseMother"}
                    data-plasmic-override={overrides.collapseMother}
                    {...child$Props}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wnPxM
                      )}
                    >
                      {""}
                    </div>
                  </AntdSingleCollapse>
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__vpszJ)}>
              {(() => {
                const child$Props = {
                  bordered: true,
                  className: classNames("__wab_instance", sty.collapseHealth),
                  expandIcon: (
                    <React.Fragment>
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__n1Ppm)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"15px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_tools/images/image32.svg",
                          fullWidth: 16,
                          fullHeight: 16,
                          aspectRatio: 1
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__xgGJn)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"25px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_tools/images/image31.svg",
                          fullWidth: 16,
                          fullHeight: 16,
                          aspectRatio: 1
                        }}
                      />
                    </React.Fragment>
                  ),
                  expandIconPosition: "end",
                  ghost: true,
                  label2: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___76Rms
                      )}
                    >
                      {
                        "\u062a\u0648\u0635\u06cc\u0647 \u0648 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u0647\u0627\u06cc \u0633\u0644\u0627\u0645\u062a\u06cc"
                      }
                    </div>
                  ),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "open",
                      ["collapseHealth", "open"],
                      AntdSingleCollapse_Helpers
                    ).apply(null, eventArgs);
                  },
                  open: generateStateValueProp($state, [
                    "collapseHealth",
                    "open"
                  ]),
                  showArrow: true,
                  size: "large"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "open",
                      plasmicStateName: "collapseHealth.open"
                    }
                  ],
                  [],
                  AntdSingleCollapse_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdSingleCollapse
                    data-plasmic-name={"collapseHealth"}
                    data-plasmic-override={overrides.collapseHealth}
                    {...child$Props}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aM2Pc
                      )}
                    >
                      {""}
                    </div>
                  </AntdSingleCollapse>
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__yKtOj)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9E7U6
                )}
              >
                {
                  "\u062f\u0627\u0646\u0644\u0648\u062f \u0627\u067e\u0644\u06cc\u06a9\u06cc\u0634\u0646 \u0644\u06cc\u0648\u0645"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qv0VX
                )}
              >
                {
                  "\u0644\u06cc\u0648\u0645\u060c \u0627\u0628\u0632\u0627\u0631\u06cc \u0647\u0648\u0634\u0645\u0646\u062f \u0628\u0631\u0627\u06cc \u0645\u062f\u06cc\u0631\u06cc\u062a \u067e\u0631\u06cc\u0648\u062f \u0648 \u0628\u0627\u0631\u062f\u0627\u0631\u06cc \u0627\u0633\u062a \u0628\u0631\u0627\u06cc \u062f\u0627\u0646\u0644\u0648\u062f \u0627\u06cc\u0646\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f."
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__r4KC1)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pP2ZN
              )}
            >
              {
                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u06a9\u0627\u0631\u0628\u0631\u06cc"
              }
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__vf8W8)}>
              <Icon186Icon
                className={classNames(projectcss.all, sty.svg__paBdi)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"name"}
                data-plasmic-override={overrides.name}
                className={classNames("__wab_instance", sty.name)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["name", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={"\u0646\u0627\u0645"}
                type={"text"}
                value={generateStateValueProp($state, ["name", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__kqN7J)}>
              <Icon186Icon
                className={classNames(projectcss.all, sty.svg__ifqpb)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"lastname"}
                data-plasmic-override={overrides.lastname}
                className={classNames("__wab_instance", sty.lastname)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "lastname",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={
                  "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                }
                type={"text"}
                value={generateStateValueProp($state, ["lastname", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__aAOfn)}>
              <Icon186Icon
                className={classNames(projectcss.all, sty.svg__yjtEb)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"fathername"}
                data-plasmic-override={overrides.fathername}
                className={classNames("__wab_instance", sty.fathername)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "fathername",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={"\u0646\u0627\u0645 \u067e\u062f\u0631"}
                type={"text"}
                value={generateStateValueProp($state, ["fathername", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tx4PZ)}>
              <Icon187Icon
                className={classNames(projectcss.all, sty.svg__ppd8C)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"city"}
                data-plasmic-override={overrides.city}
                className={classNames("__wab_instance", sty.city)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["city", "value"]).apply(
                    null,
                    eventArgs
                  );
                }}
                placeholder={
                  "\u0634\u0647\u0631 \u0645\u062d\u0644 \u062a\u0648\u0644\u062f"
                }
                type={"text"}
                value={generateStateValueProp($state, ["city", "value"])}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__wQp)}>
              <Icon188Icon
                className={classNames(projectcss.all, sty.svg__nbD6)}
                role={"img"}
              />

              <Input
                data-plasmic-name={"location"}
                data-plasmic-override={overrides.location}
                className={classNames("__wab_instance", sty.location)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "location",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                placeholder={" \u0622\u062f\u0631\u0633"}
                type={"text"}
                value={generateStateValueProp($state, ["location", "value"])}
              />
            </div>
            <ButtonLiom
              data-plasmic-name={"button5"}
              data-plasmic-override={overrides.button5}
              className={classNames("__wab_instance", sty.button5)}
              color={generateStateValueProp($state, ["button5", "color"])}
              load={generateStateValueProp($state, ["button5", "load"])}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["button5", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5PCpk
                )}
              >
                {
                  "\u062b\u0628\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                }
              </div>
            </ButtonLiom>
          </div>
          <Paziresh24Avatar
            data-plasmic-name={"paziresh24Avatar"}
            data-plasmic-override={overrides.paziresh24Avatar}
            className={classNames("__wab_instance", sty.paziresh24Avatar)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "paziresh24LineClamp",
    "button",
    "vigetLiom",
    "popover",
    "button6",
    "button7",
    "switchbest",
    "card15",
    "button9",
    "tabWidget",
    "sideEffect",
    "collapseBaby",
    "collapseMother",
    "collapseHealth",
    "name",
    "lastname",
    "fathername",
    "city",
    "location",
    "button5",
    "paziresh24Avatar"
  ],
  paziresh24LineClamp: ["paziresh24LineClamp"],
  button: ["button"],
  vigetLiom: ["vigetLiom", "popover", "button6", "button7", "switchbest"],
  popover: ["popover", "button6", "button7"],
  button6: ["button6"],
  button7: ["button7"],
  switchbest: ["switchbest"],
  card15: ["card15", "button9"],
  button9: ["button9"],
  tabWidget: ["tabWidget"],
  sideEffect: ["sideEffect"],
  collapseBaby: ["collapseBaby"],
  collapseMother: ["collapseMother"],
  collapseHealth: ["collapseHealth"],
  name: ["name"],
  lastname: ["lastname"],
  fathername: ["fathername"],
  city: ["city"],
  location: ["location"],
  button5: ["button5"],
  paziresh24Avatar: ["paziresh24Avatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  paziresh24LineClamp: typeof Paziresh24LineClamp;
  button: typeof ButtonLiom;
  vigetLiom: typeof VigetLiom;
  popover: typeof AntdPopover;
  button6: typeof ButtonLiom;
  button7: typeof ButtonLiom;
  switchbest: typeof Switchbest;
  card15: "div";
  button9: typeof ButtonLiom;
  tabWidget: typeof TabWidget;
  sideEffect: typeof SideEffect;
  collapseBaby: typeof AntdSingleCollapse;
  collapseMother: typeof AntdSingleCollapse;
  collapseHealth: typeof AntdSingleCollapse;
  name: typeof Input;
  lastname: typeof Input;
  fathername: typeof Input;
  city: typeof Input;
  location: typeof Input;
  button5: typeof ButtonLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTest__VariantsArgs;
    args?: PlasmicTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTest__ArgProps,
          internalVariantPropNames: PlasmicTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTest";
  } else {
    func.displayName = `PlasmicTest.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicTest = Object.assign(
  // Top-level PlasmicTest renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    paziresh24LineClamp: makeNodeComponent("paziresh24LineClamp"),
    button: makeNodeComponent("button"),
    vigetLiom: makeNodeComponent("vigetLiom"),
    popover: makeNodeComponent("popover"),
    button6: makeNodeComponent("button6"),
    button7: makeNodeComponent("button7"),
    switchbest: makeNodeComponent("switchbest"),
    card15: makeNodeComponent("card15"),
    button9: makeNodeComponent("button9"),
    tabWidget: makeNodeComponent("tabWidget"),
    sideEffect: makeNodeComponent("sideEffect"),
    collapseBaby: makeNodeComponent("collapseBaby"),
    collapseMother: makeNodeComponent("collapseMother"),
    collapseHealth: makeNodeComponent("collapseHealth"),
    _name: makeNodeComponent("name"),
    lastname: makeNodeComponent("lastname"),
    fathername: makeNodeComponent("fathername"),
    city: makeNodeComponent("city"),
    location: makeNodeComponent("location"),
    button5: makeNodeComponent("button5"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),

    // Metadata about props expected for PlasmicTest
    internalVariantProps: PlasmicTest__VariantProps,
    internalArgProps: PlasmicTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTest;
/* prettier-ignore-end */
