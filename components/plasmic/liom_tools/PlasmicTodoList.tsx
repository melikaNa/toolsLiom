/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: XPrXVtaYq0ZZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import Checkbox from "../../Checkbox"; // plasmic-import: 2OfjIZt2gJo7/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicTodoList.module.css"; // plasmic-import: XPrXVtaYq0ZZ/css

createPlasmicElementProxy;

export type PlasmicTodoList__VariantMembers = {
  darkMod: "darkMod";
};
export type PlasmicTodoList__VariantsArgs = {
  darkMod?: SingleBooleanChoiceArg<"darkMod">;
};
type VariantPropType = keyof PlasmicTodoList__VariantsArgs;
export const PlasmicTodoList__VariantProps = new Array<VariantPropType>(
  "darkMod"
);

export type PlasmicTodoList__ArgsType = {
  title?: string;
  tasks?: any;
  loading?: boolean;
  userId?: string;
};
type ArgPropType = keyof PlasmicTodoList__ArgsType;
export const PlasmicTodoList__ArgProps = new Array<ArgPropType>(
  "title",
  "tasks",
  "loading",
  "userId"
);

export type PlasmicTodoList__OverridesType = {
  root?: Flex__<"div">;
  lottie?: Flex__<typeof LottieWrapper>;
  checkbox2?: Flex__<typeof Checkbox>;
};

export interface DefaultTodoListProps {
  title?: string;
  tasks?: any;
  loading?: boolean;
  userId?: string;
  darkMod?: SingleBooleanChoiceArg<"darkMod">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTodoList__RenderFunc(props: {
  variants: PlasmicTodoList__VariantsArgs;
  args: PlasmicTodoList__ArgsType;
  overrides: PlasmicTodoList__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          loading: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "darkMod",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.darkMod
      },
      {
        path: "checkbox2[].isChecked",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootdarkMod]: hasVariant($state, "darkMod", "darkMod"),
          [sty.rootglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__ier42, {
          [sty.freeBoxdarkMod__ier42FshNo]: hasVariant(
            $state,
            "darkMod",
            "darkMod"
          ),
          [sty.freeBoxglobal_theme_dark__ier42E9E9C]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__b0Z9H, {
            [sty.freeBoxdarkMod__b0Z9HfshNo]: hasVariant(
              $state,
              "darkMod",
              "darkMod"
            ),
            [sty.freeBoxglobal_theme_dark__b0Z9He9E9C]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1UEh3,
              {
                [sty.textdarkMod___1UEh3FshNo]: hasVariant(
                  $state,
                  "darkMod",
                  "darkMod"
                ),
                [sty.textglobal_theme_dark___1UEh3E9E9C]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u0644\u06cc\u0633\u062a \u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u06cc\u0646 \u0647\u0641\u062a\u0647 \u0628\u0627\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647\u0645:";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          {(() => {
            try {
              return $props.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <LottieWrapper
              data-plasmic-name={"lottie"}
              data-plasmic-override={overrides.lottie}
              animationData={{
                nm: "Loading Dots",
                ddd: 0,
                h: 50,
                w: 100,
                meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                layers: [
                  {
                    ty: 4,
                    nm: "Dot4",
                    sr: 1,
                    st: 0,
                    op: 360,
                    ip: 0,
                    hd: false,
                    ddd: 0,
                    bm: 0,
                    hasMask: false,
                    ao: 0,
                    ks: {
                      a: { a: 0, k: [-284, 92, 0], ix: 1 },
                      s: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [2.61, 2.32, 100],
                            t: 25
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [3.91, 3.47, 100],
                            t: 39
                          },
                          { s: [2.61, 2.32, 100], t: 55 }
                        ],
                        ix: 6
                      },
                      sk: { a: 0, k: 0 },
                      p: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [59.48, 25, 0],
                            t: 25
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [59.48, 23.15, 0],
                            t: 39
                          },
                          { s: [59.48, 25, 0], t: 55 }
                        ],
                        ix: 2
                      },
                      r: { a: 0, k: 0, ix: 10 },
                      sa: { a: 0, k: 0 },
                      o: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [25],
                            t: 25
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [100],
                            t: 39
                          },
                          { s: [25], t: 55 }
                        ],
                        ix: 11
                      }
                    },
                    ef: [],
                    shapes: [
                      {
                        ty: "gr",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Group",
                        nm: "Ellipse 1",
                        ix: 1,
                        cix: 2,
                        np: 3,
                        it: [
                          {
                            ty: "el",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Shape - Ellipse",
                            nm: "Ellipse Path 1",
                            d: 1,
                            p: { a: 0, k: [0, 0], ix: 3 },
                            s: { a: 0, k: [120, 120], ix: 2 }
                          },
                          {
                            ty: "fl",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Graphic - Fill",
                            nm: "Fill 1",
                            c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                            r: 1,
                            o: { a: 0, k: 100, ix: 5 }
                          },
                          {
                            ty: "tr",
                            a: { a: 0, k: [0, 0], ix: 1 },
                            s: { a: 0, k: [100, 100], ix: 3 },
                            sk: { a: 0, k: 0, ix: 4 },
                            p: { a: 0, k: [-284, 92], ix: 2 },
                            r: { a: 0, k: 0, ix: 6 },
                            sa: { a: 0, k: 0, ix: 5 },
                            o: { a: 0, k: 100, ix: 7 }
                          }
                        ]
                      }
                    ],
                    ind: 1
                  },
                  {
                    ty: 4,
                    nm: "Dot3",
                    sr: 1,
                    st: 0,
                    op: 360,
                    ip: 0,
                    hd: false,
                    ddd: 0,
                    bm: 0,
                    hasMask: false,
                    ao: 0,
                    ks: {
                      a: { a: 0, k: [-284, 92, 0], ix: 1 },
                      s: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [2.61, 2.32, 100],
                            t: 17
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [3.91, 3.47, 100],
                            t: 31
                          },
                          { s: [2.61, 2.32, 100], t: 47 }
                        ],
                        ix: 6
                      },
                      sk: { a: 0, k: 0 },
                      p: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [53.23, 25, 0],
                            t: 17
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [53.23, 23.15, 0],
                            t: 31
                          },
                          { s: [53.23, 25, 0], t: 47 }
                        ],
                        ix: 2
                      },
                      r: { a: 0, k: 0, ix: 10 },
                      sa: { a: 0, k: 0 },
                      o: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [25],
                            t: 17
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [100],
                            t: 31
                          },
                          { s: [25], t: 47 }
                        ],
                        ix: 11
                      }
                    },
                    ef: [],
                    shapes: [
                      {
                        ty: "gr",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Group",
                        nm: "Ellipse 1",
                        ix: 1,
                        cix: 2,
                        np: 3,
                        it: [
                          {
                            ty: "el",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Shape - Ellipse",
                            nm: "Ellipse Path 1",
                            d: 1,
                            p: { a: 0, k: [0, 0], ix: 3 },
                            s: { a: 0, k: [120, 120], ix: 2 }
                          },
                          {
                            ty: "fl",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Graphic - Fill",
                            nm: "Fill 1",
                            c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                            r: 1,
                            o: { a: 0, k: 100, ix: 5 }
                          },
                          {
                            ty: "tr",
                            a: { a: 0, k: [0, 0], ix: 1 },
                            s: { a: 0, k: [100, 100], ix: 3 },
                            sk: { a: 0, k: 0, ix: 4 },
                            p: { a: 0, k: [-284, 92], ix: 2 },
                            r: { a: 0, k: 0, ix: 6 },
                            sa: { a: 0, k: 0, ix: 5 },
                            o: { a: 0, k: 100, ix: 7 }
                          }
                        ]
                      }
                    ],
                    ind: 2
                  },
                  {
                    ty: 4,
                    nm: "Dot2",
                    sr: 1,
                    st: 0,
                    op: 360,
                    ip: 0,
                    hd: false,
                    ddd: 0,
                    bm: 0,
                    hasMask: false,
                    ao: 0,
                    ks: {
                      a: { a: 0, k: [-284, 92, 0], ix: 1 },
                      s: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [2.61, 2.32, 100],
                            t: 9
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [3.91, 3.47, 100],
                            t: 23
                          },
                          { s: [2.61, 2.32, 100], t: 39 }
                        ],
                        ix: 6
                      },
                      sk: { a: 0, k: 0 },
                      p: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [46.98, 25, 0],
                            t: 9
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [46.98, 23.15, 0],
                            t: 23
                          },
                          { s: [46.98, 25, 0], t: 39 }
                        ],
                        ix: 2
                      },
                      r: { a: 0, k: 0, ix: 10 },
                      sa: { a: 0, k: 0 },
                      o: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [25],
                            t: 9
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [100],
                            t: 23
                          },
                          { s: [25], t: 39 }
                        ],
                        ix: 11
                      }
                    },
                    ef: [],
                    shapes: [
                      {
                        ty: "gr",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Group",
                        nm: "Ellipse 1",
                        ix: 1,
                        cix: 2,
                        np: 3,
                        it: [
                          {
                            ty: "el",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Shape - Ellipse",
                            nm: "Ellipse Path 1",
                            d: 1,
                            p: { a: 0, k: [0, 0], ix: 3 },
                            s: { a: 0, k: [120, 120], ix: 2 }
                          },
                          {
                            ty: "fl",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Graphic - Fill",
                            nm: "Fill 1",
                            c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                            r: 1,
                            o: { a: 0, k: 100, ix: 5 }
                          },
                          {
                            ty: "tr",
                            a: { a: 0, k: [0, 0], ix: 1 },
                            s: { a: 0, k: [100, 100], ix: 3 },
                            sk: { a: 0, k: 0, ix: 4 },
                            p: { a: 0, k: [-284, 92], ix: 2 },
                            r: { a: 0, k: 0, ix: 6 },
                            sa: { a: 0, k: 0, ix: 5 },
                            o: { a: 0, k: 100, ix: 7 }
                          }
                        ]
                      }
                    ],
                    ind: 3
                  },
                  {
                    ty: 4,
                    nm: "Dot1",
                    sr: 1,
                    st: 0,
                    op: 360,
                    ip: 0,
                    hd: false,
                    ddd: 0,
                    bm: 0,
                    hasMask: false,
                    ao: 0,
                    ks: {
                      a: { a: 0, k: [-284, 92, 0], ix: 1 },
                      s: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [2.61, 2.32, 100],
                            t: 0
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [3.91, 3.47, 100],
                            t: 14
                          },
                          { s: [2.61, 2.32, 100], t: 30 }
                        ],
                        ix: 6
                      },
                      sk: { a: 0, k: 0 },
                      p: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [40.73, 25, 0],
                            t: 0
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [40.73, 23.15, 0],
                            t: 14
                          },
                          { s: [40.73, 25, 0], t: 30 }
                        ],
                        ix: 2
                      },
                      r: { a: 0, k: 0, ix: 10 },
                      sa: { a: 0, k: 0 },
                      o: {
                        a: 1,
                        k: [
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [25],
                            t: 0
                          },
                          {
                            o: { x: 0.333, y: 0 },
                            i: { x: 0.667, y: 1 },
                            s: [100],
                            t: 14
                          },
                          { s: [25], t: 30 }
                        ],
                        ix: 11
                      }
                    },
                    ef: [],
                    shapes: [
                      {
                        ty: "gr",
                        bm: 0,
                        hd: false,
                        mn: "ADBE Vector Group",
                        nm: "Ellipse 1",
                        ix: 1,
                        cix: 2,
                        np: 3,
                        it: [
                          {
                            ty: "el",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Shape - Ellipse",
                            nm: "Ellipse Path 1",
                            d: 1,
                            p: { a: 0, k: [0, 0], ix: 3 },
                            s: { a: 0, k: [120, 120], ix: 2 }
                          },
                          {
                            ty: "fl",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Graphic - Fill",
                            nm: "Fill 1",
                            c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                            r: 1,
                            o: { a: 0, k: 100, ix: 5 }
                          },
                          {
                            ty: "tr",
                            a: { a: 0, k: [0, 0], ix: 1 },
                            s: { a: 0, k: [100, 100], ix: 3 },
                            sk: { a: 0, k: 0, ix: 4 },
                            p: { a: 0, k: [-284, 92], ix: 2 },
                            r: { a: 0, k: 0, ix: 6 },
                            sa: { a: 0, k: 0, ix: 5 },
                            o: { a: 0, k: 100, ix: 7 }
                          }
                        ]
                      }
                    ],
                    ind: 4
                  }
                ],
                v: "5.7.11",
                fr: 60,
                op: 81,
                ip: 0,
                assets: []
              }}
              className={classNames("__wab_instance", sty.lottie, {
                [sty.lottieglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            />
          ) : null}
          {(
            hasVariant(globalVariants, "theme", "dark")
              ? true
              : (() => {
                  try {
                    return !$props.loading && $props.tasks[0].id != null;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          )
            ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.tasks.length > 0 ? $props.tasks : [];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.checkbox2, {
                      [sty.checkbox2darkMod]: hasVariant(
                        $state,
                        "darkMod",
                        "darkMod"
                      ),
                      [sty.checkbox2global_theme_dark]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    }),
                    isChecked:
                      generateStateValueProp($state, [
                        "checkbox2",
                        __plasmic_idx_0,
                        "isChecked"
                      ]) ?? false,
                    key: currentIndex,
                    onChange: async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "checkbox2",
                          __plasmic_idx_0,
                          "isChecked"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async isChecked => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = checked
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/task",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId: $props.userId,
                                        todoId: currentItem.id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["invokeGlobalAction2"] = !checked
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "PUT",
                                  "https://n8n.staas.ir/webhook/task",
                                  undefined,
                                  (() => {
                                    try {
                                      return { id: currentItem.id };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }
                  };

                  initializePlasmicStates(
                    $state,
                    [
                      {
                        name: "checkbox2[].isChecked",
                        initFunc: ({ $props, $state, $queries }) =>
                          (() => {
                            try {
                              return $props.tasks[currentIndex].is_completed;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                      }
                    ],
                    [__plasmic_idx_0]
                  );
                  return (
                    <Checkbox
                      data-plasmic-name={"checkbox2"}
                      data-plasmic-override={overrides.checkbox2}
                      {...child$Props}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__e6Nkb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pv2N4
                          )}
                        >
                          <React.Fragment>
                            {$props.tasks?.[currentIndex]?.tile}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lU8J
                          )}
                        >
                          <React.Fragment>
                            {$props.tasks?.[currentIndex]?.text}
                          </React.Fragment>
                        </div>
                      </div>
                    </Checkbox>
                  );
                })();
              })
            : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "lottie", "checkbox2"],
  lottie: ["lottie"],
  checkbox2: ["checkbox2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  lottie: typeof LottieWrapper;
  checkbox2: typeof Checkbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTodoList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTodoList__VariantsArgs;
    args?: PlasmicTodoList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTodoList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTodoList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTodoList__ArgProps,
          internalVariantPropNames: PlasmicTodoList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTodoList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoList";
  } else {
    func.displayName = `PlasmicTodoList.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoList = Object.assign(
  // Top-level PlasmicTodoList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lottie: makeNodeComponent("lottie"),
    checkbox2: makeNodeComponent("checkbox2"),

    // Metadata about props expected for PlasmicTodoList
    internalVariantProps: PlasmicTodoList__VariantProps,
    internalArgProps: PlasmicTodoList__ArgProps
  }
);

export default PlasmicTodoList;
/* prettier-ignore-end */
