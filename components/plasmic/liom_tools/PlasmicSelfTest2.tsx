/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: zBpg4f-Yi3mN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import SidebarWindow from "../../SidebarWindow"; // plasmic-import: zOZqxY8nkGbN/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import MessageLiom from "../../MessageLiom"; // plasmic-import: xCdoITDvZVKn/component
import SendIcon from "../../SendIcon"; // plasmic-import: HSNJ0v5oD6xT/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import LineClomp from "../../LineClomp"; // plasmic-import: VHAYS5YHy7AC/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfTest2.module.css"; // plasmic-import: zBpg4f-Yi3mN/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon119Icon from "./icons/PlasmicIcon__Icon119"; // plasmic-import: JdBtCI53tCN5/icon
import Icon147Icon from "./icons/PlasmicIcon__Icon147"; // plasmic-import: yU3FWAJzfOsT/icon
import Icon159Icon from "./icons/PlasmicIcon__Icon159"; // plasmic-import: IL7kRYB1zAxE/icon
import Icon158Icon from "./icons/PlasmicIcon__Icon158"; // plasmic-import: D1UPf1eCmdC-/icon
import Icon152Icon from "./icons/PlasmicIcon__Icon152"; // plasmic-import: aN1J4LeWEqGr/icon

createPlasmicElementProxy;

export type PlasmicSelfTest2__VariantMembers = {};
export type PlasmicSelfTest2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfTest2__VariantsArgs;
export const PlasmicSelfTest2__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfTest2__ArgsType = {};
type ArgPropType = keyof PlasmicSelfTest2__ArgsType;
export const PlasmicSelfTest2__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfTest2__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  sidebarWindow?: Flex__<typeof SidebarWindow>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  messageLiom?: Flex__<typeof MessageLiom>;
  section?: Flex__<"section">;
  bottomInput?: Flex__<"div">;
  sendIcon?: Flex__<typeof SendIcon>;
  textArea?: Flex__<typeof AntdTextArea>;
  favicon?: Flex__<typeof Embed>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  drawer?: Flex__<typeof AntdDrawer>;
  buttonLiom3?: Flex__<typeof ButtonLiom>;
  lineClomp?: Flex__<typeof LineClomp>;
  sidebarWindow2?: Flex__<typeof SidebarWindow>;
  buttonLiom4?: Flex__<typeof ButtonLiom>;
};

export interface DefaultSelfTest2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfTest2__RenderFunc(props: {
  variants: PlasmicSelfTest2__VariantsArgs;
  args: PlasmicSelfTest2__ArgsType;
  overrides: PlasmicSelfTest2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "testChat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                // if ($ctx.query.nextQuesion_id == "" || $ctx.query.nextQuesion_id == null) {
                //   []
                // } else {
                //   JSON.parse(localStorage.getItem("test"))
                // }
                // [
                //     {
                //         "text": "Ø³Ù„Ø§Ù…ðŸ‘‹\n  Ù„ÛŒÙˆÙ… Ù‡Ø³ØªÙ…ØŒ Ø¯Ø³ØªÛŒØ§Ø± Ø³Ù„Ø§Ù…Øª .",
                //         "from": "system"
                //     },
                //     {
                //         "text": "Ø§Ú¯Ø± Ø¯Ø±Ø¨Ø§Ø±Ù‡ Ø²ÙˆØ¯Ø§Ù†Ø²Ø§Ù„ÛŒ Ù†Ú¯Ø±Ø§Ù†ÛŒ Ø¯Ø§Ø±ÛŒØŒ Ø§ÛŒÙ† ØªØ³Øª Ø¨Ù‡Øª Ú©Ù…Ú© Ù…ÛŒâ€ŒÚ©Ù†Ù‡ ØªØ§ ÙˆØ¶Ø¹ÛŒØª Ø®ÙˆØ¯Øª Ø±Ùˆ Ø¨Ù‡ØªØ± Ø¨Ø³Ù†Ø¬ÛŒ.",
                //         "from": "system"
                //     },
                //     {
                //         "text": " Ø¨Ø§ Ù¾Ø§Ø³Ø® Ø¨Ù‡ Ú†Ù†Ø¯ Ø³ÙˆØ§Ù„ØŒ Ù…ÛŒâ€ŒØªÙˆÙ†ÛŒØ¯ Ø¯Ø± Ú©Ù…ØªØ± Ø§Ø² Ûµ Ø¯Ù‚ÛŒÙ‚Ù‡ Ø§Ø² Ø§ÛŒÙ†Ú©Ù‡ Ø¢ÛŒØ§ Ø¯Ú†Ø§Ø± Ø²ÙˆØ¯Ø§Ù†Ø²Ø§Ù„ÛŒ Ù‡Ø³ØªÛŒØ¯ ÛŒØ§ Ø®ÛŒØ± Ù…Ø·Ù„Ø¹ Ø´ÙˆÛŒØ¯",
                //         "from": "system"
                //     },
                //     {
                //         "text": "Ø¢Ù…Ø§Ø¯Ù‡ Ø§ÛŒ Ø´Ø±ÙˆØ¹ Ú©Ù†ÛŒÙ…ØŸ",
                //         "question": {
                //             "lock": 0
                //         },
                //         "from": "system",
                //         "btnText": "Ø´Ø±ÙˆØ¹ Ú©Ù†ÛŒÙ…",
                //         "options": [
                //             {
                //                 "id": 1,
                //                 "text": "Ø´Ø±ÙˆØ¹ Ú©Ù†ÛŒÙ…"
                //             }
                //         ]
                //     }
                // ]
                []
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\u0633\u0644\u0627\u0645\ud83d\udc4b\n  \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645\u060c \u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a .",
                    from: "system"
                  },
                  {
                    text: "\u0627\u06af\u0631 \u062f\u0631\u0628\u0627\u0631\u0647 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0646\u06af\u0631\u0627\u0646\u06cc \u062f\u0627\u0631\u06cc\u060c \u0627\u06cc\u0646 \u062a\u0633\u062a \u0628\u0647\u062a \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u062a\u0627 \u0648\u0636\u0639\u06cc\u062a \u062e\u0648\u062f\u062a \u0631\u0648 \u0628\u0647\u062a\u0631 \u0628\u0633\u0646\u062c\u06cc.",
                    from: "system"
                  },
                  {
                    text: " \u0628\u0627 \u067e\u0627\u0633\u062e \u0628\u0647 \u0686\u0646\u062f \u0633\u0648\u0627\u0644\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u062f\u0631 \u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f5 \u062f\u0642\u06cc\u0642\u0647 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0622\u06cc\u0627 \u062f\u0686\u0627\u0631 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0647\u0633\u062a\u06cc\u062f \u06cc\u0627 \u062e\u06cc\u0631 \u0645\u0637\u0644\u0639 \u0634\u0648\u06cc\u062f",
                    from: "system"
                  },
                  {
                    text: "\u0622\u0645\u0627\u062f\u0647 \u0627\u06cc \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645\u061f",
                    question: { lock: 0 },
                    from: "system",
                    btnText:
                      "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",
                    options: [
                      {
                        id: 1,
                        text: "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645"
                      }
                    ]
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("user_id");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "ferst",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.nextQuesion_id == null ||
                $ctx.query.nextQuesion_id == ""
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextQuesionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.testChat
                  .slice()
                  .reverse()
                  .find(item => item.question);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lock",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadinkBotten",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "totalTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 35
      },
      {
        path: "retestTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.nextQuesion_id == "" ||
                $ctx.query.nextQuesion_id == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "edit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.status == "" || $ctx.query.status == null
                ? ""
                : $ctx.query.status;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "buy",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showgreen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "authCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "data",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "infoTest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "a0becceb-8ca9-49c0-a9d3-7c192f85129c"
      },
      {
        path: "free",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://tools.liom.app/self-test/?user_id=${$state.userId}&type=${$state.type}&app=${$ctx.query.app}&session_id=${$state.sessionId}&inApp=${$ctx.query.inApp}&origin=${$ctx.query.origin}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "botSessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sendIcon.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sendIcon.diable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.textArea.value == "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "sidebarWindow.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sessions",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "buttonLiom2[][].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3[][].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "lineClomp[][].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "sidebarWindow2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "buttonLiom4[][].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "indexchat",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicSelfTest2.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSelfTest2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSelfTest2.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicSelfTest2.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicSelfTest2.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicSelfTest2.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicSelfTest2.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicSelfTest2.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["user"] =
                window.token == undefined
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.staas.ir/webhook/chatBotServiceUser",
                          undefined,
                          (() => {
                            try {
                              return {
                                origin_user_id: $ctx.query.origin_user_id,
                                bot_name: "period_chat",
                                mobile: "",
                                email: "",
                                name: ""
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["user"] != null &&
                typeof $steps["user"] === "object" &&
                typeof $steps["user"].then === "function"
              ) {
                $steps["user"] = await $steps["user"];
              }

              $steps["runCode"] = $steps.user?.data?.token
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          window.token = $steps.user.data.token;
                          return ($state.token = $steps.user.data.token);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["sessions"] =
                window.token != undefined
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://n8n.staas.ir/webhook/chatBotServiceSession?bot_name=period_chat",
                          undefined,
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: {
                                  Authorization: "Bearer " + window.token
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["sessions"] != null &&
                typeof $steps["sessions"] === "object" &&
                typeof $steps["sessions"].then === "function"
              ) {
                $steps["sessions"] = await $steps["sessions"];
              }

              $steps["updateSessions"] = (
                $steps.sessions?.data?.list ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["sessions"]
                      },
                      operation: 0,
                      value: $steps.sessions.data.list
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSessions"] != null &&
                typeof $steps["updateSessions"] === "object" &&
                typeof $steps["updateSessions"].then === "function"
              ) {
                $steps["updateSessions"] = await $steps["updateSessions"];
              }
            }}
          />

          <SidebarWindow
            data-plasmic-name={"sidebarWindow"}
            data-plasmic-override={overrides.sidebarWindow}
            className={classNames("__wab_instance", sty.sidebarWindow)}
            newChat={async event => {
              const $steps = {};

              $steps["updateTestChat"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["testChat"]
                      },
                      operation: 0,
                      value: []
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTestChat"] != null &&
                typeof $steps["updateTestChat"] === "object" &&
                typeof $steps["updateTestChat"].then === "function"
              ) {
                $steps["updateTestChat"] = await $steps["updateTestChat"];
              }
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebarWindow",
                "open"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["sidebarWindow", "open"])}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    const objects = $state.sessions;
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    const groupedByDays = [];
                    objects.forEach(obj => {
                      const dt = new Date(obj.timestamp.replace(" ", "T"));
                      dt.setHours(0, 0, 0, 0);
                      const diffTime = today - dt;
                      const diffDays = Math.floor(
                        diffTime / (1000 * 60 * 60 * 24)
                      );
                      let label;
                      if (diffDays === 0) {
                        label = "Ø§Ù…Ø±ÙˆØ²";
                      } else if (diffDays === 1) {
                        label = "Ø¯ÛŒØ±ÙˆØ²";
                      } else if (diffDays >= 2 && diffDays <= 6) {
                        label = `${diffDays} Ø±ÙˆØ² Ù¾ÛŒØ´`;
                      } else if (diffDays === 7) {
                        label = "Û· Ø±ÙˆØ² Ù¾ÛŒØ´";
                      } else {
                        const options = {
                          year: "numeric",
                          month: "2-digit",
                          day: "2-digit"
                        };
                        label = new Intl.DateTimeFormat(
                          "fa-IR",
                          options
                        ).format(dt);
                      }
                      const existingGroup = groupedByDays.find(
                        item => item.label === label
                      );
                      if (existingGroup) {
                        existingGroup.data.push(obj);
                      } else {
                        groupedByDays.push({
                          label: label,
                          data: [obj]
                        });
                      }
                    });
                    return groupedByDays;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__slU7O)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pSRaw
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.label;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return currentItem.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                    const currentItem = __plasmic_item_1;
                    const currentIndex = __plasmic_idx_1;
                    return (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.buttonLiom2
                        ),
                        color: generateStateValueProp($state, [
                          "buttonLiom2",
                          __plasmic_idx_0,
                          __plasmic_idx_1,
                          "color"
                        ]),
                        key: currentIndex,
                        onClick: async event => {
                          const $steps = {};

                          $steps["chatSession"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "https://n8n.staas.ir/webhook/chatBotServiceChats",
                                    (() => {
                                      try {
                                        return { session_id: currentItem.id };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " + window.token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["chatSession"] != null &&
                            typeof $steps["chatSession"] === "object" &&
                            typeof $steps["chatSession"].then === "function"
                          ) {
                            $steps["chatSession"] = await $steps["chatSession"];
                          }

                          $steps["updateTestChat"] = (
                            $steps.chatSession?.data ? true : false
                          )
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["testChat"]
                                  },
                                  operation: 0,
                                  value: $steps.chatSession.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTestChat"] != null &&
                            typeof $steps["updateTestChat"] === "object" &&
                            typeof $steps["updateTestChat"].then === "function"
                          ) {
                            $steps["updateTestChat"] = await $steps[
                              "updateTestChat"
                            ];
                          }
                        },
                        onColorChange: async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "buttonLiom2",
                              __plasmic_idx_0,
                              __plasmic_idx_1,
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        size: "compact"
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "buttonLiom2[][].color",
                            initFunc: ({ $props, $state, $queries }) => "clear"
                          }
                        ],
                        [__plasmic_idx_0, __plasmic_idx_1]
                      );
                      return (
                        <ButtonLiom
                          data-plasmic-name={"buttonLiom2"}
                          data-plasmic-override={overrides.buttonLiom2}
                          {...child$Props}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kVxtp
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.bot_session_id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Button";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </ButtonLiom>
                      );
                    })();
                  })}
                </div>
              );
            })}
          </SidebarWindow>
          <div
            className={classNames(projectcss.all, sty.freeBox__nQ2Fe, {
              [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__nQ2FeYcZU]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            })}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ztqih)}
              style={(() => {
                try {
                  return {
                    height: $state.testChat?.length == 0 ? "auto" : "80vh",
                    left: 0,
                    right: 0,
                    bottom: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dAtf, ``)}
                id={"messegeBox"}
              >
                <Reveal
                  big={false}
                  cascade={false}
                  className={classNames("__wab_instance", sty.reveal__wpLRq)}
                  delay={0}
                  direction={"up"}
                  duration={1000}
                  effect={"fade"}
                  triggerOnce={true}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.testChat;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <MessageLiom
                        data-plasmic-name={"messageLiom"}
                        data-plasmic-override={overrides.messageLiom}
                        bot={true}
                        className={classNames(
                          "__wab_instance",
                          sty.messageLiom
                        )}
                        endMessege={(() => {
                          try {
                            return (
                              $state.testChat[currentIndex].from === "system" &&
                              ($state.testChat[currentIndex + 1]?.from !==
                                "system" ||
                                $state.testChat.length - 1 === currentIndex)
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        hint={(() => {
                          try {
                            return currentItem.tip;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        liomAnswer={(() => {
                          try {
                            return currentItem.from == "user";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        loadingMessage={(() => {
                          try {
                            return currentItem.loading == true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        slot={
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.testChat
                                  .slice()
                                  .reverse()
                                  .find(item => item.from === "user")
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ejhAs
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateEdit"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["edit"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateEdit"] != null &&
                                    typeof $steps["updateEdit"] === "object" &&
                                    typeof $steps["updateEdit"].then ===
                                      "function"
                                  ) {
                                    $steps["updateEdit"] = await $steps[
                                      "updateEdit"
                                    ];
                                  }

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              const reversedIndex =
                                                $state.testChat
                                                  .slice()
                                                  .reverse()
                                                  .findIndex(
                                                    item => item.question
                                                  );
                                              if (reversedIndex !== -1) {
                                                const originalIndex =
                                                  $state.testChat.length -
                                                  1 -
                                                  reversedIndex;
                                                const previousReversedIndex =
                                                  $state.testChat
                                                    .slice(0, originalIndex)
                                                    .reverse()
                                                    .findIndex(
                                                      item => item.question
                                                    );
                                                if (
                                                  previousReversedIndex !== -1
                                                ) {
                                                  const previousOriginalIndex =
                                                    originalIndex -
                                                    1 -
                                                    previousReversedIndex;
                                                  return $state.testChat.splice(
                                                    previousOriginalIndex + 1
                                                  );
                                                }
                                              }
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["invokeGlobalAction"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "PUT",
                                            "https://n8n.staas.ir/webhook/selfTestLogs",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  session_id: $state.sessionId,
                                                  question_id:
                                                    $state.testChat[
                                                      $state.testChat.length - 1
                                                    ].question.id
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }
                                }}
                              >
                                <Icon119Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ggssY
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return (() => {
                                  const lastUserMessage = $state.testChat
                                    .slice()
                                    .reverse()
                                    .find(
                                      item =>
                                        item.from === "system" &&
                                        item.tip == true
                                    )
                                    ? true
                                    : false;
                                  return lastUserMessage;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lnlxy
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateEdit"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["edit"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateEdit"] != null &&
                                    typeof $steps["updateEdit"] === "object" &&
                                    typeof $steps["updateEdit"].then ===
                                      "function"
                                  ) {
                                    $steps["updateEdit"] = await $steps[
                                      "updateEdit"
                                    ];
                                  }

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              const reversedIndex =
                                                $state.testChat
                                                  .slice()
                                                  .reverse()
                                                  .findIndex(
                                                    item => item.question
                                                  );
                                              if (reversedIndex !== -1) {
                                                const originalIndex =
                                                  $state.testChat.length -
                                                  1 -
                                                  reversedIndex;
                                                const previousReversedIndex =
                                                  $state.testChat
                                                    .slice(0, originalIndex)
                                                    .reverse()
                                                    .findIndex(
                                                      item => item.question
                                                    );
                                                if (
                                                  previousReversedIndex !== -1
                                                ) {
                                                  const previousOriginalIndex =
                                                    originalIndex -
                                                    1 -
                                                    previousReversedIndex;
                                                  return $state.testChat.splice(
                                                    previousOriginalIndex + 1
                                                  );
                                                }
                                              }
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["updateTestChat2"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "PUT",
                                            "https://n8n.staas.ir/webhook/selfTestLogs",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  session_id: $state.sessionId,
                                                  question_id:
                                                    $state.testChat[
                                                      $state.testChat.length - 1
                                                    ].question.id
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateTestChat2"] != null &&
                                    typeof $steps["updateTestChat2"] ===
                                      "object" &&
                                    typeof $steps["updateTestChat2"].then ===
                                      "function"
                                  ) {
                                    $steps["updateTestChat2"] = await $steps[
                                      "updateTestChat2"
                                    ];
                                  }
                                }}
                              >
                                <Icon119Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__oj7Or
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__f1Zjo
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "ÙˆÛŒØ±Ø§ÛŒØ´ Ù¾Ø§Ø³Ø®";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            ) : null}
                          </React.Fragment>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pPnwC,
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? `text-box  ${
                                  currentItem.from == "system" ? "hide" : ""
                                }`
                              : (() => {
                                  try {
                                    return currentItem.from == "system"
                                      ? "hide"
                                      : "";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                          )}
                          id={(() => {
                            try {
                              return currentItem.from == "system"
                                ? "typedtext" + currentIndex
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          style={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  display: "inline-block",
                                  width: "auto",
                                  "overflow-wrap": "break-word"
                                }
                              : undefined
                          }
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.text;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Lorem ipsum dolor sit amet,";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </MessageLiom>
                    );
                  })}
                </Reveal>
              </Stack__>
            </Stack__>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
              style={(() => {
                try {
                  return {
                    position:
                      $state.testChat?.length == 0 ? "unset" : "absolute",
                    left: 0,
                    right: 0,
                    bottom: 0
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {(() => {
                try {
                  return $state.testChat?.length == 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wM5Uw)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7Fqi2)}
                  >
                    <Icon147Icon
                      className={classNames(projectcss.all, sty.svg__whkzy)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bx83C
                      )}
                    >
                      {
                        "\u0633\u0644\u0627\u0645! \u0645\u0646 \u062f\u0633\u062a\u06cc\u0627\u0631 \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645."
                      }
                    </div>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ksxVg
                    )}
                  >
                    {
                      "\u0686\u06af\u0648\u0646\u0647 \u0645\u06cc \u062a\u0648\u0627\u0646\u0645 \u0628\u0647 \u0634\u0645\u0627 \u06a9\u0645\u06a9 \u06a9\u0646\u0645\u061f"
                    }
                  </div>
                </Stack__>
              ) : null}
              <Reveal
                big={true}
                className={classNames("__wab_instance", sty.reveal__xbg9Z)}
                effect={"fade"}
                triggerOnce={true}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__tz0Y3, ``)}
                  id={"selectBox"}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"bottomInput"}
                    data-plasmic-override={overrides.bottomInput}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.bottomInput)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oNon)}
                    >
                      <SendIcon
                        data-plasmic-name={"sendIcon"}
                        data-plasmic-override={overrides.sendIcon}
                        className={classNames("__wab_instance", sty.sendIcon)}
                        diable={generateStateValueProp($state, [
                          "sendIcon",
                          "diable"
                        ])}
                        load={generateStateValueProp($state, [
                          "sendIcon",
                          "load"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode3"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.sendIcon.load = true;
                                      return ($state.sendIcon.diable = true);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode3"] != null &&
                            typeof $steps["runCode3"] === "object" &&
                            typeof $steps["runCode3"].then === "function"
                          ) {
                            $steps["runCode3"] = await $steps["runCode3"];
                          }

                          $steps["newSession"] =
                            $state.testChat.length === 0
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://n8n.staas.ir/webhook/chatBotServiceSession",
                                      undefined,
                                      (() => {
                                        try {
                                          return { bot_name: "period_chat" };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              Authorization:
                                                "Bearer " + window.token
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["newSession"] != null &&
                            typeof $steps["newSession"] === "object" &&
                            typeof $steps["newSession"].then === "function"
                          ) {
                            $steps["newSession"] = await $steps["newSession"];
                          }

                          $steps["runCode2"] = (
                            $steps.newSession?.data?.session_id ? true : false
                          )
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.sessionId =
                                        $steps.newSession.data.session_id;
                                      return ($state.botSessionId =
                                        $steps.newSession.data.bot_session_id);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode2"] != null &&
                            typeof $steps["runCode2"] === "object" &&
                            typeof $steps["runCode2"].then === "function"
                          ) {
                            $steps["runCode2"] = await $steps["runCode2"];
                          }

                          $steps["chat"] =
                            $state.sessionId != "" && $state.botSessionId != ""
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://n8n.staas.ir/webhook/chatBotServiceChats",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            session_id: $state.sessionId,
                                            bot_session_id: $state.botSessionId,
                                            message: $state.textArea.value
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      (() => {
                                        try {
                                          return {
                                            headers: {
                                              Authorization:
                                                "Bearer " + window.token
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["chat"] != null &&
                            typeof $steps["chat"] === "object" &&
                            typeof $steps["chat"].then === "function"
                          ) {
                            $steps["chat"] = await $steps["chat"];
                          }

                          $steps["runCode"] = $steps.chat?.data?.success
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $state.testChat.push({
                                      text: $state.textArea.value,
                                      from: "user"
                                    });
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["updateTextAreaValue"] = $steps.chat?.data
                            ?.success
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["textArea", "value"]
                                  },
                                  operation: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, undefined);
                                  return undefined;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTextAreaValue"] != null &&
                            typeof $steps["updateTextAreaValue"] === "object" &&
                            typeof $steps["updateTextAreaValue"].then ===
                              "function"
                          ) {
                            $steps["updateTextAreaValue"] = await $steps[
                              "updateTextAreaValue"
                            ];
                          }

                          $steps["runCode4"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.sendIcon.load = false;
                                      return ($state.sendIcon.diable = false);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode4"] != null &&
                            typeof $steps["runCode4"] === "object" &&
                            typeof $steps["runCode4"].then === "function"
                          ) {
                            $steps["runCode4"] = await $steps["runCode4"];
                          }

                          $steps["runCode5"] = $steps.chat?.data?.success
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.testChat.push({
                                        text: $steps.chat.data.message,
                                        from: "system"
                                      });
                                      return ($state.indexchat =
                                        $state.testChat.length - 1);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode5"] != null &&
                            typeof $steps["runCode5"] === "object" &&
                            typeof $steps["runCode5"].then === "function"
                          ) {
                            $steps["runCode5"] = await $steps["runCode5"];
                          }

                          $steps["invokeGlobalAction"] = $steps.chat?.data
                            ?.success
                            ? (() => {
                                const actionArgs = { args: [500] };
                                return $globalActions["Fragment.wait"]?.apply(
                                  null,
                                  [...actionArgs.args]
                                );
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["runCode6"] = $steps.chat?.data?.success
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.typewriter();
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode6"] != null &&
                            typeof $steps["runCode6"] === "object" &&
                            typeof $steps["runCode6"].then === "function"
                          ) {
                            $steps["runCode6"] = await $steps["runCode6"];
                          }
                        }}
                        onDiableChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "sendIcon",
                            "diable"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "sendIcon",
                            "load"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      />

                      {(() => {
                        const child$Props = {
                          autoSize: true,
                          className: classNames("__wab_instance", sty.textArea),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["textArea", "value"],
                              AntdTextArea_Helpers
                            ).apply(null, eventArgs);
                          },
                          placeholder:
                            "\u067e\u06cc\u0627\u0645 \u062e\u0648\u062f \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...",
                          value: generateStateValueProp($state, [
                            "textArea",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "textArea.value"
                            }
                          ],
                          [],
                          AntdTextArea_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdTextArea
                            data-plasmic-name={"textArea"}
                            data-plasmic-override={overrides.textArea}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </Stack__>
                </div>
              </Reveal>
            </section>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml___9LDwa)}
              code={
                "<!-- Hotjar Tracking Code for tools.liom.app -->\r\n<script>\r\n    (function(h,o,t,j,a,r){\r\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\r\n        h._hjSettings={hjid:5253188,hjsv:6};\r\n        a=o.getElementsByTagName('head')[0];\r\n        r=o.createElement('script');r.async=1;\r\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\r\n        a.appendChild(r);\r\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\r\n</script>"
              }
            />

            <Embed
              data-plasmic-name={"favicon"}
              data-plasmic-override={overrides.favicon}
              className={classNames("__wab_instance", sty.favicon)}
              code={
                "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n<script src=\"https://developer.eitaa.com/eitaa-web-app.js\">\r\n</script>\r\n<script>\r\n  window.Eitaa.WebApp.ready();\r\n  window.Eitaa.WebApp.expand();\r\n  window.Eitaa.WebApp.isClosingConfirmationEnabled = true;\r\n</script>\r\n"
              }
            />
          </div>
          <HeaderLiom
            data-plasmic-name={"headerLiom"}
            data-plasmic-override={overrides.headerLiom}
            className={classNames("__wab_instance", sty.headerLiom)}
            slot={
              <Paziresh24Avatar
                data-plasmic-name={"paziresh24Avatar"}
                data-plasmic-override={overrides.paziresh24Avatar}
                className={classNames("__wab_instance", sty.paziresh24Avatar)}
              />
            }
            slot2={
              <Icon159Icon
                className={classNames(projectcss.all, sty.svg__gWTuv)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDrawerOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["drawer", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDrawerOpen"] != null &&
                    typeof $steps["updateDrawerOpen"] === "object" &&
                    typeof $steps["updateDrawerOpen"].then === "function"
                  ) {
                    $steps["updateDrawerOpen"] = await $steps[
                      "updateDrawerOpen"
                    ];
                  }
                }}
                role={"img"}
              />
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___58OuO
              )}
            >
              {"\u062f\u0633\u062a\u06cc\u0627\u0631 \u0644\u06cc\u0648\u0645"}
            </div>
            <Icon158Icon
              className={classNames(projectcss.all, sty.svg__aaU)}
              onClick={async event => {
                const $steps = {};

                $steps["updateTestChat"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["testChat"]
                        },
                        operation: 0,
                        value: []
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTestChat"] != null &&
                  typeof $steps["updateTestChat"] === "object" &&
                  typeof $steps["updateTestChat"].then === "function"
                ) {
                  $steps["updateTestChat"] = await $steps["updateTestChat"];
                }
              }}
              role={"img"}
            />
          </HeaderLiom>
          <AntdDrawer
            data-plasmic-name={"drawer"}
            data-plasmic-override={overrides.drawer}
            className={classNames("__wab_instance", sty.drawer)}
            closeIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___6Ao8H)}
                role={"img"}
              />
            }
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              plasmic_hamdast_sdk_css.plasmic_tokens
            )}
            drawerScopeClassName={sty["drawer__drawer"]}
            forceRender={false}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["drawer", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["drawer", "open"])}
            placement={"right"}
            title={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__z4Az9)}
              >
                <Icon152Icon
                  className={classNames(projectcss.all, sty.svg__a3C1H)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ejZs3
                  )}
                >
                  {
                    "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0644\u06cc\u0648\u0645"
                  }
                </div>
              </Stack__>
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox___7JD1Q)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      const objects = $state.sessions;
                      const today = new Date();
                      today.setHours(0, 0, 0, 0);
                      const groupedByDays = [];
                      objects.forEach(obj => {
                        const dt = new Date(obj.timestamp.replace(" ", "T"));
                        dt.setHours(0, 0, 0, 0);
                        const diffTime = today - dt;
                        const diffDays = Math.floor(
                          diffTime / (1000 * 60 * 60 * 24)
                        );
                        let label;
                        if (diffDays === 0) {
                          label = "Ø§Ù…Ø±ÙˆØ²";
                        } else if (diffDays === 1) {
                          label = "Ø¯ÛŒØ±ÙˆØ²";
                        } else if (diffDays >= 2 && diffDays <= 6) {
                          label = `${diffDays} Ø±ÙˆØ² Ù¾ÛŒØ´`;
                        } else if (diffDays === 7) {
                          label = "Û· Ø±ÙˆØ² Ù¾ÛŒØ´";
                        } else {
                          const options = {
                            year: "numeric",
                            month: "2-digit",
                            day: "2-digit"
                          };
                          label = new Intl.DateTimeFormat(
                            "fa-IR",
                            options
                          ).format(dt);
                        }
                        const existingGroup = groupedByDays.find(
                          item => item.label === label
                        );
                        if (existingGroup) {
                          existingGroup.data.push(obj);
                        } else {
                          groupedByDays.push({
                            label: label,
                            data: [obj]
                          });
                        }
                      });
                      return groupedByDays;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nqKMj)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v1Zlm
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return currentItem.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_1, __plasmic_idx_1) => {
                      const currentItem = __plasmic_item_1;
                      const currentIndex = __plasmic_idx_1;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.buttonLiom3
                          ),
                          color: generateStateValueProp($state, [
                            "buttonLiom3",
                            __plasmic_idx_0,
                            __plasmic_idx_1,
                            "color"
                          ]),
                          key: currentIndex,
                          onColorChange: async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "buttonLiom3",
                                __plasmic_idx_0,
                                __plasmic_idx_1,
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          size: "compact"
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "buttonLiom3[][].color",
                              initFunc: ({ $props, $state, $queries }) =>
                                "clear"
                            }
                          ],
                          [__plasmic_idx_0, __plasmic_idx_1]
                        );
                        return (
                          <ButtonLiom
                            data-plasmic-name={"buttonLiom3"}
                            data-plasmic-override={overrides.buttonLiom3}
                            {...child$Props}
                          >
                            <LineClomp
                              data-plasmic-name={"lineClomp"}
                              data-plasmic-override={overrides.lineClomp}
                              className={classNames(
                                "__wab_instance",
                                sty.lineClomp
                              )}
                              numberOfLine={1}
                              onLineChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "lineClomp",
                                  __plasmic_idx_0,
                                  __plasmic_idx_1,
                                  "line"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2Z7K
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.bot_session_id;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Button";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </LineClomp>
                          </ButtonLiom>
                        );
                      })();
                    })}
                  </div>
                );
              })}
            </div>
            <SidebarWindow
              data-plasmic-name={"sidebarWindow2"}
              data-plasmic-override={overrides.sidebarWindow2}
              className={classNames("__wab_instance", sty.sidebarWindow2)}
              newChat={async event => {
                const $steps = {};

                $steps["updateTestChat"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["testChat"]
                        },
                        operation: 0,
                        value: []
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTestChat"] != null &&
                  typeof $steps["updateTestChat"] === "object" &&
                  typeof $steps["updateTestChat"].then === "function"
                ) {
                  $steps["updateTestChat"] = await $steps["updateTestChat"];
                }
              }}
              onOpenChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "sidebarWindow2",
                  "open"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              open={generateStateValueProp($state, ["sidebarWindow2", "open"])}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return (() => {
                      const objects = $state.sessions;
                      const today = new Date();
                      today.setHours(0, 0, 0, 0);
                      const groupedByDays = [];
                      objects.forEach(obj => {
                        const dt = new Date(obj.timestamp.replace(" ", "T"));
                        dt.setHours(0, 0, 0, 0);
                        const diffTime = today - dt;
                        const diffDays = Math.floor(
                          diffTime / (1000 * 60 * 60 * 24)
                        );
                        let label;
                        if (diffDays === 0) {
                          label = "Ø§Ù…Ø±ÙˆØ²";
                        } else if (diffDays === 1) {
                          label = "Ø¯ÛŒØ±ÙˆØ²";
                        } else if (diffDays >= 2 && diffDays <= 6) {
                          label = `${diffDays} Ø±ÙˆØ² Ù¾ÛŒØ´`;
                        } else if (diffDays === 7) {
                          label = "Û· Ø±ÙˆØ² Ù¾ÛŒØ´";
                        } else {
                          const options = {
                            year: "numeric",
                            month: "2-digit",
                            day: "2-digit"
                          };
                          label = new Intl.DateTimeFormat(
                            "fa-IR",
                            options
                          ).format(dt);
                        }
                        const existingGroup = groupedByDays.find(
                          item => item.label === label
                        );
                        if (existingGroup) {
                          existingGroup.data.push(obj);
                        } else {
                          groupedByDays.push({
                            label: label,
                            data: [obj]
                          });
                        }
                      });
                      return groupedByDays;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dbu9L)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nodbo
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.label;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return currentItem.data;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_1, __plasmic_idx_1) => {
                      const currentItem = __plasmic_item_1;
                      const currentIndex = __plasmic_idx_1;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.buttonLiom4
                          ),
                          color: generateStateValueProp($state, [
                            "buttonLiom4",
                            __plasmic_idx_0,
                            __plasmic_idx_1,
                            "color"
                          ]),
                          key: currentIndex,
                          onColorChange: async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "buttonLiom4",
                                __plasmic_idx_0,
                                __plasmic_idx_1,
                                "color"
                              ])(eventArgs[0]);
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          size: "compact"
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "buttonLiom4[][].color",
                              initFunc: ({ $props, $state, $queries }) =>
                                "clear"
                            }
                          ],
                          [__plasmic_idx_0, __plasmic_idx_1]
                        );
                        return (
                          <ButtonLiom
                            data-plasmic-name={"buttonLiom4"}
                            data-plasmic-override={overrides.buttonLiom4}
                            {...child$Props}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xyyVg
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.bot_session_id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </ButtonLiom>
                        );
                      })();
                    })}
                  </div>
                );
              })}
            </SidebarWindow>
          </AntdDrawer>
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__iMa8M)}
            code={(() => {
              try {
                return `<script>
window.typewriter = function() {
    var destination = document.getElementById("typedtext${$state.indexchat}");
    var aText = [destination.getAttribute('data-text') || destination.textContent];
    
    destination.classList.remove("hide");
    var iSpeed = 50;
    var iIndex = 0;
    var iArrLength = aText[0].length;
    var iScrollAt = 20;
    var iTextPos = 0;
    var sContents = '';
    var iRow = 0;
    
    function type() {
        sContents = ' ';
        iRow = Math.max(0, iIndex - iScrollAt);
        
        while (iRow < iIndex) {
            sContents += aText[iRow++] + '<br />';
        }
        
        destination.innerHTML = sContents + aText[iIndex].substring(0, iTextPos) + "|";
        
        if (iTextPos++ == iArrLength) {
            iTextPos = 0;
            iIndex++;
            if (iIndex != aText.length) {
                iArrLength = aText[iIndex].length;
                setTimeout(type, 100);
            }
        } else {
            setTimeout(type, iSpeed);
        }
    }
    
    destination.textContent = ""; // Ù¾Ø§Ú© Ú©Ø±Ø¯Ù† Ù…Ø­ØªÙˆØ§ Ù¾Ø³ Ø§Ø² ØªÙ†Ø¸ÛŒÙ…Ø§Øª Ø§ÙˆÙ„ÛŒÙ‡
    type();
}
</script>`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return '<script>\r\n \r\nwindow.typewriter=function ()\r\n{\r\n   var destination = document.getElementById("typedtext");\r\n\r\nvar aText = new Array(destination.textContent);\r\n\r\ndestination.innerHTML="";\r\ndestination.classList.remove("hide");\r\nvar iSpeed = 50; // time delay of print out\r\nvar iIndex = 0; // start  array at this posision\r\nvar iArrLength = aText[0].length; // the length of the text array\r\nvar iScrollAt = 20; // start scrolling up at this many lines\r\n \r\nvar iTextPos = 0; // initialise text position\r\nvar sContents = \'\'; // initialise contents variable\r\nvar iRow; // initialise current row\r\n sContents =  \' \';\r\n iRow = Math.max(0, iIndex-iScrollAt);\r\n \r\n while ( iRow < iIndex ) {\r\n  sContents += aText[iRow++] + \'<br />\';\r\n }\r\n destination.innerHTML = sContents + aText[iIndex].substring(0, iTextPos) + "_";\r\n if ( iTextPos++ == iArrLength ) {\r\n  iTextPos = 0;\r\n  iIndex++;\r\n  if ( iIndex != aText.length ) {\r\n   iArrLength = aText[iIndex].length;\r\n   setTimeout("typewriter()", 100\r\n);\r\n  }\r\n } else {\r\n  setTimeout("typewriter()", iSpeed);\r\n }\r\n}\r\n\r\n\r\n</script>';
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "sidebarWindow",
    "buttonLiom2",
    "messageLiom",
    "section",
    "bottomInput",
    "sendIcon",
    "textArea",
    "favicon",
    "headerLiom",
    "paziresh24Avatar",
    "drawer",
    "buttonLiom3",
    "lineClomp",
    "sidebarWindow2",
    "buttonLiom4"
  ],
  sideEffect: ["sideEffect"],
  sidebarWindow: ["sidebarWindow", "buttonLiom2"],
  buttonLiom2: ["buttonLiom2"],
  messageLiom: ["messageLiom"],
  section: ["section", "bottomInput", "sendIcon", "textArea"],
  bottomInput: ["bottomInput", "sendIcon", "textArea"],
  sendIcon: ["sendIcon"],
  textArea: ["textArea"],
  favicon: ["favicon"],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  drawer: [
    "drawer",
    "buttonLiom3",
    "lineClomp",
    "sidebarWindow2",
    "buttonLiom4"
  ],
  buttonLiom3: ["buttonLiom3", "lineClomp"],
  lineClomp: ["lineClomp"],
  sidebarWindow2: ["sidebarWindow2", "buttonLiom4"],
  buttonLiom4: ["buttonLiom4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  sidebarWindow: typeof SidebarWindow;
  buttonLiom2: typeof ButtonLiom;
  messageLiom: typeof MessageLiom;
  section: "section";
  bottomInput: "div";
  sendIcon: typeof SendIcon;
  textArea: typeof AntdTextArea;
  favicon: typeof Embed;
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  drawer: typeof AntdDrawer;
  buttonLiom3: typeof ButtonLiom;
  lineClomp: typeof LineClomp;
  sidebarWindow2: typeof SidebarWindow;
  buttonLiom4: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfTest2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfTest2__VariantsArgs;
    args?: PlasmicSelfTest2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfTest2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfTest2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfTest2__ArgProps,
          internalVariantPropNames: PlasmicSelfTest2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfTest2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfTest2";
  } else {
    func.displayName = `PlasmicSelfTest2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfTest2 = Object.assign(
  // Top-level PlasmicSelfTest2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    sidebarWindow: makeNodeComponent("sidebarWindow"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    messageLiom: makeNodeComponent("messageLiom"),
    section: makeNodeComponent("section"),
    bottomInput: makeNodeComponent("bottomInput"),
    sendIcon: makeNodeComponent("sendIcon"),
    textArea: makeNodeComponent("textArea"),
    favicon: makeNodeComponent("favicon"),
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    drawer: makeNodeComponent("drawer"),
    buttonLiom3: makeNodeComponent("buttonLiom3"),
    lineClomp: makeNodeComponent("lineClomp"),
    sidebarWindow2: makeNodeComponent("sidebarWindow2"),
    buttonLiom4: makeNodeComponent("buttonLiom4"),

    // Metadata about props expected for PlasmicSelfTest2
    internalVariantProps: PlasmicSelfTest2__VariantProps,
    internalArgProps: PlasmicSelfTest2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Ù„ÛŒÙˆÙ… | Ø¯Ø³ØªÛŒØ§Ø± Ø³Ù„Ø§Ù…Øª",
      description:
        "Ø§Ø² Ø¯Ù„Ø§ÛŒÙ„ Ø¹Ù‚Ø¨ Ø¬Ù„Ùˆ Ø´Ø¯Ù† Ù¾Ø±ÛŒÙˆØ¯ Ø®ÙˆØ¯ØŒ  Ø¯Ø± Ú©Ù…ØªØ± Ø§Ø² Ú†Ù†Ø¯ Ø¯Ù‚ÛŒÙ‚Ù‡ Ùˆ Ø¨Ø¯ÙˆÙ† Ø§Ù†ØªØ¸Ø§Ø± Ø¨Ø±Ø§ÛŒ Ù¾Ø²Ø´Ú© Ø¢Ú¯Ø§Ù‡ Ø´ÙˆÛŒØ¯",
      ogImageSrc:
        "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",
      canonical: ""
    }
  }
);

export default PlasmicSelfTest2;
/* prettier-ignore-end */
