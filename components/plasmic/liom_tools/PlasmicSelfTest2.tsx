/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: zBpg4f-Yi3mN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import SidebarWindow from "../../SidebarWindow"; // plasmic-import: zOZqxY8nkGbN/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import LineClomp from "../../LineClomp"; // plasmic-import: VHAYS5YHy7AC/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import MessageLiom from "../../MessageLiom"; // plasmic-import: xCdoITDvZVKn/component
import SendIcon from "../../SendIcon"; // plasmic-import: HSNJ0v5oD6xT/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import DirectDialogChatbot from "../../DirectDialogChatbot"; // plasmic-import: ySuxtC2bY6yN/component
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import { AntdDrawer } from "@plasmicpkgs/antd5/skinny/registerDrawer";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfTest2.module.css"; // plasmic-import: zBpg4f-Yi3mN/css

import XIcon from "../hamdast_sdk/icons/PlasmicIcon__X"; // plasmic-import: S0M2VMEAEs7X/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon119Icon from "./icons/PlasmicIcon__Icon119"; // plasmic-import: JdBtCI53tCN5/icon
import Icon147Icon from "./icons/PlasmicIcon__Icon147"; // plasmic-import: yU3FWAJzfOsT/icon
import Icon196Icon from "./icons/PlasmicIcon__Icon196"; // plasmic-import: 0jQ6YDX1Yu0U/icon
import Icon158Icon from "./icons/PlasmicIcon__Icon158"; // plasmic-import: D1UPf1eCmdC-/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: WIXMGnqTFn8X/icon
import Icon213Icon from "./icons/PlasmicIcon__Icon213"; // plasmic-import: o0umFUjPufGW/icon
import Icon190Icon from "./icons/PlasmicIcon__Icon190"; // plasmic-import: ZyBCRlp539f1/icon
import Icon234Icon from "./icons/PlasmicIcon__Icon234"; // plasmic-import: EK_7tPdhf6dM/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: svqpWWNnaQ7C/icon
import Icon202Icon from "./icons/PlasmicIcon__Icon202"; // plasmic-import: O0O7vgaywlmV/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import EmojiHappySquareSvgrepoComSvg2Icon from "./icons/PlasmicIcon__EmojiHappySquareSvgrepoComSvg2"; // plasmic-import: VTuVNgeUH3X6/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 7vleC7ixE4k4/icon
import EmojiSadSquareSvgrepoComSvgIcon from "./icons/PlasmicIcon__EmojiSadSquareSvgrepoComSvg"; // plasmic-import: frqiW1UAlfdr/icon
import Icon162Icon from "./icons/PlasmicIcon__Icon162"; // plasmic-import: ySm-fx5nxIne/icon
import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: nUOPjtqNxpTk/icon
import Icon167Icon from "./icons/PlasmicIcon__Icon167"; // plasmic-import: 5eVMEaBbaM21/icon
import Icon150Icon from "./icons/PlasmicIcon__Icon150"; // plasmic-import: hr_bpY54geRI/icon
import Icon152Icon from "./icons/PlasmicIcon__Icon152"; // plasmic-import: aN1J4LeWEqGr/icon
import Icon161Icon from "./icons/PlasmicIcon__Icon161"; // plasmic-import: RaOYP4ifjT-P/icon
import Icon160Icon from "./icons/PlasmicIcon__Icon160"; // plasmic-import: VDxWJe2hoa-8/icon

createPlasmicElementProxy;

export type PlasmicSelfTest2__VariantMembers = {};
export type PlasmicSelfTest2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSelfTest2__VariantsArgs;
export const PlasmicSelfTest2__VariantProps = new Array<VariantPropType>();

export type PlasmicSelfTest2__ArgsType = {};
type ArgPropType = keyof PlasmicSelfTest2__ArgsType;
export const PlasmicSelfTest2__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfTest2__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  sideEffect?: Flex__<typeof SideEffect>;
  sidebarWindow?: Flex__<typeof SidebarWindow>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  lineClomp2?: Flex__<typeof LineClomp>;
  chatBoxRef?: Flex__<"div">;
  messageLiom?: Flex__<typeof MessageLiom>;
  bottomInput?: Flex__<"div">;
  sendIcon?: Flex__<typeof SendIcon>;
  textArea?: Flex__<typeof AntdTextArea>;
  buttonLiom7?: Flex__<typeof ButtonLiom>;
  favicon?: Flex__<typeof Embed>;
  directDialogChatbot?: Flex__<typeof DirectDialogChatbot>;
  dialog?: Flex__<typeof Paziresh24Dialog>;
  button3?: Flex__<typeof ButtonLiom>;
  buttonLiom8?: Flex__<typeof ButtonLiom>;
  buttonLiom4?: Flex__<typeof ButtonLiom>;
  drawer?: Flex__<typeof AntdDrawer>;
  buttonLiom3?: Flex__<typeof ButtonLiom>;
  lineClomp?: Flex__<typeof LineClomp>;
  sidebarWindow3?: Flex__<typeof SidebarWindow>;
  buttonLiom6?: Flex__<typeof ButtonLiom>;
  lineClomp4?: Flex__<typeof LineClomp>;
  buttonLiom5?: Flex__<typeof ButtonLiom>;
  footer?: Flex__<"div">;
};

export interface DefaultSelfTest2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfTest2__RenderFunc(props: {
  variants: PlasmicSelfTest2__VariantsArgs;
  args: PlasmicSelfTest2__ArgsType;
  overrides: PlasmicSelfTest2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "testChat",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\u0633\u0644\u0627\u0645\ud83d\udc4b\n  \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645\u060c \u062f\u0633\u062a\u06cc\u0627\u0631 \u0633\u0644\u0627\u0645\u062a .",
                    from: "system"
                  },
                  {
                    text: "\u0627\u06af\u0631 \u062f\u0631\u0628\u0627\u0631\u0647 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0646\u06af\u0631\u0627\u0646\u06cc \u062f\u0627\u0631\u06cc\u060c \u0627\u06cc\u0646 \u062a\u0633\u062a \u0628\u0647\u062a \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u062a\u0627 \u0648\u0636\u0639\u06cc\u062a \u062e\u0648\u062f\u062a \u0631\u0648 \u0628\u0647\u062a\u0631 \u0628\u0633\u0646\u062c\u06cc.",
                    from: "system"
                  },
                  {
                    text: " \u0628\u0627 \u067e\u0627\u0633\u062e \u0628\u0647 \u0686\u0646\u062f \u0633\u0648\u0627\u0644\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u062f\u0631 \u06a9\u0645\u062a\u0631 \u0627\u0632 \u06f5 \u062f\u0642\u06cc\u0642\u0647 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0622\u06cc\u0627 \u062f\u0686\u0627\u0631 \u0632\u0648\u062f\u0627\u0646\u0632\u0627\u0644\u06cc \u0647\u0633\u062a\u06cc\u062f \u06cc\u0627 \u062e\u06cc\u0631 \u0645\u0637\u0644\u0639 \u0634\u0648\u06cc\u062f",
                    from: "system"
                  },
                  {
                    text: "\u0622\u0645\u0627\u062f\u0647 \u0627\u06cc \u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645\u061f",
                    question: { lock: 0 },
                    from: "system",
                    btnText:
                      "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645",
                    options: [
                      {
                        id: 1,
                        text: "\u0634\u0631\u0648\u0639 \u06a9\u0646\u06cc\u0645"
                      }
                    ]
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "type",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.type;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "ferst",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.nextQuesion_id == null ||
                $ctx.query.nextQuesion_id == ""
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "nextQuesionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.testChat
                  .slice()
                  .reverse()
                  .find(item => item.question);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lock",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadinkBotten",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "numberTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "totalTest",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 35
      },
      {
        path: "retestTest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $ctx.query.nextQuesion_id == "" ||
                $ctx.query.nextQuesion_id == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "edit",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "timer",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable3",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "status",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "buy",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showgreen",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "authCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "data",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "infoTest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shopId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "a0becceb-8ca9-49c0-a9d3-7c192f85129c"
      },
      {
        path: "free",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "redirectUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return `https://tools.liom.app/chat-bot/?origin_user_id=${$ctx.query.origin_user_id}&app=${$ctx.query.app}&topic=${$ctx.query.topic}&origin=${$ctx.query.origin}`;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "botSessionId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "sendIcon.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "sendIcon.diable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? (() => {
                try {
                  return $state.textArea.value.trim() == "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.textArea.value == "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "sidebarWindow.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sessions",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "buttonLiom2[][].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "drawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3[][].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "lineClomp[][].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "indexchat",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasMore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "infoChat",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "sidebarWindow.load2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.load;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "line"
      },
      {
        path: "lineClomp2[][].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "sidebarWindow3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "sidebarWindow3.load2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.load;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom6[][].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "lineClomp4[][].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "text",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "buttonLiom4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softSand"
      },
      {
        path: "lo",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom7.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ["line", "sand"]
      },
      {
        path: "directDialogChatbot.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "directDialogChatbot.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "green"
      },
      {
        path: "buttonLiom8.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.status != "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "tokenliom",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "buttonLiom2[][].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "buttonLiom7.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom8.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3[][].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "buttonLiom6[][].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "buttonLiom5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    theme: useTheme(),
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicSelfTest2.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSelfTest2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSelfTest2.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicSelfTest2.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicSelfTest2.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicSelfTest2.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicSelfTest2.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicSelfTest2.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          plasmic_paziresh_24_design_system_css.plasmic_tokens,
          plasmic_hamdast_sdk_css.plasmic_tokens,
          sty.root,
          {
            [sty.rootglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),
            [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              )
          }
        )}
      >
        {(() => {
          try {
            return $state.paramsObject.inApp == "false";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <HeaderLiom
            data-plasmic-name={"headerLiom"}
            data-plasmic-override={overrides.headerLiom}
            className={classNames("__wab_instance", sty.headerLiom)}
            slot={null}
            slot2={
              <XIcon
                className={classNames(projectcss.all, sty.svg__gWTuv)}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.history.back();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                role={"img"}
              />
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox__ervem)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___58OuO
                )}
              >
                {"\u0639\u0644\u0651\u0627\u0645\u0647"}
              </div>
            </div>
          </HeaderLiom>
        ) : null}
        <SideEffect
          data-plasmic-name={"sideEffect"}
          data-plasmic-override={overrides.sideEffect}
          className={classNames("__wab_instance", sty.sideEffect)}
          deps={undefined}
          onMount={async () => {
            const $steps = {};

            $steps["params"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const queryString = window.location.search;
                        const urlParams = new URLSearchParams(queryString);
                        return urlParams.forEach((value, key) => {
                          $state.paramsObject[key] = value;
                        });
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["params"] != null &&
              typeof $steps["params"] === "object" &&
              typeof $steps["params"].then === "function"
            ) {
              $steps["params"] = await $steps["params"];
            }

            $steps["clearParams"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        const searchParams = new URLSearchParams(
                          window.location.search
                        );
                        searchParams.delete("token");
                        searchParams.delete("userId");
                        searchParams.delete("user_id");
                        const newUrl = `${
                          window.location.pathname
                        }?${searchParams.toString()}`;
                        return window.history.replaceState(null, "", newUrl);
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["clearParams"] != null &&
              typeof $steps["clearParams"] === "object" &&
              typeof $steps["clearParams"].then === "function"
            ) {
              $steps["clearParams"] = await $steps["clearParams"];
            }

            $steps["setCookie"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        if (
                          $state.paramsObject.token !== undefined &&
                          $state.paramsObject.token?.trim() !== ""
                        ) {
                          if (!$state.paramsObject.token.startsWith("ey"))
                            $state.paramsObject.token =
                              $state.paramsObject.token.slice(6, -3);
                          var setCookie = (name, value, days) => {
                            const expires = new Date(
                              Date.now() + days * 86400000
                            ).toUTCString();
                            document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                          };
                          return setCookie(
                            "token",
                            JSON.stringify([$state.paramsObject.token]),
                            100
                          );
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["setCookie"] != null &&
              typeof $steps["setCookie"] === "object" &&
              typeof $steps["setCookie"].then === "function"
            ) {
              $steps["setCookie"] = await $steps["setCookie"];
            }

            $steps["getCookie"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        var getCookie = name => {
                          const cookies = document.cookie.split("; ");
                          for (let cookie of cookies) {
                            const [key, value] = cookie.split("=");
                            if (key === name) return JSON.parse(value)[0];
                          }
                          return "";
                        };
                        return ($state.tokenliom = getCookie("token"));
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["getCookie"] != null &&
              typeof $steps["getCookie"] === "object" &&
              typeof $steps["getCookie"].then === "function"
            ) {
              $steps["getCookie"] = await $steps["getCookie"];
            }

            $steps["userLiom"] =
              $state.tokenliom != ""
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/users/profile",
                        undefined,
                        undefined,
                        (() => {
                          try {
                            return {
                              headers: { Authorization: $state.tokenliom }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["userLiom"] != null &&
              typeof $steps["userLiom"] === "object" &&
              typeof $steps["userLiom"].then === "function"
            ) {
              $steps["userLiom"] = await $steps["userLiom"];
            }

            $steps["updateUserInfo"] =
              $steps.userLiom?.data?.success ?? false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userInfo"]
                      },
                      operation: 0,
                      value: $steps.userLiom?.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateUserInfo"] != null &&
              typeof $steps["updateUserInfo"] === "object" &&
              typeof $steps["updateUserInfo"].then === "function"
            ) {
              $steps["updateUserInfo"] = await $steps["updateUserInfo"];
            }

            $steps["userGust"] =
              $state.tokenliom == ""
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.liom.app/auth/signup/guest",
                        undefined,
                        (() => {
                          try {
                            return (() => {
                              function pseudoUUID() {
                                let timestamp = Date.now().toString(36);
                                let randomStr = Math.random()
                                  .toString(36)
                                  .substr(2, 8);
                                return timestamp + "-" + randomStr;
                              }
                              return {
                                name: "کاربر مهمان",
                                gateway: "chat_bot",
                                country: "98",
                                isCountryPending: false,
                                lang: "fa",
                                version: "",
                                os: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  const platform = window.navigator.userAgent;
                                  if (/Windows/i.test(platform))
                                    return "Windows";
                                  if (/Mac/i.test(platform)) return "macOS";
                                  if (/Linux/i.test(platform)) return "Linux";
                                  if (/Android/i.test(userAgent))
                                    return "Android";
                                  if (/iPhone|iPad|iPod/i.test(userAgent))
                                    return "iOS";
                                  return "Unknown OS";
                                })(),
                                osVersion: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  if (/Windows NT 10.0/.test(userAgent))
                                    return "Windows 10";
                                  if (/Windows NT 6.3/.test(userAgent))
                                    return "Windows 8.1";
                                  if (/Windows NT 6.2/.test(userAgent))
                                    return "Windows 8";
                                  if (/Windows NT 6.1/.test(userAgent))
                                    return "Windows 7";
                                  if (/Mac OS X (\d+[\._]\d+)/.test(userAgent))
                                    return `macOS ${RegExp.$1.replace(
                                      "_",
                                      "."
                                    )}`;
                                  if (/Android (\d+(\.\d+)?)/.test(userAgent))
                                    return `Android ${RegExp.$1}`;
                                  if (
                                    /CPU (iPhone )?OS (\d+_\d+)/.test(userAgent)
                                  )
                                    return `iOS ${RegExp.$2.replace("_", ".")}`;
                                  return "Unknown Version";
                                })(),
                                sex: $state.gender || "",
                                additionalData: {
                                  ip: "132465",
                                  name: "test1"
                                },
                                device: (() => {
                                  const userAgent = window.navigator.userAgent;
                                  if (
                                    /Mobi|Android|iPhone|iPad|iPod/i.test(
                                      userAgent
                                    )
                                  ) {
                                    return "Mobile";
                                  } else if (/Tablet|iPad/i.test(userAgent)) {
                                    return "Tablet";
                                  } else {
                                    return "Desktop";
                                  }
                                })(),
                                fcm:
                                  window.localStorage.getItem("fcmToken") ||
                                  " ",
                                uniqueId: pseudoUUID(),
                                device_type: window.navigator.platform,
                                postLang: "fa"
                              };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["userGust"] != null &&
              typeof $steps["userGust"] === "object" &&
              typeof $steps["userGust"].then === "function"
            ) {
              $steps["userGust"] = await $steps["userGust"];
            }

            $steps["updateUserInfo2"] =
              $steps.userGust?.data?.success ?? false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userInfo"]
                      },
                      operation: 0,
                      value: {
                        id: $steps.userGust.data.result.userId,
                        name: "کاربر مهمان",
                        token: $steps.userGust.data.result.token
                      }
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateUserInfo2"] != null &&
              typeof $steps["updateUserInfo2"] === "object" &&
              typeof $steps["updateUserInfo2"].then === "function"
            ) {
              $steps["updateUserInfo2"] = await $steps["updateUserInfo2"];
            }

            $steps["setCookieGuest"] =
              $steps.userGust?.data?.success ?? false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var setCookie = (name, value, days) => {
                            const expires = new Date(
                              Date.now() + days * 86400000
                            ).toUTCString();
                            document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                          };
                          return setCookie(
                            "token",
                            JSON.stringify([$steps.userGust.data.result.token]),
                            100
                          );
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["setCookieGuest"] != null &&
              typeof $steps["setCookieGuest"] === "object" &&
              typeof $steps["setCookieGuest"].then === "function"
            ) {
              $steps["setCookieGuest"] = await $steps["setCookieGuest"];
            }

            $steps["user"] =
              window.token == undefined &&
              ($steps.userLiom?.data?.success == true ||
                $steps.userGust?.data?.success == true)
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/chatBotServiceUser",
                        undefined,
                        (() => {
                          try {
                            return {
                              origin_user_id:
                                $state.userInfo.id ||
                                $state.paramsObject.user_id ||
                                $state.paramsObject.userId,
                              bot_name: "period_chat",
                              mobile: $state.userInfo.mobile || "",
                              email: $state.userInfo.email || "",
                              name: $state.userInfo.name || "",
                              app: $state.paramsObject.app || "",
                              origin: $state.paramsObject.origin || "",
                              token: $state.userInfo.token
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["user"] != null &&
              typeof $steps["user"] === "object" &&
              typeof $steps["user"].then === "function"
            ) {
              $steps["user"] = await $steps["user"];
            }

            $steps["runCode"] = $steps.user?.data?.token
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        window.token = $steps.user.data.token;
                        $state.token = $steps.user.data.token;
                        return ($state.userId = $steps.user.data.user_id);
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["sessions"] =
              window.token != undefined
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/chatBotServiceSession?bot_name=period_chat",
                        undefined,
                        undefined,
                        (() => {
                          try {
                            return {
                              headers: {
                                Authorization: "Bearer " + window.token
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["sessions"] != null &&
              typeof $steps["sessions"] === "object" &&
              typeof $steps["sessions"].then === "function"
            ) {
              $steps["sessions"] = await $steps["sessions"];
            }

            $steps["infoChatBot"] =
              window.token != undefined
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/infoChatBot",
                        (() => {
                          try {
                            return { topic: $state.paramsObject.topic };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        undefined,
                        (() => {
                          try {
                            return {
                              headers: {
                                Authorization: "Bearer " + window.token
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["infoChatBot"] != null &&
              typeof $steps["infoChatBot"] === "object" &&
              typeof $steps["infoChatBot"].then === "function"
            ) {
              $steps["infoChatBot"] = await $steps["infoChatBot"];
            }

            $steps["updateInfoChat"] = ($steps.infoChatBot?.data ? true : false)
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["infoChat"]
                    },
                    operation: 0,
                    value: $steps.infoChatBot.data
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateInfoChat"] != null &&
              typeof $steps["updateInfoChat"] === "object" &&
              typeof $steps["updateInfoChat"].then === "function"
            ) {
              $steps["updateInfoChat"] = await $steps["updateInfoChat"];
            }

            $steps["updateLoad"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["load"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateLoad"] != null &&
              typeof $steps["updateLoad"] === "object" &&
              typeof $steps["updateLoad"].then === "function"
            ) {
              $steps["updateLoad"] = await $steps["updateLoad"];
            }

            $steps["updateSessions"] = (
              $steps.sessions?.data?.list ? true : false
            )
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["sessions"]
                    },
                    operation: 0,
                    value: $steps.sessions.data.list
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateSessions"] != null &&
              typeof $steps["updateSessions"] === "object" &&
              typeof $steps["updateSessions"].then === "function"
            ) {
              $steps["updateSessions"] = await $steps["updateSessions"];
            }

            $steps["updateStatus"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["status"]
                    },
                    operation: 0,
                    value: (() => {
                      try {
                        return (
                          ($ctx.query.status ||
                            new URLSearchParams(window.location.search).get(
                              "status"
                            )) ??
                          ""
                        );
                      } catch {
                        return "";
                      }
                    })()
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStatus"] != null &&
              typeof $steps["updateStatus"] === "object" &&
              typeof $steps["updateStatus"].then === "function"
            ) {
              $steps["updateStatus"] = await $steps["updateStatus"];
            }

            $steps["updateTextAreaValue"] =
              $state.paramsObject.question != undefined
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["textArea", "value"]
                      },
                      operation: 0,
                      value: $state.paramsObject.question
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateTextAreaValue"] != null &&
              typeof $steps["updateTextAreaValue"] === "object" &&
              typeof $steps["updateTextAreaValue"].then === "function"
            ) {
              $steps["updateTextAreaValue"] = await $steps[
                "updateTextAreaValue"
              ];
            }

            $steps["updateTestChat2"] =
              $state.paramsObject.question != undefined
                ? (() => {
                    const actionArgs = { args: [300] };
                    return $globalActions["Fragment.wait"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["updateTestChat2"] != null &&
              typeof $steps["updateTestChat2"] === "object" &&
              typeof $steps["updateTestChat2"].then === "function"
            ) {
              $steps["updateTestChat2"] = await $steps["updateTestChat2"];
            }

            $steps["updateTestChat3"] =
              $state.paramsObject.question != undefined
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          window.document.getElementById("sendicon").click();
                          delete $state.paramsObject.question;
                          const url = new URL(window.location.href);
                          url.searchParams.delete("question");
                          return window.history.replaceState({}, "", url);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateTestChat3"] != null &&
              typeof $steps["updateTestChat3"] === "object" &&
              typeof $steps["updateTestChat3"].then === "function"
            ) {
              $steps["updateTestChat3"] = await $steps["updateTestChat3"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://api.liom.app/service/log",
                      undefined,
                      (() => {
                        try {
                          return {
                            userId: $ctx.query.origin_user_id,
                            pageName: "chatBot",
                            action: "Create_user",
                            extraData: {}
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      {
                        headers: {
                          "Content-Type": "application/json",
                          Authorization:
                            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                        }
                      }
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
        />

        <SidebarWindow
          data-plasmic-name={"sidebarWindow"}
          data-plasmic-override={overrides.sidebarWindow}
          className={classNames("__wab_instance", sty.sidebarWindow)}
          creadit={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        if (window.FlutterChannel?.postMessage) {
                          return window.FlutterChannel.postMessage(
                            "#directDialog-chatBot"
                          );
                        } else return ($state.directDialogChatbot.open = true);
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://api.liom.app/service/log",
                      undefined,
                      (() => {
                        try {
                          return {
                            userId: $ctx.query.origin_user_id,
                            pageName: "chatBot",
                            action: "pay_dialog",
                            extraData: {}
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      {
                        headers: {
                          "Content-Type": "application/json",
                          Authorization:
                            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                        }
                      }
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
          load2={generateStateValueProp($state, ["sidebarWindow", "load2"])}
          newChat={async event => {
            const $steps = {};

            $steps["updateTestChat"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["testChat"]
                    },
                    operation: 0,
                    value: []
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTestChat"] != null &&
              typeof $steps["updateTestChat"] === "object" &&
              typeof $steps["updateTestChat"].then === "function"
            ) {
              $steps["updateTestChat"] = await $steps["updateTestChat"];
            }

            $steps["updateTestChat2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["drawer", "open"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateTestChat2"] != null &&
              typeof $steps["updateTestChat2"] === "object" &&
              typeof $steps["updateTestChat2"].then === "function"
            ) {
              $steps["updateTestChat2"] = await $steps["updateTestChat2"];
            }
          }}
          onLoad2Change={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["sidebarWindow", "load2"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["sidebarWindow", "open"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["invokeGlobalAction"] =
                $state.sidebarWindow.open == true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://n8n.staas.ir/webhook/chatBotServiceSession?bot_name=period_chat",
                          undefined,
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: {
                                  Authorization: "Bearer " + window.token
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateSessions"] = (
                $steps.invokeGlobalAction?.data?.list ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["sessions"]
                      },
                      operation: 0,
                      value: $steps.invokeGlobalAction.data.list
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSessions"] != null &&
                typeof $steps["updateSessions"] === "object" &&
                typeof $steps["updateSessions"].then === "function"
              ) {
                $steps["updateSessions"] = await $steps["updateSessions"];
              }
            }).apply(null, eventArgs);
          }}
          open={generateStateValueProp($state, ["sidebarWindow", "open"])}
          slot={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kSk9
              )}
              onClick={async event => {
                const $steps = {};

                $steps["updateTestChat"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["testChat"]
                        },
                        operation: 0,
                        value: window.FlutterChannel.postMessage(
                          "#directDialog-chatBot"
                        )
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTestChat"] != null &&
                  typeof $steps["updateTestChat"] === "object" &&
                  typeof $steps["updateTestChat"].then === "function"
                ) {
                  $steps["updateTestChat"] = await $steps["updateTestChat"];
                }
              }}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $state.infoChat.credit;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "0";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return (() => {
                  const objects = $state.sessions;
                  const today = new Date();
                  today.setHours(0, 0, 0, 0);
                  const groupedByDays = [];
                  objects.forEach(obj => {
                    const dt = new Date(obj.timestamp.replace(" ", "T"));
                    dt.setHours(0, 0, 0, 0);
                    const diffTime = today - dt;
                    const diffDays = Math.floor(
                      diffTime / (1000 * 60 * 60 * 24)
                    );
                    let label;
                    if (diffDays === 0) {
                      label = "امروز";
                    } else if (diffDays === 1) {
                      label = "دیروز";
                    } else if (diffDays >= 2 && diffDays <= 6) {
                      label = `${diffDays} روز پیش`;
                    } else if (diffDays === 7) {
                      label = "۷ روز پیش";
                    } else {
                      const options = {
                        year: "numeric",
                        month: "2-digit",
                        day: "2-digit"
                      };
                      label = new Intl.DateTimeFormat("fa-IR", options).format(
                        dt
                      );
                    }
                    const existingGroup = groupedByDays.find(
                      item => item.label === label
                    );
                    if (existingGroup) {
                      existingGroup.data.push(obj);
                    } else {
                      groupedByDays.push({
                        label: label,
                        data: [obj]
                      });
                    }
                  });
                  return groupedByDays;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__slU7O)}
                key={currentIndex}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pSRaw
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return currentItem.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                  const currentItem = __plasmic_item_1;
                  const currentIndex = __plasmic_idx_1;
                  return (() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.buttonLiom2),
                      color: generateStateValueProp($state, [
                        "buttonLiom2",
                        __plasmic_idx_0,
                        __plasmic_idx_1,
                        "color"
                      ]),
                      key: currentIndex,
                      load: generateStateValueProp($state, [
                        "buttonLiom2",
                        __plasmic_idx_0,
                        __plasmic_idx_1,
                        "load"
                      ]),
                      onClick: async event => {
                        const $steps = {};

                        $steps["updateTestChat7"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if (window.skipTyping) {
                                      return window.skipTyping();
                                    }
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTestChat7"] != null &&
                          typeof $steps["updateTestChat7"] === "object" &&
                          typeof $steps["updateTestChat7"].then === "function"
                        ) {
                          $steps["updateTestChat7"] = await $steps[
                            "updateTestChat7"
                          ];
                        }

                        $steps["updateTestChat3"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTestChat3"] != null &&
                          typeof $steps["updateTestChat3"] === "object" &&
                          typeof $steps["updateTestChat3"].then === "function"
                        ) {
                          $steps["updateTestChat3"] = await $steps[
                            "updateTestChat3"
                          ];
                        }

                        $steps["chatSession"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "https://n8n.staas.ir/webhook/chatBotServiceChats",
                                  (() => {
                                    try {
                                      return {
                                        session_id: currentItem.session_id
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          Authorization:
                                            "Bearer " + window.token
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["chatSession"] != null &&
                          typeof $steps["chatSession"] === "object" &&
                          typeof $steps["chatSession"].then === "function"
                        ) {
                          $steps["chatSession"] = await $steps["chatSession"];
                        }

                        $steps["updateTestChat"] = (
                          $steps.chatSession?.data ? true : false
                        )
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["testChat"]
                                },
                                operation: 0,
                                value: (() => {
                                  var a = $steps.chatSession.data.list;
                                  a.forEach(item => {
                                    if (item.isBot === 0) {
                                      item["from"] = "user";
                                    } else {
                                      item["from"] = "system";
                                    }
                                  });
                                  return a;
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTestChat"] != null &&
                          typeof $steps["updateTestChat"] === "object" &&
                          typeof $steps["updateTestChat"].then === "function"
                        ) {
                          $steps["updateTestChat"] = await $steps[
                            "updateTestChat"
                          ];
                        }

                        $steps["updateTestChat2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.sessionId = currentItem.session_id;
                                    $state.botSessionId =
                                      currentItem.bot_session_id;
                                    return ($state.hasMore = true);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTestChat2"] != null &&
                          typeof $steps["updateTestChat2"] === "object" &&
                          typeof $steps["updateTestChat2"].then === "function"
                        ) {
                          $steps["updateTestChat2"] = await $steps[
                            "updateTestChat2"
                          ];
                        }

                        $steps["updateTestChat5"] = true
                          ? (() => {
                              const actionArgs = { args: [500] };
                              return $globalActions["Fragment.wait"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                        if (
                          $steps["updateTestChat5"] != null &&
                          typeof $steps["updateTestChat5"] === "object" &&
                          typeof $steps["updateTestChat5"].then === "function"
                        ) {
                          $steps["updateTestChat5"] = await $steps[
                            "updateTestChat5"
                          ];
                        }

                        $steps["updateTestChat4"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTestChat4"] != null &&
                          typeof $steps["updateTestChat4"] === "object" &&
                          typeof $steps["updateTestChat4"].then === "function"
                        ) {
                          $steps["updateTestChat4"] = await $steps[
                            "updateTestChat4"
                          ];
                        }

                        $steps["updateTestChat6"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var messageBox =
                                      window.document.getElementById("chatBox");
                                    if (messageBox)
                                      return (messageBox.scrollTop =
                                        messageBox.scrollHeight);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTestChat6"] != null &&
                          typeof $steps["updateTestChat6"] === "object" &&
                          typeof $steps["updateTestChat6"].then === "function"
                        ) {
                          $steps["updateTestChat6"] = await $steps[
                            "updateTestChat6"
                          ];
                        }
                      },
                      onColorChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom2",
                            __plasmic_idx_0,
                            __plasmic_idx_1,
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      onLoadChange: async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom2",
                            __plasmic_idx_0,
                            __plasmic_idx_1,
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      },
                      size: "minimal"
                    };

                    initializePlasmicStates(
                      $state,
                      [
                        {
                          name: "buttonLiom2[][].color",
                          initFunc: ({ $props, $state, $queries }) => "clear"
                        },
                        {
                          name: "buttonLiom2[][].load",
                          initFunc: ({ $props, $state, $queries }) => false
                        }
                      ],
                      [__plasmic_idx_0, __plasmic_idx_1]
                    );
                    return (
                      <ButtonLiom
                        data-plasmic-name={"buttonLiom2"}
                        data-plasmic-override={overrides.buttonLiom2}
                        {...child$Props}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xHqUc
                          )}
                        >
                          <LineClomp
                            data-plasmic-name={"lineClomp2"}
                            data-plasmic-override={overrides.lineClomp2}
                            className={classNames(
                              "__wab_instance",
                              sty.lineClomp2
                            )}
                            numberOfLine={1}
                            onLineChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "lineClomp2",
                                __plasmic_idx_0,
                                __plasmic_idx_1,
                                "line"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kVxtp
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.text;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LineClomp>
                        </div>
                      </ButtonLiom>
                    );
                  })();
                })}
              </div>
            );
          })}
        </SidebarWindow>
        <div
          className={classNames(projectcss.all, sty.freeBox__nQ2Fe, {
            [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__nQ2FeYcZU]:
              hasVariant(
                globalVariants,
                "unnamedGlobalGroupOfVariants",
                "unnamedVariant"
              )
          })}
          style={(() => {
            try {
              return {
                height: "100dvh"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ztqih)}
            style={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return {
                        height: $state.testChat?.length == 0 ? "auto" : "90vh",
                        left: 0,
                        right: 0,
                        bottom: 0
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return {
                        height: $state.testChat?.length == 0 ? "auto" : "90vh",
                        left: 0,
                        right: 0,
                        bottom: 0
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
          >
            {(() => {
              try {
                return $state.isLoading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__rLxvI,
                  "line-container"
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___6FYrn,
                    "line line-1"
                  )}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___4PuQy,
                    "line line-2"
                  )}
                />
              </div>
            ) : null}
            <Stack__
              as={"div"}
              data-plasmic-name={"chatBoxRef"}
              data-plasmic-override={overrides.chatBoxRef}
              hasGap={true}
              className={classNames(projectcss.all, sty.chatBoxRef, {
                [sty.chatBoxRefglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                  hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants",
                    "unnamedVariant"
                  )
              })}
              id={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "chatBox"
                  : "chatBox"
              }
              onScroll={async event => {
                const $steps = {};

                $steps["runCode"] = $state.hasMore
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if (window.skipTyping) {
                              window.skipTyping();
                            }
                            var scrollTop = event.currentTarget.scrollTop;
                            var chatBox = event.currentTarget;
                            window.chatBox = chatBox;
                            if (scrollTop == 0) {
                              chatBox.style.overflow = "hidden";
                              return ($state.isLoading = true);
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["invokeGlobalAction"] = $state.isLoading
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://n8n.staas.ir/webhook/chatBotServiceChats",
                          (() => {
                            try {
                              return {
                                session_id: $state.sessionId,
                                offset: $state.testChat[0].id
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: {
                                  Authorization: "Bearer " + window.token
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["invokeGlobalAction2"] = $state.isLoading
                  ? (() => {
                      const actionArgs = { args: [500] };
                      return $globalActions["Fragment.wait"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }

                $steps["runCode2"] = $state.isLoading
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.isLoading = false;
                            var newData = $steps.invokeGlobalAction?.data?.list;
                            if (!newData || newData.length == 0) {
                              $state.hasMore = false;
                            } else {
                              newData.forEach(item => {
                                if (item.isBot === 0) {
                                  item["from"] = "user";
                                } else {
                                  item["from"] = "system";
                                }
                              });
                              $state.testChat = newData.concat($state.testChat);
                            }
                            if (window.chatBox) {
                              return (window.chatBox.style.overflow = "auto");
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }
              }}
              style={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return {
                          "overflow-y": "auto",
                          "padding-bottom":
                            $state.paramsObject.hamyar == "true"
                              ? "120px"
                              : "100px"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return {
                          "overflow-y": "auto",
                          "scroll-behavior": "smooth",
                          "padding-bottom":
                            $state.paramsObject.hamyar == "true"
                              ? "120px"
                              : "100px"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
            >
              <Reveal
                big={false}
                cascade={false}
                className={classNames("__wab_instance", sty.reveal__wpLRq)}
                delay={0}
                direction={"up"}
                duration={1000}
                effect={"fade"}
                triggerOnce={true}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.testChat;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <MessageLiom
                      data-plasmic-name={"messageLiom"}
                      data-plasmic-override={overrides.messageLiom}
                      _delete={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return ($state.testChat =
                                      $state.testChat.filter(
                                        (_, index) => index !== currentIndex
                                      ));
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      bot={true}
                      className={classNames("__wab_instance", sty.messageLiom)}
                      credit={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if (window.FlutterChannel?.postMessage) {
                                      return window.FlutterChannel.postMessage(
                                        "#directDialog-chatBot"
                                      );
                                    } else
                                      return ($state.directDialogChatbot.open =
                                        true);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      endMessege={(() => {
                        try {
                          return (
                            $state.testChat[currentIndex].from === "system" &&
                            ($state.testChat[currentIndex + 1]?.from !==
                              "system" ||
                              $state.testChat.length - 1 === currentIndex)
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      error2={(() => {
                        try {
                          return currentItem.error == true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      hint={(() => {
                        try {
                          return currentItem.tip;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      inApp={true}
                      key={currentIndex}
                      liomAnswer={(() => {
                        try {
                          return currentItem.from == "user";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      loadingMessage={(() => {
                        try {
                          return currentItem.loading == true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      resend={async event => {
                        const $steps = {};

                        $steps["updateTextAreaValue"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["textArea", "value"]
                                },
                                operation: 0,
                                value: currentItem.text
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTextAreaValue"] != null &&
                          typeof $steps["updateTextAreaValue"] === "object" &&
                          typeof $steps["updateTextAreaValue"].then ===
                            "function"
                        ) {
                          $steps["updateTextAreaValue"] = await $steps[
                            "updateTextAreaValue"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.testChat =
                                    $state.testChat.filter(
                                      (_, index) => index !== currentIndex
                                    ));
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["runCode2"] = !$state.sendIcon.diable
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.document
                                    .getElementById("sendicon")
                                    .click();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }
                      }}
                      slot={
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {})();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ejhAs
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateEdit"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["edit"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateEdit"] != null &&
                                  typeof $steps["updateEdit"] === "object" &&
                                  typeof $steps["updateEdit"].then ===
                                    "function"
                                ) {
                                  $steps["updateEdit"] = await $steps[
                                    "updateEdit"
                                  ];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const reversedIndex =
                                              $state.testChat
                                                .slice()
                                                .reverse()
                                                .findIndex(
                                                  item => item.question
                                                );
                                            if (reversedIndex !== -1) {
                                              const originalIndex =
                                                $state.testChat.length -
                                                1 -
                                                reversedIndex;
                                              const previousReversedIndex =
                                                $state.testChat
                                                  .slice(0, originalIndex)
                                                  .reverse()
                                                  .findIndex(
                                                    item => item.question
                                                  );
                                              if (
                                                previousReversedIndex !== -1
                                              ) {
                                                const previousOriginalIndex =
                                                  originalIndex -
                                                  1 -
                                                  previousReversedIndex;
                                                return $state.testChat.splice(
                                                  previousOriginalIndex + 1
                                                );
                                              }
                                            }
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "PUT",
                                          "https://n8n.staas.ir/webhook/selfTestLogs",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                session_id: $state.sessionId,
                                                question_id:
                                                  $state.testChat[
                                                    $state.testChat.length - 1
                                                  ].question.id
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                            >
                              <Icon119Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ggssY
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return (() => {
                                const lastUserMessage = $state.testChat
                                  .slice()
                                  .reverse()
                                  .find(
                                    item =>
                                      item.from === "system" && item.tip == true
                                  )
                                  ? true
                                  : false;
                                return lastUserMessage;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lnlxy
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateEdit"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["edit"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateEdit"] != null &&
                                  typeof $steps["updateEdit"] === "object" &&
                                  typeof $steps["updateEdit"].then ===
                                    "function"
                                ) {
                                  $steps["updateEdit"] = await $steps[
                                    "updateEdit"
                                  ];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            const reversedIndex =
                                              $state.testChat
                                                .slice()
                                                .reverse()
                                                .findIndex(
                                                  item => item.question
                                                );
                                            if (reversedIndex !== -1) {
                                              const originalIndex =
                                                $state.testChat.length -
                                                1 -
                                                reversedIndex;
                                              const previousReversedIndex =
                                                $state.testChat
                                                  .slice(0, originalIndex)
                                                  .reverse()
                                                  .findIndex(
                                                    item => item.question
                                                  );
                                              if (
                                                previousReversedIndex !== -1
                                              ) {
                                                const previousOriginalIndex =
                                                  originalIndex -
                                                  1 -
                                                  previousReversedIndex;
                                                return $state.testChat.splice(
                                                  previousOriginalIndex + 1
                                                );
                                              }
                                            }
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["updateTestChat2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "PUT",
                                          "https://n8n.staas.ir/webhook/selfTestLogs",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                session_id: $state.sessionId,
                                                question_id:
                                                  $state.testChat[
                                                    $state.testChat.length - 1
                                                  ].question.id
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateTestChat2"] != null &&
                                  typeof $steps["updateTestChat2"] ===
                                    "object" &&
                                  typeof $steps["updateTestChat2"].then ===
                                    "function"
                                ) {
                                  $steps["updateTestChat2"] = await $steps[
                                    "updateTestChat2"
                                  ];
                                }
                              }}
                            >
                              <Icon119Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__oj7Or
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__f1Zjo
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return "ویرایش پاسخ";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          ) : null}
                        </React.Fragment>
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pPnwC,
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? `text-box  ${(() => {})()}`
                            : undefined
                        )}
                        id={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? (() => {
                                try {
                                  return currentItem.id
                                    ? ""
                                    : currentItem.animation
                                    ? currentItem.animation
                                    : "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            : (() => {
                                try {
                                  return currentItem.id
                                    ? ""
                                    : currentItem.from == "system"
                                    ? `typedtext` + currentIndex
                                    : "";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                        }
                        style={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? {
                                display: "inline-block",
                                width: "auto",
                                "overflow-wrap": "break-word"
                              }
                            : undefined
                        }
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Lorem ipsum dolor sit amet,";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </MessageLiom>
                  );
                })}
              </Reveal>
            </Stack__>
          </Stack__>
          <section
            className={classNames(projectcss.all, sty.section__xBme8)}
            style={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return {};
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return {
                        position:
                          $state.testChat?.length == 0 && !$state.loading
                            ? "unset"
                            : "absolute",
                        left: 0,
                        right: 0,
                        bottom: 0
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
          >
            {(() => {
              try {
                return $state.testChat?.length == 0 && !$state.loading;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wM5Uw)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7Fqi2)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jnfKa)}
                  >
                    {(() => {
                      try {
                        return (
                          new window.URLSearchParams(
                            window.location.search
                          ).get("origin") != "diaco"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon147Icon
                        className={classNames(projectcss.all, sty.svg__whkzy)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return (
                          new window.URLSearchParams(
                            window.location.search
                          ).get("origin") == "diaco"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon196Icon
                        className={classNames(projectcss.all, sty.svg__fU2L7)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return (
                          new window.URLSearchParams(
                            window.location.search
                          ).get("origin") != "diaco"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bx83C
                        )}
                        data-i18n={"chat.t"}
                      >
                        {
                          "\u0633\u0644\u0627\u0645! \u0645\u0646 \u0639\u0644\u0651\u0627\u0645\u0647\u060c \u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645."
                        }
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (
                          new window.URLSearchParams(
                            window.location.search
                          ).get("origin") == "diaco"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gGkmi
                        )}
                      >
                        {
                          "\u0633\u0644\u0627\u0645! \u0645\u0646 \u062f\u06cc\u0627\u06a9\u0648 \u0686\u062a \u0647\u0633\u062a\u0645."
                        }
                      </div>
                    ) : null}
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ksxVg
                    )}
                    data-i18n={"chat.pp"}
                  >
                    {
                      "\u0686\u062c\u0648\u0631\u06cc \u0645\u06cc \u062a\u0648\u0646\u0645 \u06a9\u0645\u06a9\u062a\u0648\u0646 \u06a9\u0646\u0645\u061f"
                    }
                  </div>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xaxCy
                  )}
                  data-i18n={"chat.ppp"}
                >
                  {
                    "\u0686\u062c\u0648\u0631\u06cc \u0645\u06cc \u062a\u0648\u0646\u0645 \u06a9\u0645\u06a9\u062a\u0648\u0646 \u06a9\u0646\u0645\u061f"
                  }
                </div>
                {(() => {
                  try {
                    return $state.infoChat?.questions;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bfXsw)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.infoChat.questions;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lnerk
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateTextAreaValue"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["textArea", "value"]
                                    },
                                    operation: 0,
                                    value: currentItem.text
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateTextAreaValue"] != null &&
                              typeof $steps["updateTextAreaValue"] ===
                                "object" &&
                              typeof $steps["updateTextAreaValue"].then ===
                                "function"
                            ) {
                              $steps["updateTextAreaValue"] = await $steps[
                                "updateTextAreaValue"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = { args: [300] };
                                  return $globalActions["Fragment.wait"]?.apply(
                                    null,
                                    [...actionArgs.args]
                                  );
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }

                            $steps["runCode"] = !$state.sendIcon.diable
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return window.document
                                        .getElementById("sendicon")
                                        .click();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5KHP
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.text;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      );
                    })}
                  </Stack__>
                ) : null}
              </Stack__>
            ) : null}
            <Reveal
              big={true}
              className={classNames("__wab_instance", sty.reveal__xbg9Z)}
              effect={"fade"}
              triggerOnce={true}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__tz0Y3, ``)}
                id={"selectBox"}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"bottomInput"}
                  data-plasmic-override={overrides.bottomInput}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.bottomInput)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oNon)}
                  >
                    <SendIcon
                      data-plasmic-name={"sendIcon"}
                      data-plasmic-override={overrides.sendIcon}
                      className={classNames("__wab_instance", sty.sendIcon)}
                      diable={generateStateValueProp($state, [
                        "sendIcon",
                        "diable"
                      ])}
                      load={generateStateValueProp($state, [
                        "sendIcon",
                        "load"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode3"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.sendIcon.load = true;
                                    return ($state.sendIcon.diable = true);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode3"] != null &&
                          typeof $steps["runCode3"] === "object" &&
                          typeof $steps["runCode3"].then === "function"
                        ) {
                          $steps["runCode3"] = await $steps["runCode3"];
                        }

                        $steps["updateText"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["text"]
                                },
                                operation: 0,
                                value: $state.textArea.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateText"] != null &&
                          typeof $steps["updateText"] === "object" &&
                          typeof $steps["updateText"].then === "function"
                        ) {
                          $steps["updateText"] = await $steps["updateText"];
                        }

                        $steps["newSession"] =
                          $state.testChat.length === 0 &&
                          $state.text.trim() != ""
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/chatBotServiceSession",
                                    undefined,
                                    (() => {
                                      try {
                                        return { bot_name: "period_chat" };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " + window.token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["newSession"] != null &&
                          typeof $steps["newSession"] === "object" &&
                          typeof $steps["newSession"].then === "function"
                        ) {
                          $steps["newSession"] = await $steps["newSession"];
                        }

                        $steps["runCode2"] = (
                          $steps.newSession?.data?.session_id ? true : false
                        )
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.sessionId =
                                      $steps.newSession.data.session_id;
                                    return ($state.botSessionId =
                                      $steps.newSession.data.bot_session_id);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["runCode"] =
                          $state.text.trim() != "" && $state.sessionId != ""
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.testChat.push({
                                        text: $state.textArea.value,
                                        from: "user"
                                      });
                                      return $state.testChat.push({
                                        text: "              ",
                                        from: "system",
                                        loading: true
                                      });
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateTextAreaValue"] =
                          $state.text.trim() != "" && $state.sessionId != ""
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["textArea", "value"]
                                  },
                                  operation: 0,
                                  value: ""
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateTextAreaValue"] != null &&
                          typeof $steps["updateTextAreaValue"] === "object" &&
                          typeof $steps["updateTextAreaValue"].then ===
                            "function"
                        ) {
                          $steps["updateTextAreaValue"] = await $steps[
                            "updateTextAreaValue"
                          ];
                        }

                        $steps["runCode7"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var messageBox =
                                      window.document.getElementById("chatBox");
                                    if (messageBox)
                                      return (messageBox.scrollTop =
                                        messageBox.scrollHeight);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode7"] != null &&
                          typeof $steps["runCode7"] === "object" &&
                          typeof $steps["runCode7"].then === "function"
                        ) {
                          $steps["runCode7"] = await $steps["runCode7"];
                        }

                        $steps["chat"] =
                          $state.sessionId != "" &&
                          $state.botSessionId != "" &&
                          $state.text.trim() != ""
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://n8n.staas.ir/webhook/chatBotServiceChats",
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.testChat.length === 2
                                          ? {
                                              session_id: $state.sessionId,
                                              bot_session_id:
                                                $state.botSessionId,
                                              message: $state.text,
                                              healthDoc:
                                                $steps.newSession.data.healthDoc
                                            }
                                          : {
                                              session_id: $state.sessionId,
                                              bot_session_id:
                                                $state.botSessionId,
                                              message: $state.text
                                            };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    (() => {
                                      try {
                                        return {
                                          headers: {
                                            Authorization:
                                              "Bearer " + window.token
                                          }
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["chat"] != null &&
                          typeof $steps["chat"] === "object" &&
                          typeof $steps["chat"].then === "function"
                        ) {
                          $steps["chat"] = await $steps["chat"];
                        }

                        $steps["runCode5"] = $steps.chat?.data?.success
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.testChat[
                                      $state.testChat.length - 1
                                    ] = {
                                      text: $steps.chat.data.message,
                                      from: "system"
                                    };
                                    $state.indexchat =
                                      $state.testChat.length - 1;
                                    return ($state.infoChat.credit =
                                      $steps.chat.data.credit);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode5"] != null &&
                          typeof $steps["runCode5"] === "object" &&
                          typeof $steps["runCode5"].then === "function"
                        ) {
                          $steps["runCode5"] = await $steps["runCode5"];
                        }

                        $steps["runCode6"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    var messageBox =
                                      window.document.getElementById("chatBox");
                                    if (messageBox)
                                      return (messageBox.scrollTop =
                                        messageBox.scrollHeight);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode6"] != null &&
                          typeof $steps["runCode6"] === "object" &&
                          typeof $steps["runCode6"].then === "function"
                        ) {
                          $steps["runCode6"] = await $steps["runCode6"];
                        }

                        $steps["runCode9"] = (
                          $steps.chat?.data?.success ? false : true
                        )
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.testChat
                                      .filter(chat => chat.from === "user")
                                      .pop().error = true;
                                    return ($state.testChat =
                                      $state.testChat.slice(0, -1));
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode9"] != null &&
                          typeof $steps["runCode9"] === "object" &&
                          typeof $steps["runCode9"].then === "function"
                        ) {
                          $steps["runCode9"] = await $steps["runCode9"];
                        }

                        $steps["invokeGlobalAction2"] =
                          $steps.chat?.data?.message == "credit is empty"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u0627\u0639\u062a\u0628\u0627\u0631 \u0634\u0645\u0627 \u062a\u0645\u0627\u0645 \u0634\u062f\u0647 \u0648 \u0627\u0645\u06a9\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u067e\u06cc\u0627\u0645 \u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0641\u0639\u0627\u0644 \u0646\u06cc\u0633\u062a.",
                                    "top-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["runCode8"] =
                          $steps.chat?.data?.message == "credit is empty"
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      if (window.FlutterChannel?.postMessage) {
                                        return window.FlutterChannel.postMessage(
                                          "#directDialog-chatBot"
                                        );
                                      } else
                                        return ($state.directDialogChatbot.open =
                                          true);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode8"] != null &&
                          typeof $steps["runCode8"] === "object" &&
                          typeof $steps["runCode8"].then === "function"
                        ) {
                          $steps["runCode8"] = await $steps["runCode8"];
                        }

                        $steps["runCode4"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.sendIcon.load = false;
                                    return ($state.sendIcon.diable =
                                      $state.textArea.value == "");
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode4"] != null &&
                          typeof $steps["runCode4"] === "object" &&
                          typeof $steps["runCode4"].then === "function"
                        ) {
                          $steps["runCode4"] = await $steps["runCode4"];
                        }

                        $steps["invokeGlobalAction3"] = $steps.newSession?.data
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/service/log",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId: $ctx.query.origin_user_id,
                                        pageName: "chatBot",
                                        action: "new_session",
                                        extraData: {}
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                    }
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction3"] != null &&
                          typeof $steps["invokeGlobalAction3"] === "object" &&
                          typeof $steps["invokeGlobalAction3"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction3"] = await $steps[
                            "invokeGlobalAction3"
                          ];
                        }

                        $steps["invokeGlobalAction4"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/service/log",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId: $ctx.query.origin_user_id,
                                        pageName: "chatBot",
                                        action: "send_message",
                                        extraData: {}
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                    }
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction4"] != null &&
                          typeof $steps["invokeGlobalAction4"] === "object" &&
                          typeof $steps["invokeGlobalAction4"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction4"] = await $steps[
                            "invokeGlobalAction4"
                          ];
                        }

                        $steps["invokeGlobalAction5"] =
                          $steps.chat?.data?.message == "credit is empty"
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/service/log",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          userId: $ctx.query.origin_user_id,
                                          pageName: "chatBot",
                                          action: "pay_dialog",
                                          extraData: {}
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization:
                                          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                      }
                                    }
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction5"] != null &&
                          typeof $steps["invokeGlobalAction5"] === "object" &&
                          typeof $steps["invokeGlobalAction5"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction5"] = await $steps[
                            "invokeGlobalAction5"
                          ];
                        }
                      }}
                      onDiableChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "sendIcon",
                          "diable"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "sendIcon",
                          "load"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    />

                    {(() => {
                      const child$Props = {
                        autoSize: true,
                        className: classNames("__wab_instance", sty.textArea),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        onPressEnter: async event => {
                          const $steps = {};

                          $steps["runCode"] = false
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.document
                                        .getElementById("sendicon")
                                        .click();
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        },
                        placeholder: (() => {
                          try {
                            return (() => {
                              const lang =
                                localStorage.getItem("selectedLang") || "fa";
                              switch (lang) {
                                case "fa":
                                  return "سؤال خود را بنویسید...";
                                case "en":
                                  return "Write your question...";
                                case "ar":
                                  return "اكتب سؤالك...";
                                case "tr":
                                  return "Sorunuzu yazınız...";
                                default:
                                  return "Write your question...";
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        value: generateStateValueProp($state, [
                          "textArea",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea"}
                          data-plasmic-override={overrides.textArea}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </Stack__>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.testChat?.length != 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4JxQr)}
                  >
                    <ButtonLiom
                      data-plasmic-name={"buttonLiom7"}
                      data-plasmic-override={overrides.buttonLiom7}
                      className={classNames("__wab_instance", sty.buttonLiom7)}
                      color={generateStateValueProp($state, [
                        "buttonLiom7",
                        "color"
                      ])}
                      load={generateStateValueProp($state, [
                        "buttonLiom7",
                        "load"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateTestChat"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["testChat"]
                                },
                                operation: 0,
                                value: []
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTestChat"] != null &&
                          typeof $steps["updateTestChat"] === "object" &&
                          typeof $steps["updateTestChat"].then === "function"
                        ) {
                          $steps["updateTestChat"] = await $steps[
                            "updateTestChat"
                          ];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom7",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom7",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      shape={"rounded"}
                      showStartIcon={true}
                      size={"minimal"}
                      startIcon={
                        <Icon158Icon
                          className={classNames(projectcss.all, sty.svg__mOyJx)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jhpGr
                        )}
                        data-i18n={"chat.btn.new1"}
                      >
                        {"\u067e\u06cc\u0627\u0645 \u062c\u062f\u06cc\u062f"}
                      </div>
                    </ButtonLiom>
                  </div>
                ) : null}
              </div>
            </Reveal>
            {(() => {
              try {
                return $state.paramsObject.hamyar == "true";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__u6Gi0)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__iBt7L)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fAaWw)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHttpsAppsLiomAppHamyar"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://apps.liom.app/hamyar/"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsAppsLiomAppHamyar"] != null &&
                        typeof $steps["goToHttpsAppsLiomAppHamyar"] ===
                          "object" &&
                        typeof $steps["goToHttpsAppsLiomAppHamyar"].then ===
                          "function"
                      ) {
                        $steps["goToHttpsAppsLiomAppHamyar"] = await $steps[
                          "goToHttpsAppsLiomAppHamyar"
                        ];
                      }
                    }}
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__zdciT)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dU8Mn
                      )}
                    >
                      {"\u0647\u0645\u06cc\u0627\u0631"}
                    </div>
                  </div>
                  <div
                    aria-pressed={undefined}
                    className={classNames(projectcss.all, sty.freeBox__yGyXv)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHttpsAppsLiomAppSelfCare"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://apps.liom.app/Self-care/"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsAppsLiomAppSelfCare"] != null &&
                        typeof $steps["goToHttpsAppsLiomAppSelfCare"] ===
                          "object" &&
                        typeof $steps["goToHttpsAppsLiomAppSelfCare"].then ===
                          "function"
                      ) {
                        $steps["goToHttpsAppsLiomAppSelfCare"] = await $steps[
                          "goToHttpsAppsLiomAppSelfCare"
                        ];
                      }
                    }}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon213Icon
                          : Icon213Icon
                      }
                      className={classNames(projectcss.all, sty.svg___7FHf)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sPpI7
                      )}
                    >
                      {
                        "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u062e\u0648\u062f"
                      }
                    </div>
                  </div>
                  <div
                    aria-pressed={undefined}
                    className={classNames(projectcss.all, sty.freeBox__xva3B)}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon190Icon
                          : Icon190Icon
                      }
                      className={classNames(projectcss.all, sty.svg__fp2K)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tgJzj
                      )}
                    >
                      {
                        "\u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f"
                      }
                    </div>
                  </div>
                  {false ? (
                    <div
                      aria-pressed={undefined}
                      className={classNames(projectcss.all, sty.freeBox__vOh9)}
                    >
                      <PlasmicIcon__
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? Icon213Icon
                            : Icon234Icon
                        }
                        className={classNames(projectcss.all, sty.svg__id8In)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xxmNs
                        )}
                      >
                        {
                          "\u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f"
                        }
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pLpDb)}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon23Icon
                          : Icon23Icon
                      }
                      className={classNames(projectcss.all, sty.svg__dbu9G)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eiAC
                      )}
                    >
                      {"\u062d\u0627\u0644 \u0627\u0645\u0631\u0648\u0632"}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__icTbQ)}
                  >
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? Icon202Icon
                          : Icon202Icon
                      }
                      className={classNames(projectcss.all, sty.svg__aFqFr)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u4Cgt
                      )}
                    >
                      {"\u06a9\u0644\u06cc\u0646\u06cc\u06a9"}
                    </div>
                  </div>
                </Stack__>
              </div>
            ) : null}
          </section>
          <Embed
            className={classNames("__wab_instance", sty.embedHtml___9LDwa)}
            code={
              "<!-- Hotjar Tracking Code for tools.liom.app -->\r\n<script>\r\n    (function(h,o,t,j,a,r){\r\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\r\n        h._hjSettings={hjid:5253188,hjsv:6};\r\n        a=o.getElementsByTagName('head')[0];\r\n        r=o.createElement('script');r.async=1;\r\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\r\n        a.appendChild(r);\r\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\r\n</script>"
            }
          />

          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? '<script>\r\n(function() {\r\n    var link = document.querySelector("link[rel=\'icon\']");\r\n    if (!link) {\r\n        link = document.createElement(\'link\');\r\n        link.rel = \'icon\';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = \'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico\';\r\n})();\r\nlet lastChange = Date.now();\r\n\r\ndocument.addEventListener("visibilitychange", function () {\r\n    if (document.visibilityState === "visible" && Date.now() - lastChange > 1000) {\r\n        fetch("https://n8n.staas.ir/webhook/credit", {\r\n            method: "GET", // \u06cc\u0627 "POST" \u0628\u0633\u062a\u0647 \u0628\u0647 \u0646\u06cc\u0627\u0632 \u0634\u0645\u0627\r\n            headers: {\r\n                "Authorization": "Bearer "+window.token,\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => window.credit=data.credit; )\r\n        .catch(error => console.error("\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u062e\u0648\u0627\u0633\u062a:", error));\r\n\r\n        lastChange = Date.now();\r\n    }\r\n});\r\n\r\n\r\n\r\n</script>\r\n<script src="https://developer.eitaa.com/eitaa-web-app.js">\r\n</script>\r\n<script>\r\n  window.Eitaa.WebApp.ready();\r\n  window.Eitaa.WebApp.expand();\r\n  window.Eitaa.WebApp.isClosingConfirmationEnabled = true;\r\n</script>\r\n'
                : '<script>\r\n(function() {\r\n    var link = document.querySelector("link[rel=\'icon\']");\r\n    if (!link) {\r\n        link = document.createElement(\'link\');\r\n        link.rel = \'icon\';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = \'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico\';\r\n})();\r\nlet lastChange = Date.now();\r\n\r\ndocument.addEventListener("visibilitychange", function () {\r\n    if (document.visibilityState === "visible" && Date.now() - lastChange > 1000) {\r\n        fetch("https://n8n.staas.ir/webhook/credit", {\r\n            method: "GET", // \u06cc\u0627 "POST" \u0628\u0633\u062a\u0647 \u0628\u0647 \u0646\u06cc\u0627\u0632 \u0634\u0645\u0627\r\n            headers: {\r\n                "Authorization": "Bearer "+window.token,\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            window.credit = data.credit; \r\n\r\n            // \u0627\u062c\u0631\u0627\u06cc \u06a9\u0644\u06cc\u06a9 \u0631\u0648\u06cc \u06cc\u06a9 \u062f\u06a9\u0645\u0647 (\u0645\u062b\u0644\u0627\u064b \u062f\u06a9\u0645\u0647\u200c\u0627\u06cc \u0628\u0627 `id="myButton"`)\r\n            let button = document.getElementById("creditCheck");\r\n            if (button) {\r\n                button.click();\r\n            }\r\n        })        .catch(error => console.error("\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u062e\u0648\u0627\u0633\u062a:", error));\r\n\r\n        lastChange = Date.now();\r\n    }\r\n});\r\n\r\n\r\n\r\n</script>\r\n<script src="https://developer.eitaa.com/eitaa-web-app.js">\r\n</script>\r\n<script>\r\n  window.Eitaa.WebApp.ready();\r\n  window.Eitaa.WebApp.expand();\r\n  window.Eitaa.WebApp.isClosingConfirmationEnabled = true;\r\n</script>\r\n'
            }
          />

          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section
              className={classNames(projectcss.all, sty.section___8JhqX)}
            >
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__ppm60)}
                role={"img"}
              />
            </section>
          ) : null}
          <DirectDialogChatbot
            data-plasmic-name={"directDialogChatbot"}
            data-plasmic-override={overrides.directDialogChatbot}
            className={classNames("__wab_instance", sty.directDialogChatbot)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "directDialogChatbot",
                "open"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectShopChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "directDialogChatbot",
                "selectShop"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, [
              "directDialogChatbot",
              "open"
            ])}
            originUserId={(() => {
              try {
                return $ctx.query.origin_user_id;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            redirectUrl={(() => {
              try {
                return $state.redirectUrl;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            userId={(() => {
              try {
                return $state.userId;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />

          <Paziresh24Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            body={
              <React.Fragment>
                {(() => {
                  try {
                    return $state.status.toUpperCase() === "OK";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kVfjr)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xbfW0)}
                    >
                      <EmojiHappySquareSvgrepoComSvg2Icon
                        className={classNames(projectcss.all, sty.svg___3ZIu)}
                        role={"img"}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ynBY)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vUfw
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc >"
                          : "Enter some text"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__asAh8
                        )}
                        data-i18n={"chat.p.t5"}
                      >
                        {
                          "\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642"
                        }
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__v3O3A)}
                    >
                      <ButtonLiom
                        data-plasmic-name={"button3"}
                        data-plasmic-override={overrides.button3}
                        className={classNames("__wab_instance", sty.button3)}
                        color={generateStateValueProp($state, [
                          "button3",
                          "color"
                        ])}
                        endIcon={
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__f7Jce
                            )}
                            role={"img"}
                          />
                        }
                        load={generateStateValueProp($state, [
                          "button3",
                          "load"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateStatus"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["status"]
                                  },
                                  operation: 0,
                                  value: ""
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateStatus"] != null &&
                            typeof $steps["updateStatus"] === "object" &&
                            typeof $steps["updateStatus"].then === "function"
                          ) {
                            $steps["updateStatus"] = await $steps[
                              "updateStatus"
                            ];
                          }

                          $steps["updateDialogOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog", "open"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialogOpen"] != null &&
                            typeof $steps["updateDialogOpen"] === "object" &&
                            typeof $steps["updateDialogOpen"].then ===
                              "function"
                          ) {
                            $steps["updateDialogOpen"] = await $steps[
                              "updateDialogOpen"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      const searchParams = new URLSearchParams(
                                        window.location.search
                                      );
                                      searchParams.delete("status");
                                      searchParams.set("buy", "true");
                                      const newUrl = `${
                                        window.location.pathname
                                      }?${searchParams.toString()}`;
                                      return window.history.replaceState(
                                        null,
                                        "",
                                        newUrl
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button3",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "button3",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4LsGm
                          )}
                          data-i18n={"chat.p.b1"}
                        >
                          {"\u062a\u0627\u06cc\u06cc\u062f"}
                        </div>
                      </ButtonLiom>
                    </Stack__>
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return $state.status.toUpperCase() === "NOK";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__f0EMg)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5SxCm
                      )}
                    >
                      <EmojiSadSquareSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__qOw59)}
                        role={"img"}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pNhI)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oi24J
                        )}
                        data-i18n={"chat.p.t2"}
                      >
                        {
                          "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nMwrc
                        )}
                        data-i18n={"chat.p.t3"}
                      >
                        {
                          "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f . "
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lgENm
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc >"
                          : "Enter some text"}
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__zVyT6)}
                    >
                      <ButtonLiom
                        data-plasmic-name={"buttonLiom8"}
                        data-plasmic-override={overrides.buttonLiom8}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonLiom8
                        )}
                        color={generateStateValueProp($state, [
                          "buttonLiom8",
                          "color"
                        ])}
                        endIcon={
                          <Icon111Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lYwgq
                            )}
                            role={"img"}
                          />
                        }
                        load={generateStateValueProp($state, [
                          "buttonLiom8",
                          "load"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateDialogOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["dialog", "open"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDialogOpen"] != null &&
                            typeof $steps["updateDialogOpen"] === "object" &&
                            typeof $steps["updateDialogOpen"].then ===
                              "function"
                          ) {
                            $steps["updateDialogOpen"] = await $steps[
                              "updateDialogOpen"
                            ];
                          }

                          $steps["updateDirectDialogChatbotOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: [
                                      "directDialogChatbot",
                                      "open"
                                    ]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateDirectDialogChatbotOpen"] != null &&
                            typeof $steps["updateDirectDialogChatbotOpen"] ===
                              "object" &&
                            typeof $steps["updateDirectDialogChatbotOpen"]
                              .then === "function"
                          ) {
                            $steps["updateDirectDialogChatbotOpen"] =
                              await $steps["updateDirectDialogChatbotOpen"];
                          }
                        }}
                        onColorChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "buttonLiom8",
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "buttonLiom8",
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f9Ec8
                          )}
                          data-i18n={"chat.p.b3"}
                        >
                          {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                        </div>
                      </ButtonLiom>
                    </Stack__>
                  </Stack__>
                ) : null}
              </React.Fragment>
            }
            className={classNames("__wab_instance", sty.dialog)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog", "open"])}
            title={null}
            trigger={null}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__vcZiy)}
          style={(() => {
            try {
              return {
                "padding-top":
                  $state.paramsObject.inApp == "false" ? "74px" : "0"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__atu6W)}
            onClick={async event => {
              const $steps = {};

              $steps["updateDrawerOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["drawer", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateDrawerOpen"] != null &&
                typeof $steps["updateDrawerOpen"] === "object" &&
                typeof $steps["updateDrawerOpen"].then === "function"
              ) {
                $steps["updateDrawerOpen"] = await $steps["updateDrawerOpen"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/chatBotServiceSession?bot_name=period_chat",
                        undefined,
                        undefined,
                        (() => {
                          try {
                            return {
                              headers: {
                                Authorization: "Bearer " + window.token
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateSessions"] = (
                $steps.invokeGlobalAction?.data?.list ? true : false
              )
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["sessions"]
                      },
                      operation: 0,
                      value: $steps.invokeGlobalAction.data.list
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSessions"] != null &&
                typeof $steps["updateSessions"] === "object" &&
                typeof $steps["updateSessions"].then === "function"
              ) {
                $steps["updateSessions"] = await $steps["updateSessions"];
              }

              $steps["invokeGlobalAction2"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://api.liom.app/service/log",
                        undefined,
                        (() => {
                          try {
                            return {
                              userId: $ctx.query.origin_user_id,
                              pageName: "chatBot",
                              action: "show_sessions",
                              extraData: {}
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return {
                              headers: {
                                "Content-Type": "application/json",
                                Authorization:
                                  "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction2"] != null &&
                typeof $steps["invokeGlobalAction2"] === "object" &&
                typeof $steps["invokeGlobalAction2"].then === "function"
              ) {
                $steps["invokeGlobalAction2"] = await $steps[
                  "invokeGlobalAction2"
                ];
              }
            }}
          >
            <Icon162Icon
              className={classNames(projectcss.all, sty.svg__gmTXx)}
              onClick={async event => {
                const $steps = {};
              }}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tHDgz
              )}
              data-i18n={"chat.history2"}
            >
              {"\u062a\u0627\u0631\u06cc\u062e\u0686\u0647"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2JhaV)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___9Q80)}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if (window.FlutterChannel?.postMessage) {
                              return window.FlutterChannel.postMessage(
                                "#directDialog-chatBot"
                              );
                            } else
                              return ($state.directDialogChatbot.open = true);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://api.liom.app/service/log",
                          undefined,
                          (() => {
                            try {
                              return {
                                userId: $ctx.query.origin_user_id,
                                pageName: "chatBot",
                                action: "pay_dialog",
                                extraData: {}
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          {
                            headers: {
                              "Content-Type": "application/json",
                              Authorization:
                                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                            }
                          }
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }
              }}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tC5Q6)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return !$state.lo;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y3LX3
                    )}
                    data-i18n={"chat.t.p"}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return `اعتبار شما : `;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cstBu
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return `<b> <span style="font-size: 18px; font-with:bold;"> ${
                            $state.infoChat.credit != undefined
                              ? $state.infoChat.credit
                              : ""
                          } </span></b>`;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </div>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return (
                            $state.lo || $state.infoChat.credit == undefined
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <Icon111Icon
                    className={classNames(projectcss.all, sty.svg__ctuGq)}
                    role={"img"}
                  />
                ) : null}
                <Icon50Icon
                  className={classNames(projectcss.all, sty.svg__w3PcR)}
                  role={"img"}
                />
              </Stack__>
            </div>
            <ButtonLiom
              data-plasmic-name={"buttonLiom4"}
              data-plasmic-override={overrides.buttonLiom4}
              className={classNames("__wab_instance", sty.buttonLiom4)}
              color={generateStateValueProp($state, ["buttonLiom4", "color"])}
              isDisabled={(() => {
                try {
                  return $state.lo;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              load={generateStateValueProp($state, ["buttonLiom4", "load"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateLo"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["lo"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLo"] != null &&
                  typeof $steps["updateLo"] === "object" &&
                  typeof $steps["updateLo"].then === "function"
                ) {
                  $steps["updateLo"] = await $steps["updateLo"];
                }

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://n8n.staas.ir/webhook/credit",
                          undefined,
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: {
                                  Authorization: "Bearer " + window.token
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["runCode"] = $steps.invokeGlobalAction?.data
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.infoChat.credit =
                            $steps.invokeGlobalAction.data.credit);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateLo2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["lo"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLo2"] != null &&
                  typeof $steps["updateLo2"] === "object" &&
                  typeof $steps["updateLo2"].then === "function"
                ) {
                  $steps["updateLo2"] = await $steps["updateLo2"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom4", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom4", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              shape={"round"}
              size={"minimal"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qsT0C
                )}
              >
                {"Button"}
              </div>
              <Icon167Icon
                className={classNames(projectcss.all, sty.svg__iyHcA)}
                role={"img"}
              />
            </ButtonLiom>
          </Stack__>
          <Icon150Icon
            className={classNames(projectcss.all, sty.svg__tjAsw)}
            role={"img"}
          />
        </div>
        <AntdDrawer
          data-plasmic-name={"drawer"}
          data-plasmic-override={overrides.drawer}
          className={classNames("__wab_instance", sty.drawer)}
          closeIcon={
            <svg
              className={classNames(projectcss.all, sty.svg___6Ao8H)}
              role={"img"}
            />
          }
          defaultStylesClassName={classNames(
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens
          )}
          drawerScopeClassName={sty["drawer__drawer"]}
          forceRender={false}
          onOpenChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["drawer", "open"]).apply(
              null,
              eventArgs
            );
          }}
          open={generateStateValueProp($state, ["drawer", "open"])}
          placement={(() => {
            try {
              return (() => {
                const lang = localStorage.getItem("selectedLang") || "fa";
                switch (lang) {
                  case "fa":
                  case "ar":
                    return "right";
                  case "en":
                  case "tr":
                    return "left";
                  default:
                    return "right";
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "right";
              }
              throw e;
            }
          })()}
          title={
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__z4Az9)}
            >
              <Icon152Icon
                className={classNames(projectcss.all, sty.svg__a3C1H)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ejZs3
                )}
              >
                {
                  "\u062f\u0633\u062a\u06cc\u0627\u0631 \u0644\u06cc\u0648\u0645"
                }
              </div>
            </Stack__>
          }
        >
          <div className={classNames(projectcss.all, sty.freeBox___7JD1Q)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    const objects = $state.sessions;
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    const groupedByDays = [];
                    objects.forEach(obj => {
                      const dt = new Date(obj.timestamp.replace(" ", "T"));
                      dt.setHours(0, 0, 0, 0);
                      const diffTime = today - dt;
                      const diffDays = Math.floor(
                        diffTime / (1000 * 60 * 60 * 24)
                      );
                      let label;
                      if (diffDays === 0) {
                        label = "امروز";
                      } else if (diffDays === 1) {
                        label = "دیروز";
                      } else if (diffDays >= 2 && diffDays <= 6) {
                        label = `${diffDays} روز پیش`;
                      } else if (diffDays === 7) {
                        label = "۷ روز پیش";
                      } else {
                        const options = {
                          year: "numeric",
                          month: "2-digit",
                          day: "2-digit"
                        };
                        label = new Intl.DateTimeFormat(
                          "fa-IR",
                          options
                        ).format(dt);
                      }
                      const existingGroup = groupedByDays.find(
                        item => item.label === label
                      );
                      if (existingGroup) {
                        existingGroup.data.push(obj);
                      } else {
                        groupedByDays.push({
                          label: label,
                          data: [obj]
                        });
                      }
                    });
                    return groupedByDays;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__nqKMj)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v1Zlm
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.label;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return currentItem.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                    const currentItem = __plasmic_item_1;
                    const currentIndex = __plasmic_idx_1;
                    return (() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.buttonLiom3
                        ),
                        color: generateStateValueProp($state, [
                          "buttonLiom3",
                          __plasmic_idx_0,
                          __plasmic_idx_1,
                          "color"
                        ]),
                        key: currentIndex,
                        load: generateStateValueProp($state, [
                          "buttonLiom3",
                          __plasmic_idx_0,
                          __plasmic_idx_1,
                          "load"
                        ]),
                        onColorChange: async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "buttonLiom3",
                              __plasmic_idx_0,
                              __plasmic_idx_1,
                              "color"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        onLoadChange: async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "buttonLiom3",
                              __plasmic_idx_0,
                              __plasmic_idx_1,
                              "load"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        },
                        size: "compact"
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "buttonLiom3[][].color",
                            initFunc: ({ $props, $state, $queries }) => "clear"
                          },
                          {
                            name: "buttonLiom3[][].load",
                            initFunc: ({ $props, $state, $queries }) => false
                          }
                        ],
                        [__plasmic_idx_0, __plasmic_idx_1]
                      );
                      return (
                        <ButtonLiom
                          data-plasmic-name={"buttonLiom3"}
                          data-plasmic-override={overrides.buttonLiom3}
                          {...child$Props}
                        >
                          <LineClomp
                            data-plasmic-name={"lineClomp"}
                            data-plasmic-override={overrides.lineClomp}
                            className={classNames(
                              "__wab_instance",
                              sty.lineClomp
                            )}
                            numberOfLine={1}
                            onLineChange={async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "lineClomp",
                                __plasmic_idx_0,
                                __plasmic_idx_1,
                                "line"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            }}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Z7K
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.bot_session_id;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LineClomp>
                        </ButtonLiom>
                      );
                    })();
                  })}
                </div>
              );
            })}
          </div>
          <SidebarWindow
            data-plasmic-name={"sidebarWindow3"}
            data-plasmic-override={overrides.sidebarWindow3}
            className={classNames("__wab_instance", sty.sidebarWindow3)}
            load2={generateStateValueProp($state, ["sidebarWindow3", "load2"])}
            newChat={async event => {
              const $steps = {};

              $steps["updateTestChat"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["testChat"]
                      },
                      operation: 0,
                      value: []
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTestChat"] != null &&
                typeof $steps["updateTestChat"] === "object" &&
                typeof $steps["updateTestChat"].then === "function"
              ) {
                $steps["updateTestChat"] = await $steps["updateTestChat"];
              }

              $steps["updateTestChat2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["drawer", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTestChat2"] != null &&
                typeof $steps["updateTestChat2"] === "object" &&
                typeof $steps["updateTestChat2"].then === "function"
              ) {
                $steps["updateTestChat2"] = await $steps["updateTestChat2"];
              }
            }}
            onLoad2Change={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebarWindow3",
                "load2"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "sidebarWindow3",
                "open"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }

              (async val => {
                const $steps = {};

                $steps["invokeGlobalAction"] =
                  $state.sidebarWindow3.open == true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "GET",
                            "https://n8n.staas.ir/webhook/chatBotServiceSession?bot_name=period_chat",
                            undefined,
                            undefined,
                            (() => {
                              try {
                                return {
                                  headers: {
                                    Authorization: "Bearer " + window.token
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateSessions"] = (
                  $steps.invokeGlobalAction?.data?.list ? true : false
                )
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["sessions"]
                        },
                        operation: 0,
                        value: $steps.invokeGlobalAction.data.list
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSessions"] != null &&
                  typeof $steps["updateSessions"] === "object" &&
                  typeof $steps["updateSessions"].then === "function"
                ) {
                  $steps["updateSessions"] = await $steps["updateSessions"];
                }
              }).apply(null, eventArgs);
            }}
            open={generateStateValueProp($state, ["sidebarWindow3", "open"])}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qBbq
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.infoChat.credit;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "0";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            }
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    const objects = $state.sessions;
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    const groupedByDays = [];
                    objects.forEach(obj => {
                      const dt = new Date(obj.timestamp.replace(" ", "T"));
                      dt.setHours(0, 0, 0, 0);
                      const diffTime = today - dt;
                      const diffDays = Math.floor(
                        diffTime / (1000 * 60 * 60 * 24)
                      );
                      let label;
                      if (diffDays === 0) {
                        label = "امروز";
                      } else if (diffDays === 1) {
                        label = "دیروز";
                      } else if (diffDays >= 2 && diffDays <= 6) {
                        label = `${diffDays} روز پیش`;
                      } else if (diffDays === 7) {
                        label = "۷ روز پیش";
                      } else {
                        const options = {
                          year: "numeric",
                          month: "2-digit",
                          day: "2-digit"
                        };
                        label = new Intl.DateTimeFormat(
                          "fa-IR",
                          options
                        ).format(dt);
                      }
                      const existingGroup = groupedByDays.find(
                        item => item.label === label
                      );
                      if (existingGroup) {
                        existingGroup.data.push(obj);
                      } else {
                        groupedByDays.push({
                          label: label,
                          data: [obj]
                        });
                      }
                    });
                    return groupedByDays;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eqGpu)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__onZ9
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.label;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return currentItem.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                    const currentItem = __plasmic_item_1;
                    const currentIndex = __plasmic_idx_1;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7Sh6O
                        )}
                        key={currentIndex}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.buttonLiom6
                            ),
                            color: generateStateValueProp($state, [
                              "buttonLiom6",
                              __plasmic_idx_0,
                              __plasmic_idx_1,
                              "color"
                            ]),
                            load: generateStateValueProp($state, [
                              "buttonLiom6",
                              __plasmic_idx_0,
                              __plasmic_idx_1,
                              "load"
                            ]),
                            onClick: async event => {
                              const $steps = {};

                              $steps["updateTestChat7"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["drawer", "open"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat7"] != null &&
                                typeof $steps["updateTestChat7"] === "object" &&
                                typeof $steps["updateTestChat7"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat7"] = await $steps[
                                  "updateTestChat7"
                                ];
                              }

                              $steps["updateTestChat3"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loading"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat3"] != null &&
                                typeof $steps["updateTestChat3"] === "object" &&
                                typeof $steps["updateTestChat3"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat3"] = await $steps[
                                  "updateTestChat3"
                                ];
                              }

                              $steps["chatSession"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        "https://n8n.staas.ir/webhook/chatBotServiceChats",
                                        (() => {
                                          try {
                                            return {
                                              session_id: currentItem.session_id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              headers: {
                                                Authorization:
                                                  "Bearer " + window.token
                                              }
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["chatSession"] != null &&
                                typeof $steps["chatSession"] === "object" &&
                                typeof $steps["chatSession"].then === "function"
                              ) {
                                $steps["chatSession"] = await $steps[
                                  "chatSession"
                                ];
                              }

                              $steps["updateTestChat"] = (
                                $steps.chatSession?.data ? true : false
                              )
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["testChat"]
                                      },
                                      operation: 0,
                                      value: (() => {
                                        var a = $steps.chatSession.data.list;
                                        a.forEach(item => {
                                          if (item.isBot === 0) {
                                            item["from"] = "user";
                                          } else {
                                            item["from"] = "system";
                                          }
                                        });
                                        return a;
                                      })()
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat"] != null &&
                                typeof $steps["updateTestChat"] === "object" &&
                                typeof $steps["updateTestChat"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat"] = await $steps[
                                  "updateTestChat"
                                ];
                              }

                              $steps["updateTestChat2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          $state.sessionId =
                                            currentItem.session_id;
                                          $state.botSessionId =
                                            currentItem.bot_session_id;
                                          return ($state.hasMore = true);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat2"] != null &&
                                typeof $steps["updateTestChat2"] === "object" &&
                                typeof $steps["updateTestChat2"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat2"] = await $steps[
                                  "updateTestChat2"
                                ];
                              }

                              $steps["updateTestChat5"] = true
                                ? (() => {
                                    const actionArgs = { args: [500] };
                                    return $globalActions[
                                      "Fragment.wait"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat5"] != null &&
                                typeof $steps["updateTestChat5"] === "object" &&
                                typeof $steps["updateTestChat5"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat5"] = await $steps[
                                  "updateTestChat5"
                                ];
                              }

                              $steps["updateTestChat4"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loading"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat4"] != null &&
                                typeof $steps["updateTestChat4"] === "object" &&
                                typeof $steps["updateTestChat4"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat4"] = await $steps[
                                  "updateTestChat4"
                                ];
                              }

                              $steps["updateTestChat6"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          var messageBox =
                                            window.document.getElementById(
                                              "chatBox"
                                            );
                                          if (messageBox)
                                            return (messageBox.scrollTop =
                                              messageBox.scrollHeight);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTestChat6"] != null &&
                                typeof $steps["updateTestChat6"] === "object" &&
                                typeof $steps["updateTestChat6"].then ===
                                  "function"
                              ) {
                                $steps["updateTestChat6"] = await $steps[
                                  "updateTestChat6"
                                ];
                              }
                            },
                            onColorChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "buttonLiom6",
                                  __plasmic_idx_0,
                                  __plasmic_idx_1,
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            onLoadChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "buttonLiom6",
                                  __plasmic_idx_0,
                                  __plasmic_idx_1,
                                  "load"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            select: (() => {
                              try {
                                return (
                                  $state.sessionId == currentItem.session_id
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })(),
                            size: "minimal"
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "buttonLiom6[][].color",
                                initFunc: ({ $props, $state, $queries }) =>
                                  "clear"
                              },
                              {
                                name: "buttonLiom6[][].load",
                                initFunc: ({ $props, $state, $queries }) =>
                                  false
                              }
                            ],
                            [__plasmic_idx_0, __plasmic_idx_1]
                          );
                          return (
                            <ButtonLiom
                              data-plasmic-name={"buttonLiom6"}
                              data-plasmic-override={overrides.buttonLiom6}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ylDap
                                )}
                              >
                                <LineClomp
                                  data-plasmic-name={"lineClomp4"}
                                  data-plasmic-override={overrides.lineClomp4}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.lineClomp4
                                  )}
                                  numberOfLine={1}
                                  onLineChange={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "lineClomp4",
                                      __plasmic_idx_0,
                                      __plasmic_idx_1,
                                      "line"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  }}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__o3S4K
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.text;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Button";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </LineClomp>
                              </div>
                            </ButtonLiom>
                          );
                        })()}
                      </div>
                    );
                  })}
                </Stack__>
              );
            })}
          </SidebarWindow>
        </AntdDrawer>
        <Embed
          className={classNames("__wab_instance", sty.embedHtml__iMa8M)}
          code={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return `<script>
window.typewriter = function(elementId) {
    var destination = document.getElementById(elementId);
    var aText = [destination.getAttribute('data-text') || destination.textContent];
    
    destination.classList.remove("hide");
    var iSpeed = 10;
    var iIndex = 0;
    var iArrLength = aText[0].length;
    var iScrollAt = 20;
    var iTextPos = 0;
    var sContents = '';
    var iRow = 0;
    
    function type() {
        sContents = ' ';
        iRow = Math.max(0, iIndex - iScrollAt);
        
        while (iRow < iIndex) {
            sContents += aText[iRow++] + '<br />';
        }
        
        destination.innerHTML = sContents + aText[iIndex].substring(0, iTextPos) + "";
        
        var messageBox = document.getElementById("chatBox");
        if (messageBox) {
            // فقط وقتی کاربر پایین باشه اسکرول کنه
            if (messageBox.scrollHeight - messageBox.scrollTop <= messageBox.clientHeight + 20) {
                messageBox.scrollTop = messageBox.scrollHeight;
            }
        }

        if (iTextPos++ === iArrLength) {
            iTextPos = 0;
            iIndex++;
            if (iIndex < aText.length) {
                iArrLength = aText[iIndex].length;
                setTimeout(type, 100);
            }
        } else {
            setTimeout(type, iSpeed);
        }
    }
    
    destination.textContent = ""; // پاک کردن محتوا قبل شروع
    type();
}
</script>
`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '<script>\r\n \r\nwindow.typewriter=function ()\r\n{\r\n   var destination = document.getElementById("typedtext");\r\n\r\nvar aText = new Array(destination.textContent);\r\n\r\ndestination.innerHTML="";\r\ndestination.classList.remove("hide");\r\nvar iSpeed = 50; // time delay of print out\r\nvar iIndex = 0; // start  array at this posision\r\nvar iArrLength = aText[0].length; // the length of the text array\r\nvar iScrollAt = 20; // start scrolling up at this many lines\r\n \r\nvar iTextPos = 0; // initialise text position\r\nvar sContents = \'\'; // initialise contents variable\r\nvar iRow; // initialise current row\r\n sContents =  \' \';\r\n iRow = Math.max(0, iIndex-iScrollAt);\r\n \r\n while ( iRow < iIndex ) {\r\n  sContents += aText[iRow++] + \'<br />\';\r\n }\r\n destination.innerHTML = sContents + aText[iIndex].substring(0, iTextPos) + "_";\r\n if ( iTextPos++ == iArrLength ) {\r\n  iTextPos = 0;\r\n  iIndex++;\r\n  if ( iIndex != aText.length ) {\r\n   iArrLength = aText[iIndex].length;\r\n   setTimeout("typewriter()", 100\r\n);\r\n  }\r\n } else {\r\n  setTimeout("typewriter()", iSpeed);\r\n }\r\n}\r\n\r\n\r\n</script>';
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return `<script>
  window.typewriter = function() {
    var destination = document.getElementById("${`typedtext${$state.indexchat}`}");
    if (!destination || destination.getAttribute("data-typed") === "true") return;

    var aText = [destination.getAttribute('data-text') || destination.textContent];
    
    destination.classList.remove("hide");
    var iSpeed = 10;
    var iIndex = 0;
    var iArrLength = aText[0].length;
    var iScrollAt = 20;
    var iTextPos = 0;
    var sContents = '';
    var iRow = 0;
    var stopTyping = false;

    destination.setAttribute("data-typed", "true");

    function type() {
        if (stopTyping) {
            destination.innerHTML = aText.join('<br />');
            return;
        }

        sContents = ' ';
        iRow = Math.max(0, iIndex - iScrollAt);

        while (iRow < iIndex) {
            sContents += aText[iRow++] + '<br />';
        }

        destination.innerHTML = sContents + aText[iIndex].substring(0, iTextPos) + "";

        var messageBox = document.getElementById("chatBox");
        if (messageBox) {
            if (messageBox.scrollHeight - messageBox.scrollTop <= messageBox.clientHeight + 20) {
                messageBox.scrollTop = messageBox.scrollHeight;
            }
        }

        if (iTextPos++ === iArrLength) {
            iTextPos = 0;
            iIndex++;
            if (iIndex < aText.length) {
                iArrLength = aText[iIndex].length;
                setTimeout(type, 100);
            }
        } else {
            setTimeout(type, iSpeed);
        }
    }

    destination.textContent = ""; 
    type();

    window.skipTyping = function() {
        stopTyping = true;
        destination.innerHTML = aText.join('<br />');
    };
}
</script>`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return '<script>\r\n \r\nwindow.typewriter=function ()\r\n{\r\n   var destination = document.getElementById("typedtext");\r\n\r\nvar aText = new Array(destination.textContent);\r\n\r\ndestination.innerHTML="";\r\ndestination.classList.remove("hide");\r\nvar iSpeed = 50; // time delay of print out\r\nvar iIndex = 0; // start  array at this posision\r\nvar iArrLength = aText[0].length; // the length of the text array\r\nvar iScrollAt = 20; // start scrolling up at this many lines\r\n \r\nvar iTextPos = 0; // initialise text position\r\nvar sContents = \'\'; // initialise contents variable\r\nvar iRow; // initialise current row\r\n sContents =  \' \';\r\n iRow = Math.max(0, iIndex-iScrollAt);\r\n \r\n while ( iRow < iIndex ) {\r\n  sContents += aText[iRow++] + \'<br />\';\r\n }\r\n destination.innerHTML = sContents + aText[iIndex].substring(0, iTextPos) + "_";\r\n if ( iTextPos++ == iArrLength ) {\r\n  iTextPos = 0;\r\n  iIndex++;\r\n  if ( iIndex != aText.length ) {\r\n   iArrLength = aText[iIndex].length;\r\n   setTimeout("typewriter()", 100\r\n);\r\n  }\r\n } else {\r\n  setTimeout("typewriter()", iSpeed);\r\n }\r\n}\r\n\r\n\r\n</script>';
                    }
                    throw e;
                  }
                })()
          }
        />

        {(() => {
          try {
            return $state.load;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <section
            className={classNames(projectcss.all, sty.section__zunb)}
            style={(() => {
              try {
                return {
                  height: "100dvh"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <Icon111Icon
              className={classNames(projectcss.all, sty.svg__bXnl)}
              role={"img"}
            />
          </section>
        ) : null}
        {(() => {
          try {
            return (() => {})();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w0Vni)}
            style={(() => {
              try {
                return {
                  height: "100dvh"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          >
            <PlasmicIcon__
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? Icon160Icon
                  : Icon161Icon
              }
              className={classNames(projectcss.all, sty.svg__ivgFi)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qUmCv
              )}
            >
              {
                "\u062e\u0637\u0627 \u062f\u0631 \u0648\u0631\u0648\u062f \u0628\u0647 \u0633\u06cc\u0633\u062a\u0645"
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gi2Sx
              )}
            >
              {
                "\u0628\u0627 \u0639\u0631\u0636 \u067e\u0648\u0632\u0634\u060c \u062e\u0637\u0627\u06cc\u06cc \u062f\u0631 \u0648\u0631\u0648\u062f \u0628\u0647 \u0633\u06cc\u0633\u062a\u0645 \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \n\u0644\u0637\u0641\u0627\u064b \u0686\u0646\u062f \u0644\u062d\u0638\u0647 \u0635\u0628\u0631 \u06a9\u0631\u062f\u0647 \u0648 \u062f\u0648\u0628\u0627\u0631\u0647 \u0627\u0645\u062a\u062d\u0627\u0646 \u06a9\u0646\u06cc\u062f."
              }
            </div>
            <ButtonLiom
              data-plasmic-name={"buttonLiom5"}
              data-plasmic-override={overrides.buttonLiom5}
              className={classNames("__wab_instance", sty.buttonLiom5)}
              color={generateStateValueProp($state, ["buttonLiom5", "color"])}
              load={generateStateValueProp($state, ["buttonLiom5", "load"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return location.reload();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom5", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom5", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              shape={"rounded"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x1Z5A
                )}
              >
                {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
              </div>
            </ButtonLiom>
          </Stack__>
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__loD3O)}
          id={"creditCheck"}
          onClick={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        $state.infoChat.credit = window.credit;
                        return console.log("ناازسازاسعهازعهاسزسزسزززسزز");
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        />

        {(() => {
          try {
            return (
              $state.paramsObject.hamyar == "true" &&
              new URLSearchParams(window.location.search).get("footer") !=
                "false"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rl66W)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__hSprR)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHttpsAppsLiomAppHamyar"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://apps.liom.app/hamyar/"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsAppsLiomAppHamyar"] != null &&
                    typeof $steps["goToHttpsAppsLiomAppHamyar"] === "object" &&
                    typeof $steps["goToHttpsAppsLiomAppHamyar"].then ===
                      "function"
                  ) {
                    $steps["goToHttpsAppsLiomAppHamyar"] = await $steps[
                      "goToHttpsAppsLiomAppHamyar"
                    ];
                  }
                }}
              >
                <Icon6Icon
                  className={classNames(projectcss.all, sty.svg__w0FUv)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k6Zxn
                  )}
                >
                  {"\u0647\u0645\u06cc\u0627\u0631"}
                </div>
              </div>
              <div
                aria-pressed={undefined}
                className={classNames(projectcss.all, sty.freeBox__jzKxt)}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon190Icon
                      : Icon190Icon
                  }
                  className={classNames(projectcss.all, sty.svg__zYx5S)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sRWht
                  )}
                >
                  {
                    "\u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f"
                  }
                </div>
              </div>
              <div
                aria-pressed={undefined}
                className={classNames(projectcss.all, sty.freeBox__rcFg1)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToHttpsAppsLiomAppSelfCare"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: "https://apps.liom.app/Self-care/"
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHttpsAppsLiomAppSelfCare"] != null &&
                    typeof $steps["goToHttpsAppsLiomAppSelfCare"] ===
                      "object" &&
                    typeof $steps["goToHttpsAppsLiomAppSelfCare"].then ===
                      "function"
                  ) {
                    $steps["goToHttpsAppsLiomAppSelfCare"] = await $steps[
                      "goToHttpsAppsLiomAppSelfCare"
                    ];
                  }
                }}
              >
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon213Icon
                      : Icon213Icon
                  }
                  className={classNames(projectcss.all, sty.svg__yev6N)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pzpxb
                  )}
                >
                  {
                    "\u0645\u0631\u0627\u0642\u0628\u062a \u0627\u0632 \u062e\u0648\u062f"
                  }
                </div>
              </div>
              {false ? (
                <div
                  aria-pressed={undefined}
                  className={classNames(projectcss.all, sty.freeBox___8J7Jj)}
                >
                  <PlasmicIcon__
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? Icon213Icon
                        : Icon234Icon
                    }
                    className={classNames(projectcss.all, sty.svg__zmOgC)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e2Zco
                    )}
                  >
                    {
                      "\u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f"
                    }
                  </div>
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox___4ExW)}>
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon23Icon
                      : Icon23Icon
                  }
                  className={classNames(projectcss.all, sty.svg__h5YrL)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9NcW
                  )}
                >
                  {"\u062d\u0627\u0644 \u0627\u0645\u0631\u0648\u0632"}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hFoGf)}>
                <PlasmicIcon__
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon202Icon
                      : Icon202Icon
                  }
                  className={classNames(projectcss.all, sty.svg__dnkj4)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1Of
                  )}
                >
                  {"\u06a9\u0644\u06cc\u0646\u06cc\u06a9"}
                </div>
              </div>
            </Stack__>
          </div>
        ) : null}
        <Embed
          className={classNames("__wab_instance", sty.embedHtml__uPKuU)}
          code={
            '<script>\r\n\r\nfunction extractI18nElements() {\r\n  const elements = document.querySelectorAll("[data-i18n]");\r\n  const result = {};\r\n\r\n  elements.forEach(el => {\r\n    const key = el.getAttribute("data-i18n").trim();\r\n    const text = el.textContent.trim();\r\n    result[key] = text;\r\n  });\r\n  console.log(JSON.stringify(result)); // \u0646\u0645\u0627\u06cc\u0634 \u062e\u0648\u0634\u200c\u0641\u0631\u0645\r\n\r\n  return result;\r\n}\r\n</script>\r\n'
          }
        />

        {(() => {
          try {
            return (
              new window.URLSearchParams(window.location.search).get("inApp") ==
              "test"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__s6BY)}
            code={
              '\r\n<div class="dropdown" id="langDropdown">\r\n  <div class="toggle" tabindex="0">\r\n    <span class="flag" id="selectedFlag">fa</span>\r\n      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: 15px; height: 15px;">\r\n    <path d="M20.58 19.37L17.59 11.01C17.38 10.46 16.91 10.12 16.37 10.12C15.83 10.12 15.37 10.46 15.14 11.03L12.16 19.37C12.02 19.76 12.22 20.19 12.61 20.33C13 20.47 13.43 20.27 13.57 19.88L14.19 18.15H18.54L19.16 19.88C19.27 20.19 19.56 20.38 19.87 20.38C19.95 20.38 20.04 20.37 20.12 20.34C20.51 20.2 20.71 19.77 20.57 19.38L20.58 19.37ZM14.74 16.64L16.38 12.05L18.02 16.64H14.74ZM12.19 7.85C9.92999 11.42 7.89 13.58 5.41 15.02C5.29 15.09 5.16 15.12 5.04 15.12C4.78 15.12 4.53 14.99 4.39 14.75C4.18 14.39 4.3 13.93 4.66 13.73C6.75999 12.51 8.48 10.76 10.41 7.86H4.12C3.71 7.86 3.37 7.52 3.37 7.11C3.37 6.7 3.71 6.36 4.12 6.36H7.87V4.38C7.87 3.97 8.21 3.63 8.62 3.63C9.02999 3.63 9.37 3.97 9.37 4.38V6.36H13.12C13.53 6.36 13.87 6.7 13.87 7.11C13.87 7.52 13.53 7.86 13.12 7.86H12.18L12.19 7.85ZM12.23 15.12C12.1 15.12 11.97 15.09 11.85 15.02C11.2 14.64 10.57 14.22 9.97999 13.78C9.64999 13.53 9.58 13.06 9.83 12.73C10.08 12.4 10.55 12.33 10.88 12.58C11.42 12.99 12.01 13.37 12.61 13.72C12.97 13.93 13.09 14.39 12.88 14.75C12.74 14.99 12.49 15.12 12.23 15.12Z" fill="#000000"></path>\r\n  </svg>\r\n  </div>\r\n  <ul class="menu" role="listbox" aria-label="Select Language">\r\n    <li data-lang="en" role="option" aria-selected="false"><span class="flag"> en </span> English</li>\r\n    <li data-lang="fa" role="option" aria-selected="true"><span class="flag"> fa </span> \u0641\u0627\u0631\u0633\u06cc</li>\r\n    <li data-lang="ar" role="option" aria-selected="false"><span class="flag"> ar </span> \u0627\u0644\u0639\u0631\u0628\u064a\u0629</li>\r\n    <li data-lang="tr" role="option" aria-selected="false"><span class="flag"> tr </span> T\u00fcrk\u00e7e</li>\r\n  </ul>\r\n\r\n</div>\r\n\r\n\r\n<script src="https://tools.liom.app/plasmic/i18next.min.js"></script>\r\n<script>\r\n  const resources = {\r\n  "fa": { translation:{\r\n    "chat.t": "\u0633\u0644\u0627\u0645! \u0645\u0646 \u0639\u0644\u0651\u0627\u0645\u0647\u060c \u067e\u0632\u0634\u06a9 \u0647\u0648\u0634\u0645\u0646\u062f \u0644\u06cc\u0648\u0645 \u0647\u0633\u062a\u0645.",\r\n    "chat.p1": "\u067e\u06cc\u0627\u0645 \u062c\u062f\u06cc\u062f",\r\n    "chat.history2": "\u062a\u0627\u0631\u06cc\u062e\u0686\u0647",\r\n    "chat.t.p": "\u0627\u0639\u062a\u0628\u0627\u0631 \u0634\u0645\u0627 :",\r\n    "chat.p.t5": "\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0648\u0641\u0642",\r\n    "chat.p.b1": "\u062a\u0627\u06cc\u06cc\u062f",\r\n    "chat.p.t2": "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642",\r\n    "chat.p.t3": "\u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0627\u062f \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0627\u0648\u0645\u062f\u0647 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634 \u062a\u06a9\u0645\u06cc\u0644 \u0646\u0634\u062f\u0647. \u0644\u0637\u0641\u0627\u064b \u06cc\u0647 \u0628\u0627\u0631 \u062f\u06cc\u06af\u0647 \u0631\u0648\u06cc \u062f\u06a9\u0645\u0647 \u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f \u06a9\u0644\u06cc\u06a9 \u06a9\u0646\u06cc\u062f .",\r\n    "chat.p.b3": "\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f",\r\n    "chat.pp": "\u0686\u062c\u0648\u0631\u06cc \u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u06a9\u0645\u06a9\u062a\u0648\u0646 \u06a9\u0646\u0645\u061f",\r\n        "chat.ppp": "\u0686\u062c\u0648\u0631\u06cc \u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u06a9\u0645\u06a9\u062a\u0648\u0646 \u06a9\u0646\u0645\u061f",\r\n            "chat.pppt": "\u0627\u0639\u062a\u0628\u0627\u0631 \u0634\u0645\u0627 :",\r\n                        "chat.btn.new": "\u067e\u06cc\u0627\u0645 \u062c\u062f\u06cc\u062f",\r\n                          "chat.btn.new1": "\u067e\u06cc\u0627\u0645 \u062c\u062f\u06cc\u062f",\r\n                            "chat.history": "\u062a\u0627\u0631\u06cc\u062e\u0686\u0647 \u067e\u06cc\u0627\u0645\u200c\u0647\u0627"\r\n\r\n\r\n\r\n  }},\r\n  "en": {\r\n    translation:{\r\n    "chat.t": "Hello! I\u2019m Allameh, Lium\u2019s intelligent doctor.",\r\n    "chat.p1": "New Message",\r\n    "chat.history2": "History",\r\n    "chat.t.p": "Your credit:",\r\n    "chat.p.t5": "Payment Successful",\r\n    "chat.p.b1": "Confirm",\r\n    "chat.p.t2": "Payment Failed",\r\n    "chat.p.t3": "It seems something went wrong and the transaction was not completed. Please click the Retry button again.",\r\n    "chat.p.b3": "Retry",\r\n    "chat.pp": "How can I help you?",\r\n        "chat.ppp": "How can I help you?",\r\n            "chat.pppt": "Your credit:",\r\n                "chat.btn.new": "New Message",\r\n                  "chat.btn.new1": "New Message",\r\n                    "chat.history": "Message History"\r\n\r\n\r\n  }},\r\n  "ar": {\r\n    translation:{\r\n    "chat.t": "\u0645\u0631\u062d\u0628\u0627\u064b! \u0623\u0646\u0627 \u0627\u0644\u0639\u0644\u0627\u0645\u0629\u060c \u0627\u0644\u0637\u0628\u064a\u0628 \u0627\u0644\u0630\u0643\u064a \u0645\u0646 \u0644\u064a\u0648\u0645.",\r\n    "chat.p1": "\u0631\u0633\u0627\u0644\u0629 \u062c\u062f\u064a\u062f\u0629",\r\n    "chat.history2": "\u0627\u0644\u0633\u062c\u0644",\r\n    "chat.t.p": "\u0631\u0635\u064a\u062f\u0643:",\r\n    "chat.p.t5": "\u062a\u0645 \u0627\u0644\u062f\u0641\u0639 \u0628\u0646\u062c\u0627\u062d",\r\n    "chat.p.b1": "\u062a\u0623\u0643\u064a\u062f",\r\n    "chat.p.t2": "\u0641\u0634\u0644 \u0627\u0644\u062f\u0641\u0639",\r\n    "chat.p.t3": "\u064a\u0628\u062f\u0648 \u0623\u0646 \u0647\u0646\u0627\u0643 \u062e\u0637\u0623 \u0648\u0644\u0645 \u062a\u0643\u062a\u0645\u0644 \u0627\u0644\u0639\u0645\u0644\u064a\u0629. \u064a\u0631\u062c\u0649 \u0627\u0644\u0646\u0642\u0631 \u0639\u0644\u0649 \u0632\u0631 \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0629 \u0645\u0631\u0629 \u0623\u062e\u0631\u0649.",\r\n    "chat.p.b3": "\u0623\u0639\u062f \u0627\u0644\u0645\u062d\u0627\u0648\u0644\u0629",\r\n    "chat.pp": "\u0643\u064a\u0641 \u064a\u0645\u0643\u0646\u0646\u064a \u0645\u0633\u0627\u0639\u062f\u062a\u0643\u061f",\r\n        "chat.ppp": "\u0643\u064a\u0641 \u064a\u0645\u0643\u0646\u0646\u064a \u0645\u0633\u0627\u0639\u062f\u062a\u0643\u061f",\r\n            "chat.pppt": "\u0631\u0635\u064a\u062f\u0643:",\r\n                "chat.btn.new": "\u0631\u0633\u0627\u0644\u0629 \u062c\u062f\u064a\u062f\u0629",\r\n                  "chat.btn.new1": "\u0631\u0633\u0627\u0644\u0629 \u062c\u062f\u064a\u062f\u0629",\r\n                    "chat.history": "\u0633\u062c\u0644 \u0627\u0644\u0631\u0633\u0627\u0626\u0644"\r\n\r\n\r\n\r\n  }},\r\n  "tr": {translation:{\r\n    "chat.t": "Merhaba! Ben Allame, Liyum\u2019un ak\u0131ll\u0131 doktoruyum.",\r\n    "chat.p1": "Yeni mesaj",\r\n    "chat.history2": "Ge\u00e7mi\u015f",\r\n    "chat.t.p": "Bakiyeniz:",\r\n    "chat.p.t5": "\u00d6deme ba\u015far\u0131l\u0131",\r\n    "chat.p.b1": "Onayla",\r\n    "chat.p.t2": "\u00d6deme ba\u015far\u0131s\u0131z",\r\n    "chat.p.t3": "G\u00f6r\u00fcn\u00fc\u015fe g\u00f6re bir sorun olu\u015ftu ve i\u015flem tamamlanmad\u0131. L\u00fctfen tekrar dene butonuna bas\u0131n.",\r\n    "chat.p.b3": "Tekrar dene",\r\n    "chat.pp": "Size nas\u0131l yard\u0131mc\u0131 olabilirim?",\r\n        "chat.ppp": "Size nas\u0131l yard\u0131mc\u0131 olabilirim?",\r\n            "chat.pppt": "Bakiyeniz:",\r\n                "chat.btn.new": "Yeni Mesaj",\r\n                  "chat.btn.new1": "Yeni Mesaj",\r\n                    "chat.history": "Mesaj Ge\u00e7mi\u015fi"\r\n\r\n\r\n  }}\r\n};\r\nconst dropdown = document.getElementById(\'langDropdown\');\r\nconst toggle = dropdown.querySelector(\'.toggle\');\r\nconst menu = dropdown.querySelector(\'.menu\');\r\nconst selectedFlag = document.getElementById(\'selectedFlag\');\r\nconst options = menu.querySelectorAll(\'li\');\r\n\r\n  function createI18nManager({ i18nextInstance, root = document.body }) {\r\n    const translatedElements = new WeakMap();\r\n\r\n    const translateElement = el => {\r\n      const key = el.getAttribute(\'data-i18n\');\r\n      if (!key || !i18nextInstance.t) return;\r\n      const translated = i18nextInstance.t(key);\r\n      if (el.textContent.trim() !== translated.trim()) {\r\n        el.textContent = translated;\r\n        translatedElements.set(el, key);\r\n      }\r\n    };\r\n\r\n    const translateAll = () => {\r\n      root.querySelectorAll(\'[data-i18n]\').forEach(translateElement);\r\n        if (i18nextInstance.language === \'en\' || i18nextInstance.language === \'tr\') {\r\n            document.body.classList.add(\'english-font\');\r\n          } else {\r\n            document.body.classList.remove(\'english-font\');\r\n        }\r\n      document.body.dir = [\'fa\', \'ar\'].includes(i18nextInstance.language) ? \'rtl\' : \'ltr\';\r\n    };\r\n\r\n    const observer = new MutationObserver(mutations => {\r\n      mutations.forEach(m => {\r\n        m.addedNodes.forEach(node => {\r\n          if (node.nodeType !== 1) return;\r\n          if (node.matches?.(\'[data-i18n]\')) translateElement(node);\r\n          node.querySelectorAll?.(\'[data-i18n]\').forEach(translateElement);\r\n        });\r\n      });\r\n    });\r\n\r\n    observer.observe(root, { childList: true, subtree: true });\r\n\r\n    i18nextInstance.on(\'languageChanged\', () => {\r\n      translateAll();\r\n    });\r\n\r\n    return { translateAll, disconnect: () => observer.disconnect() };\r\n  }\r\n\r\n  i18next.init({\r\n    lng: \'fa\',\r\n    debug: false,\r\n    resources\r\n  }).then(() => {\r\n    const i18nManager = createI18nManager({ i18nextInstance: i18next });\r\n\r\n    // \u0627\u0646\u062a\u062e\u0627\u0628 \u0632\u0628\u0627\u0646\r\n    // const options = document.querySelectorAll(\'#langDropdown [data-lang]\');\r\n    // const selectedFlag = document.getElementById(\'selectedFlag\');\r\n\r\n    options.forEach(li => {\r\n      li.addEventListener(\'click\', () => {\r\n        const lang = li.getAttribute(\'data-lang\');\r\n        localStorage.setItem(\'selectedLang\', lang);\r\n        selectedFlag.textContent = lang;\r\n        dropdown.classList.toggle(\'open\');\r\n        window.location.reload(); \r\n      });\r\n    });\r\n    toggle.onclick = () => dropdown.classList.toggle(\'open\');\r\n\r\n  document.addEventListener(\'click\', e => {\r\n    if (!dropdown.contains(e.target)) dropdown.classList.remove(\'open\');\r\n  });\r\n\r\n  toggle.onkeydown = e => {\r\n    if (e.key === \'Enter\' || e.key === \' \') {\r\n      e.preventDefault();\r\n      dropdown.classList.toggle(\'open\');\r\n    }\r\n  };\r\n\r\nconst urlParams = new URLSearchParams(window.location.search);\r\nconst urlLang = urlParams.get(\'lang\');\r\nconst savedLang = localStorage.getItem(\'selectedLang\');\r\nconst initialLang = urlLang || savedLang || \'fa\';\r\n\r\nif (urlLang) {\r\n  localStorage.setItem(\'selectedLang\', urlLang);\r\n\r\n  // \u062d\u0630\u0641 lang \u0627\u0632 URL \u0628\u062f\u0648\u0646 \u0631\u06cc\u0644\u0648\u062f \u0635\u0641\u062d\u0647\r\n  urlParams.delete(\'lang\');\r\n  const newUrl = window.location.pathname + (urlParams.toString() ? \'?\' + urlParams.toString() : \'\');\r\n  history.replaceState(null, \'\', newUrl);\r\n}\r\n\r\ni18next.changeLanguage(initialLang);\r\nselectedFlag.textContent = initialLang;\r\n\r\n  });\r\n</script> \r\n\r\n\r\n'
            }
          />
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "sideEffect",
    "sidebarWindow",
    "buttonLiom2",
    "lineClomp2",
    "chatBoxRef",
    "messageLiom",
    "bottomInput",
    "sendIcon",
    "textArea",
    "buttonLiom7",
    "favicon",
    "directDialogChatbot",
    "dialog",
    "button3",
    "buttonLiom8",
    "buttonLiom4",
    "drawer",
    "buttonLiom3",
    "lineClomp",
    "sidebarWindow3",
    "buttonLiom6",
    "lineClomp4",
    "buttonLiom5",
    "footer"
  ],
  headerLiom: ["headerLiom"],
  sideEffect: ["sideEffect"],
  sidebarWindow: ["sidebarWindow", "buttonLiom2", "lineClomp2"],
  buttonLiom2: ["buttonLiom2", "lineClomp2"],
  lineClomp2: ["lineClomp2"],
  chatBoxRef: ["chatBoxRef", "messageLiom"],
  messageLiom: ["messageLiom"],
  bottomInput: ["bottomInput", "sendIcon", "textArea"],
  sendIcon: ["sendIcon"],
  textArea: ["textArea"],
  buttonLiom7: ["buttonLiom7"],
  favicon: ["favicon"],
  directDialogChatbot: ["directDialogChatbot"],
  dialog: ["dialog", "button3", "buttonLiom8"],
  button3: ["button3"],
  buttonLiom8: ["buttonLiom8"],
  buttonLiom4: ["buttonLiom4"],
  drawer: [
    "drawer",
    "buttonLiom3",
    "lineClomp",
    "sidebarWindow3",
    "buttonLiom6",
    "lineClomp4"
  ],
  buttonLiom3: ["buttonLiom3", "lineClomp"],
  lineClomp: ["lineClomp"],
  sidebarWindow3: ["sidebarWindow3", "buttonLiom6", "lineClomp4"],
  buttonLiom6: ["buttonLiom6", "lineClomp4"],
  lineClomp4: ["lineClomp4"],
  buttonLiom5: ["buttonLiom5"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  sideEffect: typeof SideEffect;
  sidebarWindow: typeof SidebarWindow;
  buttonLiom2: typeof ButtonLiom;
  lineClomp2: typeof LineClomp;
  chatBoxRef: "div";
  messageLiom: typeof MessageLiom;
  bottomInput: "div";
  sendIcon: typeof SendIcon;
  textArea: typeof AntdTextArea;
  buttonLiom7: typeof ButtonLiom;
  favicon: typeof Embed;
  directDialogChatbot: typeof DirectDialogChatbot;
  dialog: typeof Paziresh24Dialog;
  button3: typeof ButtonLiom;
  buttonLiom8: typeof ButtonLiom;
  buttonLiom4: typeof ButtonLiom;
  drawer: typeof AntdDrawer;
  buttonLiom3: typeof ButtonLiom;
  lineClomp: typeof LineClomp;
  sidebarWindow3: typeof SidebarWindow;
  buttonLiom6: typeof ButtonLiom;
  lineClomp4: typeof LineClomp;
  buttonLiom5: typeof ButtonLiom;
  footer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfTest2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfTest2__VariantsArgs;
    args?: PlasmicSelfTest2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfTest2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfTest2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfTest2__ArgProps,
          internalVariantPropNames: PlasmicSelfTest2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfTest2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfTest2";
  } else {
    func.displayName = `PlasmicSelfTest2.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfTest2 = Object.assign(
  // Top-level PlasmicSelfTest2 renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    sideEffect: makeNodeComponent("sideEffect"),
    sidebarWindow: makeNodeComponent("sidebarWindow"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    lineClomp2: makeNodeComponent("lineClomp2"),
    chatBoxRef: makeNodeComponent("chatBoxRef"),
    messageLiom: makeNodeComponent("messageLiom"),
    bottomInput: makeNodeComponent("bottomInput"),
    sendIcon: makeNodeComponent("sendIcon"),
    textArea: makeNodeComponent("textArea"),
    buttonLiom7: makeNodeComponent("buttonLiom7"),
    favicon: makeNodeComponent("favicon"),
    directDialogChatbot: makeNodeComponent("directDialogChatbot"),
    dialog: makeNodeComponent("dialog"),
    button3: makeNodeComponent("button3"),
    buttonLiom8: makeNodeComponent("buttonLiom8"),
    buttonLiom4: makeNodeComponent("buttonLiom4"),
    drawer: makeNodeComponent("drawer"),
    buttonLiom3: makeNodeComponent("buttonLiom3"),
    lineClomp: makeNodeComponent("lineClomp"),
    sidebarWindow3: makeNodeComponent("sidebarWindow3"),
    buttonLiom6: makeNodeComponent("buttonLiom6"),
    lineClomp4: makeNodeComponent("lineClomp4"),
    buttonLiom5: makeNodeComponent("buttonLiom5"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicSelfTest2
    internalVariantProps: PlasmicSelfTest2__VariantProps,
    internalArgProps: PlasmicSelfTest2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | دستیار سلامت",
      description:
        "از دلایل عقب جلو شدن پریود خود،  در کمتر از چند دقیقه و بدون انتظار برای پزشک آگاه شوید",
      ogImageSrc:
        "https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico",
      canonical: ""
    }
  }
);

export default PlasmicSelfTest2;
/* prettier-ignore-end */
