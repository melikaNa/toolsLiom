/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: fpnVV5gYHPGq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import RadioGrop from "../../RadioGrop"; // plasmic-import: oaU2G97TOKr2/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import PercentageBox from "../../PercentageBox"; // plasmic-import: twduJO0v7B8-/component
import LineClomp from "../../LineClomp"; // plasmic-import: VHAYS5YHy7AC/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicMyTests.module.css"; // plasmic-import: fpnVV5gYHPGq/css

import Icon145Icon from "./icons/PlasmicIcon__Icon145"; // plasmic-import: JVIIpggBdL39/icon
import Icon89Icon from "./icons/PlasmicIcon__Icon89"; // plasmic-import: vu2NgncuxrIR/icon
import Icon206Icon from "./icons/PlasmicIcon__Icon206"; // plasmic-import: UpglnRkxmjPQ/icon
import Drugs97680451SvgIcon from "./icons/PlasmicIcon__Drugs97680451Svg"; // plasmic-import: cDQWE_Fa_aYu/icon
import Icon215Icon from "./icons/PlasmicIcon__Icon215"; // plasmic-import: v7PgNy8ZeH6X/icon
import Task17790924SvgIcon from "./icons/PlasmicIcon__Task17790924Svg"; // plasmic-import: 1mp41Mlu6eiH/icon

createPlasmicElementProxy;

export type PlasmicMyTests__VariantMembers = {};
export type PlasmicMyTests__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyTests__VariantsArgs;
export const PlasmicMyTests__VariantProps = new Array<VariantPropType>();

export type PlasmicMyTests__ArgsType = {};
type ArgPropType = keyof PlasmicMyTests__ArgsType;
export const PlasmicMyTests__ArgProps = new Array<ArgPropType>();

export type PlasmicMyTests__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  embedHtml?: Flex__<typeof Embed>;
  percentageBox?: Flex__<typeof PercentageBox>;
  lineClomp?: Flex__<typeof LineClomp>;
};

export interface DefaultMyTestsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMyTests__RenderFunc(props: {
  variants: PlasmicMyTests__VariantsArgs;
  args: PlasmicMyTests__ArgsType;
  overrides: PlasmicMyTests__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "page",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "Result"
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "lineClomp[].line",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_hamdast_sdk,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__kDlnc)}>
            <RadioGrop
              className={classNames("__wab_instance", sty.radioGrop__dIk3N)}
              color={"light"}
              onClick={async event => {
                const $steps = {};

                $steps["updatePage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["page"]
                        },
                        operation: 0,
                        value: "Result"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePage"] != null &&
                  typeof $steps["updatePage"] === "object" &&
                  typeof $steps["updatePage"].then === "function"
                ) {
                  $steps["updatePage"] = await $steps["updatePage"];
                }
              }}
              selected={(() => {
                try {
                  return $state.page == "Result";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              style2={"line"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Wtf
                )}
              >
                {"\u0646\u062a\u06cc\u062c\u0647 \u0647\u0627"}
              </div>
            </RadioGrop>
            <RadioGrop
              className={classNames("__wab_instance", sty.radioGrop__naDzw)}
              color={"light"}
              onClick={async event => {
                const $steps = {};

                $steps["updatePage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["page"]
                        },
                        operation: 0,
                        value: "prescription"
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePage"] != null &&
                  typeof $steps["updatePage"] === "object" &&
                  typeof $steps["updatePage"].then === "function"
                ) {
                  $steps["updatePage"] = await $steps["updatePage"];
                }
              }}
              selected={(() => {
                try {
                  return $state.page == "prescription";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "selected";
                  }
                  throw e;
                }
              })()}
              style2={"line"}
            >
              {(() => {
                try {
                  return $state.apiRequest.data.commission.length > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Icon145Icon
                  className={classNames(projectcss.all, sty.svg__nccBx)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1InX
                )}
              >
                {"\u0646\u0633\u062e\u0647 \u0647\u0627\u06cc \u0645\u0646"}
              </div>
            </RadioGrop>
          </div>
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            body={(() => {
              try {
                return {
                  user_id: $ctx.query.origin_user_id
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={null}
            loadingDisplay={
              <div className={classNames(projectcss.all, sty.freeBox__wmRq8)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [1, 2, 3, 4, 5];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8UKks,
                        "shimmer"
                      )}
                      key={currentIndex}
                    />
                  );
                })}
              </div>
            }
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={true}
            url={"https://n8n.staas.ir/webhook/resultsPage"}
          >
            {(() => {
              try {
                return $state.page == "prescription";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Reveal
                className={classNames("__wab_instance", sty.reveal___9BdRr)}
                damping={0.2}
                effect={"fade"}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__whqr)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zaoL)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (() => {
                            return $state.apiRequest.data.commission.map(i =>
                              Object.keys(i.json).length == 0 ? i : i.json
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          aria-disabled={(() => {
                            try {
                              return currentItem.done ? false : true;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lxnYj,
                            (() => {
                              try {
                                return currentItem.done ? "" : "element";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] =
                              currentItem.done == 1
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.open(
                                          `https://tools.liom.app/medicine/?code=${currentItem.doctor_tracking_code}`,
                                          "_self"
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__m9V31
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bZkO
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.type_fa;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0639\u0646\u0648\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wlmgo
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const date = new Date(
                                        currentItem.timestamp
                                      );
                                      const shamsiDate =
                                        date.toLocaleDateString("fa-IR");
                                      const time =
                                        date.toLocaleTimeString("fa-IR");
                                      return `${currentItem.request_p}  ${shamsiDate} ${time}`;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0639\u0646\u0648\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(() => {
                            try {
                              return currentItem.done;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zTwiS
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pnxrO
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      direction: "ltr"
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                {"\u062f\u0631 \u062f\u0633\u062a\u0631\u0633"}
                              </div>
                              <Icon89Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mm2UJ
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return !currentItem.done;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__auYrV
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pVwbM
                                )}
                              >
                                {
                                  "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0631\u0631\u0633\u06cc"
                                }
                              </div>
                              <Icon206Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dLgik
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                        </div>
                      );
                    })}
                    {(() => {
                      try {
                        return $state.apiRequest.data.commission.length === 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rhjZz
                        )}
                      >
                        <Drugs97680451SvgIcon
                          className={classNames(projectcss.all, sty.svg__gRon)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__d1Gul
                          )}
                        >
                          {
                            "\u0646\u0633\u062e\u0647 \u0627\u06cc \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u062b\u0628\u062a \u0646\u0634\u062f\u0647 \u0627\u0633\u062a"
                          }
                        </div>
                      </div>
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vlmhX)}
                  >
                    <Icon215Icon
                      className={classNames(projectcss.all, sty.svg__fAQnd)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jUt5Y
                      )}
                    >
                      {
                        "\u0627\u0641\u0632\u0648\u062f\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                      }
                    </div>
                  </div>
                </div>
              </Reveal>
            ) : null}
            {(() => {
              try {
                return $state.page == "Result";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Reveal
                className={classNames("__wab_instance", sty.reveal__zlPy8)}
                damping={0.2}
                effect={"fade"}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__gUd2C)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qzxOx)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eu7A)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gu1GP
                        )}
                      >
                        {
                          "\u0639\u0646\u0648\u0627\u0646 \u062e\u0648\u062f\u0622\u0632\u0645\u0627\u06cc\u06cc"
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nlsIe
                        )}
                      >
                        {
                          "\u062a\u0627\u0631\u06cc\u062e \u062a\u06a9\u0645\u06cc\u0644"
                        }
                      </div>
                    </div>
                    <Embed
                      data-plasmic-name={"embedHtml"}
                      data-plasmic-override={overrides.embedHtml}
                      className={classNames("__wab_instance", sty.embedHtml)}
                      code={"<hr></hr>"}
                    />

                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return (() => {
                            return $state.apiRequest.data.Results.map(
                              i => i.json
                            );
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7P0Ar
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return window.open(
                                        currentItem.link,
                                        "_self"
                                      );
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5JLBc
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__femr5
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__q2VIi
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.type_fa;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0639\u0646\u0648\u0627\u0646 \u0627\u0634\u062a\u0631\u0627\u06a9";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <PercentageBox
                                data-plasmic-name={"percentageBox"}
                                data-plasmic-override={overrides.percentageBox}
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentageBox
                                )}
                                unnamedGroupOfVariants={(() => {
                                  try {
                                    return (() => {
                                      var details = JSON.parse(
                                        currentItem.details
                                      );
                                      var maxItem = details.reduce(
                                        (max, item) => {
                                          return item.json.score >
                                            (max?.json.score || 0)
                                            ? item
                                            : max;
                                        },
                                        null
                                      );
                                      maxItem.json.score;
                                      let score = parseInt(maxItem.json.score);
                                      let color =
                                        score >= 80
                                          ? "red"
                                          : score >= 70
                                          ? "oreng"
                                          : score >= 60
                                          ? "yellow"
                                          : score >= 50
                                          ? "blue"
                                          : score >= 40
                                          ? ""
                                          : "";
                                      return color;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        var details = JSON.parse(
                                          currentItem.details
                                        );
                                        var maxItem = details.reduce(
                                          (max, item) => {
                                            return item.json.score >
                                              (max?.json.score || 0)
                                              ? item
                                              : max;
                                          },
                                          null
                                        );
                                        return `${maxItem.json.option_metric_fa} ${maxItem.json.badge}`;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </PercentageBox>
                            </div>
                            <LineClomp
                              data-plasmic-name={"lineClomp"}
                              data-plasmic-override={overrides.lineClomp}
                              className={classNames(
                                "__wab_instance",
                                sty.lineClomp
                              )}
                              numberOfLine={1}
                              onLineChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "lineClomp",
                                  __plasmic_idx_0,
                                  "line"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qaKYq
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.result_text;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </LineClomp>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__aDkjN
                            )}
                            style={(() => {
                              try {
                                return {
                                  direction: "ltr"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const date = new Date(
                                      currentItem.timestamp
                                    );
                                    const shamsiDate =
                                      date.toLocaleDateString("fa-IR");
                                    const time =
                                      date.toLocaleTimeString("fa-IR");
                                    return `${shamsiDate} ${time}`;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u062f\u062a \u0632\u0645\u0627\u0646 \u0628\u0627\u0642\u06cc\u0645\u0627\u0646\u062f\u0647";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                  {(() => {
                    try {
                      return $state.apiRequest.data.Results.length === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4If02
                      )}
                    >
                      <Task17790924SvgIcon
                        className={classNames(projectcss.all, sty.svg__ikYih)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jn8Nt
                        )}
                      >
                        {
                          "\u062a\u0627\u06a9\u0646\u0648\u0646 \u062a\u0633\u062a\u06cc \u0646\u062f\u0627\u062f\u0647\u200c\u0627\u06cc"
                        }
                      </div>
                    </div>
                  ) : null}
                </div>
              </Reveal>
            ) : null}
          </ApiRequest>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "embedHtml", "percentageBox", "lineClomp"],
  apiRequest: ["apiRequest", "embedHtml", "percentageBox", "lineClomp"],
  embedHtml: ["embedHtml"],
  percentageBox: ["percentageBox"],
  lineClomp: ["lineClomp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  embedHtml: typeof Embed;
  percentageBox: typeof PercentageBox;
  lineClomp: typeof LineClomp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyTests__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyTests__VariantsArgs;
    args?: PlasmicMyTests__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMyTests__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMyTests__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMyTests__ArgProps,
          internalVariantPropNames: PlasmicMyTests__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMyTests__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyTests";
  } else {
    func.displayName = `PlasmicMyTests.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMyTests = Object.assign(
  // Top-level PlasmicMyTests renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    embedHtml: makeNodeComponent("embedHtml"),
    percentageBox: makeNodeComponent("percentageBox"),
    lineClomp: makeNodeComponent("lineClomp"),

    // Metadata about props expected for PlasmicMyTests
    internalVariantProps: PlasmicMyTests__VariantProps,
    internalArgProps: PlasmicMyTests__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMyTests;
/* prettier-ignore-end */
