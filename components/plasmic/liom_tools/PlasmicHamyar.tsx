// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 4PXVewzUPUAw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Nofiticon from "../../Nofiticon"; // plasmic-import: mNeZ0VfysvOp/component
import Switchbest from "../../Switchbest"; // plasmic-import: sHLRdvulrK-R/component
import Countdown from "../../Countdown"; // plasmic-import: r_SWLvc5z-qN/component
import Cyclebox from "../../Cyclebox"; // plasmic-import: BwhD-exytYa-/component
import Checkbox from "../../Checkbox"; // plasmic-import: 2OfjIZt2gJo7/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Useful from "../../Useful"; // plasmic-import: oE1-_efWgjaC/component
import Harmful from "../../Harmful"; // plasmic-import: C3zRRbdeazUl/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Subscription from "../../Subscription"; // plasmic-import: yCDiqV-DRGX1/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import SlideinModal from "../../SlideinModal"; // plasmic-import: PMpcD3nAGzFX/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import Heart from "../../Heart"; // plasmic-import: tflNBLtBZ6x3/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant
import { useScreenVariants as useScreenVariantsyg4Uf6WCaaLe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YG4uf6WCaaLe/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicHamyar.module.css"; // plasmic-import: 4PXVewzUPUAw/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: CIGrIuwcL9LP/icon
import Icon39Icon from "./icons/PlasmicIcon__Icon39"; // plasmic-import: PAMBrkvvdAzv/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: EBpvUNf0dyv4/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 7vleC7ixE4k4/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: d7z2iEn8tiSD/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: GfHw93ui63F3/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: svqpWWNnaQ7C/icon
import Icon72Icon from "./icons/PlasmicIcon__Icon72"; // plasmic-import: -PnFqaNLBd-U/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicHamyar__VariantMembers = {};
export type PlasmicHamyar__VariantsArgs = {};
type VariantPropType = keyof PlasmicHamyar__VariantsArgs;
export const PlasmicHamyar__VariantProps = new Array<VariantPropType>();

export type PlasmicHamyar__ArgsType = {};
type ArgPropType = keyof PlasmicHamyar__ArgsType;
export const PlasmicHamyar__ArgProps = new Array<ArgPropType>();

export type PlasmicHamyar__OverridesType = {
  root?: Flex__<"div">;
  nofiticon?: Flex__<typeof Nofiticon>;
  switchbest?: Flex__<typeof Switchbest>;
  countdown2?: Flex__<typeof Countdown>;
  cyclebox?: Flex__<typeof Cyclebox>;
  checkbox?: Flex__<typeof Checkbox>;
  reveal?: Flex__<typeof Reveal>;
  useful2?: Flex__<typeof Useful>;
  useful?: Flex__<typeof Useful>;
  harmful2?: Flex__<typeof Harmful>;
  harmful?: Flex__<typeof Harmful>;
  shopModalWeb?: Flex__<typeof AntdModal>;
  subscription?: Flex__<typeof Subscription>;
  button3?: Flex__<typeof ButtonLiom>;
  modal2?: Flex__<typeof AntdModal>;
  modal3?: Flex__<typeof AntdModal>;
  input?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof ButtonLiom>;
  button2?: Flex__<typeof ButtonLiom>;
  shopModalMobile?: Flex__<typeof SlideinModal>;
  subscription2?: Flex__<typeof Subscription>;
  button4?: Flex__<typeof ButtonLiom>;
  modal?: Flex__<typeof AntdModal>;
  img?: Flex__<typeof PlasmicImg__>;
  input2?: Flex__<typeof AntdInput>;
  button5?: Flex__<typeof ButtonLiom>;
  button6?: Flex__<typeof ButtonLiom>;
  todo?: Flex__<typeof ApiRequest>;
  tooltip?: Flex__<typeof AntdTooltip>;
  heart?: Flex__<typeof Heart>;
  lottie?: Flex__<typeof LottieWrapper>;
  user?: Flex__<typeof ApiRequest>;
  shop?: Flex__<typeof ApiRequest>;
  favicon?: Flex__<typeof Embed>;
  advice?: Flex__<typeof ApiRequest>;
  embedHtml?: Flex__<typeof Embed>;
  countNotif?: Flex__<typeof ApiRequest>;
};

export interface DefaultHamyarProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHamyar__RenderFunc(props: {
  variants: PlasmicHamyar__VariantsArgs;
  args: PlasmicHamyar__ArgsType;
  overrides: PlasmicHamyar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "switchbest.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.user.data.result.man.hamyarStatus;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "useful[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "shopModalWeb.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "subscription[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "user.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "user.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopModalMobile.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "itemtodo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "r",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.r;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "m",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.query.m;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "subscriptionCurrentIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let __plasmic_ret = undefined;
                for (let i = 0; i < $state.shop.data.result.length; i++) {
                  if ($state.shop.data.result[i].selected == 1) {
                    return i;
                  }
                }
                return __plasmic_ret;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "buyId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "discountCode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectedShop",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let __plasmic_ret = undefined;
                for (let i = 0; i < $state.shop.data.result.length; i++) {
                  if ($state.shop.data.result[i].selected == 1) {
                    return i;
                  }
                }
                return __plasmic_ret;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "subscription2[].clickitem",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "subscription2[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription2[].price",
        type: "private",
        variableType: "number"
      },
      {
        path: "subscription2[].discount",
        type: "private",
        variableType: "text"
      },
      {
        path: "subscription2[].fullprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "tokenUser",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "useful[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "visiblebox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "harmful[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "cyclebox.pms",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.cyclebox.cycle == "pms") {
                  return true;
                } else {
                  return false;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "cyclebox.fertility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.cyclebox.cycle == "fertility") {
                  return true;
                } else {
                  return false;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "cyclebox.period",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if ($state.cyclebox.cycle == "blood") {
                  return true;
                } else {
                  return false;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "cyclebox.cycle",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.user.data.result.userStatus.periodStatus;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "name",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadingshop",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "modal3.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "discountBox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "expdate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let future_date = new Date(
                  $state.user.data.result.man.hamyarTime.year,
                  $state.user.data.result.man.hamyarTime.month - 1,
                  $state.user.data.result.man.hamyarTime.day,
                  $state.user.data.result.man.hamyarTime.hour,
                  $state.user.data.result.man.hamyarTime.minute,
                  $state.user.data.result.man.hamyarTime.second
                );
                let offset = 3.5 * 60 * 60 * 1000;
                return future_date.setTime(future_date.getTime() + offset);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "countdown2.remainingSeconds",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let current_date = new Date();
                let delta = $state.expdate - current_date;
                return Math.floor(delta / 1000);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "advice.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "advice.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "advice.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "guideShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let value = localStorage.getItem("guideShow");
                if (value) {
                  return false;
                } else {
                  return true;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })()
      },
      {
        path: "nofiticon.number",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.countNotif.data.unseen_count;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "countNotif.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "countNotif.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "countNotif.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cyclebox.textsycle",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                switch ($state.user.data.result.userStatus.periodStatus) {
                  case null:
                    return "";
                  case "fertility":
                    if (
                      $state.user.data.result.userStatus.daysToEndFertility == 0
                    )
                      return "تا پایان امروز";
                    return (
                      $state.user.data.result.userStatus.daysToEndFertility +
                      " روز " +
                      "دیگر"
                    );
                  case "pms":
                    if ($state.user.data.result.userStatus.daysToEndPms == 0)
                      return "تا پایان امروز";
                    return (
                      $state.user.data.result.userStatus.daysToEndPms +
                      " روز " +
                      "دیگر"
                    );
                  case "blood":
                    if ($state.user.data.result.userStatus.daysToEndPeriod == 0)
                      return "تا پایان امروز";
                    return (
                      $state.user.data.result.userStatus.daysToEndPeriod +
                      " روز " +
                      "دیگر"
                    );
                  default:
                    return "-";
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "todo.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "todo.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "todo.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox[].isChecked",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "payam",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            pms: [
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0627\u062a\u0641\u0627\u0642\u06cc \u0628\u06cc\u0641\u062a\u0647 \u0645\u0646 \u0647\u0645\u06cc\u0634\u0647 \u067e\u06cc\u0634\u062a\u0645. \u0647\u0631 \u0648\u0642\u062a \u062d\u0633 \u06a9\u0631\u062f\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u06cc\u060c \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0645\u0646 \u0627\u06cc\u0646\u062c\u0627\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0646\u0647\u0627\u062a \u0646\u0645\u06cc\u200c\u0630\u0627\u0631\u0645. \u062a\u0648 \u0642\u0644\u0628\u0645\u06cc \u0648 \u0647\u0645\u06cc\u0634\u0647 \u0628\u0627 \u0647\u0645\u06cc\u0645! ",
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u06a9\u0647 \u0645\u06cc\u200c\u06af\u0630\u0631\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0647\u0645\u06cc\u0634\u0647 \u062d\u0633 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u062a\u0648 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0627\u062a\u0641\u0627\u0642 \u0632\u0646\u062f\u06af\u06cc\u0645\u06cc. \u0628\u062f\u0648\u0646 \u06a9\u0647 \u062a\u0648 \u0647\u0631 \u0634\u0631\u0627\u06cc\u0637\u06cc \u0645\u0646 \u06a9\u0646\u0627\u0631\u062a\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0686\u06cc\u0632\u06cc \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0627\u06cc\u0646\u0648 \u0639\u0648\u0636 \u06a9\u0646\u0647. \u062f\u0644\u0645 \u0647\u0645\u06cc\u0634\u0647 \u067e\u06cc\u0634 \u062a\u0648\u0626\u0647! ",
              "\u0642\u0644\u0628\u0645\u060c \u0647\u0631 \u0644\u062d\u0638\u0647 \u0628\u0647 \u062a\u0648 \u0641\u06a9\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u0641\u0647\u0645\u0645 \u0647\u06cc\u0686\u200c\u06a9\u0633 \u062c\u0627\u062a\u0648 \u0646\u0645\u06cc\u06af\u06cc\u0631\u0647. \u0647\u0631 \u062c\u0627 \u0628\u0631\u06cc\u060c \u0645\u0646 \u0628\u0627\u0647\u0627\u062a\u0645 \u0648 \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0646\u0647\u0627\u062a \u0646\u0645\u06cc\u200c\u0630\u0627\u0631\u0645. \u062a\u0648 \u0647\u0645\u0647 \u062f\u0646\u06cc\u0627\u06cc \u0645\u0646\u06cc. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u0647\u0631 \u0648\u0642\u062a \u062d\u0633 \u06a9\u0631\u062f\u06cc \u0632\u0646\u062f\u06af\u06cc \u0633\u062e\u062a \u0645\u06cc\u06af\u0630\u0631\u0647\u060c \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0645\u0646 \u0627\u06cc\u0646\u062c\u0627\u0645. \u0628\u0627 \u0647\u0645 \u0627\u0632 \u067e\u0633 \u0647\u0645\u0647\u200c\u0686\u06cc \u0628\u0631\u0645\u06cc\u0627\u06cc\u0645\u060c \u0686\u0648\u0646 \u0647\u06cc\u0686\u200c\u0686\u06cc\u0632\u06cc \u0628\u0631\u0627\u06cc \u0645\u0646 \u0645\u0647\u0645\u200c\u062a\u0631 \u0627\u0632 \u062a\u0648 \u0646\u06cc\u0633\u062a. ",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u0628\u0647\u062a \u0641\u06a9\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0645\u060c \u0647\u0645\u0647\u200c\u0686\u06cc\u0632 \u0642\u0634\u0646\u06af\u200c\u062a\u0631 \u0645\u06cc\u200c\u0634\u0647. \u0628\u062f\u0648\u0646 \u06a9\u0647 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648 \u0642\u0644\u0628 \u0645\u0646\u06cc\u060c \u0647\u0631\u062c\u0627 \u06a9\u0647 \u0628\u0627\u0634\u06cc\u060c \u0645\u0646 \u06a9\u0646\u0627\u0631\u062a\u0645! ",
              "\u0639\u0632\u06cc\u0632\u0645\u060c \u0645\u06cc\u200c\u062f\u0648\u0646\u06cc \u06a9\u0647 \u062a\u0648 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0628\u062e\u0634 \u0632\u0646\u062f\u06af\u06cc \u0645\u0646\u06cc. \u0647\u0631 \u0644\u062d\u0638\u0647\u200c\u0627\u06cc \u06a9\u0647 \u0628\u0627 \u062a\u0648\u0627\u0645\u060c \u0645\u062b\u0644 \u06cc\u06a9 \u0631\u0648\u06cc\u0627\u0633\u062a \u0648 \u062f\u0644\u0645 \u0645\u06cc\u200c\u062e\u0648\u0627\u062f \u0647\u06cc\u0686\u200c\u0648\u0642\u062a \u062a\u0645\u0648\u0645 \u0646\u0634\u0647. "
            ]
          },
          {
            blood: [
              "\u0639\u0634\u0642\u0645\u060c \u062a\u0648 \u0645\u062b\u0644 \u062e\u0648\u0646 \u062a\u0648\u06cc \u0631\u06af\u0627\u0645\u06cc. \u0628\u062f\u0648\u0646 \u062a\u0648 \u0632\u0646\u062f\u06af\u06cc \u0628\u0631\u0627\u0645 \u0645\u0639\u0646\u06cc \u0646\u062f\u0627\u0631\u0647. \u0644\u062d\u0638\u0647 \u0644\u062d\u0638\u0647 \u0628\u0627 \u062a\u0648 \u0628\u0648\u062f\u0646\u060c \u0645\u062b\u0644 \u0631\u0648\u06cc\u0627\u0633\u062a! ",
              "\u0646\u0641\u0633\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u0628\u06cc\u0634\u062a\u0631 \u0639\u0627\u0634\u0642\u062a \u0645\u06cc\u200c\u0634\u0645. \u062a\u0648 \u0646\u0647 \u062a\u0646\u0647\u0627 \u0639\u0634\u0642 \u0645\u0646\u06cc\u060c \u0628\u0647\u062a\u0631\u06cc\u0646 \u062f\u0648\u0633\u062a \u0645\u0646\u0645 \u0647\u0633\u062a\u06cc. \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u062a\u0635\u0648\u0631 \u06a9\u0646\u0645 \u0628\u062f\u0648\u0646 \u062a\u0648 \u0686\u0637\u0648\u0631 \u0645\u06cc\u200c\u06af\u0630\u0631\u0647. ",
              "\u0639\u0645\u0631\u0645\u060c \u0628\u0627 \u062a\u0648 \u0632\u0646\u062f\u06af\u06cc \u0632\u06cc\u0628\u0627\u0633\u062a. \u0686\u0648\u0646 \u0645\u06cc\u062a\u0648\u0646\u0645 \u0647\u0631 \u0631\u0648\u0632 \u062e\u0648\u062f\u0645\u0648 \u062a\u0648 \u0686\u0634\u0645\u0627\u062a \u0628\u0628\u06cc\u0646\u0645. ",
              "\u0642\u0644\u0628\u0645\u060c \u062a\u0648 \u0645\u062b\u0644 \u0646\u0648\u0631 \u062a\u0648\u06cc \u0632\u0646\u062f\u06af\u06cc\u0645 \u0645\u06cc\u200c\u062f\u0631\u062e\u0634\u06cc. \u0645\u06cc\u200c\u062f\u0648\u0646\u0645 \u06a9\u0647 \u0628\u0627 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0645 \u0627\u0632 \u067e\u0633 \u0647\u0631\u0686\u06cc\u0632\u06cc \u0628\u0631\u0628\u06cc\u0627\u0645. \u0645\u0631\u0633\u06cc \u06a9\u0646\u0627\u0631\u0645\u06cc. ",
              "\u0639\u0634\u0642\u0645\u060c \u0647\u0631 \u0628\u0627\u0631 \u0628\u0647 \u0686\u0634\u0645\u0627\u06cc \u0642\u0634\u0646\u06af\u062a \u0646\u06af\u0627\u0647 \u0645\u06cc\u200c\u06a9\u0646\u0645\u060c \u062d\u0633 \u0645\u06cc\u200c\u06a9\u0646\u0645 \u0647\u06cc\u0686 \u0686\u06cc\u0632\u06cc \u0646\u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0645\u0627 \u0631\u0648 \u0627\u0632 \u0647\u0645 \u062c\u062f\u0627 \u06a9\u0646\u0647. \u062a\u0648 \u0647\u0645\u06cc\u0634\u0647 \u062a\u0648\u06cc \u0642\u0644\u0628 \u0645\u0646\u06cc. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u062a\u0648 \u062f\u0644\u06cc\u0644 \u0644\u0628\u062e\u0646\u062f\u0647\u0627\u06cc \u0645\u0646\u06cc. \u062a\u0648 \u0645\u062b\u0644 \u06cc\u06a9 \u0631\u0627\u0632 \u0642\u0634\u0646\u06af \u062a\u0648\u06cc \u0642\u0644\u0628\u0645\u06cc \u0648 \u0647\u0631 \u0631\u0648\u0632 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u062f\u06cc\u0631\u0648\u0632 \u0639\u0627\u0634\u0642\u062a\u0645. "
            ]
          },
          {
            white: [
              "\u062f\u0646\u06cc\u0627\u06cc \u0645\u0646\u060c \u062a\u0648 \u0631\u0648 \u062e\u06cc\u0644\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u0628\u062a\u0648\u0646\u0645 \u0628\u0647 \u0632\u0628\u0648\u0646 \u0628\u06cc\u0627\u0631\u0645\u060c\u062f\u0648\u0633\u062a \u062f\u0627\u0631\u0645 ...",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u0645\u06cc\u062e\u0646\u062f\u06cc \u062f\u0646\u06cc\u0627\u0645 \u067e\u0631 \u0631\u0646\u06af \u0645\u06cc\u0634\u0647 \u0648 \u063a\u0645 \u0647\u0627\u0645 \u0641\u0631\u0627\u0631\u06cc \u067e\u0633 \u0647\u0645\u06cc\u0634\u0647 \u0628\u062e\u0646\u062f. ",
              "\u062c\u0648\u0646\u0645\u060c \u062a\u0646\u0647\u0627 \u0628\u0647\u0648\u0646\u0647 \u0632\u0646\u062f\u06af\u06cc \u06a9\u0631\u062f\u0646\u0645 \u062a\u0648\u06cc\u06cc. \u0645\u0645\u0646\u0648\u0646\u0645 \u06a9\u0647 \u0647\u0633\u062a\u06cc. ",
              "\u0646\u0641\u0633\u0645\u060c \u062a\u0648 \u0647\u0645\u0648\u0646 \u06a9\u0633\u06cc \u0647\u0633\u062a\u06cc \u06a9\u0647 \u0645\u06cc\u200c\u062e\u0648\u0627\u0645 \u0647\u0645\u06cc\u0634\u0647 \u06a9\u0646\u0627\u0631\u0645 \u0628\u0627\u0634\u0647. \u0647\u0645\u06cc\u0646 \u06a9\u0647 \u062a\u0648 \u0647\u0633\u062a\u06cc \u0628\u0631\u0627\u0645 \u06a9\u0627\u0641\u06cc\u0647. ",
              "\u0639\u0634\u0642\u0645\u060c \u0648\u0642\u062a\u06cc \u06a9\u0646\u0627\u0631\u062a\u0645\u060c \u0627\u0646\u06af\u0627\u0631 \u0647\u0645\u0647 \u0686\u06cc\u0632 \u0632\u06cc\u0628\u0627\u062a\u0631 \u0645\u06cc\u0634\u0647. \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u06a9\u0644 \u062f\u0646\u06cc\u0627 \u062f\u0648\u0633\u062a \u062f\u0627\u0631\u0645. ",
              "\u0639\u0632\u06cc\u0632 \u062f\u0644\u0645\u060c \u0647\u0631 \u0631\u0648\u0632 \u06a9\u0647 \u0645\u06cc\u200c\u0628\u06cc\u0646\u0645\u062a\u060c \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632 \u0642\u0628\u0644 \u0645\u06cc\u0641\u0647\u0645\u0645 \u06a9\u0647 \u0686\u0642\u062f\u0631 \u062a\u0648 \u0632\u06cc\u0628\u0627\u06cc\u06cc. "
            ]
          }
        ]
      },
      {
        path: "p",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dosAndDonts",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          blood: {
            todo: [
              {
                title:
                  "\u06a9\u0645\u06a9 \u062a\u0648 \u06a9\u0627\u0631\u0627\u06cc \u062e\u0648\u0646\u0647",
                desc: "\u062f\u0631 \u062f\u0648\u0631\u0627\u0646 \u067e\u0631\u06cc\u0648\u062f\u060c \u0627\u0646\u0631\u0698\u06cc \u06a9\u0645\u062a\u0631\u06cc \u062f\u0627\u0631\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0627\u062d\u0633\u0627\u0633 \u062e\u0633\u062a\u06af\u06cc \u06a9\u0646\u0647. \u067e\u0633 \u062a\u0648 \u06a9\u0627\u0631\u0647\u0627\u06cc \u062e\u0648\u0646\u0647 \u0628\u0647\u0634 \u06a9\u0645\u06a9 \u06a9\u0646 \u062a\u0627 \u0647\u0645 \u0627\u0632 \u0644\u062d\u0627\u0638 \u0641\u06cc\u0632\u06cc\u06a9\u06cc \u0641\u0634\u0627\u0631 \u06a9\u0645\u062a\u0631\u06cc \u0631\u0648\u0634 \u0628\u0627\u0634\u0647 \u0648 \u0647\u0645 \u062d\u0633 \u06a9\u0646\u0647 \u06a9\u0647 \u062a\u0646\u0647\u0627 \u0646\u06cc\u0633\u062a.",
                icon: "\ud83e\uddf9",
                type: "menstruation"
              },
              {
                title:
                  "\u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a",
                desc: "\u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0646\u0648\u0633\u0627\u0646\u0627\u062a \u062e\u0644\u0642\u06cc \u0634\u062f\u06cc\u062f\u06cc \u062f\u0627\u0631\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0628\u0647 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647. \u0628\u0647\u062a\u0631\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u06a9\u0646\u06cc\u060c \u062d\u0645\u0627\u06cc\u062a\u0634 \u06a9\u0646\u06cc \u0648 \u0628\u0647\u0634 \u0646\u0634\u0648\u0646 \u0628\u062f\u06cc \u06a9\u0647 \u062f\u0631\u06a9\u0634 \u0645\u06cc\u200c\u06a9\u0646\u06cc.",
                icon: "\ud83d\udc96",
                type: "menstruation"
              },
              {
                title: "\u0645\u0627\u0633\u0627\u0698",
                desc: "\u06cc\u06a9 \u0645\u0627\u0633\u0627\u0698 \u0645\u0644\u0627\u06cc\u0645 \u0645\u062e\u0635\u0648\u0635\u0627\u064b \u0628\u0631\u0627\u06cc \u06a9\u0645\u0631 \u0648 \u0634\u06a9\u0645\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u06a9\u0645\u06a9 \u0628\u0632\u0631\u06af\u06cc \u0628\u0647 \u062a\u0633\u06a9\u06cc\u0646 \u062f\u0631\u062f\u0647\u0627\u0634 \u06a9\u0646\u0647 \u0648 \u062d\u0633 \u0631\u0627\u062d\u062a\u06cc \u0628\u06cc\u0634\u062a\u0631\u06cc \u0628\u0647\u0634 \u0628\u062f\u0647.",
                icon: "\ud83d\udc86\ud83c\udffb\u200d\u2640\ufe0f",
                type: "menstruation"
              }
            ],
            notToDo: [
              {
                title:
                  "\u0627\u0646\u062a\u0642\u0627\u062f \u0627\u0632 \u062e\u0644\u0642 \u0648 \u062e\u0648",
                desc: "\u0646\u0648\u0633\u0627\u0646\u0627\u062a \u0647\u0648\u0631\u0645\u0648\u0646\u06cc \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0628\u0627\u0639\u062b \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062e\u0644\u0642\u06cc \u0645\u06cc\u200c\u0634\u0647. \u0627\u06af\u0631 \u0645\u06cc\u200c\u0628\u06cc\u0646\u06cc \u06a9\u0647 \u0639\u0635\u0628\u06cc \u06cc\u0627 \u06a9\u0645\u200c\u062d\u0648\u0635\u0644\u0647 \u0634\u062f\u0647\u060c \u0627\u0632\u0634 \u0627\u0646\u062a\u0642\u0627\u062f \u0646\u06a9\u0646 \u0648 \u0633\u0639\u06cc \u06a9\u0646 \u0634\u0631\u0627\u06cc\u0637 \u0631\u0648 \u062f\u0631\u06a9 \u06a9\u0646\u06cc.",
                icon: "\ud83d\ude20",
                type: "menstruation"
              },
              {
                title:
                  "\u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0645\u0645\u06a9\u0646\u0647 \u062d\u0633\u0627\u0633\u200c\u062a\u0631 \u0628\u0634\u0647 \u0648 \u0628\u0647 \u062a\u0648\u062c\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc \u0646\u06cc\u0627\u0632 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647. \u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u06cc\u0627 \u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u0646\u06cc\u0627\u0632\u0647\u0627\u0634 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u062f\u0644\u062e\u0648\u0631\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633 \u062a\u0646\u0647\u0627\u06cc\u06cc \u0628\u0634\u0647.",
                icon: "\ud83d\ude47\ud83c\udffb\u200d\u2640\ufe0f",
                type: "menstruation"
              },
              {
                title:
                  "\u0628\u0631\u06cc\u062f\u0646 \u0627\u0631\u062a\u0628\u0627\u0637",
                desc: "\u0642\u0637\u0639 \u06a9\u0631\u062f\u0646 \u0627\u0631\u062a\u0628\u0627\u0637 \u06cc\u0627 \u0641\u0627\u0635\u0644\u0647 \u06af\u0631\u0641\u062a\u0646 \u0627\u0632\u0634\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0628\u0634\u0647 \u062d\u0633 \u06a9\u0646\u0647 \u062a\u0646\u0647\u0627\u0633\u062a \u0648 \u0627\u0632 \u062d\u0645\u0627\u06cc\u062a \u062a\u0648 \u0645\u062d\u0631\u0648\u0645 \u0634\u062f\u0647. \u0628\u0647\u062a\u0631\u0647 \u0627\u0631\u062a\u0628\u0627\u0637\u062a \u0631\u0648 \u062d\u0641\u0638 \u06a9\u0646\u06cc \u0648 \u0647\u0645\u0631\u0627\u0647\u0634 \u0628\u0627\u0634\u06cc.",
                icon: "\ud83d\ude45\ud83c\udffb\u200d\u2642\ufe0f",
                type: "menstruation"
              }
            ]
          },
          pms: {
            todo: [
              {
                title: "\u0635\u0628\u0648\u0631 \u0628\u0648\u062f\u0646",
                desc: "\u062a\u0648 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u06a9\u0645\u06cc \u0635\u0628\u0648\u0631 \u0628\u0627\u0634. \u0645\u0645\u06a9\u0646\u0647 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0628\u0627 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0647\u0648\u0631\u0645\u0648\u0646\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u06cc \u062f\u0633\u062a \u0648 \u067e\u0646\u062c\u0647 \u0646\u0631\u0645 \u06a9\u0646\u0647. \u0628\u0627 \u062f\u0631\u06a9 \u0648 \u062d\u0645\u0627\u06cc\u062a \u0627\u0632\u0634\u060c \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc\u062f \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0631\u0648 \u0631\u0627\u062d\u062a\u200c\u062a\u0631 \u0628\u06af\u0630\u0631\u0648\u0646\u06cc\u062f.",
                icon: "\ud83d\udc96",
                type: "pms"
              },
              {
                title:
                  "\u062d\u0645\u0627\u06cc\u062a \u0639\u0627\u0637\u0641\u06cc",
                desc: "\u062e\u06cc\u0644\u06cc \u0645\u0647\u0645\u0647 \u06a9\u0647 \u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0628\u0627\u0632\u0634 \u062d\u0645\u0627\u06cc\u062a \u0639\u0627\u0637\u0641\u06cc \u06a9\u0646\u06cc. \u0627\u0628\u0631\u0627\u0632 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062d\u0627\u0644\u0634 \u0631\u0648 \u0628\u0647\u062a\u0631 \u06a9\u0646\u0647. \u06cc\u06a9 \u06a9\u0644\u0645\u0647 \u0645\u062d\u0628\u062a\u200c\u0622\u0645\u06cc\u0632 \u06cc\u0627 \u062d\u062a\u06cc \u06cc\u06a9 \u06a9\u0627\u0631 \u06a9\u0648\u0686\u06a9 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0627\u062d\u0633\u0627\u0633 \u0627\u0645\u0646\u06cc\u062a \u0648 \u0622\u0631\u0627\u0645\u0634 \u0631\u0648 \u0628\u0631\u0627\u0634 \u0628\u0647 \u0627\u0631\u0645\u063a\u0627\u0646 \u0628\u06cc\u0627\u0631\u0647.",
                icon: "\ud83e\udd17",
                type: "pms"
              }
            ],
            notToDo: [
              {
                title: "\u0628\u062d\u062b \u0648 \u062f\u0639\u0648\u0627",
                desc: "\u062a\u0648 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0627\u0632 \u0628\u062d\u062b \u0648 \u062f\u0639\u0648\u0627 \u062f\u0648\u0631\u06cc \u06a9\u0646. \u0627\u06cc\u0646 \u06a9\u0627\u0631 \u0641\u0642\u0637 \u0627\u0633\u062a\u0631\u0633 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647 \u0648 \u0645\u0645\u06a9\u0646\u0647 \u0628\u0647 \u0627\u062e\u062a\u0644\u0627\u0641\u0627\u062a \u0628\u06cc\u0634\u062a\u0631\u06cc \u0645\u0646\u062c\u0631 \u0628\u0634\u0647. \u0627\u06af\u0631 \u0645\u0648\u0636\u0648\u0639\u06cc \u0628\u0631\u0627\u062a \u0645\u0647\u0645\u0647\u060c \u0628\u0647\u062a\u0631\u0647 \u0628\u0647 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0647\u200c\u0627\u06cc \u0645\u0648\u06a9\u0648\u0644\u0634 \u06a9\u0646\u06cc.",
                icon: "\u26a0\ufe0f",
                type: "pms"
              },
              {
                title:
                  "\u0641\u0634\u0627\u0631 \u0622\u0648\u0631\u062f\u0646",
                desc: "\u0628\u0647\u0634 \u0641\u0634\u0627\u0631 \u0646\u06cc\u0627\u0648\u0631. \u062f\u0631\u06a9 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0648 \u0627\u06cc\u062c\u0627\u062f \u0641\u0636\u0627\u06cc\u06cc \u0622\u0631\u0627\u0645 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062e\u06cc\u0644\u06cc \u06a9\u0645\u06a9 \u06a9\u0646\u0647. \u0627\u06af\u0631 \u067e\u0627\u0631\u062a\u0646\u0631\u062a \u0627\u062d\u0633\u0627\u0633 \u0628\u062f\u06cc \u062f\u0627\u0631\u0647\u060c \u0627\u062c\u0627\u0632\u0647 \u0628\u062f\u0647 \u06a9\u0645\u06cc \u0628\u0627 \u062e\u0648\u062f\u0634 \u062a\u0646\u0647\u0627 \u0628\u0627\u0634\u0647.",
                icon: "\ud83d\uded1",
                type: "pms"
              },
              {
                title:
                  "\u062d\u0631\u0641 \u0632\u062f\u0646 \u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u0645\u0647\u0645",
                desc: "\u0628\u0647\u062a\u0631\u0647 \u0627\u0632 \u0635\u062d\u0628\u062a \u062f\u0631\u0628\u0627\u0631\u0647 \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u062d\u0633\u0627\u0633 \u062f\u0648\u0631\u06cc \u06a9\u0646\u06cc. \u0645\u0645\u06a9\u0646\u0647 \u0646\u062a\u0648\u0646\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0631\u0648 \u0628\u0647 \u062f\u0631\u0633\u062a\u06cc \u0628\u06cc\u0627\u0646 \u06a9\u0646\u0647 \u0648 \u0627\u06cc\u0646 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0633\u0648\u062a\u0641\u0627\u0647\u0645 \u0628\u0634\u0647. \u0628\u0647 \u062c\u0627\u06cc \u0627\u0648\u0646\u060c \u0645\u0648\u0636\u0648\u0639\u0627\u062a \u0633\u0628\u06a9\u200c\u062a\u0631 \u0648 \u062e\u0648\u0634\u0627\u06cc\u0646\u062f\u062a\u0631 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 \u062a\u0627 \u0641\u0636\u0627\u06cc \u0645\u062b\u0628\u062a\u200c\u062a\u0631\u06cc \u0627\u06cc\u062c\u0627\u062f \u0628\u0634\u0647.",
                icon: "\u274c",
                type: "pms"
              }
            ]
          },
          fertility: {
            todo: [
              {
                title:
                  "\u062d\u0645\u0627\u06cc\u062a \u0627\u0632 \u062a\u0635\u0645\u06cc\u0645\u200c\u06af\u06cc\u0631\u06cc\u200c\u0647\u0627\u06cc\u0634",
                desc: "\u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0632\u0645\u0627\u0646 \u0628\u0631\u0627\u06cc \u062a\u0635\u0645\u06cc\u0645\u200c\u06af\u06cc\u0631\u06cc\u200c\u0647\u0627\u06cc \u0645\u0647\u0645\u0647 \u0686\u0648\u0646 \u0647\u0645\u0633\u0631\u062a \u0645\u0646\u0637\u0642\u06cc\u200c\u062a\u0631 \u0648 \u0645\u0637\u0645\u0626\u0646\u200c\u062a\u0631 \u062a\u0635\u0645\u06cc\u0645 \u0645\u06cc\u200c\u06af\u06cc\u0631\u0647. \u0627\u0632 \u0646\u0638\u0631\u0627\u062a \u0648 \u062a\u0635\u0645\u06cc\u0645\u200c\u0647\u0627\u0634 \u062d\u0645\u0627\u06cc\u062a \u06a9\u0646 \u0648 \u0628\u0647\u0634 \u0627\u0639\u062a\u0645\u0627\u062f \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634. \u0627\u06cc\u0646 \u062d\u0645\u0627\u06cc\u062a \u0627\u0639\u062a\u0645\u0627\u062f \u0628\u0647 \u0646\u0641\u0633\u0634 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u0645\u06cc\u200c\u06a9\u0646\u0647.",
                icon: "\ud83e\udde0",
                type: "ovulation"
              },
              {
                title:
                  "\u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u0628\u06cc\u0634\u062a\u0631",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627\u060c \u0627\u0628\u0631\u0627\u0632 \u0627\u062d\u0633\u0627\u0633\u0627\u062a \u0648 \u0645\u062d\u0628\u062a \u0628\u06cc\u0634\u062a\u0631\u06cc \u0627\u0632 \u0637\u0631\u0641 \u062a\u0648 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0631\u0627\u0628\u0637\u0647\u200c\u062a\u0648\u0646 \u0631\u0648 \u0642\u0648\u06cc\u200c\u062a\u0631 \u06a9\u0646\u0647. \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0647\u0645\u0633\u0631\u062a \u0627\u0632 \u0644\u062d\u0627\u0638 \u0639\u0627\u0637\u0641\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u06cc \u067e\u0630\u06cc\u0631\u0627\u062a\u0631 \u0648 \u0642\u0648\u06cc\u200c\u062a\u0631\u0647\u060c \u067e\u0633 \u0628\u0627 \u0646\u0634\u0648\u0646 \u062f\u0627\u062f\u0646 \u0645\u062d\u0628\u062a \u0648 \u062a\u0648\u062c\u0647\u060c \u0627\u062d\u0633\u0627\u0633 \u0646\u0632\u062f\u06cc\u06a9\u06cc \u0628\u06cc\u0634\u062a\u0631\u06cc \u0627\u06cc\u062c\u0627\u062f \u06a9\u0646.",
                icon: "\ud83d\udc9e",
                type: "ovulation"
              }
            ],
            notToDo: [
              {
                title:
                  "\u0627\u06cc\u062c\u0627\u062f \u0627\u0633\u062a\u0631\u0633",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u0631\u0648\u0632\u0647\u0627 \u0627\u0632 \u0627\u06cc\u062c\u0627\u062f \u0645\u0648\u0642\u0639\u06cc\u062a\u200c\u0647\u0627\u06cc \u0627\u0633\u062a\u0631\u0633\u200c\u0632\u0627 \u062f\u0648\u0631\u06cc \u06a9\u0646. \u0627\u0633\u062a\u0631\u0633 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u062a\u0623\u062b\u06cc\u0631 \u0645\u0646\u0641\u06cc \u0631\u0648\u06cc \u062e\u0644\u0642 \u0648 \u062e\u0648\u06cc \u0647\u0645\u0633\u0631\u062a \u0628\u0630\u0627\u0631\u0647 \u0648 \u0627\u0632 \u0627\u0646\u0631\u0698\u06cc \u0645\u062b\u0628\u062a\u0634 \u06a9\u0645 \u06a9\u0646\u0647. \u0628\u0647 \u062c\u0627\u06cc \u0627\u0648\u0646\u060c \u0641\u0636\u0627\u06cc\u06cc \u0622\u0631\u0627\u0645 \u0648 \u067e\u0631 \u0627\u0632 \u062d\u0645\u0627\u06cc\u062a \u0627\u06cc\u062c\u0627\u062f \u06a9\u0646.",
                icon: "\ud83d\ude30",
                type: "ovulation"
              },
              {
                title:
                  "\u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634",
                desc: "\u062f\u0631 \u0627\u06cc\u0646 \u062f\u0648\u0631\u0627\u0646\u060c \u0647\u0645\u0633\u0631\u062a \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u0647 \u06a9\u0647 \u0628\u06cc\u0634\u062a\u0631 \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u062a\u0648\u062c\u0647 \u06a9\u0646\u06cc. \u0646\u0627\u062f\u06cc\u062f\u0647 \u06af\u0631\u0641\u062a\u0646 \u06cc\u0627 \u0628\u06cc\u200c\u062a\u0648\u062c\u0647\u06cc \u0628\u0647 \u0627\u062d\u0633\u0627\u0633\u0627\u062a\u0634 \u0645\u06cc\u200c\u062a\u0648\u0646\u0647 \u0628\u0627\u0639\u062b \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0628\u0634\u0647. \u0628\u0627 \u0645\u062d\u0628\u062a \u0648 \u0647\u0645\u062f\u0644\u06cc \u0628\u0647\u0634 \u0646\u0634\u0648\u0646 \u0628\u062f\u0647 \u06a9\u0647 \u06a9\u0646\u0627\u0631\u0634 \u0647\u0633\u062a\u06cc \u0648 \u0628\u0647 \u062d\u0627\u0644 \u0648 \u0647\u0648\u0627\u06cc \u062f\u0631\u0648\u0646\u06cc\u200c\u0627\u0634 \u0627\u0647\u0645\u06cc\u062a \u0645\u06cc\u062f\u06cc.",
                icon: "\ud83d\udc94",
                type: "ovulation"
              }
            ]
          }
        })
      },
      {
        path: "useful2[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "useful2[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful2[].title",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful2[].text",
        type: "private",
        variableType: "text"
      },
      {
        path: "harmful2[].icon",
        type: "private",
        variableType: "text"
      },
      {
        path: "deleteDate",
        type: "private",
        variableType: "dateString",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "2024-10-24T07:00:28.998Z"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsyg4Uf6WCaaLe(),
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHamyar.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHamyar.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHamyar.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            }
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["refreshData"] = true
              ? (() => {
                  const actionArgs = {
                    queryInvalidation: ["plasmic_refresh_all"]
                  };
                  return (async ({ queryInvalidation }) => {
                    if (!queryInvalidation) {
                      return;
                    }
                    await plasmicInvalidate(queryInvalidation);
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["refreshData"] != null &&
              typeof $steps["refreshData"] === "object" &&
              typeof $steps["refreshData"].then === "function"
            ) {
              $steps["refreshData"] = await $steps["refreshData"];
            }
          }}
        >
          {(() => {
            try {
              return !(
                $state.user.loading ||
                $state.name == "" ||
                $state.shop.loading
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__ckmA)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__taaNs)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___2E64A)}
                >
                  <Nofiticon
                    data-plasmic-name={"nofiticon"}
                    data-plasmic-override={overrides.nofiticon}
                    className={classNames("__wab_instance", sty.nofiticon)}
                    number={generateStateValueProp($state, [
                      "nofiticon",
                      "number"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToPage"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: (() => {
                                try {
                                  return (() => {
                                    return (
                                      "https://apps.liom.app/notification/?r=" +
                                      $ctx.query.r +
                                      "&m=" +
                                      $ctx.query.m
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return `/notification`;
                                  }
                                  throw e;
                                }
                              })()
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }
                    }}
                    onNumberChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "nofiticon",
                        "number"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    unnamedVariant={(() => {
                      try {
                        return $state.countNotif.data.unseen_count != 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__eVpM5)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8JvAh
                      )}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.user.data.result.man.name + " خوش آمدید! "
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "-";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  {(() => {
                    try {
                      return !$state.user.data.result.man.hamyarStatus;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nwXcl)}
                    >
                      <Switchbest
                        data-plasmic-name={"switchbest"}
                        data-plasmic-override={overrides.switchbest}
                        className={classNames("__wab_instance", sty.switchbest)}
                        isChecked={
                          generateStateValueProp($state, [
                            "switchbest",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "switchbest",
                              "isChecked"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);

                          if (eventArgs.length > 1 && eventArgs[1]) {
                            return;
                          }

                          (async isChecked => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        return window.scrollTo({
                                          top: document.body.scrollHeight,
                                          behavior: "smooth"
                                        });
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateSwitchbestIsChecked"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["switchbest", "isChecked"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSwitchbestIsChecked"] != null &&
                              typeof $steps["updateSwitchbestIsChecked"] ===
                                "object" &&
                              typeof $steps["updateSwitchbestIsChecked"]
                                .then === "function"
                            ) {
                              $steps["updateSwitchbestIsChecked"] =
                                await $steps["updateSwitchbestIsChecked"];
                            }
                          }).apply(null, eventArgs);
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wLIxU
                          )}
                        >
                          {
                            "\u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u06cc\u0627\u062f\u0622\u0648\u0631"
                          }
                        </div>
                      </Switchbest>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return $state.user.data.result.man.hamyarStatus;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__u3Myr)}
                    >
                      {(() => {
                        try {
                          return (() => {
                            if (
                              $state.user.data.result.man.timeToEndHamyarTime
                                .days > 3
                            )
                              return true;
                            else return false;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nAPtm
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modal", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalOpen"] != null &&
                              typeof $steps["updateModalOpen"] === "object" &&
                              typeof $steps["updateModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalOpen"] = await $steps[
                                "updateModalOpen"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nG21
                            )}
                          >
                            {
                              "\u0648\u0636\u0639\u06cc\u062a \u0627\u0634\u062a\u0631\u0627\u06a9 : "
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vJr4Q
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    return (
                                      $state.user.data.result.man
                                        .timeToEndHamyarTime.days +
                                      " روز باقی مانده"
                                    );
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "15 \u0631\u0648\u0632";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (() => {
                            if (
                              $state.user.data.result.man.timeToEndHamyarTime
                                .days > 3
                            )
                              return false;
                            else return true;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__d172H
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateModalOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["modal", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateModalOpen"] != null &&
                              typeof $steps["updateModalOpen"] === "object" &&
                              typeof $steps["updateModalOpen"].then ===
                                "function"
                            ) {
                              $steps["updateModalOpen"] = await $steps[
                                "updateModalOpen"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cgJK
                            )}
                          >
                            {
                              "\u0648\u0636\u0639\u06cc\u062a \u0627\u0634\u062a\u0631\u0627\u06a9 : "
                            }
                          </div>
                          {(() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.countdown2
                              ),
                              onRemainingSecondsChange: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangeProp($state, [
                                  "countdown2",
                                  "remainingSeconds"
                                ]).apply(null, eventArgs);

                                if (eventArgs.length > 1 && eventArgs[1]) {
                                  return;
                                }
                              },
                              remainingSeconds: generateStateValueProp($state, [
                                "countdown2",
                                "remainingSeconds"
                              ])
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "countdown2.remainingSeconds",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return (() => {
                                          let current_date = new Date();
                                          let delta =
                                            $state.expdate - current_date;
                                          return Math.floor(delta / 1000);
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 0;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              []
                            );
                            return (
                              <Countdown
                                data-plasmic-name={"countdown2"}
                                data-plasmic-override={overrides.countdown2}
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </Stack__>
                {(() => {
                  try {
                    return $state.guideShow;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jr4Mb)}
                  >
                    {(() => {
                      try {
                        return $state.cyclebox.cycle != "white";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ttAln
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lFs8Q
                          )}
                        >
                          {
                            "\u0628\u0627 \u0645\u062d\u062a\u0648\u0627\u06cc \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647 \u0645\u06cc\u200c\u062a\u0648\u0646\u06cc \u0628\u0647\u062a\u0631 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u062c\u0633\u0645\u06cc \u0648 \u0631\u0648\u062d\u06cc \u0647\u0645\u06cc\u0627\u0631\u062a \u0631\u0648 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u062d\u0645\u0627\u06cc\u062a\u06cc \u06a9\u0647 \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u0647\u060c \u0628\u0647\u0634 \u0628\u062f\u06cc. \u0627\u06cc\u0646 \u0647\u0645\u0631\u0627\u0647\u06cc \u0628\u0627\u0639\u062b \u0622\u0631\u0627\u0645\u0634 \u0648 \u0628\u0647\u0628\u0648\u062f \u062d\u0627\u0644 \u0647\u0631 \u062f\u0648\u06cc \u0634\u0645\u0627 \u0645\u06cc\u200c\u0634\u0647."
                          }
                        </div>
                        <Icon22Icon
                          className={classNames(projectcss.all, sty.svg__rnPl)}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateGuideShow"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["guideShow"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateGuideShow"] != null &&
                              typeof $steps["updateGuideShow"] === "object" &&
                              typeof $steps["updateGuideShow"].then ===
                                "function"
                            ) {
                              $steps["updateGuideShow"] = await $steps[
                                "updateGuideShow"
                              ];
                            }

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        return localStorage.setItem(
                                          "guideShow",
                                          "false"
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          }}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                  </div>
                ) : null}
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__a9Ey)}
                >
                  <Cyclebox
                    data-plasmic-name={"cyclebox"}
                    data-plasmic-override={overrides.cyclebox}
                    className={classNames("__wab_instance", sty.cyclebox)}
                    cycle={generateStateValueProp($state, [
                      "cyclebox",
                      "cycle"
                    ])}
                    fertility={generateStateValueProp($state, [
                      "cyclebox",
                      "fertility"
                    ])}
                    normalpms={(() => {
                      try {
                        return (() => {
                          let future1 = new Date(
                            $state.user.data.result.userStatus.pmsStart
                          );
                          let current_date1 = new Date();
                          let delta1 = future1 - current_date1;
                          let days_remaining1 = Math.floor(
                            delta1 / (1000 * 60 * 60 * 24)
                          );
                          if ($state.cyclebox.cycle == "white")
                            if (days_remaining1 < 3) return true;
                          return false;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClickDescription={async event => {
                      const $steps = {};

                      $steps["updateModal3Open"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal3", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModal3Open"] != null &&
                        typeof $steps["updateModal3Open"] === "object" &&
                        typeof $steps["updateModal3Open"].then === "function"
                      ) {
                        $steps["updateModal3Open"] = await $steps[
                          "updateModal3Open"
                        ];
                      }
                    }}
                    onCycleChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "cycle"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    onFertilityChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "fertility"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    onPeriodChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "period"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    onPmsChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "pms"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    onTextsycleChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cyclebox",
                        "textsycle"
                      ]).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    period={generateStateValueProp($state, [
                      "cyclebox",
                      "period"
                    ])}
                    pms={generateStateValueProp($state, ["cyclebox", "pms"])}
                    textsycle={generateStateValueProp($state, [
                      "cyclebox",
                      "textsycle"
                    ])}
                    userData={$state.userData}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xUe)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dR2Wa
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return "وضعیت " + $state.name + " : ";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "-";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dbAZo
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                switch (
                                  $state.user.data.result.userStatus
                                    .periodStatus
                                ) {
                                  case "white":
                                    return "عادی";
                                  case "fertility":
                                    return "تخمک گذاری";
                                  case "pms":
                                    return "pms";
                                  case "blood":
                                    return "پریود";
                                  default:
                                    return "-";
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "-";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </Cyclebox>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__c99Ma)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wGuiA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Fxqz
                        )}
                      >
                        <Icon39Icon
                          className={classNames(projectcss.all, sty.svg__qQ5Oc)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mbDeA
                          )}
                        >
                          <div
                            className={projectcss.__wab_expr_html_text}
                            dangerouslySetInnerHTML={{
                              __html: (() => {
                                try {
                                  return "توصیه امروز";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                  }
                                  throw e;
                                }
                              })()
                            }}
                          />
                        </div>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__s7Bbi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yByFb
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.advice.data[0].doc;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uDwCu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8Zvqs
                        )}
                      >
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__jjl2E)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o6GHu
                          )}
                        >
                          <div
                            className={projectcss.__wab_expr_html_text}
                            dangerouslySetInnerHTML={{
                              __html: (() => {
                                try {
                                  return "روز شمار";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                  }
                                  throw e;
                                }
                              })()
                            }}
                          />
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qIZgS
                        )}
                      >
                        {(() => {
                          try {
                            return $state.cyclebox.cycle != "blood";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3VB9U
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yJm5H
                              )}
                            >
                              {
                                "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f:"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Mssb
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      if (
                                        $state.user.data.result.userStatus
                                          .daysToEndPms == 0
                                      )
                                        return "تا پایان امروز";
                                      return (
                                        $state.user.data.result.userStatus
                                          .daysToEndPms +
                                        " روز " +
                                        "دیگر"
                                      );
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "-";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $state.cyclebox.cycle != "pms";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zwEmC
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8GmTj
                              )}
                            >
                              {"\u0634\u0631\u0648\u0639 pms :"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__em0UB
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      let future1 = new Date(
                                        $state.user.data.result.userStatus.pmsStart
                                      );
                                      let current_date1 = new Date();
                                      let delta1 = future1 - current_date1;
                                      let days_remaining1 = Math.floor(
                                        delta1 / (1000 * 60 * 60 * 24)
                                      );
                                      if (days_remaining1 == 0)
                                        return "تا پایان امروز";
                                      return days_remaining1 + " روز " + "دیگر";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "-";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        ) : null}
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__wyVgS)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1FreO)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__b9ZAr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cTmbQ
                        )}
                      >
                        <div
                          className={projectcss.__wab_expr_html_text}
                          dangerouslySetInnerHTML={{
                            __html: (() => {
                              try {
                                return (
                                  "این روزا برای " + $state.name + " چیکار کنم؟"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u062a\u0648\u0635\u06cc\u0647 \u0627\u0645\u0631\u0648\u0632";
                                }
                                throw e;
                              }
                            })()
                          }}
                        />
                      </div>
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__d07IX)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.todo.data;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.checkbox
                            ),
                            isChecked:
                              generateStateValueProp($state, [
                                "checkbox",
                                __plasmic_idx_0,
                                "isChecked"
                              ]) ?? false,
                            key: currentIndex,
                            onChange: async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "checkbox",
                                  __plasmic_idx_0,
                                  "isChecked"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }

                              (async isChecked => {
                                const $steps = {};

                                $steps["invokeGlobalAction"] = $state.checkbox[
                                  currentIndex
                                ].isChecked
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://n8n.staas.ir/webhook/hamyar/todo",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                userId:
                                                  $state.user.data.result.man
                                                    .id,
                                                todoId: currentItem.id,
                                                deleteDate: $state.deleteDate
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }

                                $steps["invokeGlobalAction2"] = !$state
                                  .checkbox[currentIndex].isChecked
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "PUT",
                                          "https://n8n.staas.ir/webhook/task",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                id: currentItem.id,
                                                userId:
                                                  $state.user.data.result.man.id
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction2"] != null &&
                                  typeof $steps["invokeGlobalAction2"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction2"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction2"] = await $steps[
                                    "invokeGlobalAction2"
                                  ];
                                }

                                $steps["invokeGlobalAction3"] = $state.checkbox[
                                  currentIndex
                                ].isChecked
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://api.liom.app/service/log",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                userId:
                                                  $state.user.data.result.man
                                                    .id,
                                                pageName: "mainPage",
                                                action: "checkTodo",
                                                extraData: {
                                                  refCode: $state.r,
                                                  mobile:
                                                    $state.user.data.result.man
                                                      .mobile,
                                                  todoid: currentItem.id
                                                }
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          (() => {
                                            try {
                                              return {
                                                headers: {
                                                  "Content-Type":
                                                    "application/json",
                                                  Authorization:
                                                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                                }
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction3"] != null &&
                                  typeof $steps["invokeGlobalAction3"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction3"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction3"] = await $steps[
                                    "invokeGlobalAction3"
                                  ];
                                }
                              }).apply(null, eventArgs);
                            }
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "checkbox[].isChecked",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.is_completed != null;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Checkbox
                              data-plasmic-name={"checkbox"}
                              data-plasmic-override={overrides.checkbox}
                              {...child$Props}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0Oskc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__h6Hff
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return currentItem.action == "copy";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___5OdO
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2U1Ka
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.p;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__gIaWb
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__x1USu
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return $$.copyToClipboard(
                                                      $state.p
                                                    );
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }

                                          $steps["invokeGlobalAction"] =
                                            $steps.runCode == true
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      undefined,
                                                      "\u0645\u062a\u0646 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u06a9\u067e\u06cc \u0634\u062f!",
                                                      "top-left"
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "Fragment.showToast"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                      >
                                        {
                                          "\u06a9\u067e\u06cc \u06a9\u0631\u062f\u0646"
                                        }
                                      </div>
                                    </div>
                                  </Stack__>
                                ) : null}
                              </div>
                            </Checkbox>
                          );
                        })();
                      })}
                    </Stack__>
                  </Stack__>
                </div>
                {(() => {
                  try {
                    return (
                      !$state.user.data.result.todoNotTodoLists.todo.length == 0
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xyt9T)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wcQxv
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "کارهایی که باید برای " +
                              $state.name +
                              " انجام بدی:"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u0645\u0631\u0648\u0632 \u0645\u0644\u06cc\u06a9\u0627 \u0628\u0627\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647 :";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__t6C3S
                      )}
                    >
                      {
                        "\u0628\u0631\u0627\u06cc \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0631\u062f\u0646 \u0631\u0648\u06cc \u0647\u0631 \u0645\u0648\u0636\u0648\u0639 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 \u0648 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a\u0634 \u0631\u0648 \u0628\u062e\u0648\u0646."
                      }
                    </div>
                    <Reveal
                      data-plasmic-name={"reveal"}
                      data-plasmic-override={overrides.reveal}
                      className={classNames("__wab_instance", sty.reveal)}
                      triggerOnce={true}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b80Ke
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.dosAndDonts[$state.cyclebox.cycle]
                                .todo;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.useful2
                              ),
                              icon: generateStateValueProp($state, [
                                "useful2",
                                __plasmic_idx_0,
                                "icon"
                              ]),
                              key: currentIndex,
                              onClick: async event => {
                                const $steps = {};

                                $steps["updateModal2Open"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["modal2", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateModal2Open"] != null &&
                                  typeof $steps["updateModal2Open"] ===
                                    "object" &&
                                  typeof $steps["updateModal2Open"].then ===
                                    "function"
                                ) {
                                  $steps["updateModal2Open"] = await $steps[
                                    "updateModal2Open"
                                  ];
                                }

                                $steps["updateIndexusefull"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["itemtodo"]
                                        },
                                        operation: 0,
                                        value: currentItem
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateIndexusefull"] != null &&
                                  typeof $steps["updateIndexusefull"] ===
                                    "object" &&
                                  typeof $steps["updateIndexusefull"].then ===
                                    "function"
                                ) {
                                  $steps["updateIndexusefull"] = await $steps[
                                    "updateIndexusefull"
                                  ];
                                }
                              },
                              onIconChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "useful2",
                                  __plasmic_idx_0,
                                  "icon"
                                ]).apply(null, eventArgs);

                                if (eventArgs.length > 1 && eventArgs[1]) {
                                  return;
                                }
                              },
                              onTextChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "useful2",
                                  __plasmic_idx_0,
                                  "text"
                                ]).apply(null, eventArgs);

                                if (eventArgs.length > 1 && eventArgs[1]) {
                                  return;
                                }
                              },
                              text: generateStateValueProp($state, [
                                "useful2",
                                __plasmic_idx_0,
                                "text"
                              ])
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "useful2[].text",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                },
                                {
                                  name: "useful2[].icon",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.icon;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Useful
                                data-plasmic-name={"useful2"}
                                data-plasmic-override={overrides.useful2}
                                {...child$Props}
                              />
                            );
                          })();
                        })}
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $state.user.data.result.todoNotTodoLists
                                .todo;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.useful
                              ),
                              icon: generateStateValueProp($state, [
                                "useful",
                                __plasmic_idx_0,
                                "icon"
                              ]),
                              key: currentIndex,
                              onClick: async event => {
                                const $steps = {};

                                $steps["updateModal2Open"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["modal2", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateModal2Open"] != null &&
                                  typeof $steps["updateModal2Open"] ===
                                    "object" &&
                                  typeof $steps["updateModal2Open"].then ===
                                    "function"
                                ) {
                                  $steps["updateModal2Open"] = await $steps[
                                    "updateModal2Open"
                                  ];
                                }

                                $steps["updateIndexusefull"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["itemtodo"]
                                        },
                                        operation: 0,
                                        value: currentItem
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateIndexusefull"] != null &&
                                  typeof $steps["updateIndexusefull"] ===
                                    "object" &&
                                  typeof $steps["updateIndexusefull"].then ===
                                    "function"
                                ) {
                                  $steps["updateIndexusefull"] = await $steps[
                                    "updateIndexusefull"
                                  ];
                                }
                              },
                              onIconChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "useful",
                                  __plasmic_idx_0,
                                  "icon"
                                ]).apply(null, eventArgs);

                                if (eventArgs.length > 1 && eventArgs[1]) {
                                  return;
                                }
                              },
                              onTextChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "useful",
                                  __plasmic_idx_0,
                                  "text"
                                ]).apply(null, eventArgs);

                                if (eventArgs.length > 1 && eventArgs[1]) {
                                  return;
                                }
                              },
                              text: generateStateValueProp($state, [
                                "useful",
                                __plasmic_idx_0,
                                "text"
                              ])
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "useful[].text",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                },
                                {
                                  name: "useful[].icon",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    (() => {
                                      try {
                                        return currentItem.icon;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Useful
                                data-plasmic-name={"useful"}
                                data-plasmic-override={overrides.useful}
                                {...child$Props}
                              />
                            );
                          })();
                        })}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Np4
                          )}
                        >
                          {"Enter some text"}
                        </div>
                      </Stack__>
                    </Reveal>
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return (
                      !$state.user.data.result.todoNotTodoLists.notToDo
                        .length == 0
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__camig)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mabu1
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "کارهایی که نباید برای " +
                              $state.name +
                              " انجام بدی:"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0627\u0645\u0631\u0648\u0632 \u0645\u0644\u06cc\u06a9\u0627 \u0646\u0628\u0627\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u0647 :";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rMeHs
                      )}
                    >
                      {
                        "\u0628\u0631\u0627\u06cc \u0628\u0647\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0631\u062f\u0646 \u0631\u0648\u06cc \u0647\u0631 \u0645\u0648\u0636\u0648\u0639 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646 \u0648 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a\u0634 \u0631\u0648 \u0628\u062e\u0648\u0646."
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___0CVv)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.dosAndDonts[$state.cyclebox.cycle]
                              .notToDo;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.harmful2
                            ),
                            icon: generateStateValueProp($state, [
                              "harmful2",
                              __plasmic_idx_0,
                              "icon"
                            ]),
                            key: currentIndex,
                            onClick: async event => {
                              const $steps = {};

                              $steps["updateItemtodo"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["itemtodo"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateItemtodo"] != null &&
                                typeof $steps["updateItemtodo"] === "object" &&
                                typeof $steps["updateItemtodo"].then ===
                                  "function"
                              ) {
                                $steps["updateItemtodo"] = await $steps[
                                  "updateItemtodo"
                                ];
                              }

                              $steps["updateModal2Open"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal2", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModal2Open"] != null &&
                                typeof $steps["updateModal2Open"] ===
                                  "object" &&
                                typeof $steps["updateModal2Open"].then ===
                                  "function"
                              ) {
                                $steps["updateModal2Open"] = await $steps[
                                  "updateModal2Open"
                                ];
                              }
                            },
                            onIconChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "harmful2",
                                __plasmic_idx_0,
                                "icon"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            onTextChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "harmful2",
                                __plasmic_idx_0,
                                "text"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            onTitleChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "harmful2",
                                __plasmic_idx_0,
                                "title"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            text: generateStateValueProp($state, [
                              "harmful2",
                              __plasmic_idx_0,
                              "text"
                            ]),
                            title: generateStateValueProp($state, [
                              "harmful2",
                              __plasmic_idx_0,
                              "title"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "harmful2[].title",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "harmful2[].text",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.desc;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "harmful2[].icon",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.icon;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Harmful
                              data-plasmic-name={"harmful2"}
                              data-plasmic-override={overrides.harmful2}
                              {...child$Props}
                            />
                          );
                        })();
                      })}
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.user.data.result.todoNotTodoLists
                              .notToDo;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.harmful
                            ),
                            icon: generateStateValueProp($state, [
                              "harmful",
                              __plasmic_idx_0,
                              "icon"
                            ]),
                            key: currentIndex,
                            onClick: async event => {
                              const $steps = {};

                              $steps["updateItemtodo"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["itemtodo"]
                                      },
                                      operation: 0,
                                      value: currentItem
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateItemtodo"] != null &&
                                typeof $steps["updateItemtodo"] === "object" &&
                                typeof $steps["updateItemtodo"].then ===
                                  "function"
                              ) {
                                $steps["updateItemtodo"] = await $steps[
                                  "updateItemtodo"
                                ];
                              }

                              $steps["updateModal2Open"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["modal2", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateModal2Open"] != null &&
                                typeof $steps["updateModal2Open"] ===
                                  "object" &&
                                typeof $steps["updateModal2Open"].then ===
                                  "function"
                              ) {
                                $steps["updateModal2Open"] = await $steps[
                                  "updateModal2Open"
                                ];
                              }
                            },
                            onIconChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "harmful",
                                __plasmic_idx_0,
                                "icon"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            onTextChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "harmful",
                                __plasmic_idx_0,
                                "text"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            onTitleChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "harmful",
                                __plasmic_idx_0,
                                "title"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            text: generateStateValueProp($state, [
                              "harmful",
                              __plasmic_idx_0,
                              "text"
                            ]),
                            title: generateStateValueProp($state, [
                              "harmful",
                              __plasmic_idx_0,
                              "title"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "harmful[].title",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "harmful[].text",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.desc;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "harmful[].icon",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.icon;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Harmful
                              data-plasmic-name={"harmful"}
                              data-plasmic-override={overrides.harmful}
                              {...child$Props}
                            />
                          );
                        })();
                      })}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tsEsr
                        )}
                      >
                        {"Enter some text"}
                      </div>
                    </Stack__>
                  </Stack__>
                ) : null}
                <AntdModal
                  data-plasmic-name={"shopModalWeb"}
                  data-plasmic-override={overrides.shopModalWeb}
                  className={classNames("__wab_instance", sty.shopModalWeb)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens,
                    plasmic_paziresh_24_design_system_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  maskClosable={true}
                  modalContentClassName={classNames({
                    [sty["pcls_GaM_ttCxuXwZ"]]: true
                  })}
                  modalScopeClassName={sty["shopModalWeb__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "shopModalWeb",
                      "open"
                    ]).apply(null, eventArgs);

                    if (eventArgs.length > 1 && eventArgs[1]) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, [
                    "shopModalWeb",
                    "open"
                  ])}
                  title={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hh0Fl)}
                    />
                  }
                  trigger={null}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uPWzg)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.shop.data.result;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.subscription
                          ),
                          clickitem: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "clickitem"
                          ]),
                          discount: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "discount"
                          ]),
                          fullprice: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "fullprice"
                          ]),
                          key: currentIndex,
                          onClick: async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        for (
                                          let i = 0;
                                          i < $state.subscription.length;
                                          i++
                                        ) {
                                          $state.subscription[i].clickitem =
                                            false;
                                        }
                                        $state.subscription[
                                          currentIndex
                                        ].clickitem = true;
                                        $state.subscriptionCurrentIndex = [
                                          currentIndex
                                        ];
                                        return ($state.buyId = currentItem.id);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }
                          },
                          onClickitemChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "clickitem"
                            ]).apply(null, eventArgs);

                            if (eventArgs.length > 1 && eventArgs[1]) {
                              return;
                            }
                          },
                          onDiscountChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "discount"
                            ]).apply(null, eventArgs);

                            if (eventArgs.length > 1 && eventArgs[1]) {
                              return;
                            }
                          },
                          onFullpriceChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "fullprice"
                            ]).apply(null, eventArgs);

                            if (eventArgs.length > 1 && eventArgs[1]) {
                              return;
                            }
                          },
                          onPriceChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "price"
                            ]).apply(null, eventArgs);

                            if (eventArgs.length > 1 && eventArgs[1]) {
                              return;
                            }
                          },
                          onTitleChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "subscription",
                              __plasmic_idx_0,
                              "title"
                            ]).apply(null, eventArgs);

                            if (eventArgs.length > 1 && eventArgs[1]) {
                              return;
                            }
                          },
                          price: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "price"
                          ]),
                          title: generateStateValueProp($state, [
                            "subscription",
                            __plasmic_idx_0,
                            "title"
                          ])
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "subscription[].clickitem",
                              initFunc: ({ $props, $state, $queries }) => false
                            },
                            {
                              name: "subscription[].title",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "subscription[].price",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.price.toLocaleString(
                                      "en-US"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return 120000;
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "subscription[].discount",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.badge
                                      ? currentItem.badge
                                      : "";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "-";
                                    }
                                    throw e;
                                  }
                                })()
                            },
                            {
                              name: "subscription[].fullprice",
                              initFunc: ({ $props, $state, $queries }) =>
                                (() => {
                                  try {
                                    return currentItem.fullPrice
                                      ? currentItem.fullPrice.toLocaleString(
                                          "en-US"
                                        )
                                      : currentItem.price.toLocaleString(
                                          "en-US"
                                        );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return 0;
                                    }
                                    throw e;
                                  }
                                })()
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Subscription
                            data-plasmic-name={"subscription"}
                            data-plasmic-override={overrides.subscription}
                            {...child$Props}
                          />
                        );
                      })();
                    })}
                  </Stack__>
                  <ButtonLiom
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    className={classNames("__wab_instance", sty.button3)}
                    color={generateStateValueProp($state, ["button3", "color"])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__gr04Y)}
                        role={"img"}
                      />
                    }
                    isDisabled={(() => {
                      try {
                        return $state.loadingshop;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadingshop"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop"] != null &&
                        typeof $steps["updateLoadingshop"] === "object" &&
                        typeof $steps["updateLoadingshop"].then === "function"
                      ) {
                        $steps["updateLoadingshop"] = await $steps[
                          "updateLoadingshop"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      id: $state.buyId,
                                      offCode: $state.discountCode,
                                      refCode: $state.r,
                                      redirectUrl:
                                        "https://apps.liom.app/shop-result?r=" +
                                        $state.r +
                                        "&m=" +
                                        $state.m +
                                        "&buyId=" +
                                        $state.buyId +
                                        "&offCode=" +
                                        $state.discountCode +
                                        "&valueShop=" +
                                        $state.shop.data.result[
                                          $state.subscriptionCurrentIndex
                                        ].type +
                                        "-" +
                                        $state.shop.data.result[
                                          $state.subscriptionCurrentIndex
                                        ].value +
                                        "&price=" +
                                        $state.shop.data.result[
                                          $state.subscriptionCurrentIndex
                                        ].price +
                                        "&manId=" +
                                        $state.user.data.result.man.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: $state.tokenUser
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.invokeGlobalAction.data.success == true &&
                        $steps.invokeGlobalAction.data.result != false
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return window.open(
                                      $steps.invokeGlobalAction.data.result,
                                      "_system"
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateLoadingshop2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop2"] != null &&
                        typeof $steps["updateLoadingshop2"] === "object" &&
                        typeof $steps["updateLoadingshop2"].then === "function"
                      ) {
                        $steps["updateLoadingshop2"] = await $steps[
                          "updateLoadingshop2"
                        ];
                      }

                      $steps["updateShopModalWebOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["shopModalWeb", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShopModalWebOpen"] != null &&
                        typeof $steps["updateShopModalWebOpen"] === "object" &&
                        typeof $steps["updateShopModalWebOpen"].then ===
                          "function"
                      ) {
                        $steps["updateShopModalWebOpen"] = await $steps[
                          "updateShopModalWebOpen"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.success == false ||
                        $steps.invokeGlobalAction.data.result == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button3", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadingshop;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6ZKty
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "فعال سازی " +
                              $state.subscription[
                                $state.subscriptionCurrentIndex
                              ].title
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "--";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </ButtonLiom>
                </AntdModal>
                <AntdModal
                  data-plasmic-name={"modal2"}
                  data-plasmic-override={overrides.modal2}
                  className={classNames("__wab_instance", sty.modal2)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens,
                    plasmic_paziresh_24_design_system_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["modal2__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["modal2", "open"]).apply(
                      null,
                      eventArgs
                    );

                    if (eventArgs.length > 1 && eventArgs[1]) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, ["modal2", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___09Kc
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.itemtodo.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  trigger={null}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hnha1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rd6LF
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.itemtodo.desc;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                </AntdModal>
                <AntdModal
                  data-plasmic-name={"modal3"}
                  data-plasmic-override={overrides.modal3}
                  className={classNames("__wab_instance", sty.modal3)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens,
                    plasmic_paziresh_24_design_system_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalScopeClassName={sty["modal3__modal"]}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["modal3", "open"]).apply(
                      null,
                      eventArgs
                    );

                    if (eventArgs.length > 1 && eventArgs[1]) {
                      return;
                    }
                  }}
                  open={generateStateValueProp($state, ["modal3", "open"])}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mkgxi
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              if ($state.cyclebox.cycle == "pms")
                                return "pms چیست \u061F";
                              if ($state.cyclebox.cycle == "fertility")
                                return "تخمک گذاری چیست \u061F";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                  trigger={null}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qecVj)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ykZjl
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              if ($state.cyclebox.cycle == "pms")
                                return "PMS یا سندرم پیش از قاعدگی\u060C به مجموعه‌ای از علائم جسمی و عاطفی اطلاق می‌شود که معمولاً در دو هفته‌ی قبل از شروع قاعدگی بروز می‌کند.\n\n این علائم می‌تواند شامل تغییرات خلقی مانند افسردگی و اضطراب\u060C دردهای شکمی\u060C نفخ\u060C حساسیت سینه‌ها\u060C سردرد\u060C و خستگی باشد.\n\n علائم PMS معمولاً با شروع قاعدگی کاهش می‌یابد و می‌تواند بر کیفیت زندگی روزمره تأثیر بگذارد. شدت علائم ممکن است از خفیف تا شدید متفاوت باشد.";
                              if ($state.cyclebox.cycle == "fertility")
                                return "تخمک‌گذاری زمانی است که بدن زن یک تخمک را از تخمدان آزاد می‌کند. این اتفاق معمولاً حدود ۱۴ روز قبل از پریود بعدی رخ می‌دهد. \n\nدر این زمان\u060C بدن زن در مناسب‌ترین حالت برای بارداری است\u060C زیرا تخمک آماده است تا در صورت برخورد با اسپرم\u060C بارور شود. \n\nاگر تخمک بارور شود\u060C بارداری شکل می‌گیرد. اگر بارداری نشود\u060C تخمک و دیواره رحم طی قاعدگی دفع می‌شوند.";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062e\u0627\u0644\u062f \u062d\u0633\u06cc\u0646\u06cc \u062a\u0648 \u0631\u0645\u0627\u0646 \u0628\u0627\u062f \u0628\u0627\u062f\u06a9 \u0628\u0627\u0632 \u0645\u06cc\u0646\u0648\u06cc\u0633\u0647 : \ufee3\ufeae\ufea9 \ufe81\ufeeb\ufeb4\ufe98\ufeea \ufea9\ufead \ufb94\ufeee\ufeb5 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufe97\ufe8e\ufeaf\ufee9 \ufe91\ufeea \ufe91\ufee0\ufeee\ufecd \ufead\ufeb3\ufbff\ufeaa\ufee9 \ufe8d\ufeb5 \ufe91\ufeae\ufe8d\ufbfc \ufb58\ufee8\ufeaa \ufb7c\ufee8\ufbff\ufee6 \ufee7\ufea0\ufeee\ufe8d \ufb90\ufeae\ufea9 : \u201d \ufb58\ufeb4\ufeae\ufee1 \ufea9\ufead \ufeaf\ufee7\ufeaa\ufb94\ufbfd \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeaf\ufea9\ufbfc \ufee7\ufb91\ufee6 \u201d \ufb58\ufeb4\ufeae \ufee3\ufe98\ufecc\ufea0\ufe90 \ufeed \ufee3\ufe92\ufeec\ufeee\ufe95 \ufe91\ufeea \ufb58\ufeaa\ufead \ufee7\ufb95\ufe8e\ufee9 \ufb90\ufeae\ufea9 \ufe91\ufeaa\ufbfe\ufee6 \ufee3\ufecc\ufee8\ufe8e \ufb90\ufeea \ufe8d\ufeed \ufeeb\ufeae\ufb94\ufeb0 \ufea9\ufeb3\ufe96 \ufb90\ufe9e \ufee7\ufeaa\ufe8d\ufeb7\ufe98\ufeea \ufb58\ufeaa\ufead \ufe91\ufeea \ufee7\ufb95\ufe8e\ufee9 \ufee3\ufe98\ufecc\ufea0\ufe90 \ufed3\ufeae\ufeaf\ufee7\ufeaa \ufedf\ufe92\ufea8\ufee8\ufeaa\ufbfc \ufeaf\ufea9 \ufeed \ufe8d\ufea9\ufe8d\ufee3\ufeea \ufea9\ufe8d\ufea9.";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                </AntdModal>
                <div className={classNames(projectcss.all, sty.freeBox__f04KN)}>
                  {(() => {
                    try {
                      return !$state.user.data.result.man.hamyarStatus;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kYmwy)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oPcwv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x2Ncw
                          )}
                        >
                          {
                            "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646 \u062a\u0627 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627 \u0631\u0648 \u0628\u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc"
                          }
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gw7Kx
                        )}
                      >
                        <Stack__
                          as={"ol"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.ol,
                            sty.ol___3S0Jz
                          )}
                        >
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__uJmLh
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "شروع دوره pms رو با پیامک بهت اطلاع میدم تا بتونی " +
                                    $state.name +
                                    " رو بیشتر درک کنی و از ناراحتی های احتمالی جلوگیری کنی. "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 pms \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647\u062a \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u0627\u0632 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0647\u0627\u06cc \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc. ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__dil7V
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "در هر روز pms پیامک هایی برای " +
                                    $state.name +
                                    " ارسال میشه که اون هم بتونه خودش رو کنترل کنه و حواسش به تو و رابطه تون باشه(‌البته که قرار نیست این پیامک ها بصورت مستقیم ارسال بشن و اون بفهمه که تو این قابلیت رو فعال کردی)"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 pms \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u06a9\u0647 \u0627\u0648\u0646 \u0647\u0645 \u0628\u062a\u0648\u0646\u0647 \u062e\u0648\u062f\u0634 \u0631\u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062a\u0648 \u0648 \u0631\u0627\u0628\u0637\u0647 \u062a\u0648\u0646 \u0628\u0627\u0634\u0647(\u200c\u0627\u0644\u0628\u062a\u0647 \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0646 \u0648 \u0627\u0648\u0646 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0647 \u062a\u0648 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u06cc)";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__evWa7
                            )}
                          >
                            {
                              "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0631\u0648 \u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632\u0634 \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u06a9\u0645\u062a\u0631 \u062f\u0631\u062f \u0628\u06a9\u0634\u0647 \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc"
                            }
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__tDmf7
                            )}
                          >
                            {
                              "\u0645\u0648\u0642\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0628\u0631\u0627\u0634 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0645\u06cc\u0641\u0631\u0633\u062a\u0645 \u06a9\u0647 \u062f\u0631\u0633\u062a\u0647 \u06a9\u0647 \u067e\u0631\u06cc\u0648\u062f\u0647 \u0627\u0645\u0627 \u0627\u0648\u0646 \u0647\u0645 \u0645\u0631\u0627\u0642\u0628 \u062a\u0648 \u0628\u0627\u0634\u0647 \u0648 \u0646\u0630\u0627\u0631\u0647 \u0627\u062d\u0633\u0627\u0633 \u062a\u0646\u0647\u0627\u06cc\u06cc \u06a9\u0646\u06cc"
                            }
                          </li>
                          <li
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li__eAvj1
                            )}
                          >
                            {
                              "\u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0647 \u0628\u062a\u0648\u0646\u06cc \u0628\u0647 \u0633\u0644\u0627\u0645\u062a\u0634 \u06a9\u0645\u06a9 \u06a9\u0646\u06cc \u0648 \u062e\u0648\u0634\u062d\u0627\u0644\u0634 \u06a9\u0646\u06cc"
                            }
                          </li>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hbAdP
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9Yz6C
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iCiLm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hSsQq
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.shop.data.result[
                                      $state.selectedShop
                                    ].title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "-";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___519P
                              )}
                            >
                              {(() => {
                                try {
                                  return $state.shop.data.result[
                                    $state.selectedShop
                                  ].badge
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___7VtWe
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.shop.data.result[
                                          $state.selectedShop
                                        ].fullPrice.toLocaleString("en-US");
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "-";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__mnB1Y
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.shop.data.result[
                                          $state.selectedShop
                                        ].price.toLocaleString("en-US") +
                                        " تومان "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            {(() => {
                              try {
                                return $state.shop.data.result[
                                  $state.selectedShop
                                ].badge
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cs1Ck
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___2SLx3
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.shop.data.result[
                                          $state.selectedShop
                                        ].badge;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "-";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            ) : null}
                          </div>
                          {(() => {
                            try {
                              return !$state.discountBox;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dO5Q
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateDiscountBox"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["discountBox"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDiscountBox"] != null &&
                                  typeof $steps["updateDiscountBox"] ===
                                    "object" &&
                                  typeof $steps["updateDiscountBox"].then ===
                                    "function"
                                ) {
                                  $steps["updateDiscountBox"] = await $steps[
                                    "updateDiscountBox"
                                  ];
                                }
                              }}
                            >
                              {
                                "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                              }
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $state.discountBox;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6RhjR
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__n5ESa
                                )}
                              >
                                {(() => {
                                  const child$Props = {
                                    allowClear: false,
                                    autoFocus: false,
                                    bordered: false,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.input
                                    ),
                                    disabled: false,
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["input", "value"],
                                        AntdInput_Helpers
                                      ).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1]
                                      ) {
                                        return;
                                      }

                                      (async event => {
                                        const $steps = {};
                                      }).apply(null, eventArgs);
                                    },
                                    placeholder:
                                      "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                    prefix: (
                                      <Icon10Icon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__k5F6
                                        )}
                                        role={"img"}
                                      />
                                    ),

                                    readOnly: false,
                                    size: "small",
                                    suffix: null,
                                    value: generateStateValueProp($state, [
                                      "input",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "input.value"
                                      }
                                    ],
                                    [],
                                    AntdInput_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdInput
                                      data-plasmic-name={"input"}
                                      data-plasmic-override={overrides.input}
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                {(() => {
                                  try {
                                    return $state.visiblebox;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ju2Yj
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateVisiblebox"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["visiblebox"]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateVisiblebox"] != null &&
                                        typeof $steps["updateVisiblebox"] ===
                                          "object" &&
                                        typeof $steps["updateVisiblebox"]
                                          .then === "function"
                                      ) {
                                        $steps["updateVisiblebox"] =
                                          await $steps["updateVisiblebox"];
                                      }
                                    }}
                                  />
                                ) : null}
                              </div>
                              <ButtonLiom
                                data-plasmic-name={"button"}
                                data-plasmic-override={overrides.button}
                                className={classNames(
                                  "__wab_instance",
                                  sty.button
                                )}
                                color={generateStateValueProp($state, [
                                  "button",
                                  "color"
                                ])}
                                isDisabled={(() => {
                                  try {
                                    return $state.input.value == "" ||
                                      $state.input.value == null
                                      ? true
                                      : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateVisiblebox"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["visiblebox"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateVisiblebox"] != null &&
                                    typeof $steps["updateVisiblebox"] ===
                                      "object" &&
                                    typeof $steps["updateVisiblebox"].then ===
                                      "function"
                                  ) {
                                    $steps["updateVisiblebox"] = await $steps[
                                      "updateVisiblebox"
                                    ];
                                  }

                                  $steps["updateDiscountCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["discountCode"]
                                          },
                                          operation: 0,
                                          value: $state.input.value
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateDiscountCode"] != null &&
                                    typeof $steps["updateDiscountCode"] ===
                                      "object" &&
                                    typeof $steps["updateDiscountCode"].then ===
                                      "function"
                                  ) {
                                    $steps["updateDiscountCode"] = await $steps[
                                      "updateDiscountCode"
                                    ];
                                  }
                                }}
                                onColorChange={async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "button",
                                      "color"
                                    ])(eventArgs[0]);
                                  }).apply(null, eventArgs);

                                  if (eventArgs.length > 1 && eventArgs[1]) {
                                    return;
                                  }
                                }}
                              >
                                {"\u062a\u0627\u06cc\u06cc\u062f"}
                              </ButtonLiom>
                            </Stack__>
                          ) : null}
                          <ButtonLiom
                            data-plasmic-name={"button2"}
                            data-plasmic-override={overrides.button2}
                            className={classNames(
                              "__wab_instance",
                              sty.button2
                            )}
                            color={generateStateValueProp($state, [
                              "button2",
                              "color"
                            ])}
                            endIcon={
                              <Icon12Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rKz2N
                                )}
                                role={"img"}
                              />
                            }
                            isDisabled={(() => {
                              try {
                                return $state.loadingshop;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateLoadingshop"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loadingshop"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoadingshop"] != null &&
                                typeof $steps["updateLoadingshop"] ===
                                  "object" &&
                                typeof $steps["updateLoadingshop"].then ===
                                  "function"
                              ) {
                                $steps["updateLoadingshop"] = await $steps[
                                  "updateLoadingshop"
                                ];
                              }

                              $steps["updateBuyId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["buyId"]
                                      },
                                      operation: 0,
                                      value:
                                        $state.shop.data.result[
                                          $state.selectedShop
                                        ].id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateBuyId"] != null &&
                                typeof $steps["updateBuyId"] === "object" &&
                                typeof $steps["updateBuyId"].then === "function"
                              ) {
                                $steps["updateBuyId"] = await $steps[
                                  "updateBuyId"
                                ];
                              }

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              id: $state.buyId,
                                              offCode: $state.discountCode,
                                              refCode: $state.r,
                                              redirectUrl:
                                                "https://apps.liom.app/shop-result?r=" +
                                                $state.r +
                                                "&m=" +
                                                $state.m +
                                                "&buyId=" +
                                                $state.buyId +
                                                "&offCode=" +
                                                $state.discountCode +
                                                "&valueShop=" +
                                                $state.shop.data.result[
                                                  $state.selectedShop
                                                ].type +
                                                "-" +
                                                $state.shop.data.result[
                                                  $state.selectedShop
                                                ].value +
                                                "&price=" +
                                                $state.shop.data.result[
                                                  $state.selectedShop
                                                ].price +
                                                "&manId=" +
                                                $state.user.data.result.man.id
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        (() => {
                                          try {
                                            return {
                                              headers: {
                                                "Content-Type":
                                                  "application/json",
                                                Authorization: $state.tokenUser
                                              }
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["runCode"] =
                                $steps.invokeGlobalAction.data.success ==
                                  true &&
                                $steps.invokeGlobalAction.data.result != false
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            return window.open(
                                              $steps.invokeGlobalAction.data
                                                .result,
                                              "_system"
                                            );
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateLoadingshop2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loadingshop"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoadingshop2"] != null &&
                                typeof $steps["updateLoadingshop2"] ===
                                  "object" &&
                                typeof $steps["updateLoadingshop2"].then ===
                                  "function"
                              ) {
                                $steps["updateLoadingshop2"] = await $steps[
                                  "updateLoadingshop2"
                                ];
                              }

                              $steps["invokeGlobalAction2"] =
                                $steps.invokeGlobalAction.data.success ==
                                  false ||
                                $steps.invokeGlobalAction.data.result == false
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "error",
                                          "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                          "top-left"
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                              if (
                                $steps["invokeGlobalAction2"] != null &&
                                typeof $steps["invokeGlobalAction2"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction2"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction2"] = await $steps[
                                  "invokeGlobalAction2"
                                ];
                              }
                            }}
                            onColorChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "button2",
                                  "color"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            }}
                            showEndIcon={(() => {
                              try {
                                return $state.loadingshop;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__w3Oe
                              )}
                            >
                              {
                                "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                              }
                            </div>
                          </ButtonLiom>
                          <p
                            className={classNames(
                              projectcss.all,
                              projectcss.p,
                              projectcss.__wab_text,
                              sty.p___6H0ZW
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateShopModalWebOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["shopModalWeb", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateShopModalWebOpen"] != null &&
                                typeof $steps["updateShopModalWebOpen"] ===
                                  "object" &&
                                typeof $steps["updateShopModalWebOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateShopModalWebOpen"] = await $steps[
                                  "updateShopModalWebOpen"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          $state.subscription[
                                            $state.subscriptionCurrentIndex
                                          ].clickitem = true;
                                          return ($state.buyId =
                                            $state.shop.data.result[
                                              $state.subscriptionCurrentIndex
                                            ].id);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                            }
                          </p>
                          {false ? (
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__rhTF
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            $state.subscription2[
                                              $state.subscriptionCurrentIndex
                                            ].clickitem = true;
                                            return ($state.buyId =
                                              $state.shop.data.result[
                                                $state.subscriptionCurrentIndex
                                              ].id);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["updateShopModalMobileClick"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "shopModalMobile",
                                            "click"
                                          ]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateShopModalMobileClick"] !=
                                    null &&
                                  typeof $steps[
                                    "updateShopModalMobileClick"
                                  ] === "object" &&
                                  typeof $steps["updateShopModalMobileClick"]
                                    .then === "function"
                                ) {
                                  $steps["updateShopModalMobileClick"] =
                                    await $steps["updateShopModalMobileClick"];
                                }
                              }}
                            >
                              {
                                "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                              }
                            </p>
                          ) : null}
                        </Stack__>
                      </div>
                    </Stack__>
                  ) : null}
                </div>
              </Stack__>
              <SlideinModal
                data-plasmic-name={"shopModalMobile"}
                data-plasmic-override={overrides.shopModalMobile}
                className={classNames("__wab_instance", sty.shopModalMobile)}
                click={generateStateValueProp($state, [
                  "shopModalMobile",
                  "click"
                ])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateShopModalMobileClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["shopModalMobile", "click"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateShopModalMobileClick"] != null &&
                    typeof $steps["updateShopModalMobileClick"] === "object" &&
                    typeof $steps["updateShopModalMobileClick"].then ===
                      "function"
                  ) {
                    $steps["updateShopModalMobileClick"] = await $steps[
                      "updateShopModalMobileClick"
                    ];
                  }
                }}
                onClickChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "shopModalMobile",
                    "click"
                  ]).apply(null, eventArgs);

                  if (eventArgs.length > 1 && eventArgs[1]) {
                    return;
                  }
                }}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ifzSa)}>
                  {false ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__v1YV4)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.shop.data.result;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.subscription2
                            ),
                            clickitem: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "clickitem"
                            ]),
                            discount: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "discount"
                            ]),
                            fullprice: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "fullprice"
                            ]),
                            key: currentIndex,
                            onClick: async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          for (
                                            let i = 0;
                                            i < $state.subscription2.length;
                                            i++
                                          ) {
                                            $state.subscription2[i].clickitem =
                                              false;
                                          }
                                          $state.subscription2[
                                            currentIndex
                                          ].clickitem = true;
                                          $state.subscriptionCurrentIndex = [
                                            currentIndex
                                          ];
                                          return ($state.buyId =
                                            currentItem.id);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            },
                            onClickitemChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "clickitem"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            onDiscountChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "discount"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            onFullpriceChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "fullprice"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            onPriceChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "price"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            onTitleChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "subscription2",
                                __plasmic_idx_0,
                                "title"
                              ]).apply(null, eventArgs);

                              if (eventArgs.length > 1 && eventArgs[1]) {
                                return;
                              }
                            },
                            price: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "price"
                            ]),
                            title: generateStateValueProp($state, [
                              "subscription2",
                              __plasmic_idx_0,
                              "title"
                            ])
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "subscription2[].clickitem",
                                initFunc: ({ $props, $state, $queries }) =>
                                  false
                              },
                              {
                                name: "subscription2[].title",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription2[].price",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.price.toLocaleString(
                                        "en-US"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 120000;
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription2[].discount",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.badge
                                        ? currentItem.badge
                                        : "";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()
                              },
                              {
                                name: "subscription2[].fullprice",
                                initFunc: ({ $props, $state, $queries }) =>
                                  (() => {
                                    try {
                                      return currentItem.fullPrice
                                        ? currentItem.fullPrice.toLocaleString(
                                            "en-US"
                                          )
                                        : currentItem.price.toLocaleString(
                                            "en-US"
                                          );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return 0;
                                      }
                                      throw e;
                                    }
                                  })()
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Subscription
                              data-plasmic-name={"subscription2"}
                              data-plasmic-override={overrides.subscription2}
                              {...child$Props}
                            />
                          );
                        })();
                      })}
                    </Stack__>
                  ) : null}
                  <ButtonLiom
                    data-plasmic-name={"button4"}
                    data-plasmic-override={overrides.button4}
                    className={classNames("__wab_instance", sty.button4)}
                    color={generateStateValueProp($state, ["button4", "color"])}
                    endIcon={
                      <Icon12Icon
                        className={classNames(projectcss.all, sty.svg__lwN0W)}
                        role={"img"}
                      />
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoadingshop"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop"] != null &&
                        typeof $steps["updateLoadingshop"] === "object" &&
                        typeof $steps["updateLoadingshop"].then === "function"
                      ) {
                        $steps["updateLoadingshop"] = await $steps[
                          "updateLoadingshop"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      id: $state.buyId,
                                      offCode: $state.discountCode,
                                      refCode: $state.r,
                                      redirectUrl:
                                        "https://apps.liom.app/shop-result?r=" +
                                        $state.r +
                                        "&m=" +
                                        $state.m +
                                        "&buyId=" +
                                        $state.buyId +
                                        "&offCode=" +
                                        $state.discountCode +
                                        "&valueShop=" +
                                        $state.shop.data.result[
                                          $state.subscriptionCurrentIndex
                                        ].type +
                                        "-" +
                                        $state.shop.data.result[
                                          $state.subscriptionCurrentIndex
                                        ].value +
                                        "&price=" +
                                        $state.shop.data.result[
                                          $state.subscriptionCurrentIndex
                                        ].price +
                                        "&manId=" +
                                        $state.user.data.result.man.id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization: $state.tokenUser
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.invokeGlobalAction.data.success == true &&
                        $steps.invokeGlobalAction.data.result != false
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return window.open(
                                      $steps.invokeGlobalAction.data.result,
                                      "_system"
                                    );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateLoadingshop2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadingshop"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoadingshop2"] != null &&
                        typeof $steps["updateLoadingshop2"] === "object" &&
                        typeof $steps["updateLoadingshop2"].then === "function"
                      ) {
                        $steps["updateLoadingshop2"] = await $steps[
                          "updateLoadingshop2"
                        ];
                      }

                      $steps["updateShopModalMobileClick"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["shopModalMobile", "click"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateShopModalMobileClick"] != null &&
                        typeof $steps["updateShopModalMobileClick"] ===
                          "object" &&
                        typeof $steps["updateShopModalMobileClick"].then ===
                          "function"
                      ) {
                        $steps["updateShopModalMobileClick"] = await $steps[
                          "updateShopModalMobileClick"
                        ];
                      }

                      $steps["invokeGlobalAction2"] =
                        $steps.invokeGlobalAction.data.success == false ||
                        $steps.invokeGlobalAction.data.result == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                  "top-left"
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["invokeGlobalAction2"] != null &&
                        typeof $steps["invokeGlobalAction2"] === "object" &&
                        typeof $steps["invokeGlobalAction2"].then === "function"
                      ) {
                        $steps["invokeGlobalAction2"] = await $steps[
                          "invokeGlobalAction2"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["button4", "color"])(
                          eventArgs[0]
                        );
                      }).apply(null, eventArgs);

                      if (eventArgs.length > 1 && eventArgs[1]) {
                        return;
                      }
                    }}
                    showEndIcon={(() => {
                      try {
                        return $state.loadingshop;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "showEndIcon";
                        }
                        throw e;
                      }
                    })()}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nmvsb
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "فعال سازی " +
                              $state.subscription[
                                $state.subscriptionCurrentIndex
                              ].title
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "--";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </ButtonLiom>
                </div>
              </SlideinModal>
              <AntdModal
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                className={classNames("__wab_instance", sty.modal)}
                closeButtonClassName={classNames({
                  [sty["pcls_DM0zMP6Z6HsX"]]: true
                })}
                closeIcon={
                  <Icon22Icon
                    className={classNames(projectcss.all, sty.svg__eJlg8)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateModalOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateModalOpen"] != null &&
                        typeof $steps["updateModalOpen"] === "object" &&
                        typeof $steps["updateModalOpen"].then === "function"
                      ) {
                        $steps["updateModalOpen"] = await $steps[
                          "updateModalOpen"
                        ];
                      }
                    }}
                    role={"img"}
                  />
                }
                defaultStylesClassName={classNames(
                  projectcss.root_reset,
                  projectcss.plasmic_default_styles,
                  projectcss.plasmic_mixins,
                  projectcss.plasmic_tokens,
                  plasmic_antd_5_hostless_css.plasmic_tokens,
                  plasmic_plasmic_rich_components_css.plasmic_tokens,
                  plasmic_paziresh_24_design_system_css.plasmic_tokens
                )}
                hideFooter={true}
                maskClosable={false}
                modalContentClassName={classNames({
                  [sty["pcls_Wt1s6d6pGClM"]]: true
                })}
                modalScopeClassName={sty["modal__modal"]}
                onOpenChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["modal", "open"]).apply(
                    null,
                    eventArgs
                  );

                  if (eventArgs.length > 1 && eventArgs[1]) {
                    return;
                  }
                }}
                open={generateStateValueProp($state, ["modal", "open"])}
                title={null}
                trigger={null}
                width={"100vw"}
                wrapClassName={classNames({ [sty["pcls_nunLb2wYRiQO"]]: true })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__gT0Yi)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wZaku)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sXXx)}
                    >
                      <PlasmicImg__
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"500px"}
                        loading={"lazy"}
                        src={{
                          src: "/plasmic/liom_tools/images/image7.png",
                          fullWidth: 1302,
                          fullHeight: 900,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o8W38)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__phbL
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tFerP
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dPkDd
                            )}
                          >
                            {
                              "\u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0646 \u062a\u0627 \u0627\u06cc\u0646 \u0648\u06cc\u0698\u06af\u06cc \u0647\u0627 \u0631\u0648 \u0628\u062f\u0633\u062a \u0628\u06cc\u0627\u0631\u06cc"
                            }
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mriMj
                          )}
                        >
                          <Stack__
                            as={"ol"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.ol,
                              sty.ol__uiBVc
                            )}
                          >
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__wqWdI
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "شروع دوره pms رو با پیامک بهت اطلاع میدم تا بتونی " +
                                      $state.name +
                                      " رو بیشتر درک کنی و از ناراحتی های احتمالی جلوگیری کنی. "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0634\u0631\u0648\u0639 \u062f\u0648\u0631\u0647 pms \u0631\u0648 \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0628\u0647\u062a \u0627\u0637\u0644\u0627\u0639 \u0645\u06cc\u062f\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0631\u0648 \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9 \u06a9\u0646\u06cc \u0648 \u0627\u0632 \u0646\u0627\u0631\u0627\u062d\u062a\u06cc \u0647\u0627\u06cc \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u06a9\u0646\u06cc. ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__nVpBq
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "در هر روز pms پیامک هایی برای " +
                                      $state.name +
                                      " ارسال میشه که اون هم بتونه خودش رو کنترل کنه و حواسش به تو و رابطه تون باشه(‌البته که قرار نیست این پیامک ها بصورت مستقیم ارسال بشن و اون بفهمه که تو این قابلیت رو فعال کردی)"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 pms \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0647\u0645\u0627\u0646 \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u06a9\u0647 \u0627\u0648\u0646 \u0647\u0645 \u0628\u062a\u0648\u0646\u0647 \u062e\u0648\u062f\u0634 \u0631\u0648 \u06a9\u0646\u062a\u0631\u0644 \u06a9\u0646\u0647 \u0648 \u062d\u0648\u0627\u0633\u0634 \u0628\u0647 \u062a\u0648 \u0648 \u0631\u0627\u0628\u0637\u0647 \u062a\u0648\u0646 \u0628\u0627\u0634\u0647(\u200c\u0627\u0644\u0628\u062a\u0647 \u06a9\u0647 \u0642\u0631\u0627\u0631 \u0646\u06cc\u0633\u062a \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627 \u0628\u0635\u0648\u0631\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0631\u0633\u0627\u0644 \u0628\u0634\u0646 \u0648 \u0627\u0648\u0646 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0647 \u062a\u0648 \u0627\u06cc\u0646 \u0642\u0627\u0628\u0644\u06cc\u062a \u0631\u0648 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u06cc)";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__a74Wf
                              )}
                            >
                              {
                                "\u0634\u0631\u0648\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0631\u0648 \u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u0645 \u062a\u0627 \u0628\u062a\u0648\u0646\u06cc \u0628\u06cc\u0634\u062a\u0631 \u0627\u0632\u0634 \u0645\u0631\u0627\u0642\u0628\u062a \u06a9\u0646\u06cc \u0648 \u06a9\u0645\u062a\u0631 \u062f\u0631\u062f \u0628\u06a9\u0634\u0647 \u0648 \u0631\u0627\u0628\u0637\u0647 \u0634\u0627\u062f\u062a\u0631\u06cc \u0628\u0633\u0627\u0632\u06cc"
                              }
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__wnTrr
                              )}
                            >
                              {
                                "\u0645\u0648\u0642\u0639 \u067e\u0631\u06cc\u0648\u062f\u0634 \u0628\u0631\u0627\u0634 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u0645\u06cc\u0641\u0631\u0633\u062a\u0645 \u06a9\u0647 \u062f\u0631\u0633\u062a\u0647 \u06a9\u0647 \u067e\u0631\u06cc\u0648\u062f\u0647 \u0627\u0645\u0627 \u0627\u0648\u0646 \u0647\u0645 \u0645\u0631\u0627\u0642\u0628 \u062a\u0648 \u0628\u0627\u0634\u0647 \u0648 \u0646\u0630\u0627\u0631\u0647 \u0627\u062d\u0633\u0627\u0633 \u062a\u0646\u0647\u0627\u06cc\u06cc \u06a9\u0646\u06cc"
                              }
                            </li>
                            <li
                              className={classNames(
                                projectcss.all,
                                projectcss.li,
                                projectcss.__wab_text,
                                sty.li__gMtMi
                              )}
                            >
                              {
                                "\u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc\u06cc \u0628\u0631\u0627\u062a \u067e\u06cc\u0627\u0645\u06a9 \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0647 \u0628\u062a\u0648\u0646\u06cc \u0628\u0647 \u0633\u0644\u0627\u0645\u062a\u0634 \u06a9\u0645\u06a9 \u06a9\u0646\u06cc \u0648 \u062e\u0648\u0634\u062d\u0627\u0644\u0634 \u06a9\u0646\u06cc"
                              }
                            </li>
                          </Stack__>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tP3Bu
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1DKxu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wazYq
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wPKkU
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.shop.data.result[
                                        $state.selectedShop
                                      ].title;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cuQKr
                                )}
                              >
                                {(() => {
                                  try {
                                    return $state.shop.data.result[
                                      $state.selectedShop
                                    ].badge
                                      ? true
                                      : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uJpuZ
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.shop.data.result[
                                            $state.selectedShop
                                          ].fullPrice.toLocaleString("en-US");
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "-";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__zMfmz
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          $state.shop.data.result[
                                            $state.selectedShop
                                          ].price.toLocaleString("en-US") +
                                          " تومان "
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "-";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return $state.shop.data.result[
                                    $state.selectedShop
                                  ].badge
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__h65Gw
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__xlXzt
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.shop.data.result[
                                            $state.selectedShop
                                          ].badge;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "-";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              ) : null}
                            </div>
                            {(() => {
                              try {
                                return !$state.discountBox;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kd8Ik
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateDiscountBox"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["discountBox"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateDiscountBox"] != null &&
                                    typeof $steps["updateDiscountBox"] ===
                                      "object" &&
                                    typeof $steps["updateDiscountBox"].then ===
                                      "function"
                                  ) {
                                    $steps["updateDiscountBox"] = await $steps[
                                      "updateDiscountBox"
                                    ];
                                  }
                                }}
                              >
                                {
                                  "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f"
                                }
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return $state.discountBox;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bYlG4
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fphVi
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      allowClear: false,
                                      autoFocus: false,
                                      bordered: false,
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input2
                                      ),
                                      disabled: false,
                                      onChange: async (...eventArgs: any) => {
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input2", "value"],
                                          AntdInput_Helpers
                                        ).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1]
                                        ) {
                                          return;
                                        }

                                        (async event => {
                                          const $steps = {};
                                        }).apply(null, eventArgs);
                                      },
                                      placeholder:
                                        "\u06a9\u062f \u062a\u062e\u0641\u06cc\u0641 \u062f\u0627\u0631\u06cc\u062f\u061f",
                                      prefix: (
                                        <Icon10Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__v6BoP
                                          )}
                                          role={"img"}
                                        />
                                      ),

                                      readOnly: false,
                                      size: "small",
                                      suffix: null,
                                      value: generateStateValueProp($state, [
                                        "input2",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input2.value"
                                        }
                                      ],
                                      [],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );

                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input2"}
                                        data-plasmic-override={overrides.input2}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                  {(() => {
                                    try {
                                      return $state.visiblebox;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__foDlI
                                      )}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateVisiblebox"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["visiblebox"]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateVisiblebox"] != null &&
                                          typeof $steps["updateVisiblebox"] ===
                                            "object" &&
                                          typeof $steps["updateVisiblebox"]
                                            .then === "function"
                                        ) {
                                          $steps["updateVisiblebox"] =
                                            await $steps["updateVisiblebox"];
                                        }
                                      }}
                                    />
                                  ) : null}
                                </div>
                                <ButtonLiom
                                  data-plasmic-name={"button5"}
                                  data-plasmic-override={overrides.button5}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button5
                                  )}
                                  color={generateStateValueProp($state, [
                                    "button5",
                                    "color"
                                  ])}
                                  isDisabled={(() => {
                                    try {
                                      return $state.input2.value == "" ||
                                        $state.input2.value == null
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateVisiblebox"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["visiblebox"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateVisiblebox"] != null &&
                                      typeof $steps["updateVisiblebox"] ===
                                        "object" &&
                                      typeof $steps["updateVisiblebox"].then ===
                                        "function"
                                    ) {
                                      $steps["updateVisiblebox"] = await $steps[
                                        "updateVisiblebox"
                                      ];
                                    }

                                    $steps["updateDiscountCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["discountCode"]
                                            },
                                            operation: 0,
                                            value: $state.input2.value
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDiscountCode"] != null &&
                                      typeof $steps["updateDiscountCode"] ===
                                        "object" &&
                                      typeof $steps["updateDiscountCode"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDiscountCode"] =
                                        await $steps["updateDiscountCode"];
                                    }
                                  }}
                                  onColorChange={async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "button5",
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (eventArgs.length > 1 && eventArgs[1]) {
                                      return;
                                    }
                                  }}
                                >
                                  {"\u062a\u0627\u06cc\u06cc\u062f"}
                                </ButtonLiom>
                              </Stack__>
                            ) : null}
                            <ButtonLiom
                              data-plasmic-name={"button6"}
                              data-plasmic-override={overrides.button6}
                              className={classNames(
                                "__wab_instance",
                                sty.button6
                              )}
                              color={generateStateValueProp($state, [
                                "button6",
                                "color"
                              ])}
                              endIcon={
                                <Icon12Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__uPa9N
                                  )}
                                  role={"img"}
                                />
                              }
                              isDisabled={(() => {
                                try {
                                  return $state.loadingshop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateLoadingshop"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["loadingshop"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLoadingshop"] != null &&
                                  typeof $steps["updateLoadingshop"] ===
                                    "object" &&
                                  typeof $steps["updateLoadingshop"].then ===
                                    "function"
                                ) {
                                  $steps["updateLoadingshop"] = await $steps[
                                    "updateLoadingshop"
                                  ];
                                }

                                $steps["updateBuyId"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["buyId"]
                                        },
                                        operation: 0,
                                        value:
                                          $state.shop.data.result[
                                            $state.selectedShop
                                          ].id
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateBuyId"] != null &&
                                  typeof $steps["updateBuyId"] === "object" &&
                                  typeof $steps["updateBuyId"].then ===
                                    "function"
                                ) {
                                  $steps["updateBuyId"] = await $steps[
                                    "updateBuyId"
                                  ];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://n8n.staas.ir/webhook/hamyar/shopBuy",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                id: $state.buyId,
                                                offCode: $state.discountCode,
                                                refCode: $state.r,
                                                redirectUrl:
                                                  "https://apps.liom.app/shop-result?r=" +
                                                  $state.r +
                                                  "&m=" +
                                                  $state.m +
                                                  "&buyId=" +
                                                  $state.buyId +
                                                  "&offCode=" +
                                                  $state.discountCode +
                                                  "&valueShop=" +
                                                  $state.shop.data.result[
                                                    $state.selectedShop
                                                  ].type +
                                                  "-" +
                                                  $state.shop.data.result[
                                                    $state.selectedShop
                                                  ].value +
                                                  "&price=" +
                                                  $state.shop.data.result[
                                                    $state.selectedShop
                                                  ].price +
                                                  "&manId=" +
                                                  $state.user.data.result.man.id
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          (() => {
                                            try {
                                              return {
                                                headers: {
                                                  "Content-Type":
                                                    "application/json",
                                                  Authorization:
                                                    $state.tokenUser
                                                }
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }

                                $steps["runCode"] =
                                  $steps.invokeGlobalAction.data.success ==
                                    true &&
                                  $steps.invokeGlobalAction.data.result != false
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              return window.open(
                                                $steps.invokeGlobalAction.data
                                                  .result,
                                                "_system"
                                              );
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["updateLoadingshop2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["loadingshop"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateLoadingshop2"] != null &&
                                  typeof $steps["updateLoadingshop2"] ===
                                    "object" &&
                                  typeof $steps["updateLoadingshop2"].then ===
                                    "function"
                                ) {
                                  $steps["updateLoadingshop2"] = await $steps[
                                    "updateLoadingshop2"
                                  ];
                                }

                                $steps["invokeGlobalAction2"] =
                                  $steps.invokeGlobalAction.data.success ==
                                    false ||
                                  $steps.invokeGlobalAction.data.result == false
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "error",
                                            "\u0645\u062a\u0623\u0633\u0641\u0627\u0646\u0647 \u062e\u0637\u0627\u06cc\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0645\u062c\u062f\u062f\u0627\u064b \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f.",
                                            "top-left"
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["invokeGlobalAction2"] != null &&
                                  typeof $steps["invokeGlobalAction2"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction2"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction2"] = await $steps[
                                    "invokeGlobalAction2"
                                  ];
                                }
                              }}
                              onColorChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "button6",
                                    "color"
                                  ])(eventArgs[0]);
                                }).apply(null, eventArgs);

                                if (eventArgs.length > 1 && eventArgs[1]) {
                                  return;
                                }
                              }}
                              showEndIcon={(() => {
                                try {
                                  return $state.loadingshop;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "showEndIcon";
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nwX9M
                                )}
                              >
                                {
                                  "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                                }
                              </div>
                            </ButtonLiom>
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__ust7I
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateShopModalWebOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["shopModalWeb", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateShopModalWebOpen"] != null &&
                                  typeof $steps["updateShopModalWebOpen"] ===
                                    "object" &&
                                  typeof $steps["updateShopModalWebOpen"]
                                    .then === "function"
                                ) {
                                  $steps["updateShopModalWebOpen"] =
                                    await $steps["updateShopModalWebOpen"];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            $state.subscription[
                                              $state.subscriptionCurrentIndex
                                            ].clickitem = true;
                                            return ($state.buyId =
                                              $state.shop.data.result[
                                                $state.subscriptionCurrentIndex
                                              ].id);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                            >
                              {
                                "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                              }
                            </p>
                            {false ? (
                              <p
                                className={classNames(
                                  projectcss.all,
                                  projectcss.p,
                                  projectcss.__wab_text,
                                  sty.p__vFkvO
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              $state.subscription2[
                                                $state.subscriptionCurrentIndex
                                              ].clickitem = true;
                                              return ($state.buyId =
                                                $state.shop.data.result[
                                                  $state.subscriptionCurrentIndex
                                                ].id);
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["updateShopModalMobileClick"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "shopModalMobile",
                                              "click"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateShopModalMobileClick"] !=
                                      null &&
                                    typeof $steps[
                                      "updateShopModalMobileClick"
                                    ] === "object" &&
                                    typeof $steps["updateShopModalMobileClick"]
                                      .then === "function"
                                  ) {
                                    $steps["updateShopModalMobileClick"] =
                                      await $steps[
                                        "updateShopModalMobileClick"
                                      ];
                                  }
                                }}
                              >
                                {
                                  "\u0646\u0645\u0627\u06cc\u0634 \u0628\u0633\u062a\u0647 \u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631"
                                }
                              </p>
                            ) : null}
                          </Stack__>
                        </div>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </AntdModal>
              <ApiRequest
                data-plasmic-name={"todo"}
                data-plasmic-override={overrides.todo}
                className={classNames("__wab_instance", sty.todo)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["todo", "error"]).apply(
                    null,
                    eventArgs
                  );

                  if (eventArgs.length > 1 && eventArgs[1]) {
                    return;
                  }
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["todo", "loading"]).apply(
                    null,
                    eventArgs
                  );

                  if (eventArgs.length > 1 && eventArgs[1]) {
                    return;
                  }
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["todo", "data"]).apply(
                    null,
                    eventArgs
                  );

                  if (eventArgs.length > 1 && eventArgs[1]) {
                    return;
                  }

                  (async data => {
                    const $steps = {};

                    $steps["updateP"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["p"]
                            },
                            operation: 0,
                            value: (() => {
                              const whiteMessages =
                                $state.payam.find(
                                  item => item[$state.cyclebox.cycle]
                                )?.[$state.cyclebox.cycle] || [];
                              const randomMessage =
                                whiteMessages.length > 0
                                  ? whiteMessages[
                                      Math.floor(
                                        Math.random() * whiteMessages.length
                                      )
                                    ]
                                  : "";
                              return randomMessage;
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateP"] != null &&
                      typeof $steps["updateP"] === "object" &&
                      typeof $steps["updateP"].then === "function"
                    ) {
                      $steps["updateP"] = await $steps["updateP"];
                    }
                  }).apply(null, eventArgs);
                }}
                params={(() => {
                  try {
                    return {
                      status: $state.cyclebox.cycle,
                      userId: $state.user.data.result.man.id
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                url={"https://n8n.staas.ir/webhook/hamyar/todo"}
              />

              <AntdTooltip
                data-plasmic-name={"tooltip"}
                data-plasmic-override={overrides.tooltip}
                className={classNames("__wab_instance", sty.tooltip)}
                placement={"left"}
                titleText={
                  "\u0628\u0647\u0634 \u0628\u06af\u0648 \u062d\u0648\u0627\u0633\u0645 \u0628\u0647\u062a \u0647\u0633\u062a."
                }
              >
                <div className={classNames(projectcss.all, sty.freeBox__vp8M7)}>
                  <Heart
                    data-plasmic-name={"heart"}
                    data-plasmic-override={overrides.heart}
                    className={classNames("__wab_instance", sty.heart)}
                  />
                </div>
              </AntdTooltip>
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $state.user.loading || $state.name == "" || $state.shop.loading
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__gDiYk)}>
              {(() => {
                try {
                  return (
                    $state.user.loading ||
                    $state.name == "" ||
                    $state.shop.loading
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LottieWrapper
                  data-plasmic-name={"lottie"}
                  data-plasmic-override={overrides.lottie}
                  animationData={{
                    v: "5.6.10",
                    fr: 30,
                    ip: 30,
                    op: 210,
                    w: 800,
                    h: 600,
                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                    ddd: 0,
                    assets: [
                      {
                        id: "comp_0",
                        layers: [
                          {
                            ddd: 0,
                            ind: 1,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 18",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 340, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 0,
                                          s: [0]
                                        },
                                        { t: 30, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 0,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 2,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 17",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 320, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 10,
                                          s: [0]
                                        },
                                        { t: 40, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 10,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 3,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 16",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 300, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 20,
                                          s: [0]
                                        },
                                        { t: 50, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 20,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 4,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 15",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 280, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 30,
                                          s: [0]
                                        },
                                        { t: 60, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 30,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 5,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 14",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 260, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 40,
                                          s: [0]
                                        },
                                        { t: 70, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 40,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 6,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 13",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 240, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 50,
                                          s: [0]
                                        },
                                        { t: 80, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 50,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 7,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 12",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 220, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 60,
                                          s: [0]
                                        },
                                        { t: 90, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 60,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 8,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 11",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 200, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 70,
                                          s: [0]
                                        },
                                        { t: 100, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 70,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 9,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 10",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 180, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 80,
                                          s: [0]
                                        },
                                        { t: 110, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 80,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 10,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 9",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 160, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 90,
                                          s: [0]
                                        },
                                        { t: 120, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 90,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 11,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 8",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 140, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 100,
                                          s: [0]
                                        },
                                        { t: 130, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 100,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 12,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 7",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 120, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 110,
                                          s: [0]
                                        },
                                        { t: 140, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 110,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 13,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 6",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 100, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 120,
                                          s: [0]
                                        },
                                        { t: 150, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 420,
                            st: 120,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 14,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 5",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 80, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 130,
                                          s: [0]
                                        },
                                        { t: 160, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 430,
                            st: 130,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 15,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 4",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 60, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 140,
                                          s: [0]
                                        },
                                        { t: 170, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 440,
                            st: 140,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 16,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 3",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 40, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 150,
                                          s: [0]
                                        },
                                        { t: 180, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 450,
                            st: 150,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 17,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 2",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 20, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 160,
                                          s: [0]
                                        },
                                        { t: 190, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 460,
                            st: 160,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 18,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 1",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 0, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 170,
                                          s: [0]
                                        },
                                        { t: 200, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 470,
                            st: 170,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 19,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 24",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 340, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 180,
                                          s: [0]
                                        },
                                        { t: 210, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 180,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 20,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 23",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 320, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 190,
                                          s: [0]
                                        },
                                        { t: 220, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 190,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 21,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 22",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 300, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 200,
                                          s: [0]
                                        },
                                        { t: 230, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 200,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 22,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 21",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 280, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 210,
                                          s: [0]
                                        },
                                        { t: 240, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 210,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 23,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 20",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 260, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 220,
                                          s: [0]
                                        },
                                        { t: 250, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 220,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 24,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 19",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 240, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 230,
                                          s: [0]
                                        },
                                        { t: 260, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 230,
                            bm: 0
                          }
                        ]
                      }
                    ],
                    layers: [
                      {
                        ddd: 0,
                        ind: 1,
                        ty: 0,
                        nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u0084\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                        refId: "comp_0",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 100, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [400, 300, 0], ix: 2 },
                          a: { a: 0, k: [400, 300, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                        },
                        ao: 0,
                        ef: [
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00ae\u00c3\u0082\u00c2\u0080\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u0095\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00a5\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0085\u00c3\u0082\u00c2\u00b7",
                            np: 4,
                            mn: "ADBE Simple Choker",
                            ix: 1,
                            en: 1,
                            ef: [
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be",
                                mn: "ADBE Simple Choker-0001",
                                ix: 1,
                                v: { a: 0, k: 1, ix: 1 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0081\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a9",
                                mn: "ADBE Simple Choker-0002",
                                ix: 2,
                                v: { a: 0, k: 14, ix: 2 }
                              }
                            ]
                          },
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098",
                            np: 10,
                            mn: "ADBE Ramp",
                            ix: 2,
                            en: 1,
                            ef: [
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0001",
                                ix: 1,
                                v: { a: 0, k: [400, 0], ix: 1 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0002",
                                ix: 2,
                                v: { a: 0, k: [0.556, 0.26, 1, 1], ix: 2 }
                              },
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0003",
                                ix: 3,
                                v: { a: 0, k: [400, 600], ix: 3 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0093\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u009d\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0004",
                                ix: 4,
                                v: { a: 0, k: [0.616, 0.36, 1, 1], ix: 4 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6",
                                mn: "ADBE Ramp-0005",
                                ix: 5,
                                v: { a: 0, k: 1, ix: 5 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0095\u00c3\u0082\u00c2\u00a3\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b0\u00c3\u0082\u00c2\u0084",
                                mn: "ADBE Ramp-0006",
                                ix: 6,
                                v: { a: 0, k: 0, ix: 6 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u008e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008e\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088",
                                mn: "ADBE Ramp-0007",
                                ix: 7,
                                v: { a: 0, k: 0, ix: 7 }
                              },
                              {
                                ty: 6,
                                nm: "",
                                mn: "ADBE Ramp-0008",
                                ix: 8,
                                v: 0
                              }
                            ]
                          }
                        ],
                        w: 800,
                        h: 600,
                        ip: 0,
                        op: 300,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 2,
                        ty: 0,
                        nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u0084\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                        refId: "comp_0",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 56, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [400, 320, 0], ix: 2 },
                          a: { a: 0, k: [400, 300, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                        },
                        ao: 0,
                        ef: [
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00ae\u00c3\u0082\u00c2\u0080\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u0095\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00a5\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0085\u00c3\u0082\u00c2\u00b7",
                            np: 4,
                            mn: "ADBE Simple Choker",
                            ix: 1,
                            en: 1,
                            ef: [
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be",
                                mn: "ADBE Simple Choker-0001",
                                ix: 1,
                                v: { a: 0, k: 1, ix: 1 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0081\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a9",
                                mn: "ADBE Simple Choker-0002",
                                ix: 2,
                                v: { a: 0, k: 14, ix: 2 }
                              }
                            ]
                          },
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098",
                            np: 10,
                            mn: "ADBE Ramp",
                            ix: 2,
                            en: 1,
                            ef: [
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0001",
                                ix: 1,
                                v: { a: 0, k: [400, 0], ix: 1 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0002",
                                ix: 2,
                                v: { a: 0, k: [0.556, 0.26, 1, 1], ix: 2 }
                              },
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0003",
                                ix: 3,
                                v: { a: 0, k: [400, 600], ix: 3 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0093\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u009d\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0004",
                                ix: 4,
                                v: { a: 0, k: [0.616, 0.36, 1, 1], ix: 4 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6",
                                mn: "ADBE Ramp-0005",
                                ix: 5,
                                v: { a: 0, k: 1, ix: 5 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0095\u00c3\u0082\u00c2\u00a3\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b0\u00c3\u0082\u00c2\u0084",
                                mn: "ADBE Ramp-0006",
                                ix: 6,
                                v: { a: 0, k: 0, ix: 6 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u008e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008e\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088",
                                mn: "ADBE Ramp-0007",
                                ix: 7,
                                v: { a: 0, k: 0, ix: 7 }
                              },
                              {
                                ty: 6,
                                nm: "",
                                mn: "ADBE Ramp-0008",
                                ix: 8,
                                v: 0
                              }
                            ]
                          },
                          {
                            ty: 29,
                            nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00ab\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0096\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a",
                            np: 5,
                            mn: "ADBE Gaussian Blur 2",
                            ix: 3,
                            en: 1,
                            ef: [
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6",
                                mn: "ADBE Gaussian Blur 2-0001",
                                ix: 1,
                                v: { a: 0, k: 41.3, ix: 1 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0096\u00c3\u0082\u00c2\u00b9\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0091",
                                mn: "ADBE Gaussian Blur 2-0002",
                                ix: 2,
                                v: { a: 0, k: 1, ix: 2 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0087\u00c3\u0082\u00c2\u008d\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u008d\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bc\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b4\u00c3\u0082\u00c2\u00a0",
                                mn: "ADBE Gaussian Blur 2-0003",
                                ix: 3,
                                v: { a: 0, k: 0, ix: 3 }
                              }
                            ]
                          }
                        ],
                        w: 800,
                        h: 600,
                        ip: 0,
                        op: 300,
                        st: 0,
                        bm: 0
                      }
                    ],
                    markers: []
                  }}
                  autoplay={true}
                  className={classNames("__wab_instance", sty.lottie)}
                  loop={true}
                  preview={false}
                />
              ) : null}
            </div>
          ) : null}
          <ApiRequest
            data-plasmic-name={"user"}
            data-plasmic-override={overrides.user}
            body={(() => {
              try {
                return {
                  refCode: $state.r,
                  mobile: $state.m,
                  appKey:
                    "wejieiuedoioo-xxluySEJKLSjho5[afeawd2012-qigwi-1457W#idq"
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.user)}
            config={{ headers: { "Content-Type": "application/json" } }}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["user", "error"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["user", "loading"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["user", "data"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }

              (async data => {
                const $steps = {};

                $steps["invokeGlobalAction2"] =
                  ($state.name == "" &&
                    $ctx.query.r != "" &&
                    $ctx.query.m != "") ||
                  $ctx.query.m != "3ZjitMAEm"
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://api.liom.app/service/log",
                            undefined,
                            (() => {
                              try {
                                return {
                                  userId: $state.user.data.result.man.id,
                                  pageName: "mainPage",
                                  action: "loadePage",
                                  extraData: {
                                    refCode: $state.r,
                                    mobile: $state.m
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            {
                              headers: {
                                "Content-Type": "application/json",
                                Authorization:
                                  "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                              }
                            }
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }

                $steps["goToExpired"] = (
                  $state.user.data?.success ? !$state.user.data.success : false
                )
                  ? (() => {
                      const actionArgs = { destination: `/expired` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToExpired"] != null &&
                  typeof $steps["goToExpired"] === "object" &&
                  typeof $steps["goToExpired"].then === "function"
                ) {
                  $steps["goToExpired"] = await $steps["goToExpired"];
                }

                $steps["updateTokenUser"] = (
                  $state.user.data?.success ? $state.user.data.success : false
                )
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["tokenUser"]
                        },
                        operation: 0,
                        value: $state.user.data.result.token
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateTokenUser"] != null &&
                  typeof $steps["updateTokenUser"] === "object" &&
                  typeof $steps["updateTokenUser"].then === "function"
                ) {
                  $steps["updateTokenUser"] = await $steps["updateTokenUser"];
                }

                $steps["updateName"] = (
                  $state.user.data?.success ? $state.user.data.success : false
                )
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["name"]
                        },
                        operation: 0,
                        value: $state.user.data.result.user.name
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateName"] != null &&
                  typeof $steps["updateName"] === "object" &&
                  typeof $steps["updateName"].then === "function"
                ) {
                  $steps["updateName"] = await $steps["updateName"];
                }

                $steps["runCode"] = (
                  $state.user.data?.success ? $state.user.data.success : false
                )
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            localStorage.setItem("token", $state.tokenUser);
                            localStorage.setItem(
                              "birthDate",
                              JSON.stringify(
                                $state.user.data.result.man.birthDate
                              )
                            );
                            $state.user.data.result["r"] = $state.r;
                            $state.user.data.result["m"] = $state.m;
                            return localStorage.setItem(
                              "userinfo",
                              JSON.stringify($state.user.data.result)
                            );
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateDeleteDate"] = (
                  $state.user.data?.success ? $state.user.data.success : false
                )
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["deleteDate"]
                        },
                        operation: 0,
                        value: (() => {
                          switch (
                            $state.user.data.result.userStatus.periodStatus
                          ) {
                            case null:
                              return "";
                            case "fertility":
                              return $state.user.data.result.userStatus
                                .fertilityEnd;
                            case "pms":
                              return $state.user.data.result.userStatus.pmsEnd;
                            case "blood":
                              return $state.user.data.result.userStatus
                                .periodEnd;
                            case "white":
                              if (
                                new Date(
                                  $state.user.data.result.userStatus.fertilityStart
                                ) > new Date()
                              )
                                return ($state.deleteDate =
                                  $state.user.data.result.userStatus.fertilityStart);
                              else
                                return ($state.deleteDate =
                                  $state.user.data.result.userStatus.pmsStart);
                            default:
                              return "-";
                          }
                        })()
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateDeleteDate"] != null &&
                  typeof $steps["updateDeleteDate"] === "object" &&
                  typeof $steps["updateDeleteDate"].then === "function"
                ) {
                  $steps["updateDeleteDate"] = await $steps["updateDeleteDate"];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  r: $state.r,
                  m: $state.m
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/hamyar/privateCalenderV2"}
          />

          <ApiRequest
            data-plasmic-name={"shop"}
            data-plasmic-override={overrides.shop}
            body={(() => {
              try {
                return { refCode: $state.r };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.shop)}
            config={(() => {
              try {
                return {
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: $state.user.data.result.token
                  }
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            errorDisplay={null}
            loadingDisplay={null}
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "error"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "loading"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "data"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }

              (async data => {
                const $steps = {};
              }).apply(null, eventArgs);
            }}
            url={"https://n8n.staas.ir/webhook/hamyar/shop"}
          />

          <Embed
            data-plasmic-name={"favicon"}
            data-plasmic-override={overrides.favicon}
            className={classNames("__wab_instance", sty.favicon)}
            code={
              "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
            }
          />

          <ApiRequest
            data-plasmic-name={"advice"}
            data-plasmic-override={overrides.advice}
            className={classNames("__wab_instance", sty.advice)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["advice", "error"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["advice", "loading"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["advice", "data"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            params={(() => {
              try {
                return {
                  status: $state.cyclebox.cycle,
                  limit: 1
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/hamyar/advice"}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__liIvB)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__vj71P)}
              onClick={async event => {
                const $steps = {};
              }}
            >
              <Icon7Icon
                className={classNames(projectcss.all, sty.svg__jujLk)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zPp57
                )}
              >
                {"\u0647\u0645\u06cc\u0627\u0631"}
              </div>
            </div>
            <div
              aria-pressed={undefined}
              className={classNames(projectcss.all, sty.freeBox__tm4Ar)}
              onClick={async event => {
                const $steps = {};

                $steps["goToBioritm"] =
                  localStorage.getItem("token") != "undefined" ||
                  localStorage.getItem("token") != null
                    ? (() => {
                        const actionArgs = { destination: `/bioritm` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["goToBioritm"] != null &&
                  typeof $steps["goToBioritm"] === "object" &&
                  typeof $steps["goToBioritm"].then === "function"
                ) {
                  $steps["goToBioritm"] = await $steps["goToBioritm"];
                }
              }}
            >
              <Icon23Icon
                className={classNames(projectcss.all, sty.svg__gisi)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__payJd
                )}
              >
                {"\u062d\u0627\u0644 \u0627\u0645\u0631\u0648\u0632"}
              </div>
            </div>
            {(() => {
              try {
                return $ctx.query.m == "71ef2e";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                aria-pressed={undefined}
                className={classNames(projectcss.all, sty.freeBox___8Jt3Q)}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToFood"] =
                    localStorage.getItem("token") != "undefined" ||
                    localStorage.getItem("token") != null
                      ? (() => {
                          const actionArgs = { destination: `/food` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["goToFood"] != null &&
                    typeof $steps["goToFood"] === "object" &&
                    typeof $steps["goToFood"].then === "function"
                  ) {
                    $steps["goToFood"] = await $steps["goToFood"];
                  }
                }}
              >
                <Icon72Icon
                  className={classNames(projectcss.all, sty.svg__uDo5A)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9MY
                  )}
                >
                  {
                    "\u06a9\u0646\u062a\u0631\u0644 \u062a\u063a\u0630\u06cc\u0647"
                  }
                </div>
              </div>
            ) : null}
          </Stack__>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              "<!-- Hotjar Tracking Code for Site 5171830 (name missing) -->\r\n<script>\r\n    (function(h,o,t,j,a,r){\r\n        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};\r\n        h._hjSettings={hjid:5171830,hjsv:6};\r\n        a=o.getElementsByTagName('head')[0];\r\n        r=o.createElement('script');r.async=1;\r\n        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;\r\n        a.appendChild(r);\r\n    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');\r\n</script>"
            }
          />

          <ApiRequest
            data-plasmic-name={"countNotif"}
            data-plasmic-override={overrides.countNotif}
            body={(() => {
              try {
                return {
                  userId: $state.user.data.result.man.id
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            className={classNames("__wab_instance", sty.countNotif)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"POST"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["countNotif", "error"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "countNotif",
                "loading"
              ]).apply(null, eventArgs);

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["countNotif", "data"]).apply(
                null,
                eventArgs
              );

              if (eventArgs.length > 1 && eventArgs[1]) {
                return;
              }
            }}
            url={"https://n8n.staas.ir/webhook/hamyar/notif"}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__psYig
              )}
            >
              {"\u0628\u0627"}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iDPm4
              )}
            >
              {"\u0628\u0627"}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nofiticon",
    "switchbest",
    "countdown2",
    "cyclebox",
    "checkbox",
    "reveal",
    "useful2",
    "useful",
    "harmful2",
    "harmful",
    "shopModalWeb",
    "subscription",
    "button3",
    "modal2",
    "modal3",
    "input",
    "button",
    "button2",
    "shopModalMobile",
    "subscription2",
    "button4",
    "modal",
    "img",
    "input2",
    "button5",
    "button6",
    "todo",
    "tooltip",
    "heart",
    "lottie",
    "user",
    "shop",
    "favicon",
    "advice",
    "embedHtml",
    "countNotif"
  ],
  nofiticon: ["nofiticon"],
  switchbest: ["switchbest"],
  countdown2: ["countdown2"],
  cyclebox: ["cyclebox"],
  checkbox: ["checkbox"],
  reveal: ["reveal", "useful2", "useful"],
  useful2: ["useful2"],
  useful: ["useful"],
  harmful2: ["harmful2"],
  harmful: ["harmful"],
  shopModalWeb: ["shopModalWeb", "subscription", "button3"],
  subscription: ["subscription"],
  button3: ["button3"],
  modal2: ["modal2"],
  modal3: ["modal3"],
  input: ["input"],
  button: ["button"],
  button2: ["button2"],
  shopModalMobile: ["shopModalMobile", "subscription2", "button4"],
  subscription2: ["subscription2"],
  button4: ["button4"],
  modal: ["modal", "img", "input2", "button5", "button6"],
  img: ["img"],
  input2: ["input2"],
  button5: ["button5"],
  button6: ["button6"],
  todo: ["todo"],
  tooltip: ["tooltip", "heart"],
  heart: ["heart"],
  lottie: ["lottie"],
  user: ["user"],
  shop: ["shop"],
  favicon: ["favicon"],
  advice: ["advice"],
  embedHtml: ["embedHtml"],
  countNotif: ["countNotif"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  nofiticon: typeof Nofiticon;
  switchbest: typeof Switchbest;
  countdown2: typeof Countdown;
  cyclebox: typeof Cyclebox;
  checkbox: typeof Checkbox;
  reveal: typeof Reveal;
  useful2: typeof Useful;
  useful: typeof Useful;
  harmful2: typeof Harmful;
  harmful: typeof Harmful;
  shopModalWeb: typeof AntdModal;
  subscription: typeof Subscription;
  button3: typeof ButtonLiom;
  modal2: typeof AntdModal;
  modal3: typeof AntdModal;
  input: typeof AntdInput;
  button: typeof ButtonLiom;
  button2: typeof ButtonLiom;
  shopModalMobile: typeof SlideinModal;
  subscription2: typeof Subscription;
  button4: typeof ButtonLiom;
  modal: typeof AntdModal;
  img: typeof PlasmicImg__;
  input2: typeof AntdInput;
  button5: typeof ButtonLiom;
  button6: typeof ButtonLiom;
  todo: typeof ApiRequest;
  tooltip: typeof AntdTooltip;
  heart: typeof Heart;
  lottie: typeof LottieWrapper;
  user: typeof ApiRequest;
  shop: typeof ApiRequest;
  favicon: typeof Embed;
  advice: typeof ApiRequest;
  embedHtml: typeof Embed;
  countNotif: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHamyar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHamyar__VariantsArgs;
    args?: PlasmicHamyar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHamyar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHamyar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHamyar__ArgProps,
          internalVariantPropNames: PlasmicHamyar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHamyar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHamyar";
  } else {
    func.displayName = `PlasmicHamyar.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHamyar = Object.assign(
  // Top-level PlasmicHamyar renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    nofiticon: makeNodeComponent("nofiticon"),
    switchbest: makeNodeComponent("switchbest"),
    countdown2: makeNodeComponent("countdown2"),
    cyclebox: makeNodeComponent("cyclebox"),
    checkbox: makeNodeComponent("checkbox"),
    reveal: makeNodeComponent("reveal"),
    useful2: makeNodeComponent("useful2"),
    useful: makeNodeComponent("useful"),
    harmful2: makeNodeComponent("harmful2"),
    harmful: makeNodeComponent("harmful"),
    shopModalWeb: makeNodeComponent("shopModalWeb"),
    subscription: makeNodeComponent("subscription"),
    button3: makeNodeComponent("button3"),
    modal2: makeNodeComponent("modal2"),
    modal3: makeNodeComponent("modal3"),
    input: makeNodeComponent("input"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    shopModalMobile: makeNodeComponent("shopModalMobile"),
    subscription2: makeNodeComponent("subscription2"),
    button4: makeNodeComponent("button4"),
    modal: makeNodeComponent("modal"),
    img: makeNodeComponent("img"),
    input2: makeNodeComponent("input2"),
    button5: makeNodeComponent("button5"),
    button6: makeNodeComponent("button6"),
    todo: makeNodeComponent("todo"),
    tooltip: makeNodeComponent("tooltip"),
    heart: makeNodeComponent("heart"),
    lottie: makeNodeComponent("lottie"),
    user: makeNodeComponent("user"),
    shop: makeNodeComponent("shop"),
    favicon: makeNodeComponent("favicon"),
    advice: makeNodeComponent("advice"),
    embedHtml: makeNodeComponent("embedHtml"),
    countNotif: makeNodeComponent("countNotif"),

    // Metadata about props expected for PlasmicHamyar
    internalVariantProps: PlasmicHamyar__VariantProps,
    internalArgProps: PlasmicHamyar__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "همیار لیوم",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHamyar;
/* prettier-ignore-end */
