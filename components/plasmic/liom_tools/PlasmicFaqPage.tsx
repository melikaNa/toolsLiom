/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: MeJVlJGb4rwY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicFaqPage.module.css"; // plasmic-import: MeJVlJGb4rwY/css

createPlasmicElementProxy;

export type PlasmicFaqPage__VariantMembers = {};
export type PlasmicFaqPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqPage__VariantsArgs;
export const PlasmicFaqPage__VariantProps = new Array<VariantPropType>();

export type PlasmicFaqPage__ArgsType = {};
type ArgPropType = keyof PlasmicFaqPage__ArgsType;
export const PlasmicFaqPage__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqPage__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultFaqPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFaqPage__RenderFunc(props: {
  variants: PlasmicFaqPage__VariantsArgs;
  args: PlasmicFaqPage__ArgsType;
  overrides: PlasmicFaqPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "faq",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  text: "آیا استفاده از موبایل یا مایکروویو برای جنین ضرر دارد؟"
                },
                {
                  text: "آیا اگر حالت تهوع نداشته باشم، یعنی بارداری‌ام مشکلی دارد؟"
                },
                {
                  text: "چطور می‌توانم از ویار و تهوع صبحگاهی خلاص شوم؟"
                },
                {
                  text: "چگونه با ترس از زایمان کنار بیایم؟"
                },
                {
                  text: "آیا ورزش کردن در بارداری مجاز است؟ چه ورزش‌هایی؟"
                },
                {
                  text: "آیا داشتن رابطه جنسی در بارداری برای جنین ضرر دارد؟"
                },
                {
                  text: "لکه‌بینی در اوایل بارداری طبیعی است یا خطرناک؟"
                },
                {
                  text: "اگر قبل از اینکه بدانم باردارم، دارویی مصرف کرده باشم چه؟"
                },
                {
                  text: "چیکار کنم جنینم در سه‌ماهه اول سقط نشه؟"
                },
                { text: "آیا صدای بلند موسیقی یا محیط به جنین آسیب می‌زند؟" },
                {
                  text: "جنینم در این مرحله چه چیزهایی را حس می‌کند؟ (نور، صدا، مزه، لمس؟)"
                },
                {
                  text: "آیا حرکات جنینم طبیعی است یا باید بیشتر یا کمتر باشد؟"
                },
                {
                  text: "اگر حرکات جنین منظم نباشد یا مدتی حس نشود، خطرناک است؟"
                },
                { text: "آیا ممکنه بند ناف دور گردن جنین بیفتد؟" },
                { text: "آیا لگد زدن زیاد یا کم جنین معنای خاصی دارد؟" },

                {
                  text: "چرا در سه‌ماهه دوم دچار گرفتگی عضلات پا یا کمر می‌شوم؟"
                },
                { text: "درد زیر شکم یا کشاله ران طبیعی است؟" },
                {
                  text: "چرا بعضی وقت‌ها ترشحات واژینال بیشتر می‌شود؟ طبیعی‌ست یا نشانه عفونت؟"
                },
                { text: "آیا دچار کم‌خونی شده‌ام؟ علائمش چیست؟" },
                { text: "چرا لثه‌هایم خونریزی می‌کنند؟ خطرناک است؟" },
                {
                  text: "چه زمانی باید نگران فشار خون بالا یا پره‌اکلامپسی باشم؟"
                },
                {
                  text: "آیا می‌توانم در این دوره رابطه جنسی داشته باشم؟ برای جنین خطرناک نیست؟"
                },

                {
                  text: "آیا می‌توانم روزه بگیرم؟ روزه گرفتن در بارداری چه تاثیری دارد؟"
                },
                { text: "آیا سفر با ماشین یا هواپیما در این دوره بی‌خطر است؟" },
                { text: "چه لباس‌هایی مناسب بارداری هستند؟" },
                { text: "آیا کمربند ایمنی ماشین برای جنین خطرناک است؟" },
                {
                  text: "آیا می‌توانم در این دوره از اپیلاتور، لیزر یا وکس استفاده کنم؟"
                },
                {
                  text: "آیا خوابیدن به پهلو الزامی است؟ چرا خوابیدن به پشت خطر دارد؟"
                },

                {
                  text: "چرا با وجود اینکه بارداری‌ام خوب پیش می‌رود، هنوز نگرانم؟"
                },
                { text: "آیا افسردگی یا اضطراب در این دوره طبیعی است؟" },
                {
                  text: "چطور با ترس از غربالگری مرحله دوم یا آنومالی کنار بیایم؟"
                },
                { text: "چرا احساس تنهایی یا حساسیت عاطفی دارم؟ طبیعی‌ست؟" },
                { text: "جنینم به چه سمتی قرار دارد؟ سر پایین است یا نه؟" },
                { text: "اگر جنین درشت باشد، زایمان طبیعی ممکن است؟" },
                { text: "چرا گاهی حرکات جنینم خیلی زیاد یا خیلی کم می‌شود؟" },
                { text: "آیا جنینم موقع تولد نفس می‌کشد یا باید کمک شود؟" },
                {
                  text: "آیا دیر چرخیدن یا نچرخیدن جنین طبیعی است؟ باید سزارین شوم؟"
                },

                {
                  text: "چرا در سه‌ماهه سوم تنگی نفس، درد لگن یا بی‌خوابی دارم؟"
                },
                { text: "آیا ترشح مایع از واژن نشانه پاره شدن کیسه آب است؟" },
                { text: "چطور بفهمم که دچار زایمان زودرس شده‌ام؟" },
                {
                  text: "انقباضات براکستون هیکس با درد زایمان چه تفاوتی دارد؟"
                },
                { text: "چرا پاهایم متورم شده؟ چه زمانی خطرناک است؟" },
                {
                  text: "آیا فشار به مثانه و تکرر ادرار طبیعی‌ست یا نشانه عفونت؟"
                },

                { text: "چه زمانی باید کیف بیمارستان را ببندم و آماده باشم؟" },
                { text: "از کجا بفهمم که زمان زایمان واقعی رسیده؟" },
                { text: "اگر دردها شروع شود ولی بیمارستان دور باشد، چه کنم؟" },
                { text: "چطور می‌توانم برای درد زایمان طبیعی آماده شوم؟" },
                { text: "تمرین‌های تنفسی یا حرکتی چه تاثیری در زایمان دارند؟" },
                { text: "اگر دوقلو باردار باشم، زایمانم چطور خواهد بود؟" },

                { text: "آیا می‌توانم نوزادم را بلافاصله بعد از تولد ببینم؟" },
                { text: "شیرم بلافاصله می‌آید؟ اگر نیامد چه؟" },
                { text: "آیا خوابیدن با نوزاد یا جدا خواباندن او بهتر است؟" },
                { text: "چطور باید پوشک عوض کنم یا حمام بدهم؟" },
                {
                  text: "برای شروع شیردهی به کمک نیاز دارم؟ چطور راهنمایی بگیرم؟"
                },

                {
                  text: "همسرم از من فاصله گرفته، چطور ارتباطمان را حفظ کنیم؟"
                },
                {
                  text: "چطور برای بعد از زایمان کمک بگیرم (از مادر، خانواده، همسر)؟"
                },
                {
                  text: "نگرانم که خانواده‌ام یا خانواده همسرم بیش از حد دخالت کنند"
                },
                { text: "آیا می‌توانم بعد از زایمان به شغل و کارم برگردم؟" },
                {
                  text: "آیا داشتن نوزاد روی رابطه عاطفی و جنسی ما تأثیر می‌گذارد؟"
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__v7ZDr)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.faq.length > 0 ? $state.faq : [];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__udcx)}
                  key={currentIndex}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
              );
            })}
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqPage__VariantsArgs;
    args?: PlasmicFaqPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaqPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFaqPage__ArgProps,
          internalVariantPropNames: PlasmicFaqPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaqPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqPage";
  } else {
    func.displayName = `PlasmicFaqPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicFaqPage = Object.assign(
  // Top-level PlasmicFaqPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicFaqPage
    internalVariantProps: PlasmicFaqPage__VariantProps,
    internalArgProps: PlasmicFaqPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFaqPage;
/* prettier-ignore-end */
