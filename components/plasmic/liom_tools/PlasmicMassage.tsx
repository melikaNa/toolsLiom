/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: jKmDBqi5Nwwx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Seen from "../../Seen"; // plasmic-import: 0oGpc6YoPalA/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from ""; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from ""; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicMassage.module.css"; // plasmic-import: jKmDBqi5Nwwx/css

import Icon97Icon from "./icons/PlasmicIcon__Icon97"; // plasmic-import: 0UrLVbKeb62Y/icon

createPlasmicElementProxy;

export type PlasmicMassage__VariantMembers = {
  you: "you";
};
export type PlasmicMassage__VariantsArgs = {
  you?: SingleBooleanChoiceArg<"you">;
};
type VariantPropType = keyof PlasmicMassage__VariantsArgs;
export const PlasmicMassage__VariantProps = new Array<VariantPropType>("you");

export type PlasmicMassage__ArgsType = { rectangle6?: React.ReactNode };
type ArgPropType = keyof PlasmicMassage__ArgsType;
export const PlasmicMassage__ArgProps = new Array<ArgPropType>("rectangle6");

export type PlasmicMassage__OverridesType = {
  group2?: Flex__<"div">;
  rectangle5?: Flex__<"div">;
};

export interface DefaultMassageProps {
  rectangle6?: React.ReactNode;
  you?: SingleBooleanChoiceArg<"you">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMassage__RenderFunc(props: {
  variants: PlasmicMassage__VariantsArgs;
  args: PlasmicMassage__ArgsType;
  overrides: PlasmicMassage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "you",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.you
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"group2"}
      data-plasmic-override={overrides.group2}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.group2,
        { [sty.group2you]: hasVariant($state, "you", "you") }
      )}
    >
      <div
        data-plasmic-name={"rectangle5"}
        data-plasmic-override={overrides.rectangle5}
        className={classNames(projectcss.all, sty.rectangle5, {
          [sty.rectangle5you]: hasVariant($state, "you", "you")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lkBE
                )}
              >
                {"\u0633\u0644\u0627\u0645"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__adrOn)}>
                <Seen
                  className={classNames("__wab_instance", sty.seen__wMo7S, {
                    [sty.seenyou__wMo7SoRrw]: hasVariant($state, "you", "you")
                  })}
                />

                <Icon97Icon
                  className={classNames(projectcss.all, sty.svg__bi6In, {
                    [sty.svgyou__bi6InoRrw]: hasVariant($state, "you", "you")
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qqzd
                  )}
                >
                  {"10:13"}
                </div>
              </div>
            </React.Fragment>
          ),
          value: args.rectangle6
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  group2: ["group2", "rectangle5"],
  rectangle5: ["rectangle5"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  group2: "div";
  rectangle5: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMassage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMassage__VariantsArgs;
    args?: PlasmicMassage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMassage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMassage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMassage__ArgProps,
          internalVariantPropNames: PlasmicMassage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMassage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "group2") {
    func.displayName = "PlasmicMassage";
  } else {
    func.displayName = `PlasmicMassage.${nodeName}`;
  }
  return func;
}

export const PlasmicMassage = Object.assign(
  // Top-level PlasmicMassage renders the root element
  makeNodeComponent("group2"),
  {
    // Helper components rendering sub-elements
    rectangle5: makeNodeComponent("rectangle5"),

    // Metadata about props expected for PlasmicMassage
    internalVariantProps: PlasmicMassage__VariantProps,
    internalArgProps: PlasmicMassage__ArgProps
  }
);

export default PlasmicMassage;
/* prettier-ignore-end */
