/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 0RvDxrGTp6lz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import StepsLayout from "../../StepsLayout"; // plasmic-import: usfpaVkTXFYE/component
import PercentageBox from "../../PercentageBox"; // plasmic-import: twduJO0v7B8-/component
import LineClomp from "../../LineClomp"; // plasmic-import: VHAYS5YHy7AC/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import DirectDialog from "../../DirectDialog"; // plasmic-import: GJ5eKNtJs574/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSelfMedicationStep.module.css"; // plasmic-import: 0RvDxrGTp6lz/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: CIGrIuwcL9LP/icon
import Icon77Icon from "./icons/PlasmicIcon__Icon77"; // plasmic-import: YKE8ylWcPDbP/icon
import Icon122Icon from "./icons/PlasmicIcon__Icon122"; // plasmic-import: 7szDnb8vqxXD/icon
import Icon91Icon from "./icons/PlasmicIcon__Icon91"; // plasmic-import: iDYQIL8FCsiP/icon
import Icon87Icon from "./icons/PlasmicIcon__Icon87"; // plasmic-import: vRe8tZ7-wlww/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon

createPlasmicElementProxy;

export type PlasmicSelfMedicationStep__VariantMembers = {
  dark: "dark";
};
export type PlasmicSelfMedicationStep__VariantsArgs = {
  dark?: SingleBooleanChoiceArg<"dark">;
};
type VariantPropType = keyof PlasmicSelfMedicationStep__VariantsArgs;
export const PlasmicSelfMedicationStep__VariantProps =
  new Array<VariantPropType>("dark");

export type PlasmicSelfMedicationStep__ArgsType = {};
type ArgPropType = keyof PlasmicSelfMedicationStep__ArgsType;
export const PlasmicSelfMedicationStep__ArgProps = new Array<ArgPropType>();

export type PlasmicSelfMedicationStep__OverridesType = {
  root?: Flex__<"div">;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  sideEffect?: Flex__<typeof SideEffect>;
  stepsLayout?: Flex__<typeof StepsLayout>;
  percentageBox?: Flex__<typeof PercentageBox>;
  lineClomp4?: Flex__<typeof LineClomp>;
  getUser?: Flex__<typeof ApiRequest>;
  getData?: Flex__<typeof ApiRequest>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  lottie?: Flex__<typeof LottieWrapper>;
  directDialog?: Flex__<typeof DirectDialog>;
};

export interface DefaultSelfMedicationStepProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelfMedicationStep__RenderFunc(props: {
  variants: PlasmicSelfMedicationStep__VariantsArgs;
  args: PlasmicSelfMedicationStep__ArgsType;
  overrides: PlasmicSelfMedicationStep__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "getData.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getData.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getData.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "listDetails",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "lineClomp4[].line",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "isDone",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                if (
                  $ctx.query.type == "danger" ||
                  $ctx.query.type == "stretch_marks" ||
                  $ctx.query.type == "hair_care" ||
                  $ctx.query.type == "adhd_treatment_sub" ||
                  $ctx.query.type == "sunken_eyes_sub"
                )
                  return true;
                else if (
                  $state.paramsObject.stepId == 121 ||
                  $state.paramsObject.stepId == 122 ||
                  $state.paramsObject.stepId == 132
                )
                  return true;
                else {
                  return $state.getData?.data?.[0]?.isDone == 1 ? true : false;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loading2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dark",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.paramsObject.theme == "dark";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.dark
      },
      {
        path: "getUser.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUser.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getUser.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "buttonLiom2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "directDialog.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "directDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loading3",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "loadshop",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root,
            { [sty.rootdark]: hasVariant($state, "dark", "dark") }
          )}
        >
          {(() => {
            try {
              return $state.paramsObject.inApp != "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom, {
                [sty.headerLiomdark]: hasVariant($state, "dark", "dark")
              })}
              dark={(() => {
                try {
                  return $state.paramsObject.theme == "dark";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <Paziresh24Avatar
                  data-plasmic-name={"paziresh24Avatar"}
                  data-plasmic-override={overrides.paziresh24Avatar}
                  className={classNames("__wab_instance", sty.paziresh24Avatar)}
                />
              }
              slot2={
                <Icon22Icon
                  className={classNames(projectcss.all, sty.svg__oSkb7, {
                    [sty.svgdark__oSkb75Auqx]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToPage"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: (() => {
                              return (
                                "https://tools.liom.app/self-medication/?type=" +
                                $ctx.query.type +
                                "&inApp=" +
                                $state.paramsObject.inApp +
                                "&token=" +
                                $state.token +
                                "&selectStep=" +
                                $state.paramsObject.selectStep +
                                "&userId=" +
                                ($state.getUser?.data?.[0]?.userId ?? "") +
                                "&version=" +
                                $state.paramsObject.version +
                                "&theme=" +
                                $state.paramsObject.theme
                              );
                            })()
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToPage"] != null &&
                      typeof $steps["goToPage"] === "object" &&
                      typeof $steps["goToPage"].then === "function"
                    ) {
                      $steps["goToPage"] = await $steps["goToPage"];
                    }
                  }}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gD5Nw,
                  {
                    [sty.textdark__gD5Nw5Auqx]: hasVariant(
                      $state,
                      "dark",
                      "dark"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return (
                                "https://tools.liom.app/self-medication/?type=" +
                                $ctx.query.type +
                                "&inApp=" +
                                $state.paramsObject.inApp +
                                "&token=" +
                                $state.token +
                                "&selectStep=" +
                                $state.paramsObject.selectStep +
                                "&userId=" +
                                ($state.getUser?.data?.[0]?.userId ?? "") +
                                "&version=" +
                                $state.paramsObject.version +
                                "&theme=" +
                                $state.paramsObject.theme
                              );
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
              >
                <React.Fragment>{$state.paramsObject.title}</React.Fragment>
              </div>
            </HeaderLiom>
          ) : null}
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getParams"] != null &&
                typeof $steps["getParams"] === "object" &&
                typeof $steps["getParams"].then === "function"
              ) {
                $steps["getParams"] = await $steps["getParams"];
              }

              $steps["clearParams"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const searchParams = new URLSearchParams(
                            window.location.search
                          );
                          searchParams.delete("token");
                          searchParams.delete("userId");
                          searchParams.delete("user_id");
                          searchParams.delete("theme");
                          searchParams.delete("style");
                          searchParams.delete("title");
                          searchParams.delete("inApp");
                          searchParams.delete("version");
                          searchParams.delete("stepId");
                          searchParams.delete("secId");
                          searchParams.delete("selectStep");
                          const newUrl = `${
                            window.location.pathname
                          }?${searchParams.toString()}`;
                          return window.history.replaceState(null, "", newUrl);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearParams"] != null &&
                typeof $steps["clearParams"] === "object" &&
                typeof $steps["clearParams"].then === "function"
              ) {
                $steps["clearParams"] = await $steps["clearParams"];
              }

              $steps["getToken"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $state.paramsObject.token !== undefined &&
                            $state.paramsObject.token.trim() !== ""
                          ) {
                            if (!$state.paramsObject.token.startsWith("ey"))
                              $state.paramsObject.token =
                                $state.paramsObject.token.slice(6, -3);
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            return setCookie(
                              "token",
                              JSON.stringify([$state.paramsObject.token]),
                              100
                            );
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getToken"] != null &&
                typeof $steps["getToken"] === "object" &&
                typeof $steps["getToken"].then === "function"
              ) {
                $steps["getToken"] = await $steps["getToken"];
              }

              $steps["getTokenFromCookie"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return JSON.parse(value)[0];
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["getTokenFromCookie"] != null &&
                typeof $steps["getTokenFromCookie"] === "object" &&
                typeof $steps["getTokenFromCookie"].then === "function"
              ) {
                $steps["getTokenFromCookie"] = await $steps[
                  "getTokenFromCookie"
                ];
              }

              $steps["userGuest"] =
                $state.token == ""
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://api.liom.app/auth/signup/guest",
                          undefined,
                          (() => {
                            try {
                              return (() => {
                                function pseudoUUID() {
                                  let timestamp = Date.now().toString(36);
                                  let randomStr = Math.random()
                                    .toString(36)
                                    .substr(2, 8);
                                  return timestamp + "-" + randomStr;
                                }
                                return {
                                  name: "کاربر مهمان",
                                  gateway: "self_medication",
                                  country: "98",
                                  isCountryPending: false,
                                  lang: "fa",
                                  version: "",
                                  os: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    const platform = window.navigator.userAgent;
                                    if (/Windows/i.test(platform))
                                      return "Windows";
                                    if (/Mac/i.test(platform)) return "macOS";
                                    if (/Linux/i.test(platform)) return "Linux";
                                    if (/Android/i.test(userAgent))
                                      return "Android";
                                    if (/iPhone|iPad|iPod/i.test(userAgent))
                                      return "iOS";
                                    return "Unknown OS";
                                  })(),
                                  osVersion: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    if (/Windows NT 10.0/.test(userAgent))
                                      return "Windows 10";
                                    if (/Windows NT 6.3/.test(userAgent))
                                      return "Windows 8.1";
                                    if (/Windows NT 6.2/.test(userAgent))
                                      return "Windows 8";
                                    if (/Windows NT 6.1/.test(userAgent))
                                      return "Windows 7";
                                    if (
                                      /Mac OS X (\d+[\._]\d+)/.test(userAgent)
                                    )
                                      return `macOS ${RegExp.$1.replace(
                                        "_",
                                        "."
                                      )}`;
                                    if (/Android (\d+(\.\d+)?)/.test(userAgent))
                                      return `Android ${RegExp.$1}`;
                                    if (
                                      /CPU (iPhone )?OS (\d+_\d+)/.test(
                                        userAgent
                                      )
                                    )
                                      return `iOS ${RegExp.$2.replace(
                                        "_",
                                        "."
                                      )}`;
                                    return "Unknown Version";
                                  })(),
                                  sex: $state.gender || "",
                                  additionalData: {
                                    ip: "132465",
                                    name: "test1"
                                  },
                                  device: (() => {
                                    const userAgent =
                                      window.navigator.userAgent;
                                    if (
                                      /Mobi|Android|iPhone|iPad|iPod/i.test(
                                        userAgent
                                      )
                                    ) {
                                      return "Mobile";
                                    } else if (/Tablet|iPad/i.test(userAgent)) {
                                      return "Tablet";
                                    } else {
                                      return "Desktop";
                                    }
                                  })(),
                                  fcm:
                                    window.localStorage.getItem("fcmToken") ||
                                    " ",
                                  uniqueId: pseudoUUID(),
                                  device_type: window.navigator.platform,
                                  postLang: "fa"
                                };
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["userGuest"] != null &&
                typeof $steps["userGuest"] === "object" &&
                typeof $steps["userGuest"].then === "function"
              ) {
                $steps["userGuest"] = await $steps["userGuest"];
              }

              $steps["setToken"] =
                $steps.userGuest?.data?.success ?? false
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            var setCookie = (name, value, days) => {
                              const expires = new Date(
                                Date.now() + days * 86400000
                              ).toUTCString();
                              document.cookie = `${name}=${value}; expires=${expires}; path=/; domain=.liom.app; secure; SameSite=Lax`;
                            };
                            setCookie(
                              "token",
                              JSON.stringify([
                                $steps.userGuest.data.result.token
                              ]),
                              100
                            );
                            return ($state.token =
                              $steps.userGuest.data.result.token);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["setToken"] != null &&
                typeof $steps["setToken"] === "object" &&
                typeof $steps["setToken"].then === "function"
              ) {
                $steps["setToken"] = await $steps["setToken"];
              }
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__zomNf)}>
            <StepsLayout
              data-plasmic-name={"stepsLayout"}
              data-plasmic-override={overrides.stepsLayout}
              className={classNames("__wab_instance", sty.stepsLayout)}
              layout={(() => {
                try {
                  return $state.getData.loading
                    ? undefined
                    : $state.paramsObject.style;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              slot={
                <React.Fragment>
                  {(
                    hasVariant($state, "dark", "dark")
                      ? true
                      : (() => {
                          try {
                            return (
                              ($state.getData.data?.[0]?.title ?? "") != ""
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r0Nsc,
                        {
                          [sty.textdark__r0Nsc5Auqx]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        {$state.getData.data?.[0]?.title}
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return ($state.getData.data?.[0]?.text ?? "") != "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ysfHe,
                        {
                          [sty.textdark__ysfHe5Auqx]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        {$state.getData.data?.[0]?.text}
                      </React.Fragment>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yynGv)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state?.listDetails?.length > 0
                            ? $state.listDetails
                            : [];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tzrPi
                          )}
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateLoading2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading2"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoading2"] != null &&
                              typeof $steps["updateLoading2"] === "object" &&
                              typeof $steps["updateLoading2"].then ===
                                "function"
                            ) {
                              $steps["updateLoading2"] = await $steps[
                                "updateLoading2"
                              ];
                            }

                            $steps["goToPage"] =
                              $state.paramsObject.inApp != "true"
                                ? (() => {
                                    const actionArgs = {
                                      destination:
                                        "https://old.liom.app/social?post=" +
                                        currentItem.action.slice(
                                          6,
                                          currentItem.action.length
                                        )
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["goToPage"] != null &&
                              typeof $steps["goToPage"] === "object" &&
                              typeof $steps["goToPage"].then === "function"
                            ) {
                              $steps["goToPage"] = await $steps["goToPage"];
                            }

                            $steps["runCode"] =
                              $state.paramsObject.inApp == "true"
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.FlutterChannel.postMessage(
                                          currentItem.action
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateLoading22"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["loading2"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateLoading22"] != null &&
                              typeof $steps["updateLoading22"] === "object" &&
                              typeof $steps["updateLoading22"].then ===
                                "function"
                            ) {
                              $steps["updateLoading22"] = await $steps[
                                "updateLoading22"
                              ];
                            }
                          }}
                        >
                          <PlasmicImg__
                            alt={""}
                            className={classNames(sty.img__v1Qa6)}
                            displayHeight={"8rem"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"100%"}
                            height={"250"}
                            loading={"lazy"}
                            src={
                              (currentItem.cover ?? "") == ""
                                ? currentItem.url
                                : currentItem.cover
                            }
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7IOuu,
                              {
                                [sty.freeBoxdark___7IOuu5Auqx]: hasVariant(
                                  $state,
                                  "dark",
                                  "dark"
                                )
                              }
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jyTm4
                              )}
                            >
                              {(() => {
                                try {
                                  return currentItem.mediaType == "image";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon122Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__wTnQm
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return currentItem.mediaType == "mp3";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon91Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nPhAa
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return currentItem.mediaType == "video";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon87Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__oQf9O
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </React.Fragment>
              }
              slot2={
                <React.Fragment>
                  {(() => {
                    try {
                      return ($state.getData.data?.[0]?.image ?? "") != "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__opwDd)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "200px"
                          : "250px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "auto"
                          : "auto"
                      }
                      height={``}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.getData.data?.[0]?.image ?? "";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return (
                        ($state.getData.data?.[0]?.title ?? "") != "" &&
                        $ctx.query.type != "danger"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vbVG,
                        {
                          [sty.textdark__vbVG5Auqx]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        {$state.getData.data?.[0]?.title}
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return ($state.getData.data?.[0]?.text ?? "") != "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u8YQ8,
                        {
                          [sty.textdark__u8YQ85Auqx]: hasVariant(
                            $state,
                            "dark",
                            "dark"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        {$state.getData.data[0].text}
                      </React.Fragment>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kvZyh)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state?.listDetails?.length > 0
                            ? $state.listDetails
                            : [];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fvjK,
                            {
                              [sty.freeBoxdark__fvjK5Auqx]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                          key={currentIndex}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__n922M
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2IeQe,
                                {
                                  [sty.freeBoxglobal_newView_newView___2IeQEni7NW]:
                                    hasVariant(
                                      globalVariants,
                                      "newView",
                                      "newView"
                                    )
                                }
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__huDjb
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(() => {
                              try {
                                return (currentItem.type ?? "") != "";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })() ? (
                              <PercentageBox
                                data-plasmic-name={"percentageBox"}
                                data-plasmic-override={overrides.percentageBox}
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentageBox
                                )}
                                shape={"round"}
                                unnamedGroupOfVariants={(() => {
                                  try {
                                    return (() => {
                                      switch (currentItem.type) {
                                        case "safe":
                                        case "necessary":
                                          return "";
                                        case "warning":
                                          return "yellow";
                                        case "danger":
                                          return "red";
                                      }
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sb8JN
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (() => {
                                          switch (currentItem.type) {
                                            case "safe":
                                              return " بی‌خطر است ";
                                            case "warning":
                                              return " با احتیاط انجام شود ";
                                            case "danger":
                                              return " خطرناک است ";
                                            case "necessary":
                                              return "اجباری";
                                          }
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </PercentageBox>
                            ) : null}
                          </div>
                          {(() => {
                            try {
                              return currentItem.text != "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return false;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vdjig,
                                {
                                  [sty.freeBoxdark__vdjig5Auqx]: hasVariant(
                                    $state,
                                    "dark",
                                    "dark"
                                  )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xi91K,
                                  {
                                    [sty.freeBoxdark__xi91K5Auqx]: hasVariant(
                                      $state,
                                      "dark",
                                      "dark"
                                    )
                                  }
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cy3R7,
                                    {
                                      [sty.freeBoxdark__cy3R75Auqx]: hasVariant(
                                        $state,
                                        "dark",
                                        "dark"
                                      )
                                    }
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__v8R8E
                                  )}
                                >
                                  <LineClomp
                                    data-plasmic-name={"lineClomp4"}
                                    data-plasmic-override={overrides.lineClomp4}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.lineClomp4,
                                      {
                                        [sty.lineClomp4dark]: hasVariant(
                                          $state,
                                          "dark",
                                          "dark"
                                        )
                                      }
                                    )}
                                    more={true}
                                    numberOfLine={2}
                                    onLineChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "lineClomp4",
                                        __plasmic_idx_0,
                                        "line"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ucOvE,
                                        {
                                          [sty.textdark__ucOvE5Auqx]:
                                            hasVariant($state, "dark", "dark")
                                        }
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.text;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </LineClomp>
                                </div>
                              </div>
                            </div>
                          ) : null}
                        </div>
                      );
                    })}
                  </div>
                </React.Fragment>
              }
              theme={(() => {
                try {
                  return $state.paramsObject.theme;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            >
              {(() => {
                try {
                  return ($state.getData.data?.[0]?.title ?? "") != "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wplyh,
                    {
                      [sty.textdark__wplyh5Auqx]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {$state.getData.data[0].title}
                  </React.Fragment>
                </div>
              ) : null}
              {(() => {
                try {
                  return ($state.getData.data?.[0]?.text ?? "") != "";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return false;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hsqzv,
                    {
                      [sty.textdark__hsqzv5Auqx]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    }
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: $state.getData.data[0].text
                    }}
                  />
                </div>
              ) : null}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state?.listDetails?.length > 0
                      ? $state.listDetails
                      : [];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ij0Bd, {
                      [sty.freeBoxdark__ij0Bd5Auqx]: hasVariant(
                        $state,
                        "dark",
                        "dark"
                      )
                    })}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading2"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading2"] != null &&
                        typeof $steps["updateLoading2"] === "object" &&
                        typeof $steps["updateLoading2"].then === "function"
                      ) {
                        $steps["updateLoading2"] = await $steps[
                          "updateLoading2"
                        ];
                      }

                      $steps["runCode"] =
                        (currentItem?.action ?? "") != "" &&
                        $state.paramsObject.inApp == "true"
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.FlutterChannel.postMessage(
                                    currentItem.action
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["goToPage"] =
                        (currentItem?.action ?? "") != "" &&
                        $state.paramsObject.inApp == "false"
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return (
                                      "https://old.liom.app/social?post=" +
                                      currentItem.action.slice(
                                        6,
                                        currentItem.action.length
                                      )
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToPage"] != null &&
                        typeof $steps["goToPage"] === "object" &&
                        typeof $steps["goToPage"].then === "function"
                      ) {
                        $steps["goToPage"] = await $steps["goToPage"];
                      }

                      $steps["updateLoading22"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loading2"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateLoading22"] != null &&
                        typeof $steps["updateLoading22"] === "object" &&
                        typeof $steps["updateLoading22"].then === "function"
                      ) {
                        $steps["updateLoading22"] = await $steps[
                          "updateLoading22"
                        ];
                      }
                    }}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__fzLpg)}
                      displayHeight={"4rem"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"4rem"}
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return currentItem.url;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/liom_tools/images/bitmap.png",
                              fullWidth: 612,
                              fullHeight: 459,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__gJr9S)}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7GRog
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ajOdZ,
                            {
                              [sty.textdark__ajOdZ5Auqx]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        {(() => {
                          try {
                            return (currentItem?.label ?? "") != "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <Icon77Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vK1Xl,
                              {
                                [sty.svgdark__vK1Xl5Auqx]: hasVariant(
                                  $state,
                                  "dark",
                                  "dark"
                                )
                              }
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hWNmi,
                            {
                              [sty.textdark__hWNmi5Auqx]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                        >
                          <React.Fragment>
                            {currentItem?.label ?? ""}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Ln8Y,
                          {
                            [sty.textdark___2Ln8Y5Auqx]: hasVariant(
                              $state,
                              "dark",
                              "dark"
                            )
                          }
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return (currentItem?.action ?? "") != "";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zQlOt,
                            {
                              [sty.textdark__zQlOt5Auqx]: hasVariant(
                                $state,
                                "dark",
                                "dark"
                              )
                            }
                          )}
                        >
                          {
                            "\u0645\u0634\u0627\u0647\u062f\u0647 \u067e\u0633\u062a"
                          }
                        </div>
                      ) : null}
                    </div>
                  </div>
                );
              })}
            </StepsLayout>
            <ApiRequest
              data-plasmic-name={"getUser"}
              data-plasmic-override={overrides.getUser}
              className={classNames("__wab_instance", sty.getUser)}
              errorDisplay={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mmwws
                  )}
                >
                  {"Error fetching data"}
                </div>
              }
              loadingDisplay={null}
              method={"GET"}
              onError={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getUser", "error"]).apply(
                  null,
                  eventArgs
                );
              }}
              onLoading={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getUser", "loading"]).apply(
                  null,
                  eventArgs
                );
              }}
              onSuccess={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["getUser", "data"]).apply(
                  null,
                  eventArgs
                );

                (async data => {
                  const $steps = {};
                }).apply(null, eventArgs);
              }}
              params={(() => {
                try {
                  return {
                    token: $state.token
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              shouldFetch={true}
              url={"https://n8n.staas.ir/webhook/getUser"}
            >
              <ApiRequest
                data-plasmic-name={"getData"}
                data-plasmic-override={overrides.getData}
                body={(() => {
                  try {
                    return (() => {
                      var type = $ctx.query.type;
                      switch ($ctx.query.type) {
                        case "stretch_marks":
                          type = "stretchMarksIsActive";
                          break;
                        case "irregular":
                          type = "irregularIsActive";
                          break;
                        case "adhd_treatment_sub":
                          type = "adhdTreatmentIsActive";
                          break;
                        case "hair_care":
                          type = "hairCareIsActive";
                          break;
                        case "skinCare":
                          type = "skinCareIsActive";
                          break;
                        case "danger":
                          type = "pregnancyDangerIsActive";
                          break;
                        case "pcos_sub":
                          type = "pcosIsActive";
                          break;
                        case "sunken_eyes_sub":
                          type = "sunkenEyesIsActive";
                          break;
                      }
                      return {
                        stepId: $state.paramsObject.stepId,
                        sectionId: $state.paramsObject.secId,
                        userId: $state.getUser?.data?.[0]?.userId,
                        token: $state.token,
                        sub: type,
                        type:
                          $ctx.query.type == "danger"
                            ? "pregnancy_danger_sub"
                            : $ctx.query.type
                      };
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames("__wab_instance", sty.getData)}
                errorDisplay={null}
                loadingDisplay={null}
                method={"POST"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["getData", "error"]).apply(
                    null,
                    eventArgs
                  );
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "getData",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["getData", "data"]).apply(
                    null,
                    eventArgs
                  );

                  (async data => {
                    const $steps = {};

                    $steps["updateListDetails3"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadshop"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateListDetails3"] != null &&
                      typeof $steps["updateListDetails3"] === "object" &&
                      typeof $steps["updateListDetails3"].then === "function"
                    ) {
                      $steps["updateListDetails3"] = await $steps[
                        "updateListDetails3"
                      ];
                    }

                    $steps["updateListDetails"] = (() => {
                      if (
                        typeof $state.getData?.data?.[0]?.data !== "undefined"
                      ) {
                        return true;
                      } else {
                        return false;
                      }
                    })()
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["listDetails"]
                            },
                            operation: 0,
                            value: JSON.parse($state.getData?.data?.[0]?.data)
                              ?.data
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateListDetails"] != null &&
                      typeof $steps["updateListDetails"] === "object" &&
                      typeof $steps["updateListDetails"].then === "function"
                    ) {
                      $steps["updateListDetails"] = await $steps[
                        "updateListDetails"
                      ];
                    }

                    $steps["updateListDetails2"] =
                      Object.keys($state.getData?.data?.[0] || {}).length !=
                        0 && $state.getData?.data?.[0]?.id == null
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["loadshop"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateListDetails2"] != null &&
                      typeof $steps["updateListDetails2"] === "object" &&
                      typeof $steps["updateListDetails2"].then === "function"
                    ) {
                      $steps["updateListDetails2"] = await $steps[
                        "updateListDetails2"
                      ];
                    }

                    $steps["updateListDetails4"] = (() => {
                      if (typeof $state.getData?.data?.[0] !== "undefined") {
                        return true;
                      } else {
                        return false;
                      }
                    })()
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                console.log($state.getData?.data?.[0]);
                                return console.log(
                                  JSON.parse(
                                    $state.getData?.data?.[0]?.categoryInfo
                                  )
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateListDetails4"] != null &&
                      typeof $steps["updateListDetails4"] === "object" &&
                      typeof $steps["updateListDetails4"].then === "function"
                    ) {
                      $steps["updateListDetails4"] = await $steps[
                        "updateListDetails4"
                      ];
                    }
                  }).apply(null, eventArgs);
                }}
                shouldFetch={true}
                url={"https://n8n.staas.ir/webhook/selfTreatment"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__yz5Xf)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return (
                              $state.isDone == false &&
                              $ctx.query.type != "danger"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return (() => {
                              if (
                                $state.getData.loading != undefined &&
                                !$state.getData.loading &&
                                ($state.getData?.data?.[0]?.id || "") == ""
                              )
                                return false;
                              else
                                return (
                                  ($state.getData?.data?.[0]?.unlockMode !=
                                    "openAll" &&
                                    $state.isDone == false &&
                                    !$state.getUser.loading) ||
                                  ($state.isDone == false &&
                                    $ctx.query.type != "danger" &&
                                    $ctx.query.type != "stretch_marks" &&
                                    $ctx.query.type != "adhd_treatment_sub" &&
                                    !$state.getUser.loading)
                                );
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                  ) ? (
                    <ButtonLiom
                      data-plasmic-name={"buttonLiom"}
                      data-plasmic-override={overrides.buttonLiom}
                      className={classNames("__wab_instance", sty.buttonLiom)}
                      color={generateStateValueProp($state, [
                        "buttonLiom",
                        "color"
                      ])}
                      load={generateStateValueProp($state, [
                        "buttonLiom",
                        "load"
                      ])}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction2"] =
                          $ctx.query.inApp != "true" || true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    "\u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f",
                                    "bottom-center"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["runCode"] = false
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.FlutterChannel.postMessage(
                                    "#toast-با موفقیت انجام شد\uD83D\uDE0D-confirm"
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoading"] != null &&
                          typeof $steps["updateLoading"] === "object" &&
                          typeof $steps["updateLoading"].then === "function"
                        ) {
                          $steps["updateLoading"] = await $steps[
                            "updateLoading"
                          ];
                        }

                        $steps["updateIsDone"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["isDone"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateIsDone"] != null &&
                          typeof $steps["updateIsDone"] === "object" &&
                          typeof $steps["updateIsDone"].then === "function"
                        ) {
                          $steps["updateIsDone"] = await $steps["updateIsDone"];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    return console.log($state.getUser.data);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://n8n.staas.ir/webhook/selfTreatmentSection",
                                  undefined,
                                  {
                                    sectionId: $ctx.query.secId,
                                    stepId: $ctx.query.stepId,
                                    userId: $state.getUser?.data?.[0]?.userId,
                                    type: $ctx.query.type
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }

                        $steps["updateLoading2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loading"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoading2"] != null &&
                          typeof $steps["updateLoading2"] === "object" &&
                          typeof $steps["updateLoading2"].then === "function"
                        ) {
                          $steps["updateLoading2"] = await $steps[
                            "updateLoading2"
                          ];
                        }

                        $steps["refreshData"] = true
                          ? (() => {
                              const actionArgs = {
                                queryInvalidation: ["plasmic_refresh_all"]
                              };
                              return (async ({ queryInvalidation }) => {
                                if (!queryInvalidation) {
                                  return;
                                }
                                await plasmicInvalidate(queryInvalidation);
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["refreshData"] != null &&
                          typeof $steps["refreshData"] === "object" &&
                          typeof $steps["refreshData"].then === "function"
                        ) {
                          $steps["refreshData"] = await $steps["refreshData"];
                        }
                      }}
                      onColorChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom",
                            "color"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onLoadChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "buttonLiom",
                            "load"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      unnamedVariant={(() => {
                        try {
                          return $state.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rqj6X
                        )}
                      >
                        {"\u0627\u0646\u062c\u0627\u0645 \u0634\u062f"}
                      </div>
                    </ButtonLiom>
                  ) : null}
                </div>
              </ApiRequest>
            </ApiRequest>
          </div>
          {(() => {
            try {
              return $state.loadshop;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__x38Iz)}>
              <div className={classNames(projectcss.all, sty.freeBox__rV2Pa)}>
                <div className={classNames(projectcss.all, sty.freeBox__f91A)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__h8Qj2)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40%"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return $state.getData?.data?.[0]?.icon;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hgRSm
                    )}
                  >
                    {
                      "\u0628\u0631\u0627\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u06a9\u0627\u0645\u0644 \u0628\u0647 \u0645\u062d\u062a\u0648\u0627 \u0644\u0637\u0641\u0627 \u0627\u0634\u062a\u0631\u0627\u06a9 \u062a\u0647\u06cc\u0647 \u06a9\u0646\u06cc\u062f"
                    }
                  </div>
                  <ButtonLiom
                    data-plasmic-name={"buttonLiom2"}
                    data-plasmic-override={overrides.buttonLiom2}
                    className={classNames("__wab_instance", sty.buttonLiom2, {
                      [sty.buttonLiom2global_newView_newView]: hasVariant(
                        globalVariants,
                        "newView",
                        "newView"
                      )
                    })}
                    color={generateStateValueProp($state, [
                      "buttonLiom2",
                      "color"
                    ])}
                    load={generateStateValueProp($state, [
                      "buttonLiom2",
                      "load"
                    ])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] =
                        $ctx.query.inApp == "true"
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if ($ctx.query.type == "skinCare")
                                      return window.FlutterChannel.postMessage(
                                        "#directDialog-skinCare-sub"
                                      );
                                    else if ($ctx.query.type == "irregular")
                                      return window.FlutterChannel.postMessage(
                                        "#directDialog-irregular"
                                      );
                                    else if ($ctx.query.type == "stretch_marks")
                                      return window.FlutterChannel.postMessage(
                                        "#directDialog-stretch_marks_sub"
                                      );
                                    else if ($ctx.query.type == "hair_care")
                                      return window.FlutterChannel.postMessage(
                                        "#directDialog-hair_care_sub"
                                      );
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateDirectDialogOpen"] =
                        $ctx.query.inApp != "true"
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["directDialog", "open"]
                                },
                                operation: 4
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, !oldValue);
                                return !oldValue;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateDirectDialogOpen"] != null &&
                        typeof $steps["updateDirectDialogOpen"] === "object" &&
                        typeof $steps["updateDirectDialogOpen"].then ===
                          "function"
                      ) {
                        $steps["updateDirectDialogOpen"] = await $steps[
                          "updateDirectDialogOpen"
                        ];
                      }

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.liom.app/service/log",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      userId: $state.userId,
                                      pageName: "mainPage",
                                      action: "buyDialog-" + $ctx.query.type,
                                      extraData: {}
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        "Content-Type": "application/json",
                                        Authorization:
                                          "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMiLCJuYW1lIjoicHJlZ25hbmN5In0.nE_MuQ821HUfFQAujqlhizJRCtnhZp4Y4DYHZzVGUe4"
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    onColorChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom2",
                          "color"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onLoadChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "buttonLiom2",
                          "load"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    size={"minimal"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q5Vl
                      )}
                    >
                      {
                        "\u062e\u0631\u06cc\u062f \u0627\u0634\u062a\u0631\u0627\u06a9"
                      }
                    </div>
                  </ButtonLiom>
                </div>
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.loading2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___5D5I)}>
              <LottieWrapper
                data-plasmic-name={"lottie"}
                data-plasmic-override={overrides.lottie}
                animationData={{
                  nm: "Loading Dots",
                  ddd: 0,
                  h: 50,
                  w: 100,
                  meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                  layers: [
                    {
                      ty: 4,
                      nm: "Dot4",
                      sr: 1,
                      st: 0,
                      op: 360,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [-284, 92, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [2.61, 2.32, 100],
                              t: 25
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [3.91, 3.47, 100],
                              t: 39
                            },
                            { s: [2.61, 2.32, 100], t: 55 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [59.48, 25, 0],
                              t: 25
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [59.48, 23.15, 0],
                              t: 39
                            },
                            { s: [59.48, 25, 0], t: 55 }
                          ],
                          ix: 2
                        },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [25],
                              t: 25
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [100],
                              t: 39
                            },
                            { s: [25], t: 55 }
                          ],
                          ix: 11
                        }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Ellipse 1",
                          ix: 1,
                          cix: 2,
                          np: 3,
                          it: [
                            {
                              ty: "el",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Ellipse",
                              nm: "Ellipse Path 1",
                              d: 1,
                              p: { a: 0, k: [0, 0], ix: 3 },
                              s: { a: 0, k: [120, 120], ix: 2 }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [-284, 92], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 1
                    },
                    {
                      ty: 4,
                      nm: "Dot3",
                      sr: 1,
                      st: 0,
                      op: 360,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [-284, 92, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [2.61, 2.32, 100],
                              t: 17
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [3.91, 3.47, 100],
                              t: 31
                            },
                            { s: [2.61, 2.32, 100], t: 47 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [53.23, 25, 0],
                              t: 17
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [53.23, 23.15, 0],
                              t: 31
                            },
                            { s: [53.23, 25, 0], t: 47 }
                          ],
                          ix: 2
                        },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [25],
                              t: 17
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [100],
                              t: 31
                            },
                            { s: [25], t: 47 }
                          ],
                          ix: 11
                        }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Ellipse 1",
                          ix: 1,
                          cix: 2,
                          np: 3,
                          it: [
                            {
                              ty: "el",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Ellipse",
                              nm: "Ellipse Path 1",
                              d: 1,
                              p: { a: 0, k: [0, 0], ix: 3 },
                              s: { a: 0, k: [120, 120], ix: 2 }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [-284, 92], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 2
                    },
                    {
                      ty: 4,
                      nm: "Dot2",
                      sr: 1,
                      st: 0,
                      op: 360,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [-284, 92, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [2.61, 2.32, 100],
                              t: 9
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [3.91, 3.47, 100],
                              t: 23
                            },
                            { s: [2.61, 2.32, 100], t: 39 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [46.98, 25, 0],
                              t: 9
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [46.98, 23.15, 0],
                              t: 23
                            },
                            { s: [46.98, 25, 0], t: 39 }
                          ],
                          ix: 2
                        },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [25],
                              t: 9
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [100],
                              t: 23
                            },
                            { s: [25], t: 39 }
                          ],
                          ix: 11
                        }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Ellipse 1",
                          ix: 1,
                          cix: 2,
                          np: 3,
                          it: [
                            {
                              ty: "el",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Ellipse",
                              nm: "Ellipse Path 1",
                              d: 1,
                              p: { a: 0, k: [0, 0], ix: 3 },
                              s: { a: 0, k: [120, 120], ix: 2 }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [-284, 92], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 3
                    },
                    {
                      ty: 4,
                      nm: "Dot1",
                      sr: 1,
                      st: 0,
                      op: 360,
                      ip: 0,
                      hd: false,
                      ddd: 0,
                      bm: 0,
                      hasMask: false,
                      ao: 0,
                      ks: {
                        a: { a: 0, k: [-284, 92, 0], ix: 1 },
                        s: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [2.61, 2.32, 100],
                              t: 0
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [3.91, 3.47, 100],
                              t: 14
                            },
                            { s: [2.61, 2.32, 100], t: 30 }
                          ],
                          ix: 6
                        },
                        sk: { a: 0, k: 0 },
                        p: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [40.73, 25, 0],
                              t: 0
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [40.73, 23.15, 0],
                              t: 14
                            },
                            { s: [40.73, 25, 0], t: 30 }
                          ],
                          ix: 2
                        },
                        r: { a: 0, k: 0, ix: 10 },
                        sa: { a: 0, k: 0 },
                        o: {
                          a: 1,
                          k: [
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [25],
                              t: 0
                            },
                            {
                              o: { x: 0.333, y: 0 },
                              i: { x: 0.667, y: 1 },
                              s: [100],
                              t: 14
                            },
                            { s: [25], t: 30 }
                          ],
                          ix: 11
                        }
                      },
                      ef: [],
                      shapes: [
                        {
                          ty: "gr",
                          bm: 0,
                          hd: false,
                          mn: "ADBE Vector Group",
                          nm: "Ellipse 1",
                          ix: 1,
                          cix: 2,
                          np: 3,
                          it: [
                            {
                              ty: "el",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Shape - Ellipse",
                              nm: "Ellipse Path 1",
                              d: 1,
                              p: { a: 0, k: [0, 0], ix: 3 },
                              s: { a: 0, k: [120, 120], ix: 2 }
                            },
                            {
                              ty: "fl",
                              bm: 0,
                              hd: false,
                              mn: "ADBE Vector Graphic - Fill",
                              nm: "Fill 1",
                              c: { a: 0, k: [0.5098, 0.3294, 0.7765], ix: 4 },
                              r: 1,
                              o: { a: 0, k: 100, ix: 5 }
                            },
                            {
                              ty: "tr",
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              sk: { a: 0, k: 0, ix: 4 },
                              p: { a: 0, k: [-284, 92], ix: 2 },
                              r: { a: 0, k: 0, ix: 6 },
                              sa: { a: 0, k: 0, ix: 5 },
                              o: { a: 0, k: 100, ix: 7 }
                            }
                          ]
                        }
                      ],
                      ind: 4
                    }
                  ],
                  v: "5.7.11",
                  fr: 60,
                  op: 81,
                  ip: 0,
                  assets: []
                }}
                className={classNames("__wab_instance", sty.lottie)}
              />
            </div>
          ) : null}
          <DirectDialog
            data-plasmic-name={"directDialog"}
            data-plasmic-override={overrides.directDialog}
            className={classNames("__wab_instance", sty.directDialog)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["directDialog", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectShopChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "directDialog",
                "selectShop"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["directDialog", "open"])}
            redirectUrl={(() => {
              try {
                return (() => {
                  var token = $state.token;
                  return `https://tools.liom.app/shopResult?buyId=${
                    $state.directDialog.selectShop.id
                  }&?offCode=&token=${token}&redirectUrl=${encodeURIComponent(
                    window.location.href
                  )}`;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            token={(() => {
              try {
                return $state.token;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            type={(() => {
              try {
                return (() => {
                  switch ($ctx.query.type) {
                    case "skinCare":
                      return "skin_care_sub";
                    case "skinCareIsActive":
                      return "skin_care_sub";
                    case "irregular":
                      return "irregular";
                    case "stretch_marks":
                      return "stretch_marks_sub";
                    case "hair_care":
                      return "hair_care_sub";
                    case "adhd_treatment_sub":
                      return "adhd_treatment_sub";
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerLiom",
    "paziresh24Avatar",
    "sideEffect",
    "stepsLayout",
    "percentageBox",
    "lineClomp4",
    "getUser",
    "getData",
    "buttonLiom",
    "buttonLiom2",
    "lottie",
    "directDialog"
  ],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  sideEffect: ["sideEffect"],
  stepsLayout: ["stepsLayout", "percentageBox", "lineClomp4"],
  percentageBox: ["percentageBox"],
  lineClomp4: ["lineClomp4"],
  getUser: ["getUser", "getData", "buttonLiom"],
  getData: ["getData", "buttonLiom"],
  buttonLiom: ["buttonLiom"],
  buttonLiom2: ["buttonLiom2"],
  lottie: ["lottie"],
  directDialog: ["directDialog"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  sideEffect: typeof SideEffect;
  stepsLayout: typeof StepsLayout;
  percentageBox: typeof PercentageBox;
  lineClomp4: typeof LineClomp;
  getUser: typeof ApiRequest;
  getData: typeof ApiRequest;
  buttonLiom: typeof ButtonLiom;
  buttonLiom2: typeof ButtonLiom;
  lottie: typeof LottieWrapper;
  directDialog: typeof DirectDialog;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelfMedicationStep__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelfMedicationStep__VariantsArgs;
    args?: PlasmicSelfMedicationStep__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelfMedicationStep__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelfMedicationStep__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelfMedicationStep__ArgProps,
          internalVariantPropNames: PlasmicSelfMedicationStep__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelfMedicationStep__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelfMedicationStep";
  } else {
    func.displayName = `PlasmicSelfMedicationStep.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSelfMedicationStep = Object.assign(
  // Top-level PlasmicSelfMedicationStep renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    sideEffect: makeNodeComponent("sideEffect"),
    stepsLayout: makeNodeComponent("stepsLayout"),
    percentageBox: makeNodeComponent("percentageBox"),
    lineClomp4: makeNodeComponent("lineClomp4"),
    getUser: makeNodeComponent("getUser"),
    getData: makeNodeComponent("getData"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    lottie: makeNodeComponent("lottie"),
    directDialog: makeNodeComponent("directDialog"),

    // Metadata about props expected for PlasmicSelfMedicationStep
    internalVariantProps: PlasmicSelfMedicationStep__VariantProps,
    internalArgProps: PlasmicSelfMedicationStep__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSelfMedicationStep;
/* prettier-ignore-end */
