/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: xCdoITDvZVKn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import LoadingCompopnentGray from "../../LoadingCompopnentGray"; // plasmic-import: OUwywVcxKl5x/component
import UnLike from "../../UnLike"; // plasmic-import: bmZmPfCWacWw/component
import Like from "../../Like"; // plasmic-import: VT-zRjgL9JA9/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicMessageLiom.module.css"; // plasmic-import: xCdoITDvZVKn/css

import Icon168Icon from "./icons/PlasmicIcon__Icon168"; // plasmic-import: XtX9U6Tq_ez9/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: gKuukzM6fAy2/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon171Icon from "./icons/PlasmicIcon__Icon171"; // plasmic-import: o5TkWEpPArZM/icon
import Icon169Icon from "./icons/PlasmicIcon__Icon169"; // plasmic-import: c2LVCJdhSdPN/icon
import Icon109Icon from "./icons/PlasmicIcon__Icon109"; // plasmic-import: FdWVKA90TGYv/icon
import Icon119Icon from "./icons/PlasmicIcon__Icon119"; // plasmic-import: JdBtCI53tCN5/icon
import Icon200Icon from "./icons/PlasmicIcon__Icon200"; // plasmic-import: wiTkzBDMXd5X/icon

createPlasmicElementProxy;

export type PlasmicMessageLiom__VariantMembers = {
  pazireshAnswer: "pazireshAnswer";
  liomAnswer: "liomAnswer";
  loadingMessage: "loadingMessage";
  endMessege: "endMessege";
  hint: "hint";
  bot: "bot";
  owner: "owner";
  feedback: "feedback";
};
export type PlasmicMessageLiom__VariantsArgs = {
  pazireshAnswer?: SingleBooleanChoiceArg<"pazireshAnswer">;
  liomAnswer?: SingleBooleanChoiceArg<"liomAnswer">;
  loadingMessage?: SingleBooleanChoiceArg<"loadingMessage">;
  endMessege?: SingleBooleanChoiceArg<"endMessege">;
  hint?: SingleBooleanChoiceArg<"hint">;
  bot?: SingleBooleanChoiceArg<"bot">;
  owner?: SingleBooleanChoiceArg<"owner">;
  feedback?: SingleBooleanChoiceArg<"feedback">;
};
type VariantPropType = keyof PlasmicMessageLiom__VariantsArgs;
export const PlasmicMessageLiom__VariantProps = new Array<VariantPropType>(
  "pazireshAnswer",
  "liomAnswer",
  "loadingMessage",
  "endMessege",
  "hint",
  "bot",
  "owner",
  "feedback"
);

export type PlasmicMessageLiom__ArgsType = {
  inApp?: boolean;
  error2?: boolean;
  resend?: (event: any) => void;
  _delete?: (event: any) => void;
  credit?: (event: any) => void;
  copy?: (event: any) => void;
  like?: (event: any) => void;
  unLike?: (event: any) => void;
  feedbackData?: any;
  ad?: any;
  token?: string;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicMessageLiom__ArgsType;
export const PlasmicMessageLiom__ArgProps = new Array<ArgPropType>(
  "inApp",
  "error2",
  "resend",
  "_delete",
  "credit",
  "copy",
  "like",
  "unLike",
  "feedbackData",
  "ad",
  "token",
  "children",
  "slot"
);

export type PlasmicMessageLiom__OverridesType = {
  root?: Flex__<"div">;
  popover?: Flex__<typeof AntdPopover>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  buttonLiom4?: Flex__<typeof ButtonLiom>;
  buttonLiom3?: Flex__<typeof ButtonLiom>;
  loadingCompopnentGray?: Flex__<typeof LoadingCompopnentGray>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  unLike2?: Flex__<typeof UnLike>;
  like2?: Flex__<typeof Like>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultMessageLiomProps {
  inApp?: boolean;
  error2?: boolean;
  resend?: (event: any) => void;
  _delete?: (event: any) => void;
  credit?: (event: any) => void;
  copy?: (event: any) => void;
  like?: (event: any) => void;
  unLike?: (event: any) => void;
  feedbackData?: any;
  ad?: any;
  token?: string;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  pazireshAnswer?: SingleBooleanChoiceArg<"pazireshAnswer">;
  liomAnswer?: SingleBooleanChoiceArg<"liomAnswer">;
  loadingMessage?: SingleBooleanChoiceArg<"loadingMessage">;
  endMessege?: SingleBooleanChoiceArg<"endMessege">;
  hint?: SingleBooleanChoiceArg<"hint">;
  bot?: SingleBooleanChoiceArg<"bot">;
  owner?: SingleBooleanChoiceArg<"owner">;
  feedback?: SingleBooleanChoiceArg<"feedback">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMessageLiom__RenderFunc(props: {
  variants: PlasmicMessageLiom__VariantsArgs;
  args: PlasmicMessageLiom__ArgsType;
  overrides: PlasmicMessageLiom__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          inApp: false,
          error2: false,
          ad: {}
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pazireshAnswer",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pazireshAnswer
      },
      {
        path: "liomAnswer",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.liomAnswer
      },
      {
        path: "loadingMessage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loadingMessage
      },
      {
        path: "endMessege",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.endMessege
      },
      {
        path: "hint",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hint
      },
      {
        path: "bot",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bot
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "liomAnswer", "liomAnswer") ? "clear" : undefined
      },
      {
        path: "buttonLiom3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "liomAnswer", "liomAnswer") ? "clear" : []
      },
      {
        path: "buttonLiom4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "liomAnswer", "liomAnswer") ? "clear" : undefined
      },
      {
        path: "owner",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.owner
      },
      {
        path: "buttonLiom2.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom4.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "feedback",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.feedback
      },
      {
        path: "unLike2.unLike",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "like2.like",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "bot", "bot") ? "clear" : undefined
      },
      {
        path: "buttonLiom.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "bot", "bot") ? false : false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        plasmic_hamdast_sdk_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootbot]: hasVariant($state, "bot", "bot"),
          [sty.rootendMessege]: hasVariant($state, "endMessege", "endMessege"),
          [sty.rootendMessege_bot]:
            hasVariant($state, "bot", "bot") &&
            hasVariant($state, "endMessege", "endMessege"),
          [sty.rootendMessege_hint]:
            hasVariant($state, "hint", "hint") &&
            hasVariant($state, "endMessege", "endMessege"),
          [sty.rootendMessege_pazireshAnswer]:
            hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
            hasVariant($state, "endMessege", "endMessege"),
          [sty.rootfeedback]: hasVariant($state, "feedback", "feedback"),
          [sty.rootfeedback_owner]:
            hasVariant($state, "feedback", "feedback") &&
            hasVariant($state, "owner", "owner"),
          [sty.rootfeedback_pazireshAnswer]:
            hasVariant($state, "feedback", "feedback") &&
            hasVariant($state, "pazireshAnswer", "pazireshAnswer"),
          [sty.roothint]: hasVariant($state, "hint", "hint"),
          [sty.rootliomAnswer]: hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootliomAnswer_bot]:
            hasVariant($state, "bot", "bot") &&
            hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootliomAnswer_endMessege]:
            hasVariant($state, "endMessege", "endMessege") &&
            hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootliomAnswer_feedback_pazireshAnswer]:
            hasVariant($state, "feedback", "feedback") &&
            hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
            hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootliomAnswer_hint]:
            hasVariant($state, "hint", "hint") &&
            hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootliomAnswer_loadingMessage]:
            hasVariant($state, "liomAnswer", "liomAnswer") &&
            hasVariant($state, "loadingMessage", "loadingMessage"),
          [sty.rootliomAnswer_loadingMessage_feedback_pazireshAnswer]:
            hasVariant($state, "feedback", "feedback") &&
            hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
            hasVariant($state, "liomAnswer", "liomAnswer") &&
            hasVariant($state, "loadingMessage", "loadingMessage"),
          [sty.rootliomAnswer_loadingMessage_pazireshAnswer]:
            hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
            hasVariant($state, "liomAnswer", "liomAnswer") &&
            hasVariant($state, "loadingMessage", "loadingMessage"),
          [sty.rootliomAnswer_pazireshAnswer]:
            hasVariant($state, "liomAnswer", "liomAnswer") &&
            hasVariant($state, "pazireshAnswer", "pazireshAnswer"),
          [sty.rootloadingMessage]: hasVariant(
            $state,
            "loadingMessage",
            "loadingMessage"
          ),
          [sty.rootloadingMessage_endMessege]:
            hasVariant($state, "endMessege", "endMessege") &&
            hasVariant($state, "loadingMessage", "loadingMessage"),
          [sty.rootowner]: hasVariant($state, "owner", "owner"),
          [sty.rootpazireshAnswer]: hasVariant(
            $state,
            "pazireshAnswer",
            "pazireshAnswer"
          )
        }
      )}
    >
      {(
        hasVariant($state, "loadingMessage", "loadingMessage")
          ? true
          : hasVariant($state, "liomAnswer", "liomAnswer")
          ? (() => {
              try {
                return $props.error2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : hasVariant($state, "pazireshAnswer", "pazireshAnswer")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__ega5V, {
            [sty.freeBoxbot__ega5VxxwGw]: hasVariant($state, "bot", "bot"),
            [sty.freeBoxendMessege__ega5VTjzqg]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxliomAnswer__ega5V6WM5Z]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            ),
            [sty.freeBoxliomAnswer_loadingMessage__ega5V6WM5ZNjKFm]:
              hasVariant($state, "liomAnswer", "liomAnswer") &&
              hasVariant($state, "loadingMessage", "loadingMessage"),
            [sty.freeBoxloadingMessage__ega5VNjKFm]: hasVariant(
              $state,
              "loadingMessage",
              "loadingMessage"
            ),
            [sty.freeBoxloadingMessage_pazireshAnswer__ega5VNjKFmYPoRs]:
              hasVariant($state, "loadingMessage", "loadingMessage") &&
              hasVariant($state, "pazireshAnswer", "pazireshAnswer"),
            [sty.freeBoxpazireshAnswer__ega5VyPoRs]: hasVariant(
              $state,
              "pazireshAnswer",
              "pazireshAnswer"
            )
          })}
        >
          <AntdPopover
            data-plasmic-name={"popover"}
            data-plasmic-override={overrides.popover}
            arrow={true}
            className={classNames("__wab_instance", sty.popover, {
              [sty.popoverliomAnswer]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              )
            })}
            content={
              <div
                className={classNames(projectcss.all, sty.freeBox__gyJtn, {
                  [sty.freeBoxliomAnswer__gyJtn6WM5Z]: hasVariant(
                    $state,
                    "liomAnswer",
                    "liomAnswer"
                  )
                })}
              >
                <ButtonLiom
                  data-plasmic-name={"buttonLiom2"}
                  data-plasmic-override={overrides.buttonLiom2}
                  className={classNames("__wab_instance", sty.buttonLiom2, {
                    [sty.buttonLiom2liomAnswer]: hasVariant(
                      $state,
                      "liomAnswer",
                      "liomAnswer"
                    )
                  })}
                  color={generateStateValueProp($state, [
                    "buttonLiom2",
                    "color"
                  ])}
                  endIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant($state, "liomAnswer", "liomAnswer")
                          ? Icon170Icon
                          : Icon11Icon
                      }
                      className={classNames(projectcss.all, sty.svg__tadFy, {
                        [sty.svgliomAnswer__tadFy6WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      })}
                      role={"img"}
                    />
                  }
                  load={generateStateValueProp($state, ["buttonLiom2", "load"])}
                  onClick={args.resend}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom2",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom2",
                        "load"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={
                    hasVariant($state, "liomAnswer", "liomAnswer")
                      ? true
                      : undefined
                  }
                  size={
                    hasVariant($state, "liomAnswer", "liomAnswer")
                      ? "compact"
                      : undefined
                  }
                  startIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant($state, "liomAnswer", "liomAnswer")
                          ? Icon170Icon
                          : CheckSvgIcon
                      }
                      className={classNames(projectcss.all, sty.svg__lfWl, {
                        [sty.svgliomAnswer__lfWl6WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      })}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gYrIx,
                      {
                        [sty.textliomAnswer__gYrIx6WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "liomAnswer", "liomAnswer")
                      ? "\u0627\u0631\u0633\u0627\u0644 \u0645\u062c\u062f\u062f   "
                      : "Button"}
                  </div>
                </ButtonLiom>
                <Embed
                  className={classNames(
                    "__wab_instance",
                    sty.embedHtml___0Okd9,
                    {
                      [sty.embedHtmlliomAnswer___0Okd96WM5Z]: hasVariant(
                        $state,
                        "liomAnswer",
                        "liomAnswer"
                      )
                    }
                  )}
                  code={
                    hasVariant($state, "liomAnswer", "liomAnswer")
                      ? "<hr></hr>"
                      : "<div>Paste your embed code via the right sidebar</div>"
                  }
                />

                <ButtonLiom
                  data-plasmic-name={"buttonLiom4"}
                  data-plasmic-override={overrides.buttonLiom4}
                  className={classNames("__wab_instance", sty.buttonLiom4, {
                    [sty.buttonLiom4liomAnswer]: hasVariant(
                      $state,
                      "liomAnswer",
                      "liomAnswer"
                    )
                  })}
                  color={generateStateValueProp($state, [
                    "buttonLiom4",
                    "color"
                  ])}
                  endIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant($state, "liomAnswer", "liomAnswer")
                          ? Icon171Icon
                          : Icon11Icon
                      }
                      className={classNames(projectcss.all, sty.svg__edEi7, {
                        [sty.svgliomAnswer__edEi76WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      })}
                      role={"img"}
                    />
                  }
                  load={generateStateValueProp($state, ["buttonLiom4", "load"])}
                  onClick={args.credit}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom4",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom4",
                        "load"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={
                    hasVariant($state, "liomAnswer", "liomAnswer")
                      ? true
                      : undefined
                  }
                  size={
                    hasVariant($state, "liomAnswer", "liomAnswer")
                      ? "compact"
                      : undefined
                  }
                  startIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant($state, "liomAnswer", "liomAnswer")
                          ? Icon170Icon
                          : CheckSvgIcon
                      }
                      className={classNames(projectcss.all, sty.svg__urgB5, {
                        [sty.svgliomAnswer__urgB56WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      })}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e5X8Q,
                      {
                        [sty.textliomAnswer__e5X8Q6WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "liomAnswer", "liomAnswer")
                      ? "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0627\u0639\u062a\u0628\u0627\u0631"
                      : "Button"}
                  </div>
                </ButtonLiom>
                <Embed
                  className={classNames(
                    "__wab_instance",
                    sty.embedHtml___0B8N6,
                    {
                      [sty.embedHtmlliomAnswer___0B8N66WM5Z]: hasVariant(
                        $state,
                        "liomAnswer",
                        "liomAnswer"
                      )
                    }
                  )}
                  code={
                    hasVariant($state, "liomAnswer", "liomAnswer")
                      ? "<hr></hr>"
                      : "<div>Paste your embed code via the right sidebar</div>"
                  }
                />

                <ButtonLiom
                  data-plasmic-name={"buttonLiom3"}
                  data-plasmic-override={overrides.buttonLiom3}
                  className={classNames("__wab_instance", sty.buttonLiom3, {
                    [sty.buttonLiom3liomAnswer]: hasVariant(
                      $state,
                      "liomAnswer",
                      "liomAnswer"
                    )
                  })}
                  color={generateStateValueProp($state, [
                    "buttonLiom3",
                    "color"
                  ])}
                  endIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant($state, "liomAnswer", "liomAnswer")
                          ? Icon169Icon
                          : Icon11Icon
                      }
                      className={classNames(projectcss.all, sty.svg__cEcUn, {
                        [sty.svgliomAnswer__cEcUn6WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      })}
                      role={"img"}
                    />
                  }
                  load={generateStateValueProp($state, ["buttonLiom3", "load"])}
                  onClick={args._delete}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom3",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom3",
                        "load"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  showEndIcon={
                    hasVariant($state, "liomAnswer", "liomAnswer")
                      ? true
                      : undefined
                  }
                  size={
                    hasVariant($state, "liomAnswer", "liomAnswer")
                      ? "compact"
                      : undefined
                  }
                  startIcon={
                    <PlasmicIcon__
                      PlasmicIconType={
                        hasVariant($state, "liomAnswer", "liomAnswer")
                          ? Icon170Icon
                          : CheckSvgIcon
                      }
                      className={classNames(projectcss.all, sty.svg__hVaYe, {
                        [sty.svgliomAnswer__hVaYe6WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      })}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pryxH,
                      {
                        [sty.textliomAnswer__pryxH6WM5Z]: hasVariant(
                          $state,
                          "liomAnswer",
                          "liomAnswer"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "liomAnswer", "liomAnswer")
                      ? "\u062d\u0630\u0641                          "
                      : "Button"}
                  </div>
                </ButtonLiom>
              </div>
            }
            contentText={"Popover contents"}
            defaultOpen={false}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              plasmic_hamdast_sdk_css.plasmic_tokens
            )}
            mouseEnterDelay={0}
            mouseLeaveDelay={0}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["popover", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["popover", "open"])}
            placement={"bottomRight"}
            popoverScopeClassName={sty["popover__popover"]}
            title={null}
            trigger={"click"}
          >
            <Icon168Icon
              className={classNames(projectcss.all, sty.svg__kvgN3, {
                [sty.svgliomAnswer__kvgN36WM5Z]: hasVariant(
                  $state,
                  "liomAnswer",
                  "liomAnswer"
                )
              })}
              role={"img"}
            />
          </AntdPopover>
        </div>
      ) : null}
      <div
        className={classNames(
          projectcss.all,
          sty.freeBox___7TlWy,
          hasVariant($state, "endMessege", "endMessege")
            ? "text-box"
            : hasVariant($state, "liomAnswer", "liomAnswer")
            ? ``
            : hasVariant($state, "pazireshAnswer", "pazireshAnswer")
            ? ``
            : "text-box",
          {
            [sty.freeBoxbot___7TlWyxxwGw]: hasVariant($state, "bot", "bot"),
            [sty.freeBoxendMessege___7TlWyTjzqg]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxendMessege_bot___7TlWyTjzqgXxwGw]:
              hasVariant($state, "bot", "bot") &&
              hasVariant($state, "endMessege", "endMessege"),
            [sty.freeBoxendMessege_hint___7TlWyTjzqgETAel]:
              hasVariant($state, "hint", "hint") &&
              hasVariant($state, "endMessege", "endMessege"),
            [sty.freeBoxfeedback___7TlWymfRru]: hasVariant(
              $state,
              "feedback",
              "feedback"
            ),
            [sty.freeBoxhint___7TlWyeTAel]: hasVariant($state, "hint", "hint"),
            [sty.freeBoxliomAnswer___7TlWy6WM5Z]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            ),
            [sty.freeBoxliomAnswer_bot___7TlWy6WM5ZXxwGw]:
              hasVariant($state, "bot", "bot") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxliomAnswer_hint___7TlWy6WM5ZETAel]:
              hasVariant($state, "hint", "hint") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxliomAnswer_loadingMessage___7TlWy6WM5ZNjKFm]:
              hasVariant($state, "liomAnswer", "liomAnswer") &&
              hasVariant($state, "loadingMessage", "loadingMessage"),
            [sty.freeBoxliomAnswer_pazireshAnswer___7TlWy6WM5ZYPoRs]:
              hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxloadingMessage___7TlWyNjKFm]: hasVariant(
              $state,
              "loadingMessage",
              "loadingMessage"
            ),
            [sty.freeBoxloadingMessage_bot___7TlWyNjKFmXxwGw]:
              hasVariant($state, "bot", "bot") &&
              hasVariant($state, "loadingMessage", "loadingMessage"),
            [sty.freeBoxloadingMessage_endMessege___7TlWyNjKFmTjzqg]:
              hasVariant($state, "loadingMessage", "loadingMessage") &&
              hasVariant($state, "endMessege", "endMessege"),
            [sty.freeBoxowner___7TlWyxJPes]: hasVariant(
              $state,
              "owner",
              "owner"
            ),
            [sty.freeBoxowner_bot___7TlWyxJPesXxwGw]:
              hasVariant($state, "bot", "bot") &&
              hasVariant($state, "owner", "owner"),
            [sty.freeBoxpazireshAnswer___7TlWyyPoRs]: hasVariant(
              $state,
              "pazireshAnswer",
              "pazireshAnswer"
            )
          }
        )}
        style={
          hasVariant($state, "endMessege", "endMessege")
            ? {
                display: "inline-block",
                width: "auto",
                height: "auto",
                "overflow-wrap": " break-word",
                transition: "all 0.3s ease"
              }
            : {
                display: "flex",
                width: "auto",
                height: "auto",
                "overflow-wrap": " break-word"
              }
        }
      >
        <div
          className={classNames(
            projectcss.all,
            sty.freeBox__fCi1Q,
            "text-box",
            {
              [sty.freeBoxbot__fCi1QxxwGw]: hasVariant($state, "bot", "bot"),
              [sty.freeBoxendMessege__fCi1Qtjzqg]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.freeBoxfeedback__fCi1QmfRru]: hasVariant(
                $state,
                "feedback",
                "feedback"
              ),
              [sty.freeBoxfeedback_owner__fCi1QmfRruXJPes]:
                hasVariant($state, "owner", "owner") &&
                hasVariant($state, "feedback", "feedback"),
              [sty.freeBoxhint__fCi1QeTAel]: hasVariant($state, "hint", "hint"),
              [sty.freeBoxliomAnswer__fCi1Q6WM5Z]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              ),
              [sty.freeBoxloadingMessage__fCi1QNjKFm]: hasVariant(
                $state,
                "loadingMessage",
                "loadingMessage"
              ),
              [sty.freeBoxowner__fCi1QxJPes]: hasVariant(
                $state,
                "owner",
                "owner"
              ),
              [sty.freeBoxpazireshAnswer__fCi1QyPoRs]: hasVariant(
                $state,
                "pazireshAnswer",
                "pazireshAnswer"
              )
            }
          )}
          style={{
            display: "inline-block",
            width: "auto",
            height: "auto",
            "overflow-wrap": " break-word"
          }}
        >
          {renderPlasmicSlot({
            defaultContents: "             ",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenbot]: hasVariant($state, "bot", "bot"),
              [sty.slotTargetChildrenendMessege]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.slotTargetChildrenendMessege_global_theme_dark]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant(globalVariants, "theme", "dark"),
              [sty.slotTargetChildrenendMessege_global_theme_dark_hint]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "hint", "hint") &&
                hasVariant(globalVariants, "theme", "dark"),
              [sty.slotTargetChildrenendMessege_hint]:
                hasVariant($state, "hint", "hint") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.slotTargetChildrenendMessege_pazireshAnswer]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.slotTargetChildrenfeedback]: hasVariant(
                $state,
                "feedback",
                "feedback"
              ),
              [sty.slotTargetChildrenglobal_theme_dark_hint]:
                hasVariant($state, "hint", "hint") &&
                hasVariant(globalVariants, "theme", "dark"),
              [sty.slotTargetChildrenhint]: hasVariant($state, "hint", "hint"),
              [sty.slotTargetChildrenliomAnswer]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              ),
              [sty.slotTargetChildrenloadingMessage]: hasVariant(
                $state,
                "loadingMessage",
                "loadingMessage"
              ),
              [sty.slotTargetChildrenloadingMessage_endMessege]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "loadingMessage", "loadingMessage"),
              [sty.slotTargetChildrenloadingMessage_endMessege_pazireshAnswer]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "loadingMessage", "loadingMessage") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.slotTargetChildrenloadingMessage_pazireshAnswer]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "loadingMessage", "loadingMessage"),
              [sty.slotTargetChildrenowner]: hasVariant(
                $state,
                "owner",
                "owner"
              ),
              [sty.slotTargetChildrenowner_bot]:
                hasVariant($state, "owner", "owner") &&
                hasVariant($state, "bot", "bot"),
              [sty.slotTargetChildrenpazireshAnswer]: hasVariant(
                $state,
                "pazireshAnswer",
                "pazireshAnswer"
              )
            })
          })}
          <LoadingCompopnentGray
            data-plasmic-name={"loadingCompopnentGray"}
            data-plasmic-override={overrides.loadingCompopnentGray}
            className={classNames("__wab_instance", sty.loadingCompopnentGray, {
              [sty.loadingCompopnentGraybot]: hasVariant($state, "bot", "bot"),
              [sty.loadingCompopnentGrayendMessege]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.loadingCompopnentGrayliomAnswer_endMessege]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "liomAnswer", "liomAnswer"),
              [sty.loadingCompopnentGrayliomAnswer_loadingMessage_endMessege]:
                hasVariant($state, "loadingMessage", "loadingMessage") &&
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "liomAnswer", "liomAnswer"),
              [sty.loadingCompopnentGrayloadingMessage]: hasVariant(
                $state,
                "loadingMessage",
                "loadingMessage"
              ),
              [sty.loadingCompopnentGrayloadingMessage_endMessege]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "loadingMessage", "loadingMessage")
            })}
          />

          {(
            hasVariant($state, "bot", "bot")
              ? (() => {
                  try {
                    return (
                      ($props.ad?.action ? true : false) &&
                      typeof window !== "undefined" &&
                      window.FlutterChannel &&
                      typeof window.FlutterChannel.postMessage === "function"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___8EPkS, {
                [sty.freeBoxbot___8EPkSxxwGw]: hasVariant($state, "bot", "bot")
              })}
              id={hasVariant($state, "bot", "bot") ? "ad" : undefined}
              onClick={async event => {
                const $steps = {};

                $steps["updateButtonLiomLoad"] = false
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["buttonLiom", "load"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButtonLiomLoad"] != null &&
                  typeof $steps["updateButtonLiomLoad"] === "object" &&
                  typeof $steps["updateButtonLiomLoad"].then === "function"
                ) {
                  $steps["updateButtonLiomLoad"] = await $steps[
                    "updateButtonLiomLoad"
                  ];
                }

                $steps["link"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://n8n.staas.ir/webhook/tools/selfCare/link",
                          undefined,
                          (() => {
                            try {
                              return {
                                Authorization: $props.token,
                                type: $props.ad.action
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["link"] != null &&
                  typeof $steps["link"] === "object" &&
                  typeof $steps["link"].then === "function"
                ) {
                  $steps["link"] = await $steps["link"];
                }

                $steps["runCode"] =
                  $steps.link?.data?.success == true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return window.FlutterChannel.postMessage(
                              $steps.link.data.result
                            );
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["invokeGlobalAction"] =
                  $steps.link?.data?.success == false
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            "\u0645\u062a\u0627\u0633\u0641\u0627\u0646\u0647 \u0645\u0634\u06a9\u0644\u06cc \u0631\u062e \u062f\u0627\u062f\u0647 \u0627\u0633\u062a. \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateButtonLiomLoad2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["buttonLiom", "load"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateButtonLiomLoad2"] != null &&
                  typeof $steps["updateButtonLiomLoad2"] === "object" &&
                  typeof $steps["updateButtonLiomLoad2"].then === "function"
                ) {
                  $steps["updateButtonLiomLoad2"] = await $steps[
                    "updateButtonLiomLoad2"
                  ];
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0PCmJ,
                  {
                    [sty.textbot___0PCmJxxwGw]: hasVariant($state, "bot", "bot")
                  }
                )}
              >
                {hasVariant($state, "bot", "bot") ? "liom" : "Enter some text"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kXs6S,
                  {
                    [sty.textbot__kXs6SxxwGw]: hasVariant($state, "bot", "bot")
                  }
                )}
              >
                {hasVariant($state, "bot", "bot") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.ad.cta;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  "Enter some text"
                )}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j71MO,
                  {
                    [sty.textbot__j71MOxxwGw]: hasVariant($state, "bot", "bot")
                  }
                )}
              >
                {hasVariant($state, "bot", "bot") ? "" : "Enter some text"}
              </div>
              <ButtonLiom
                data-plasmic-name={"buttonLiom"}
                data-plasmic-override={overrides.buttonLiom}
                className={classNames("__wab_instance", sty.buttonLiom, {
                  [sty.buttonLiombot]: hasVariant($state, "bot", "bot")
                })}
                color={generateStateValueProp($state, ["buttonLiom", "color"])}
                load={generateStateValueProp($state, ["buttonLiom", "load"])}
                onClick={async event => {
                  const $steps = {};
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={hasVariant($state, "bot", "bot") ? "compact" : undefined}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Jm,
                    {
                      [sty.textbot___0JmXxwGw]: hasVariant($state, "bot", "bot")
                    }
                  )}
                >
                  {hasVariant($state, "bot", "bot") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.ad.btnText;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Button";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    "Button"
                  )}
                </div>
              </ButtonLiom>
            </div>
          ) : null}
        </div>
        {(
          hasVariant($state, "endMessege", "endMessege")
            ? true
            : hasVariant($state, "liomAnswer", "liomAnswer")
            ? true
            : hasVariant($state, "pazireshAnswer", "pazireshAnswer")
            ? true
            : false
        ) ? (
          <Icon109Icon
            className={classNames(projectcss.all, sty.svg__lOael, {
              [sty.svgendMessege__lOaeltjzqg]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.svgendMessege_bot__lOaeltjzqgXxwGw]:
                hasVariant($state, "bot", "bot") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.svgendMessege_hint__lOaeltjzqgETAel]:
                hasVariant($state, "hint", "hint") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.svgendMessege_pazireshAnswer__lOaeltjzqgYPoRs]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "pazireshAnswer", "pazireshAnswer"),
              [sty.svghint__lOaeLeTAel]: hasVariant($state, "hint", "hint"),
              [sty.svgliomAnswer__lOael6WM5Z]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              ),
              [sty.svgliomAnswer_pazireshAnswer__lOael6WM5ZYPoRs]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "liomAnswer", "liomAnswer"),
              [sty.svgloadingMessage_endMessege__lOaelNjKFmTjzqg]:
                hasVariant($state, "loadingMessage", "loadingMessage") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.svgloadingMessage_pazireshAnswer__lOaelNjKFmYPoRs]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "loadingMessage", "loadingMessage"),
              [sty.svgpazireshAnswer__lOaeLyPoRs]: hasVariant(
                $state,
                "pazireshAnswer",
                "pazireshAnswer"
              )
            })}
            role={"img"}
          />
        ) : null}
        <div
          className={classNames(projectcss.all, sty.freeBox__q3Toq, {
            [sty.freeBoxendMessege__q3ToqTjzqg]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxhint__q3ToqeTAel]: hasVariant($state, "hint", "hint"),
            [sty.freeBoxliomAnswer__q3Toq6WM5Z]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            ),
            [sty.freeBoxliomAnswer_hint__q3Toq6WM5ZETAel]:
              hasVariant($state, "hint", "hint") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxliomAnswer_pazireshAnswer__q3Toq6WM5ZYPoRs]:
              hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxloadingMessage__q3ToqNjKFm]: hasVariant(
              $state,
              "loadingMessage",
              "loadingMessage"
            ),
            [sty.freeBoxpazireshAnswer__q3ToqyPoRs]: hasVariant(
              $state,
              "pazireshAnswer",
              "pazireshAnswer"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <Icon119Icon
                className={classNames(projectcss.all, sty.svg__l4GC)}
                role={"img"}
              />
            ),

            value: args.slot
          })}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__z0D5, {
            [sty.freeBoxendMessege__z0D5Tjzqg]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxfeedback__z0D5MfRru]: hasVariant(
              $state,
              "feedback",
              "feedback"
            ),
            [sty.freeBoxliomAnswer__z0D56WM5Z]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            ),
            [sty.freeBoxliomAnswer_loadingMessage__z0D56WM5ZNjKFm]:
              hasVariant($state, "liomAnswer", "liomAnswer") &&
              hasVariant($state, "loadingMessage", "loadingMessage"),
            [sty.freeBoxloadingMessage__z0D5NjKFm]: hasVariant(
              $state,
              "loadingMessage",
              "loadingMessage"
            ),
            [sty.freeBoxloadingMessage_pazireshAnswer__z0D5NjKFmYPoRs]:
              hasVariant($state, "loadingMessage", "loadingMessage") &&
              hasVariant($state, "pazireshAnswer", "pazireshAnswer"),
            [sty.freeBoxpazireshAnswer__z0D5YPoRs]: hasVariant(
              $state,
              "pazireshAnswer",
              "pazireshAnswer"
            )
          })}
        >
          <svg
            className={classNames(projectcss.all, sty.svg__wa3Pn)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ha5Uh
            )}
          >
            {"Enter some text"}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__ycWkl, {
            [sty.freeBoxendMessege_feedback__ycWklTjzqgMfRru]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "endMessege", "endMessege"),
            [sty.freeBoxfeedback__ycWklmfRru]: hasVariant(
              $state,
              "feedback",
              "feedback"
            ),
            [sty.freeBoxfeedback_bot__ycWklmfRruXxwGw]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "bot", "bot"),
            [sty.freeBoxfeedback_owner__ycWklmfRruXJPes]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "owner", "owner"),
            [sty.freeBoxfeedback_pazireshAnswer__ycWklmfRruYPoRs]:
              hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
              hasVariant($state, "feedback", "feedback"),
            [sty.freeBoxhint_feedback__ycWkleTAelMfRru]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "hint", "hint"),
            [sty.freeBoxhint_feedback_bot__ycWkleTAelMfRruXxwGw]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "bot", "bot") &&
              hasVariant($state, "hint", "hint"),
            [sty.freeBoxliomAnswer_feedback__ycWkl6WM5ZMfRru]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxliomAnswer_feedback_pazireshAnswer__ycWkl6WM5ZMfRruYPoRs]:
              hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxloadingMessage_feedback__ycWklNjKFmMfRru]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "loadingMessage", "loadingMessage")
          })}
        >
          {(
            hasVariant($state, "feedback", "feedback")
              ? (() => {
                  try {
                    return $state.like2.like != true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : false
          ) ? (
            <UnLike
              data-plasmic-name={"unLike2"}
              data-plasmic-override={overrides.unLike2}
              className={classNames("__wab_instance", sty.unLike2, {
                [sty.unLike2feedback]: hasVariant(
                  $state,
                  "feedback",
                  "feedback"
                )
              })}
              feedbackData={
                hasVariant($state, "feedback", "feedback")
                  ? (() => {
                      try {
                        return $props.feedbackData;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $props.feedbackData;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
              onClick={args.unLike}
              onUnLikeChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["unLike2", "unLike"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              unLike={generateStateValueProp($state, ["unLike2", "unLike"])}
            />
          ) : null}
          {(
            hasVariant($state, "feedback", "feedback")
              ? (() => {
                  try {
                    return $state.unLike2.unLike != true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : false
          ) ? (
            <Like
              data-plasmic-name={"like2"}
              data-plasmic-override={overrides.like2}
              className={classNames("__wab_instance", sty.like2, {
                [sty.like2feedback]: hasVariant($state, "feedback", "feedback"),
                [sty.like2feedback_pazireshAnswer]:
                  hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                  hasVariant($state, "feedback", "feedback")
              })}
              feedbackData={
                hasVariant($state, "feedback", "feedback")
                  ? (() => {
                      try {
                        return $props.feedbackData;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $props.feedbackData;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
              like={generateStateValueProp($state, ["like2", "like"])}
              onClick={args.like}
              onLikeChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["like2", "like"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          ) : null}
          <Icon200Icon
            className={classNames(projectcss.all, sty.svg__lfw4N, {
              [sty.svgfeedback__lfw4NmfRru]: hasVariant(
                $state,
                "feedback",
                "feedback"
              )
            })}
            onClick={args.copy}
            role={"img"}
          />
        </div>
      </div>
      {(() => {
        try {
          return $props.inApp;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__cZks, {
            [sty.freeBoxendMessege__cZksTjzqg]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxliomAnswer__cZks6WM5Z]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            )
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgendMessege]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.imgliomAnswer]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              ),
              [sty.imgpazireshAnswer]: hasVariant(
                $state,
                "pazireshAnswer",
                "pazireshAnswer"
              )
            })}
            displayHeight={"30px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"30px"}
            height={
              hasVariant($state, "endMessege", "endMessege") ? "30" : undefined
            }
            loading={"lazy"}
            src={
              hasVariant($state, "endMessege", "endMessege")
                ? (() => {
                    try {
                      return "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            width={
              hasVariant($state, "endMessege", "endMessege") ? "30" : undefined
            }
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "popover",
    "buttonLiom2",
    "buttonLiom4",
    "buttonLiom3",
    "loadingCompopnentGray",
    "buttonLiom",
    "unLike2",
    "like2",
    "img"
  ],
  popover: ["popover", "buttonLiom2", "buttonLiom4", "buttonLiom3"],
  buttonLiom2: ["buttonLiom2"],
  buttonLiom4: ["buttonLiom4"],
  buttonLiom3: ["buttonLiom3"],
  loadingCompopnentGray: ["loadingCompopnentGray"],
  buttonLiom: ["buttonLiom"],
  unLike2: ["unLike2"],
  like2: ["like2"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  popover: typeof AntdPopover;
  buttonLiom2: typeof ButtonLiom;
  buttonLiom4: typeof ButtonLiom;
  buttonLiom3: typeof ButtonLiom;
  loadingCompopnentGray: typeof LoadingCompopnentGray;
  buttonLiom: typeof ButtonLiom;
  unLike2: typeof UnLike;
  like2: typeof Like;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMessageLiom__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMessageLiom__VariantsArgs;
    args?: PlasmicMessageLiom__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMessageLiom__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMessageLiom__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMessageLiom__ArgProps,
          internalVariantPropNames: PlasmicMessageLiom__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMessageLiom__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMessageLiom";
  } else {
    func.displayName = `PlasmicMessageLiom.${nodeName}`;
  }
  return func;
}

export const PlasmicMessageLiom = Object.assign(
  // Top-level PlasmicMessageLiom renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    popover: makeNodeComponent("popover"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    buttonLiom4: makeNodeComponent("buttonLiom4"),
    buttonLiom3: makeNodeComponent("buttonLiom3"),
    loadingCompopnentGray: makeNodeComponent("loadingCompopnentGray"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    unLike2: makeNodeComponent("unLike2"),
    like2: makeNodeComponent("like2"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicMessageLiom
    internalVariantProps: PlasmicMessageLiom__VariantProps,
    internalArgProps: PlasmicMessageLiom__ArgProps
  }
);

export default PlasmicMessageLiom;
/* prettier-ignore-end */
