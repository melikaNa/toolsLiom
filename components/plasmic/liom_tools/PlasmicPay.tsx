/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: hvJ9-klQN7Ze

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import Subscription2 from "../../Subscription2"; // plasmic-import: Kh0l77Kj0PNL/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicPay.module.css"; // plasmic-import: hvJ9-klQN7Ze/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon

createPlasmicElementProxy;

export type PlasmicPay__VariantMembers = {};
export type PlasmicPay__VariantsArgs = {};
type VariantPropType = keyof PlasmicPay__VariantsArgs;
export const PlasmicPay__VariantProps = new Array<VariantPropType>();

export type PlasmicPay__ArgsType = {};
type ArgPropType = keyof PlasmicPay__ArgsType;
export const PlasmicPay__ArgProps = new Array<ArgPropType>();

export type PlasmicPay__OverridesType = {
  root?: Flex__<"div">;
  subscription2?: Flex__<typeof Subscription2>;
  section?: Flex__<"section">;
  button?: Flex__<typeof ButtonLiom>;
  favicon?: Flex__<typeof Embed>;
};

export interface DefaultPayProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPay__RenderFunc(props: {
  variants: PlasmicPay__VariantsArgs;
  args: PlasmicPay__ArgsType;
  overrides: PlasmicPay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "subscription2.clickitem",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "subscription2.title",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "subscription2.price",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 120000
      },
      {
        path: "subscription2.discount",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "50%"
      },
      {
        path: "subscription2.fullprice",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "loadingBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPay.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPay.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPay.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_hamdast_sdk,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__cT2G)}>
            <div className={classNames(projectcss.all, sty.freeBox__q367Q)}>
              <div className={classNames(projectcss.all, sty.freeBox__g86X)}>
                <div className={classNames(projectcss.all, sty.freeBox__lWdK8)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ysP4R
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-64O07uLgKimi)" }}
                        >
                          {"\u0647\u062f\u06cc\u0647 \u0648\u06cc\u0698\u0647"}
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-64O07uLgKimi)" }}
                        >
                          {"\u0647\u062f\u06cc\u0647 \u0648\u06cc\u0698\u0647"}
                        </span>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wO70A)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eJMdq
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "\u062a\u062e\u0641\u06cc\u0641 48%"
                        : "\u062a\u062e\u0641\u06cc\u0641 48%"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Bh0
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "var(--token-64O07uLgKimi)" }}
                        >
                          {"\u0645\u062e\u0635\u0648\u0635 \u0634\u0645\u0627"}
                        </span>
                      </React.Fragment>
                    ) : (
                      "\u0645\u062e\u0635\u0648\u0635 \u0634\u0645\u0627"
                    )}
                  </div>
                  <Subscription2
                    data-plasmic-name={"subscription2"}
                    data-plasmic-override={overrides.subscription2}
                    className={classNames("__wab_instance", sty.subscription2)}
                    clickitem={generateStateValueProp($state, [
                      "subscription2",
                      "clickitem"
                    ])}
                    discount={generateStateValueProp($state, [
                      "subscription2",
                      "discount"
                    ])}
                    fullprice={generateStateValueProp($state, [
                      "subscription2",
                      "fullprice"
                    ])}
                    onClickitemChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription2",
                        "clickitem"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onDiscountChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription2",
                        "discount"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onFullpriceChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription2",
                        "fullprice"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onPriceChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription2",
                        "price"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onTitleChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "subscription2",
                        "title"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    price={generateStateValueProp($state, [
                      "subscription2",
                      "price"
                    ])}
                    title={generateStateValueProp($state, [
                      "subscription2",
                      "title"
                    ])}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kfp6C)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6QeGj
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return 150000;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "120000";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1GAc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return 72000 + " تومان ";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "40000 \u062a\u0648\u0645\u0627\u0646";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___40Ce6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cQq8O
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return "48%";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "50%";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </div>
                  </Subscription2>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__diITz
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "var(--token-kjnzcds1FoVY)" }}
                  >
                    {
                      "\u0628\u0627 \u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647 \u0642\u0627\u0628\u0644\u06cc\u062a \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0628\u0631\u0627\u062a \u0641\u0639\u0627\u0644 \u0645\u06cc\u0634\u0647 "
                    }
                  </span>
                </React.Fragment>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__slOek)}>
                <div className={classNames(projectcss.all, sty.freeBox__pcRfB)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ujgKv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"80px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_tools/images/image59.png",
                      fullWidth: 450,
                      fullHeight: 450,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7Xfra)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4YRqq
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "var(--token-IdKt2w2aRFZS)"
                          }}
                        >
                          {
                            "\u062f\u06cc\u06af\u0647 \u063a\u0627\u0641\u0644\u06af\u06cc\u0631 \u0646\u0634\u0648!"
                          }
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "var(--token-IdKt2w2aRFZS)"
                          }}
                        >
                          {"\u062f\u06cc\u06af\u0647 "}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "var(--token-mIaQ7cfg3AGq)"
                          }}
                        >
                          {"\u063a\u0627\u0641\u0644\u06af\u06cc\u0631 "}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "var(--token-IdKt2w2aRFZS)"
                          }}
                        >
                          {"\u0646\u0634\u0648!"}
                        </span>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__z1VHi
                    )}
                  >
                    {
                      "\u06cc\u0647\u0648 \u067e\u0631\u06cc\u0648\u062f \u0634\u062f\u0646 \u0648 \u0622\u0645\u0627\u062f\u0647 \u0646\u0628\u0648\u062f\u0646 \u062a\u0645\u0648\u0645 \u0634\u062f. \u0628\u0627 \u067e\u06cc\u0627\u0645\u06a9 \u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0628\u0631\u0627\u062a \u0627\u0631\u0633\u0627\u0644 \u0645\u06cc\u0634\u0647 \u0686\u0631\u062e\u0647\u200c\u062a \u0647\u0645\u06cc\u0634\u0647 \u06cc\u0627\u062f\u062a \u0645\u06cc\u200c\u0645\u0648\u0646\u0647."
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__aAnLz)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__eActP)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__dmEc7)}>
                <div className={classNames(projectcss.all, sty.freeBox__lTbb5)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ztdBp
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700, color: "#8254C6" }}
                        >
                          {
                            "\u0631\u0627\u0628\u0637\u0647\u200c\u0647\u0627\u062a \u0631\u0648 \u0646\u062c\u0627\u062a \u0628\u062f\u0647!"
                          }
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 700,
                            color: "var(--token-SX03PBUzWAqr)"
                          }}
                        >
                          {
                            "\u0631\u0627\u0628\u0637\u0647\u200c\u0647\u0627\u062a \u0631\u0648 \u0646\u062c\u0627\u062a \u0628\u062f\u0647!"
                          }
                        </span>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wvGzv
                    )}
                  >
                    {
                      "\u0645\u0627 \u0628\u0647 \u0647\u0645\u0633\u0631\u062a \u06a9\u0645\u06a9 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u0645 \u062a\u0648 \u0631\u0648\u0632\u0627\u06cc PMS \u0628\u06cc\u0634\u062a\u0631 \u062f\u0631\u06a9\u062a \u06a9\u0646\u0647. \u0648 \u0645\u0631\u0627\u0642\u0628\u062a \u0628\u0627\u0634\u0647 \u0648 \u0628\u0641\u0647\u0645\u0647 \u06a9\u0644\u0627\u0641\u0647 \u0628\u0648\u062f\u0646 \u06cc\u0639\u0646\u06cc \u0686\u06cc."
                    }
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__uQxQo)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ukmx)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"80px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_tools/images/image57.png",
                      fullWidth: 450,
                      fullHeight: 450,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__g1RZr)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__clZl1)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__pw5Fd)}>
                <div className={classNames(projectcss.all, sty.freeBox__cMl9W)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__egr5D)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"80px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liom_tools/images/image58.png",
                      fullWidth: 450,
                      fullHeight: 450,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__iWuxs)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__idtS
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "var(--token-LqD8W4lcEdIj)"
                        }}
                      >
                        {
                          "\u0628\u062f\u0648\u0646 \u06a9\u06cc \u0622\u0645\u0627\u062f\u0647\u200c\u0627\u06cc!"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uc1Tf
                    )}
                  >
                    {
                      "\u0628\u0627 \u0645\u0627 \u0632\u0645\u0627\u0646 \u062f\u0642\u06cc\u0642 \u062a\u062e\u0645\u06a9\u200c\u06af\u0630\u0627\u0631\u06cc \u0631\u0648 \u0645\u06cc\u200c\u062f\u0648\u0646\u06cc \u0648 \u0627\u0632 \u0628\u062f\u0646\u062a \u0628\u0647\u062a\u0631 \u0622\u06af\u0627\u0647 \u0645\u06cc\u200c\u0634\u06cc \u0648 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u062a\u0648 \u0628\u0647\u062a\u0631\u06cc\u0646 \u062d\u0627\u0644\u062a \u0631\u0648\u062d\u06cc \u0648 \u0631\u0648\u0627\u0646\u06cc \u062e\u0648\u062f\u062a \u0647\u0633\u062a\u06cc \u062a\u0635\u0645\u06cc\u0645 \u0647\u0627\u06cc \u0645\u0647\u0645\u062a \u0631\u0648 \u0628\u06af\u06cc\u0631\u06cc"
                    }
                  </div>
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <ButtonLiom
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={generateStateValueProp($state, ["button", "color"])}
                isDisabled={(() => {
                  try {
                    return $state.loadingBtn;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                load={generateStateValueProp($state, ["button", "load"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoadingBtn"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadingBtn"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadingBtn"] != null &&
                    typeof $steps["updateLoadingBtn"] === "object" &&
                    typeof $steps["updateLoadingBtn"].then === "function"
                  ) {
                    $steps["updateLoadingBtn"] = await $steps[
                      "updateLoadingBtn"
                    ];
                  }

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return `https://pay.liom.app/p/${$ctx.query.p}_30-34`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }

                  $steps["updateLoadingBtn2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadingBtn"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadingBtn2"] != null &&
                    typeof $steps["updateLoadingBtn2"] === "object" &&
                    typeof $steps["updateLoadingBtn2"].then === "function"
                  ) {
                    $steps["updateLoadingBtn2"] = await $steps[
                      "updateLoadingBtn2"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                unnamedVariant={(() => {
                  try {
                    return $state.loadingBtn;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "unnamedVariant";
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t7BF9,
                    "animashen"
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FFFFFF" }}
                    >
                      {
                        "\u0641\u0639\u0627\u0644\u0633\u0627\u0632\u06cc \u0627\u0634\u062a\u0631\u0627\u06a9 \u0648\u06cc\u0698\u0647"
                      }
                    </span>
                  </React.Fragment>
                </div>
              </ButtonLiom>
            </section>
            <Embed
              data-plasmic-name={"favicon"}
              data-plasmic-override={overrides.favicon}
              className={classNames("__wab_instance", sty.favicon)}
              code={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
                  : "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
              }
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "subscription2", "section", "button", "favicon"],
  subscription2: ["subscription2"],
  section: ["section", "button"],
  button: ["button"],
  favicon: ["favicon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  subscription2: typeof Subscription2;
  section: "section";
  button: typeof ButtonLiom;
  favicon: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPay__VariantsArgs;
    args?: PlasmicPay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPay__ArgProps,
          internalVariantPropNames: PlasmicPay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPay";
  } else {
    func.displayName = `PlasmicPay.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPay = Object.assign(
  // Top-level PlasmicPay renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    subscription2: makeNodeComponent("subscription2"),
    section: makeNodeComponent("section"),
    button: makeNodeComponent("button"),
    favicon: makeNodeComponent("favicon"),

    // Metadata about props expected for PlasmicPay
    internalVariantProps: PlasmicPay__VariantProps,
    internalArgProps: PlasmicPay__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | هدیه ویژه",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPay;
/* prettier-ignore-end */
