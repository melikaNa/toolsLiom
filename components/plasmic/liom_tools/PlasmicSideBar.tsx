/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 68VfgF3XliD1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MenuItem2 from "../../MenuItem2"; // plasmic-import: c1iZWmLE5b0C/component
import TextInput3 from "../../TextInput3"; // plasmic-import: ghQ599WBAldm/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from ""; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from ""; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from ""; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicSideBar.module.css"; // plasmic-import: 68VfgF3XliD1/css

import Line2Icon from "./icons/PlasmicIcon__Line2"; // plasmic-import: YGMr5fvzzroj/icon
import LogoutIcon from "./icons/PlasmicIcon__Logout"; // plasmic-import: B6aCyOD_vyOM/icon
import ArrowDownIcon from "./icons/PlasmicIcon__ArrowDown"; // plasmic-import: 54npbOr9loMt/icon
import AddIcon from "./icons/PlasmicIcon__Add"; // plasmic-import: BEaDFfeC-k7e/icon
import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: DKNPGeqS4vK8/icon

createPlasmicElementProxy;

export type PlasmicSideBar__VariantMembers = {};
export type PlasmicSideBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSideBar__VariantsArgs;
export const PlasmicSideBar__VariantProps = new Array<VariantPropType>();

export type PlasmicSideBar__ArgsType = {};
type ArgPropType = keyof PlasmicSideBar__ArgsType;
export const PlasmicSideBar__ArgProps = new Array<ArgPropType>();

export type PlasmicSideBar__OverridesType = {
  root?: Flex__<"div">;
  frame11?: Flex__<"div">;
  frame14?: Flex__<"div">;
  logo?: Flex__<"div">;
  frame12?: Flex__<"div">;
  menuItem2?: Flex__<typeof MenuItem2>;
  frame13?: Flex__<"div">;
  frame10?: Flex__<"div">;
  frame7?: Flex__<"div">;
  vuesaxLinearLogout?: Flex__<"div">;
  vuesaxLinearLogout2?: Flex__<"div">;
  frame19?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput3>;
  frame18?: Flex__<"div">;
  frame17?: Flex__<"div">;
  frame16?: Flex__<"div">;
  frame15?: Flex__<"div">;
  vuesaxBoldArrowDown?: Flex__<"div">;
  vuesaxBoldArrowDown2?: Flex__<"div">;
  empty1?: Flex__<"div">;
  frame21?: Flex__<"div">;
  vuesaxLinearAdd3?: Flex__<"div">;
  vuesaxLinearAdd4?: Flex__<"div">;
  figmaPaste?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
};

export interface DefaultSideBarProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSideBar__RenderFunc(props: {
  variants: PlasmicSideBar__VariantsArgs;
  args: PlasmicSideBar__ArgsType;
  overrides: PlasmicSideBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            id: "dashboard",
            label_fa: "\u062f\u0627\u0634\u0628\u0648\u0631\u062f",
            label_en: "Dashboard",
            icon: "speedometer",
            route: "/dashboard"
          },
          {
            id: "tests",
            label_fa:
              "\u0645\u062f\u06cc\u0631\u06cc\u062a \u062a\u0633\u062a\u200c\u0647\u0627",
            label_en: "Health Tests",
            icon: "clipboardlist",
            route: "/tests"
          },
          {
            id: "questions",
            label_fa:
              "\u0645\u062f\u06cc\u0631\u06cc\u062a \u0633\u0648\u0627\u0644\u0627\u062a",
            label_en: "Questions",
            icon: "questioncircle",
            route: "/questions"
          },
          {
            id: "responses",
            label_fa:
              "\u0646\u062a\u0627\u06cc\u062c \u0648 \u067e\u0627\u0633\u062e\u200c\u0647\u0627",
            label_en: "Responses",
            icon: "chartbar",
            route: "/responses"
          }
        ]
      },
      {
        path: "item",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_antd_5_hostless,
        styleTokensClassNames_plasmic_rich_components,
        styleTokensClassNames_paziresh_24_design_system,
        styleTokensClassNames_hamdast_sdk,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"frame11"}
        data-plasmic-override={overrides.frame11}
        className={classNames(projectcss.all, sty.frame11)}
      >
        <div
          data-plasmic-name={"frame14"}
          data-plasmic-override={overrides.frame14}
          className={classNames(projectcss.all, sty.frame14)}
        >
          <div
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames(projectcss.all, sty.logo)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__e0St9)}
              displayHeight={"2rem"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"2rem"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liom_tools/images/image10.ico",
                fullWidth: 256,
                fullHeight: 256,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__shzF
              )}
            >
              {"\u067e\u0646\u0644 \u0645\u062f\u06cc\u0631\u06cc\u062a "}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___4JIyF)}>
            <Line2Icon
              className={classNames(projectcss.all, sty.svg__uWup)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"frame12"}
            data-plasmic-override={overrides.frame12}
            className={classNames(projectcss.all, sty.frame12)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.menu;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <MenuItem2
                  data-plasmic-name={"menuItem2"}
                  data-plasmic-override={overrides.menuItem2}
                  className={classNames("__wab_instance", sty.menuItem2)}
                  icon={(() => {
                    try {
                      return currentItem.icon;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  key={currentIndex}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateItem"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["item"]
                            },
                            operation: 0,
                            value: currentItem.id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateItem"] != null &&
                      typeof $steps["updateItem"] === "object" &&
                      typeof $steps["updateItem"].then === "function"
                    ) {
                      $steps["updateItem"] = await $steps["updateItem"];
                    }
                  }}
                  select={(() => {
                    try {
                      return $state.item == currentItem.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={(() => {
                    try {
                      return currentItem.label_fa;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              );
            })}
          </div>
        </div>
        <div
          data-plasmic-name={"frame13"}
          data-plasmic-override={overrides.frame13}
          className={classNames(projectcss.all, sty.frame13)}
        >
          <div
            data-plasmic-name={"frame10"}
            data-plasmic-override={overrides.frame10}
            className={classNames(projectcss.all, sty.frame10)}
          >
            <div
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              className={classNames(projectcss.all, sty.frame7)}
            >
              <div
                data-plasmic-name={"vuesaxLinearLogout"}
                data-plasmic-override={overrides.vuesaxLinearLogout}
                className={classNames(projectcss.all, sty.vuesaxLinearLogout)}
              >
                <div
                  data-plasmic-name={"vuesaxLinearLogout2"}
                  data-plasmic-override={overrides.vuesaxLinearLogout2}
                  className={classNames(
                    projectcss.all,
                    sty.vuesaxLinearLogout2
                  )}
                >
                  <LogoutIcon
                    className={classNames(projectcss.all, sty.svg___2OePz)}
                    role={"img"}
                  />
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__et6YG
                )}
              >
                {"\u062e\u0631\u0648\u062c"}
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__xvV2Z)}>
        <div
          data-plasmic-name={"frame19"}
          data-plasmic-override={overrides.frame19}
          className={classNames(projectcss.all, sty.frame19)}
        >
          <TextInput3
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            autoComplete={[]}
            autoFocus={false}
            className={classNames("__wab_instance", sty.textInput)}
            disabled={false}
            inputMode={"text"}
            inputType={"search"}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["textInput", "value"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={"\u062c\u0633\u062a\u062c\u0648..."}
            readOnly={false}
            type={"soft"}
            value={generateStateValueProp($state, ["textInput", "value"])}
          />

          <div
            data-plasmic-name={"frame18"}
            data-plasmic-override={overrides.frame18}
            className={classNames(projectcss.all, sty.frame18)}
          >
            <div
              data-plasmic-name={"frame17"}
              data-plasmic-override={overrides.frame17}
              className={classNames(projectcss.all, sty.frame17)}
            >
              <div
                data-plasmic-name={"frame16"}
                data-plasmic-override={overrides.frame16}
                className={classNames(projectcss.all, sty.frame16)}
              >
                <div
                  data-plasmic-name={"frame15"}
                  data-plasmic-override={overrides.frame15}
                  className={classNames(projectcss.all, sty.frame15)}
                >
                  <div
                    data-plasmic-name={"vuesaxBoldArrowDown"}
                    data-plasmic-override={overrides.vuesaxBoldArrowDown}
                    className={classNames(
                      projectcss.all,
                      sty.vuesaxBoldArrowDown
                    )}
                  >
                    <div
                      data-plasmic-name={"vuesaxBoldArrowDown2"}
                      data-plasmic-override={overrides.vuesaxBoldArrowDown2}
                      className={classNames(
                        projectcss.all,
                        sty.vuesaxBoldArrowDown2
                      )}
                    >
                      <ArrowDownIcon
                        className={classNames(projectcss.all, sty.svg__ed19)}
                        role={"img"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v4IE
                    )}
                  >
                    {"Nokindow"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7PwtA
                  )}
                >
                  {"Nokindow@gmail.com"}
                </div>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__y0ViZ)}
                displayHeight={"48px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"48px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/liom_tools/images/ellipse2.svg",
                  fullWidth: 48,
                  fullHeight: 48,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__zca09)}>
          <div className={classNames(projectcss.all, sty.freeBox___9Sk9N)}>
            <div
              data-plasmic-name={"empty1"}
              data-plasmic-override={overrides.empty1}
              className={classNames(projectcss.all, sty.empty1)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xkHr4
              )}
            >
              {"This section is empty"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0MsJw
              )}
            >
              {"Click Create to display the information"}
            </div>
            <div
              data-plasmic-name={"frame21"}
              data-plasmic-override={overrides.frame21}
              className={classNames(projectcss.all, sty.frame21)}
            >
              <div
                data-plasmic-name={"vuesaxLinearAdd3"}
                data-plasmic-override={overrides.vuesaxLinearAdd3}
                className={classNames(projectcss.all, sty.vuesaxLinearAdd3)}
              >
                <div
                  data-plasmic-name={"vuesaxLinearAdd4"}
                  data-plasmic-override={overrides.vuesaxLinearAdd4}
                  className={classNames(projectcss.all, sty.vuesaxLinearAdd4)}
                >
                  <AddIcon
                    className={classNames(projectcss.all, sty.svg___3DNdP)}
                    role={"img"}
                  />
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oVu23
                )}
              >
                {"Create"}
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"figmaPaste"}
            data-plasmic-override={overrides.figmaPaste}
            className={classNames(projectcss.all, sty.figmaPaste)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iloFo
              )}
            >
              {"\u062a\u0633\u062a \u0647\u0627"}
            </div>
            <Line3Icon
              className={classNames(projectcss.all, sty.svg__qsTyr)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__sJeRt)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
                2, 3, 4
              ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"frame22"}
                    data-plasmic-override={overrides.frame22}
                    className={classNames(projectcss.all, sty.frame22)}
                    key={currentIndex}
                  >
                    <div
                      data-plasmic-name={"frame23"}
                      data-plasmic-override={overrides.frame23}
                      className={classNames(projectcss.all, sty.frame23)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Sao
                        )}
                      >
                        {"Lorem ipsum"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2S7Lm
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et ..."
                        }
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame11",
    "frame14",
    "logo",
    "frame12",
    "menuItem2",
    "frame13",
    "frame10",
    "frame7",
    "vuesaxLinearLogout",
    "vuesaxLinearLogout2",
    "frame19",
    "textInput",
    "frame18",
    "frame17",
    "frame16",
    "frame15",
    "vuesaxBoldArrowDown",
    "vuesaxBoldArrowDown2",
    "empty1",
    "frame21",
    "vuesaxLinearAdd3",
    "vuesaxLinearAdd4",
    "figmaPaste",
    "frame22",
    "frame23"
  ],
  frame11: [
    "frame11",
    "frame14",
    "logo",
    "frame12",
    "menuItem2",
    "frame13",
    "frame10",
    "frame7",
    "vuesaxLinearLogout",
    "vuesaxLinearLogout2"
  ],
  frame14: ["frame14", "logo", "frame12", "menuItem2"],
  logo: ["logo"],
  frame12: ["frame12", "menuItem2"],
  menuItem2: ["menuItem2"],
  frame13: [
    "frame13",
    "frame10",
    "frame7",
    "vuesaxLinearLogout",
    "vuesaxLinearLogout2"
  ],
  frame10: ["frame10", "frame7", "vuesaxLinearLogout", "vuesaxLinearLogout2"],
  frame7: ["frame7", "vuesaxLinearLogout", "vuesaxLinearLogout2"],
  vuesaxLinearLogout: ["vuesaxLinearLogout", "vuesaxLinearLogout2"],
  vuesaxLinearLogout2: ["vuesaxLinearLogout2"],
  frame19: [
    "frame19",
    "textInput",
    "frame18",
    "frame17",
    "frame16",
    "frame15",
    "vuesaxBoldArrowDown",
    "vuesaxBoldArrowDown2"
  ],
  textInput: ["textInput"],
  frame18: [
    "frame18",
    "frame17",
    "frame16",
    "frame15",
    "vuesaxBoldArrowDown",
    "vuesaxBoldArrowDown2"
  ],
  frame17: [
    "frame17",
    "frame16",
    "frame15",
    "vuesaxBoldArrowDown",
    "vuesaxBoldArrowDown2"
  ],
  frame16: [
    "frame16",
    "frame15",
    "vuesaxBoldArrowDown",
    "vuesaxBoldArrowDown2"
  ],
  frame15: ["frame15", "vuesaxBoldArrowDown", "vuesaxBoldArrowDown2"],
  vuesaxBoldArrowDown: ["vuesaxBoldArrowDown", "vuesaxBoldArrowDown2"],
  vuesaxBoldArrowDown2: ["vuesaxBoldArrowDown2"],
  empty1: ["empty1"],
  frame21: ["frame21", "vuesaxLinearAdd3", "vuesaxLinearAdd4"],
  vuesaxLinearAdd3: ["vuesaxLinearAdd3", "vuesaxLinearAdd4"],
  vuesaxLinearAdd4: ["vuesaxLinearAdd4"],
  figmaPaste: ["figmaPaste", "frame22", "frame23"],
  frame22: ["frame22", "frame23"],
  frame23: ["frame23"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  frame11: "div";
  frame14: "div";
  logo: "div";
  frame12: "div";
  menuItem2: typeof MenuItem2;
  frame13: "div";
  frame10: "div";
  frame7: "div";
  vuesaxLinearLogout: "div";
  vuesaxLinearLogout2: "div";
  frame19: "div";
  textInput: typeof TextInput3;
  frame18: "div";
  frame17: "div";
  frame16: "div";
  frame15: "div";
  vuesaxBoldArrowDown: "div";
  vuesaxBoldArrowDown2: "div";
  empty1: "div";
  frame21: "div";
  vuesaxLinearAdd3: "div";
  vuesaxLinearAdd4: "div";
  figmaPaste: "div";
  frame22: "div";
  frame23: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideBar__VariantsArgs;
    args?: PlasmicSideBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSideBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSideBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSideBar__ArgProps,
          internalVariantPropNames: PlasmicSideBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSideBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBar";
  } else {
    func.displayName = `PlasmicSideBar.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBar = Object.assign(
  // Top-level PlasmicSideBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame11: makeNodeComponent("frame11"),
    frame14: makeNodeComponent("frame14"),
    logo: makeNodeComponent("logo"),
    frame12: makeNodeComponent("frame12"),
    menuItem2: makeNodeComponent("menuItem2"),
    frame13: makeNodeComponent("frame13"),
    frame10: makeNodeComponent("frame10"),
    frame7: makeNodeComponent("frame7"),
    vuesaxLinearLogout: makeNodeComponent("vuesaxLinearLogout"),
    vuesaxLinearLogout2: makeNodeComponent("vuesaxLinearLogout2"),
    frame19: makeNodeComponent("frame19"),
    textInput: makeNodeComponent("textInput"),
    frame18: makeNodeComponent("frame18"),
    frame17: makeNodeComponent("frame17"),
    frame16: makeNodeComponent("frame16"),
    frame15: makeNodeComponent("frame15"),
    vuesaxBoldArrowDown: makeNodeComponent("vuesaxBoldArrowDown"),
    vuesaxBoldArrowDown2: makeNodeComponent("vuesaxBoldArrowDown2"),
    empty1: makeNodeComponent("empty1"),
    frame21: makeNodeComponent("frame21"),
    vuesaxLinearAdd3: makeNodeComponent("vuesaxLinearAdd3"),
    vuesaxLinearAdd4: makeNodeComponent("vuesaxLinearAdd4"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),

    // Metadata about props expected for PlasmicSideBar
    internalVariantProps: PlasmicSideBar__VariantProps,
    internalArgProps: PlasmicSideBar__ArgProps
  }
);

export default PlasmicSideBar;
/* prettier-ignore-end */
