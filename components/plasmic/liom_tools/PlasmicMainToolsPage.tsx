/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: DhYKz6btPd-E

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicMainToolsPage.module.css"; // plasmic-import: DhYKz6btPd-E/css

createPlasmicElementProxy;

export type PlasmicMainToolsPage__VariantMembers = {};
export type PlasmicMainToolsPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainToolsPage__VariantsArgs;
export const PlasmicMainToolsPage__VariantProps = new Array<VariantPropType>();

export type PlasmicMainToolsPage__ArgsType = {};
type ArgPropType = keyof PlasmicMainToolsPage__ArgsType;
export const PlasmicMainToolsPage__ArgProps = new Array<ArgPropType>();

export type PlasmicMainToolsPage__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultMainToolsPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainToolsPage__RenderFunc(props: {
  variants: PlasmicMainToolsPage__VariantsArgs;
  args: PlasmicMainToolsPage__ArgsType;
  overrides: PlasmicMainToolsPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "toolse",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getInfo"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/userInfo",
                        (() => {
                          try {
                            return (() => {
                              var token =
                                $ctx.query.token ||
                                new URLSearchParams(window.location.search).get(
                                  "token"
                                );
                              return { token: token };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getInfo"] != null &&
                typeof $steps["getInfo"] === "object" &&
                typeof $steps["getInfo"].then === "function"
              ) {
                $steps["getInfo"] = await $steps["getInfo"];
              }

              $steps["updateUser"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["user"]
                      },
                      operation: 0,
                      value: $steps.getInfo.data?.[0]
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUser"] != null &&
                typeof $steps["updateUser"] === "object" &&
                typeof $steps["updateUser"].then === "function"
              ) {
                $steps["updateUser"] = await $steps["updateUser"];
              }

              $steps["getTools"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "POST",
                        "https://n8n.staas.ir/webhook/tools/getToolsByAlgorithm",
                        (() => {
                          try {
                            return (() => {
                              var token =
                                $ctx.query.token ||
                                new URLSearchParams(window.location.search).get(
                                  "token"
                                );
                              return { authorization: token };
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        (() => {
                          try {
                            return {
                              week: "month12"
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        undefined
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getTools"] != null &&
                typeof $steps["getTools"] === "object" &&
                typeof $steps["getTools"].then === "function"
              ) {
                $steps["getTools"] = await $steps["getTools"];
              }

              $steps["updateTools"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["toolse"]
                      },
                      operation: 0,
                      value: $steps.getTools.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateTools"] != null &&
                typeof $steps["updateTools"] === "object" &&
                typeof $steps["updateTools"].then === "function"
              ) {
                $steps["updateTools"] = await $steps["updateTools"];
              }

              $steps["updateLoading"] =
                $state.toolse?.success == true && $state.user?.success == true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["loading"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLoading"] != null &&
                typeof $steps["updateLoading"] === "object" &&
                typeof $steps["updateLoading"].then === "function"
              ) {
                $steps["updateLoading"] = await $steps["updateLoading"];
              }
            }}
          />

          {(() => {
            try {
              return !$state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__uBj3W)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.toolse.result.length > 0
                      ? $state.toolse.result
                      : [];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yls8G)}
                    key={currentIndex}
                  >
                    {(() => {
                      try {
                        return currentItem.data.length > 0 ? true : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__m4P5Y
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.text;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return currentItem.data.length > 0 ? true : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___8NOg3
                        )}
                      >
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return currentItem.data.length > 0
                                ? currentItem.data
                                : [];
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_1, __plasmic_idx_1) => {
                          const currentItem = __plasmic_item_1;
                          const currentIndex = __plasmic_idx_1;
                          return (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__p8Nxo
                              )}
                              key={currentIndex}
                              onClick={async event => {
                                const $steps = {};

                                $steps["invokeGlobalAction2"] =
                                  currentItem.linkType != null &&
                                  currentItem.linkType != ""
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "GET",
                                            "https://n8n.staas.ir/webhook/getAction",
                                            (() => {
                                              try {
                                                return {
                                                  authorization:
                                                    $ctx.query.token,
                                                  type: currentItem.linkType
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["invokeGlobalAction2"] != null &&
                                  typeof $steps["invokeGlobalAction2"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction2"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction2"] = await $steps[
                                    "invokeGlobalAction2"
                                  ];
                                }

                                $steps["goTo"] =
                                  $ctx.query.inApp == "true"
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              var action = "";
                                              if (
                                                currentItem.linkType != null &&
                                                currentItem.linkType != ""
                                              ) {
                                                action =
                                                  $steps.invokeGlobalAction2
                                                    .data.result;
                                              } else {
                                                action = currentItem.action;
                                              }
                                              return window.FlutterChannel.postMessage(
                                                action
                                              );
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["goTo"] != null &&
                                  typeof $steps["goTo"] === "object" &&
                                  typeof $steps["goTo"].then === "function"
                                ) {
                                  $steps["goTo"] = await $steps["goTo"];
                                }

                                $steps["deepLink"] =
                                  $ctx.query.inApp != "true"
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            (() => {
                                              try {
                                                return (() => {
                                                  if (
                                                    currentItem.linkType !=
                                                      null &&
                                                    currentItem.linkType != ""
                                                  ) {
                                                    return $steps
                                                      .invokeGlobalAction2
                                                      .result;
                                                  } else {
                                                    return currentItem.action;
                                                  }
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $ctx.query.token;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $state.user.result.user
                                                  .id;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $ctx.query.inApp;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return $ctx.query.theme;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.deepLink"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["deepLink"] != null &&
                                  typeof $steps["deepLink"] === "object" &&
                                  typeof $steps["deepLink"].then === "function"
                                ) {
                                  $steps["deepLink"] = await $steps["deepLink"];
                                }
                              }}
                              style={(() => {
                                try {
                                  return (() => {
                                    if (
                                      currentItem.bgColor1 == "" &&
                                      currentItem.bgColor2 == ""
                                    ) {
                                      return { "background-color": "#ffffff" };
                                    } else if (
                                      currentItem.bgColor1 != "" &&
                                      currentItem.bgColor2 != ""
                                    ) {
                                      return {
                                        background: `linear-gradient(to right, ${currentItem.bgColor1}, ${currentItem.bgColor2})`
                                      };
                                    } else {
                                      return {
                                        "background-color": currentItem.bgColor1
                                      };
                                    }
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              {(() => {
                                try {
                                  return (
                                    currentItem.icon != null &&
                                    currentItem.icon != ""
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <PlasmicImg__
                                  data-plasmic-name={"img"}
                                  data-plasmic-override={overrides.img}
                                  alt={""}
                                  className={classNames(sty.img)}
                                  displayHeight={"auto"}
                                  displayMaxHeight={"none"}
                                  displayMaxWidth={"100%"}
                                  displayMinHeight={"0"}
                                  displayMinWidth={"0"}
                                  displayWidth={"auto"}
                                  loading={"lazy"}
                                  src={(() => {
                                    try {
                                      return currentItem.icon;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  style={(() => {
                                    try {
                                      return (() => {
                                        if (currentItem.iconColor == "#ffffff")
                                          return {
                                            filter: "brightness(0) invert(1)"
                                          };
                                        else return { filter: "brightness(0)" };
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  width={"30"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__v45UJ
                                )}
                                style={(() => {
                                  try {
                                    return {
                                      color:
                                        currentItem.txtColor == ""
                                          ? "#535353"
                                          : currentItem.txtColor
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    ) : null}
                  </div>
                );
              })}
            </div>
          ) : null}
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox___2UV8T)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.toolse.result.length > 0
                      ? $state.toolse.result
                      : [];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___449Z)}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__irdAd,
                        "shimmer"
                      )}
                    >
                      {""}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vmjgY)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [1, 2, 3, 4, 5];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___6IPXv,
                              "shimmer"
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};
                            }}
                            style={undefined}
                          />
                        );
                      })}
                    </div>
                  </div>
                );
              })}
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sideEffect", "img"],
  sideEffect: ["sideEffect"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainToolsPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainToolsPage__VariantsArgs;
    args?: PlasmicMainToolsPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainToolsPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainToolsPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainToolsPage__ArgProps,
          internalVariantPropNames: PlasmicMainToolsPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainToolsPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainToolsPage";
  } else {
    func.displayName = `PlasmicMainToolsPage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMainToolsPage = Object.assign(
  // Top-level PlasmicMainToolsPage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicMainToolsPage
    internalVariantProps: PlasmicMainToolsPage__VariantProps,
    internalArgProps: PlasmicMainToolsPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMainToolsPage;
/* prettier-ignore-end */
