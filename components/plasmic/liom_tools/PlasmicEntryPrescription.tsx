/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: 4Uoers0uAwQ4

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import TextInput from "../../TextInput"; // plasmic-import: aEno43N2WkPr/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicEntryPrescription.module.css"; // plasmic-import: 4Uoers0uAwQ4/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: HUASOsr4ah0C/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import XIcon from "../hamdast_sdk/icons/PlasmicIcon__X"; // plasmic-import: S0M2VMEAEs7X/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon

createPlasmicElementProxy;

export type PlasmicEntryPrescription__VariantMembers = {};
export type PlasmicEntryPrescription__VariantsArgs = {};
type VariantPropType = keyof PlasmicEntryPrescription__VariantsArgs;
export const PlasmicEntryPrescription__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEntryPrescription__ArgsType = {};
type ArgPropType = keyof PlasmicEntryPrescription__ArgsType;
export const PlasmicEntryPrescription__ArgProps = new Array<ArgPropType>();

export type PlasmicEntryPrescription__OverridesType = {
  root?: Flex__<"div">;
  code?: Flex__<typeof TextInput>;
  embedHtml?: Flex__<typeof Embed>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  svg?: Flex__<"svg">;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
};

export interface DefaultEntryPrescriptionProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEntryPrescription__RenderFunc(props: {
  variants: PlasmicEntryPrescription__VariantsArgs;
  args: PlasmicEntryPrescription__ArgsType;
  overrides: PlasmicEntryPrescription__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "code.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "errors",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "buttonLiom.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "btnLoad",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_hamdast_sdk,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__u4Tbb)}>
            <div className={classNames(projectcss.all, sty.freeBox___8Y83J)}>
              <TextInput
                data-plasmic-name={"code"}
                data-plasmic-override={overrides.code}
                className={classNames("__wab_instance", sty.code)}
                onChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["code", "value"])(
                      (e => e.target?.value).apply(null, eventArgs)
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                placeholder={
                  "\u06a9\u062f \u0631\u0647\u06af\u06cc\u0631\u06cc \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f..."
                }
                type={"number"}
                value={generateStateValueProp($state, ["code", "value"]) ?? ""}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yctcF
                  )}
                >
                  {
                    "\ud83d\udd0d \u06a9\u062f \u0631\u0647\u06af\u06cc\u0631\u06cc"
                  }
                </div>
              </TextInput>
            </div>
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={
                '<div id="editors-container"></div>\r\n<script>\r\n  var activeEditor = null;\r\n  if (!window.editorConfigs) {\r\nwindow.editorConfigs = [\r\n    { id: \'description\', title: \'\ud83d\udccb \u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u06a9\u0644\u06cc \u062a\u0647\u06cc\u0647 \u062f\u0627\u0631\u0648\', placeholder: \'\u0627\u06cc\u0646\u062c\u0627 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u06a9\u0644\u06cc \u062a\u0647\u06cc\u0647 \u062f\u0627\u0631\u0648 \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...\' },\r\n    { id: \'usage\', title: \'\ud83d\udc8a \u0646\u062d\u0648\u0647 \u0645\u0635\u0631\u0641\', placeholder: \'\u0646\u062d\u0648\u0647 \u0645\u0635\u0631\u0641 \u062f\u0627\u0631\u0648 \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...\' },\r\n    { id: \'precautions\', title: \'\u26a0\ufe0f \u062a\u0648\u062c\u0647\u0627\u062a \u0644\u0627\u0632\u0645 \u0645\u0635\u0631\u0641 \u062f\u0627\u0631\u0648\', placeholder: \'\u062a\u0648\u062c\u0647\u0627\u062a \u0644\u0627\u0632\u0645 \u0645\u0635\u0631\u0641 \u062f\u0627\u0631\u0648 \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...\' },\r\n    { id: \'sideEffects\', title: \'\u26a0\ufe0f \u0639\u0648\u0627\u0631\u0636 \u0648 \u062a\u062f\u0627\u062e\u0644\u0627\u062a \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062f\u0627\u0631\u0648\', placeholder: \'\u0639\u0648\u0627\u0631\u0636 \u0648 \u062a\u062f\u0627\u062e\u0644\u0627\u062a \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u062f\u0627\u0631\u0648 \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...\' },\r\n    { id: \'duration\', title: \'\u23f3 \u062a\u0627 \u06a9\u06cc \u062f\u0627\u0631\u0648 \u0645\u0635\u0631\u0641 \u06a9\u0646\u0645\u061f\', placeholder: \'\u0645\u062f\u062a \u0632\u0645\u0627\u0646 \u0645\u0635\u0631\u0641 \u062f\u0627\u0631\u0648 \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f...\' }\r\n  ];}\r\nvar editorConfigs = window.editorConfigs;\r\n\r\n  var container = document.getElementById(\'editors-container\');\r\n  container.innerHTML = \'\';\r\n  editorConfigs.forEach(({ id, title, placeholder }) => {\r\n    var wrapper = document.createElement(\'div\');\r\n    wrapper.className = \'editor-wrapper\';\r\n    wrapper.innerHTML = `\r\n      <div class="editor-title">${title}</div>\r\n      <div class="toolbar" data-editor="${id}">\r\n        <button onclick="execCmd(\'bold\')"><svg width="64px" height="64px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M6 12H12.5C14.9853 12 17 9.98528 17 7.5C17 5.01472 14.9853 3 12.5 3H6V12ZM6 12H13.5C15.9853 12 18 14.0147 18 16.5C18 18.9853 15.9853 21 13.5 21H6V12Z" stroke="#4f4f4f" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>\r\n</button>\r\n        <button onclick="execCmd(\'italic\')"><i><em><svg width="64px" height="64px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M10 3H20M4 21H14M15 3L9 21" stroke="#4f4f4f" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>\r\n</em></i></button>\r\n        <button onclick="execCmd(\'underline\')"><u><svg width="64px" height="64px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M4 21H20M18 4V11C18 14.3137 15.3137 17 12 17C8.68629 17 6 14.3137 6 11V4M4 3H8M16 3H20" stroke="#4f4f4f" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>\r\n</u></button>\r\n        <button onclick="execCmd(\'insertUnorderedList\')"><svg width="64px" height="64px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M8 6.00067L21 6.00139M8 12.0007L21 12.0015M8 18.0007L21 18.0015M3.5 6H3.51M3.5 12H3.51M3.5 18H3.51M4 6C4 6.27614 3.77614 6.5 3.5 6.5C3.22386 6.5 3 6.27614 3 6C3 5.72386 3.22386 5.5 3.5 5.5C3.77614 5.5 4 5.72386 4 6ZM4 12C4 12.2761 3.77614 12.5 3.5 12.5C3.22386 12.5 3 12.2761 3 12C3 11.7239 3.22386 11.5 3.5 11.5C3.77614 11.5 4 11.7239 4 12ZM4 18C4 18.2761 3.77614 18.5 3.5 18.5C3.22386 18.5 3 18.2761 3 18C3 17.7239 3.22386 17.5 3.5 17.5C3.77614 17.5 4 17.7239 4 18Z" stroke="#4a4a4a" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg></button>\r\n        <button onclick="execCmd(\'insertOrderedList\')"><svg width="64px" height="64px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M10 6L21 6.00066M10 12L21 12.0007M10 18L21 18.0007M3 5L5 4V10M5 10H3M5 10H7M7 20H3L6.41274 17.0139C6.78593 16.6873 7 16.2156 7 15.7197C7 14.7699 6.23008 14 5.28033 14H5C4.06808 14 3.28503 14.6374 3.06301 15.5" stroke="#4f4f4f" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg></button>\r\n        <select onchange="execCmd(\'formatBlock\', this.value)">\r\n          <option value="">\u062a\u06cc\u062a\u0631</option>\r\n          <option value="h3">\u0639\u0646\u0648\u0627\u0646 (H3)</option>\r\n          <option value="h4">\u0632\u06cc\u0631\u0639\u0646\u0648\u0627\u0646 (H4)</option>\r\n          <option value="p">\u0645\u062a\u0646 \u0639\u0627\u062f\u06cc</option>\r\n        </select>\r\n        <select onchange="execCmd(\'foreColor\',this.value)">\r\n          <option value="">\ud83c\udfa8 \u0631\u0646\u06af</option>\r\n          <option value="red">\ud83d\udd34 \u0642\u0631\u0645\u0632</option>\r\n          <option value="blue">\ud83d\udd35 \u0622\u0628\u06cc</option>\r\n          <option value="green">\ud83d\udfe2 \u0633\u0628\u0632</option>\r\n          <option value="orange">\ud83d\udfe0 \u0646\u0627\u0631\u0646\u062c\u06cc</option>\r\n          <option value="black">\u26ab \u0645\u0634\u06a9\u06cc</option>\r\n        </select>\r\n      </div>\r\n      <div id="${id}" class="editor empty" contenteditable="true" data-placeholder="${placeholder}"></div>\r\n    `;\r\n    container.appendChild(wrapper);\r\n  });\r\n\r\n  // \u0627\u062c\u0631\u0627\u06cc \u0641\u0631\u0645\u062a\r\n  function execCmd(command, value = null) {\r\n    if (activeEditor) {\r\n      activeEditor.focus();\r\n      document.execCommand(command, false, value);\r\n      updateEmptyClass();\r\n    }\r\n  }\r\n\r\n  // \u0631\u062f\u06cc\u0627\u0628\u06cc \u0641\u0648\u06a9\u0648\u0633 \u0628\u0631\u0627\u06cc \u0641\u0647\u0645\u06cc\u062f\u0646 \u06a9\u062f\u0648\u0645 \u0648\u06cc\u0631\u0627\u06cc\u0634\u06af\u0631 \u0641\u0639\u0627\u0644\u0647\r\n  document.addEventListener(\'focusin\', (e) => {\r\n    if (e.target.classList.contains(\'editor\')) {\r\n      activeEditor = e.target;\r\n    }\r\n  });\r\n\r\n  // \u0628\u0631\u0627\u06cc \u062c\u0644\u0648\u06af\u06cc\u0631\u06cc \u0627\u0632 \u0686\u0633\u0628\u0627\u0646\u062f\u0646 HTML \u0648 \u0645\u062f\u06cc\u0631\u06cc\u062a placeholder\r\n  setTimeout(() => {\r\n    document.querySelectorAll(\'.editor\').forEach(editor => {\r\n      editor.addEventListener(\'input\', updateEmptyClass);\r\n      editor.addEventListener(\'paste\', e => {\r\n        e.preventDefault();\r\n        var text = e.clipboardData.getData(\'text/plain\');\r\n        document.execCommand(\'insertText\', false, text);\r\n      });\r\n    });\r\n    updateEmptyClass();\r\n  }, 0);\r\n\r\n  function updateEmptyClass() {\r\n    document.querySelectorAll(\'.editor\').forEach(editor => {\r\n      editor.classList.toggle(\'empty\', editor.textContent.trim() === \'\');\r\n    });\r\n  }\r\n\r\n  function saveAll() {\r\n  let resultHTML = \'\';\r\n\r\n  editorConfigs.forEach(({ id, title }) => {\r\n    const content = document.getElementById(id).innerHTML.trim();\r\n    if (content !== \'\') {\r\n      resultHTML += `\r\n        <div class="result-card">\r\n          <h3 class="result-title">${title}</h3>\r\n          <div class="result-content">${content}</div>\r\n        </div>\r\n      `;\r\n    }\r\n  });\r\n    window.data =resultHTML;\r\n  }\r\n</script>\r\n'
              }
            />
          </div>
          <section className={classNames(projectcss.all, sty.section__mRs3)}>
            {(() => {
              try {
                return (
                  // new URLSearchParams(window.location.search).get("inApp")!="true"
                  true
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
                slot={
                  <React.Fragment>
                    <XIcon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return window.history.back();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      role={"img"}
                    />

                    <Paziresh24Avatar
                      data-plasmic-name={"paziresh24Avatar"}
                      data-plasmic-override={overrides.paziresh24Avatar}
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Avatar
                      )}
                      src={(() => {
                        try {
                          return "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </React.Fragment>
                }
                slot2={null}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hctnS
                  )}
                >
                  {
                    "\u062b\u0628\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0646\u0633\u062e\u0647"
                  }
                </div>
              </HeaderLiom>
            ) : null}
          </section>
          <section className={classNames(projectcss.all, sty.section__ysJo)}>
            <div className={classNames(projectcss.all, sty.freeBox__nCfob)}>
              <ButtonLiom
                data-plasmic-name={"buttonLiom"}
                data-plasmic-override={overrides.buttonLiom}
                className={classNames("__wab_instance", sty.buttonLiom)}
                color={generateStateValueProp($state, ["buttonLiom", "color"])}
                disabled={false}
                isDisabled={(() => {
                  try {
                    return $state.btnLoad;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                load={generateStateValueProp($state, ["buttonLiom", "load"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateBtnLoad"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["btnLoad"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateBtnLoad"] != null &&
                    typeof $steps["updateBtnLoad"] === "object" &&
                    typeof $steps["updateBtnLoad"].then === "function"
                  ) {
                    $steps["updateBtnLoad"] = await $steps["updateBtnLoad"];
                  }

                  $steps["updateErrors"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["errors"]
                          },
                          operation: 0,
                          value: []
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateErrors"] != null &&
                    typeof $steps["updateErrors"] === "object" &&
                    typeof $steps["updateErrors"].then === "function"
                  ) {
                    $steps["updateErrors"] = await $steps["updateErrors"];
                  }

                  $steps["runCode2"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              var errors = [];
                              if (!$state.code?.value) {
                                errors.push({
                                  type: "trackingCode",
                                  message: "لطفاً کد پیگیری را وارد کنید."
                                });
                              } else if (!/^\d+$/.test($state.code.value)) {
                                errors.push({
                                  type: "trackingCode",
                                  message: "کد پیگیری فقط باید شامل عدد باشد."
                                });
                              }
                              return ($state.errors = errors);
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode2"] != null &&
                    typeof $steps["runCode2"] === "object" &&
                    typeof $steps["runCode2"].then === "function"
                  ) {
                    $steps["runCode2"] = await $steps["runCode2"];
                  }

                  $steps["runCode"] =
                    $state.errors.length == 0
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return saveAll();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["invokeGlobalAction"] =
                    $state.errors.length == 0
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://n8n.staas.ir/webhook/eNoskhe",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    session_id: $ctx.query.session_id,
                                    doctor_tracking_code: $state.code.value,
                                    doctor_advice: window.data
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] =
                    $steps.invokeGlobalAction?.data?.status == true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627\u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f.",
                              "bottom-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["updateBtnLoad2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["btnLoad"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateBtnLoad2"] != null &&
                    typeof $steps["updateBtnLoad2"] === "object" &&
                    typeof $steps["updateBtnLoad2"].then === "function"
                  ) {
                    $steps["updateBtnLoad2"] = await $steps["updateBtnLoad2"];
                  }

                  $steps["invokeGlobalAction3"] = true
                    ? (() => {
                        const actionArgs = { args: [3000] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction3"] != null &&
                    typeof $steps["invokeGlobalAction3"] === "object" &&
                    typeof $steps["invokeGlobalAction3"].then === "function"
                  ) {
                    $steps["invokeGlobalAction3"] = await $steps[
                      "invokeGlobalAction3"
                    ];
                  }

                  $steps["runCode3"] =
                    $steps.invokeGlobalAction?.data?.status == true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return window.history.back();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["runCode3"] != null &&
                    typeof $steps["runCode3"] === "object" &&
                    typeof $steps["runCode3"].then === "function"
                  ) {
                    $steps["runCode3"] = await $steps["runCode3"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom", "load"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                unnamedVariant={(() => {
                  try {
                    return $state.btnLoad;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gUaMh
                  )}
                >
                  {
                    "\u062b\u0628\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </ButtonLiom>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "code",
    "embedHtml",
    "headerLiom",
    "svg",
    "paziresh24Avatar",
    "buttonLiom"
  ],
  code: ["code"],
  embedHtml: ["embedHtml"],
  headerLiom: ["headerLiom", "svg", "paziresh24Avatar"],
  svg: ["svg"],
  paziresh24Avatar: ["paziresh24Avatar"],
  buttonLiom: ["buttonLiom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  code: typeof TextInput;
  embedHtml: typeof Embed;
  headerLiom: typeof HeaderLiom;
  svg: "svg";
  paziresh24Avatar: typeof Paziresh24Avatar;
  buttonLiom: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEntryPrescription__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEntryPrescription__VariantsArgs;
    args?: PlasmicEntryPrescription__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEntryPrescription__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEntryPrescription__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEntryPrescription__ArgProps,
          internalVariantPropNames: PlasmicEntryPrescription__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEntryPrescription__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEntryPrescription";
  } else {
    func.displayName = `PlasmicEntryPrescription.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicEntryPrescription = Object.assign(
  // Top-level PlasmicEntryPrescription renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    code: makeNodeComponent("code"),
    embedHtml: makeNodeComponent("embedHtml"),
    headerLiom: makeNodeComponent("headerLiom"),
    svg: makeNodeComponent("svg"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    buttonLiom: makeNodeComponent("buttonLiom"),

    // Metadata about props expected for PlasmicEntryPrescription
    internalVariantProps: PlasmicEntryPrescription__VariantProps,
    internalArgProps: PlasmicEntryPrescription__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEntryPrescription;
/* prettier-ignore-end */
