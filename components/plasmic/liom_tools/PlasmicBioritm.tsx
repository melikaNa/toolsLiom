// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: R-v-t1SjQtrc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdProgress } from "@plasmicpkgs/antd5/skinny/registerProgress";
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import SlideinModal from "../../SlideinModal"; // plasmic-import: PMpcD3nAGzFX/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsyg4Uf6WCaaLe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YG4uf6WCaaLe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicBioritm.module.css"; // plasmic-import: R-v-t1SjQtrc/css

import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: HR2aRpZkYKnk/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: iB-wctFKDuNY/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: JhcBRlS4prZa/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon101Icon from "./icons/PlasmicIcon__Icon101"; // plasmic-import: FmbA2q57_eEt/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: WIXMGnqTFn8X/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: wywKoeT_CqTL/icon
import Icon72Icon from "./icons/PlasmicIcon__Icon72"; // plasmic-import: -PnFqaNLBd-U/icon

createPlasmicElementProxy;

export type PlasmicBioritm__VariantMembers = {
  ferstTimepage: "ferstTimepage";
};
export type PlasmicBioritm__VariantsArgs = {
  ferstTimepage?: SingleBooleanChoiceArg<"ferstTimepage">;
};
type VariantPropType = keyof PlasmicBioritm__VariantsArgs;
export const PlasmicBioritm__VariantProps = new Array<VariantPropType>(
  "ferstTimepage"
);

export type PlasmicBioritm__ArgsType = {};
type ArgPropType = keyof PlasmicBioritm__ArgsType;
export const PlasmicBioritm__ArgProps = new Array<ArgPropType>();

export type PlasmicBioritm__OverridesType = {
  root?: Flex__<"div">;
  button2?: Flex__<typeof ButtonLiom>;
  button3?: Flex__<typeof ButtonLiom>;
  ul?: Flex__<"ul">;
  li?: Flex__<"li">;
  lottie?: Flex__<typeof LottieWrapper>;
  slideinModal?: Flex__<typeof SlideinModal>;
  slideinModal2?: Flex__<typeof SlideinModal>;
  button5?: Flex__<typeof ButtonLiom>;
  biorhythm?: Flex__<typeof ApiRequest>;
  slideinModal3?: Flex__<typeof SlideinModal>;
  button?: Flex__<typeof ButtonLiom>;
  button4?: Flex__<typeof ButtonLiom>;
  favicon?: Flex__<typeof Embed>;
};

export interface DefaultBioritmProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBioritm__RenderFunc(props: {
  variants: PlasmicBioritm__VariantsArgs;
  args: PlasmicBioritm__ArgsType;
  overrides: PlasmicBioritm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "button2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "softSand"
      },
      {
        path: "button3.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "perper"
      },
      {
        path: "slideinModal.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "slideinModal2.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.firstTime;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "slideinModal3.click",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "button4.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "clear"
      },
      {
        path: "birthday",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let birthDate = localStorage.getItem("birthDate");
                if (birthDate == "undefined" || birthDate == null) {
                  return {
                    day: 7,
                    month: 7,
                    year: 1377
                  };
                } else {
                  birthDate = JSON.parse(birthDate);
                  let gy = birthDate.year;
                  let gm = birthDate.month;
                  let gd = birthDate.day;
                  let shamsiMonthDays = [
                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                  ];

                  let miladiDaysInMonth = [
                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                  ];

                  let isLeapYear =
                    gy % 4 === 0 && (gy % 100 !== 0 || gy % 400 === 0);
                  if (isLeapYear) {
                    miladiDaysInMonth[1] = 29;
                  }
                  let daysPassedMiladi = gd;
                  for (let i = 0; i < gm - 1; i++) {
                    daysPassedMiladi += miladiDaysInMonth[i];
                  }
                  let shamsiNewYearDay = new Date(gy, 2, 21);
                  let shamsiStartDayInMiladi =
                    (shamsiNewYearDay - new Date(gy, 0, 1)) /
                    (1000 * 60 * 60 * 24);
                  let daysPassedInShamsiYear =
                    daysPassedMiladi - shamsiStartDayInMiladi;
                  if (daysPassedInShamsiYear < 0) {
                    gy--;
                    shamsiNewYearDay = new Date(gy, 2, 21);
                    shamsiStartDayInMiladi =
                      (shamsiNewYearDay - new Date(gy, 0, 1)) /
                      (1000 * 60 * 60 * 24);
                    daysPassedInShamsiYear =
                      daysPassedMiladi + (365 - shamsiStartDayInMiladi);
                    if (isLeapYear) {
                      daysPassedInShamsiYear++;
                    }
                  }
                  let jy = gy - 621;
                  let jm = 0;
                  let jd = daysPassedInShamsiYear;
                  for (let i = 0; i < shamsiMonthDays.length; i++) {
                    if (jd <= shamsiMonthDays[i]) {
                      jm = i + 1;
                      break;
                    } else {
                      jd -= shamsiMonthDays[i];
                    }
                  }
                  return {
                    day: jd,
                    month: jm,
                    year: jy
                  };
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return { day: 7, month: 7, year: 1377 };
              }
              throw e;
            }
          })()
      },
      {
        path: "biorhythm.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "biorhythm.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "biorhythm.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "bday",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let jy = $state.birthday.year;
                let jm = $state.birthday.month;
                let jd = $state.birthday.day;
                let gy = jy + 621;
                let shamsiMonthDays = [
                  31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                ];

                let miladiDaysInMonth = [
                  31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                ];

                let isLeapYear =
                  gy % 4 === 0 && (gy % 100 !== 0 || gy % 400 === 0);
                if (isLeapYear) {
                  miladiDaysInMonth[1] = 29;
                }
                let daysPassedShamsi = jd;
                for (let i = 0; i < jm - 1; i++) {
                  daysPassedShamsi += shamsiMonthDays[i];
                }
                let daysInMiladiYear = isLeapYear ? 366 : 365;
                let miladiStartDay = new Date(gy, 2, 21);
                miladiStartDay.setDate(
                  miladiStartDay.getDate() + daysPassedShamsi - 1
                );
                let finalMiladiDay = miladiStartDay.getDate();
                let finalMiladiMonth = miladiStartDay.getMonth() + 1;
                let finalMiladiYear = miladiStartDay.getFullYear();
                return `${finalMiladiYear}-${finalMiladiMonth}-${finalMiladiDay}`;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return localStorage.getItem("token");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "firstTime",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                localStorage.getItem("birthDate") == "undefined" ||
                localStorage.getItem("birthDate") == null
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "ferstTimepage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.firstTime;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.ferstTimepage
      },
      {
        path: "userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let userinfo = localStorage.getItem("userinfo");
                return (userinfo = JSON.parse(userinfo));
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "log",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "bdayHamyar",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "birthday2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                let birthDate =
                  $state.userInfo.user.biorhythm.date.split("T")[0];
                if (birthDate == "undefined" || birthDate == null) {
                  return {
                    day: 7,
                    month: 7,
                    year: 1377
                  };
                } else {
                  let gy = parseInt(birthDate.split("-")[0]);
                  let gm = parseInt(birthDate.split("-")[1]);
                  let gd = parseInt(birthDate.split("-")[2]);
                  let shamsiMonthDays = [
                    31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                  ];

                  let miladiDaysInMonth = [
                    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                  ];

                  let isLeapYear =
                    gy % 4 === 0 && (gy % 100 !== 0 || gy % 400 === 0);
                  if (isLeapYear) {
                    miladiDaysInMonth[1] = 29;
                  }
                  let daysPassedMiladi = gd;
                  for (let i = 0; i < gm - 1; i++) {
                    daysPassedMiladi += miladiDaysInMonth[i];
                  }
                  let shamsiNewYearDay = new Date(gy, 2, 21);
                  let shamsiStartDayInMiladi =
                    (shamsiNewYearDay - new Date(gy, 0, 1)) /
                    (1000 * 60 * 60 * 24);
                  let daysPassedInShamsiYear =
                    daysPassedMiladi - shamsiStartDayInMiladi;
                  if (daysPassedInShamsiYear < 0) {
                    gy--;
                    shamsiNewYearDay = new Date(gy, 2, 21);
                    shamsiStartDayInMiladi =
                      (shamsiNewYearDay - new Date(gy, 0, 1)) /
                      (1000 * 60 * 60 * 24);
                    daysPassedInShamsiYear =
                      daysPassedMiladi + (365 - shamsiStartDayInMiladi);
                    if (isLeapYear) {
                      daysPassedInShamsiYear++;
                    }
                  }
                  let jy = gy - 621;
                  let jm = 0;
                  let jd = daysPassedInShamsiYear;
                  for (let i = 0; i < shamsiMonthDays.length; i++) {
                    if (jd <= shamsiMonthDays[i]) {
                      jm = i + 1;
                      break;
                    } else {
                      jd -= shamsiMonthDays[i];
                    }
                  }
                  return {
                    day: jd,
                    month: jm,
                    year: jy
                  };
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsyg4Uf6WCaaLe()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicBioritm.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicBioritm.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicBioritm.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens,
          plasmic_paziresh_24_design_system_css.plasmic_tokens,
          plasmic_hamdast_sdk_css.plasmic_tokens,
          sty.root,
          {
            [sty.rootferstTimepage]: hasVariant(
              $state,
              "ferstTimepage",
              "ferstTimepage"
            )
          }
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__seyZk)}>
          <div className={classNames(projectcss.all, sty.freeBox__qu4U2)}>
            <div
              className={classNames(projectcss.all, sty.freeBox__vWeMt, {
                [sty.freeBoxferstTimepage__vWeMtE3Nn4]: hasVariant(
                  $state,
                  "ferstTimepage",
                  "ferstTimepage"
                )
              })}
            >
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__iwcWq,
                  {
                    [sty.pferstTimepage__iwcWqe3Nn4]: hasVariant(
                      $state,
                      "ferstTimepage",
                      "ferstTimepage"
                    )
                  }
                )}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModalClick"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["slideinModal", "click"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModalClick"] != null &&
                    typeof $steps["updateSlideinModalClick"] === "object" &&
                    typeof $steps["updateSlideinModalClick"].then === "function"
                  ) {
                    $steps["updateSlideinModalClick"] = await $steps[
                      "updateSlideinModalClick"
                    ];
                  }
                }}
              >
                {
                  "\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u06cc\u0633\u062a\u061f"
                }
              </p>
              <div
                className={classNames(projectcss.all, sty.freeBox__ksWk1, {
                  [sty.freeBoxferstTimepage__ksWk1E3Nn4]: hasVariant(
                    $state,
                    "ferstTimepage",
                    "ferstTimepage"
                  )
                })}
              >
                {(
                  hasVariant($state, "ferstTimepage", "ferstTimepage")
                    ? true
                    : (() => {
                        try {
                          return !$state.biorhythm.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mssgD,
                      {
                        [sty.textferstTimepage__mssgDe3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return (() => {
                              if (!isNaN($state.birthday.year)) {
                                return (
                                  'این بیوریتم بر اساس تاریخ تولد <b style="color: #8254C6;">' +
                                  $state.birthday.year +
                                  "/" +
                                  $state.birthday.month +
                                  "/" +
                                  $state.birthday.day +
                                  "</b> محاسبه شده است."
                                );
                              } else {
                                return "";
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "--";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.biorhythm.loading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Ixds,
                      {
                        [sty.textferstTimepage___3IxdsE3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    <div
                      className={projectcss.__wab_expr_html_text}
                      dangerouslySetInnerHTML={{
                        __html: (() => {
                          try {
                            return "در حال دریافت اطلاعات از سرور ...";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "--";
                            }
                            throw e;
                          }
                        })()
                      }}
                    />
                  </div>
                ) : null}
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lhT0B, {
                  [sty.freeBoxferstTimepage__lhT0Be3Nn4]: hasVariant(
                    $state,
                    "ferstTimepage",
                    "ferstTimepage"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__x0TaT,
                    "bioritmbox"
                  )}
                  dir={"ltr"}
                >
                  <Icon25Icon
                    className={classNames(projectcss.all, sty.svg__nffvk)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sP6A6,
                      {
                        [sty.textferstTimepage__sP6A6E3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    {"\u0641\u06a9\u0631\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dYgX,
                      "negative",
                      {
                        [sty.textferstTimepage__dYgXe3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.biorhythm.data.result.intellectual + "%"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <AntdProgress
                    className={classNames(
                      "__wab_instance",
                      sty.progress__bBxGz
                    )}
                    percent={(() => {
                      try {
                        return Math.abs(
                          $state.biorhythm.data.result.intellectual
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return 0;
                        }
                        throw e;
                      }
                    })()}
                    strokeColor={(() => {
                      try {
                        return (() => {
                          if ($state.biorhythm.data.result.intellectual > 0) {
                            return "#00C371AA";
                          } else {
                            return "#EB464AAA";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    type={"circle"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___0JH3U,
                    "bioritmbox"
                  )}
                  dir={"ltr"}
                >
                  <Icon17Icon
                    className={classNames(projectcss.all, sty.svg__mblf)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sBoTr
                    )}
                  >
                    {"\u062c\u0633\u0645\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wFdMd,
                      "negative",
                      {
                        [sty.textferstTimepage__wFdMdE3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                    dir={"ltr"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.biorhythm.data.result.physical + "%";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <AntdProgress
                    className={classNames(
                      "__wab_instance",
                      sty.progress__cHyJl
                    )}
                    percent={(() => {
                      try {
                        return Math.abs($state.biorhythm.data.result.physical);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return 0;
                        }
                        throw e;
                      }
                    })()}
                    strokeColor={(() => {
                      try {
                        return (() => {
                          if ($state.biorhythm.data.result.physical > 0) {
                            return "#00C371AA";
                          } else {
                            return "#EB464AAA";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    type={"circle"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__cntaf,
                    "bioritmbox"
                  )}
                  dir={"ltr"}
                >
                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg__bo2Bi)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bwOJ
                    )}
                  >
                    {"\u0627\u062d\u0633\u0627\u0633\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gV8TG,
                      "negative",
                      {
                        [sty.textferstTimepage__gV8TGe3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.biorhythm.data.result.emotional + "%";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <AntdProgress
                    className={classNames(
                      "__wab_instance",
                      sty.progress__kQsLv
                    )}
                    percent={(() => {
                      try {
                        return Math.abs($state.biorhythm.data.result.emotional);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return 20;
                        }
                        throw e;
                      }
                    })()}
                    strokeColor={(() => {
                      try {
                        return (() => {
                          if ($state.biorhythm.data.result.emotional > 0) {
                            return "#00C371";
                          } else {
                            return "#EB464A";
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    type={"circle"}
                  />
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jkM3T, {
                  [sty.freeBoxferstTimepage__jkM3TE3Nn4]: hasVariant(
                    $state,
                    "ferstTimepage",
                    "ferstTimepage"
                  )
                })}
              >
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__qO8Kc
                  )}
                >
                  {"\u0645\u06cc\u0627\u0646\u06af\u06cc\u0646"}
                </p>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c3Odh,
                    "negative",
                    {
                      [sty.textferstTimepage__c3OdhE3Nn4]: hasVariant(
                        $state,
                        "ferstTimepage",
                        "ferstTimepage"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.biorhythm.data.result.avg + "%";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "--";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yhqRx)}
              >
                <ButtonLiom
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames("__wab_instance", sty.button2)}
                  color={generateStateValueProp($state, ["button2", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSlideinModal3Click"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["slideinModal3", "click"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSlideinModal3Click"] != null &&
                      typeof $steps["updateSlideinModal3Click"] === "object" &&
                      typeof $steps["updateSlideinModal3Click"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModal3Click"] = await $steps[
                        "updateSlideinModal3Click"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button2", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  {
                    "\u062a\u063a\u06cc\u06cc\u0631 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                  }
                </ButtonLiom>
                <ButtonLiom
                  data-plasmic-name={"button3"}
                  data-plasmic-override={overrides.button3}
                  className={classNames("__wab_instance", sty.button3, {
                    [sty.button3ferstTimepage]: hasVariant(
                      $state,
                      "ferstTimepage",
                      "ferstTimepage"
                    )
                  })}
                  color={generateStateValueProp($state, ["button3", "color"])}
                  isDisabled={
                    hasVariant($state, "ferstTimepage", "ferstTimepage")
                      ? true
                      : undefined
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (navigator.share) {
                                  let emothional =
                                    $state.biorhythm.data.result.emotional;
                                  let phisycal =
                                    $state.biorhythm.data.result.physical;
                                  let intellectual =
                                    $state.biorhythm.data.result.intellectual;
                                  let emothionalTxt = "",
                                    phisycalTxt = "",
                                    intellectualTxt = "";
                                  if (emothional < 0) {
                                    emothionalTxt = `امروز از نظر روحی خیلی پایین هستی. سطح شما: ${emothional}`;
                                  } else if (emothional < 50) {
                                    emothionalTxt = `امروز از نظر روحی نسبتا متعادل هستی اما لطفا باز هم هوای خودت رو داشته باش. سطح شما: ${emothional}`;
                                  } else if (emothional < 70) {
                                    emothionalTxt = `امروز از نظر روحی در وضعیت خوبی به سر میبری و همه چیز خوبه. سطح شما: ${emothional}`;
                                  } else if (emothional > 70) {
                                    emothionalTxt = `امروز از نظر روحی فوق العاده ای. سطح شما: ${emothional}`;
                                  }
                                  if (phisycal < 0) {
                                    phisycalTxt = `امروز از نظر فیزیکی خیلی کم انرژی و خسته ای به خودت سخت نگیر. سطح شما: ${phisycal}`;
                                  } else if (phisycal < 50) {
                                    phisycalTxt = `امروز از نظر فیزیکی سرحالی. سطح شما: ${phisycal}`;
                                  } else if (phisycal < 70) {
                                    phisycalTxt = `امروز روز خوبی برای انجام فعالیت های فیزیکی هست ازشون غافل نشو. سطح شما: ${phisycal}`;
                                  } else if (phisycal > 70) {
                                    phisycalTxt = `امروز از نظر فیزیکی در بهترین وضعیت خودت هستی. سطح شما: ${phisycal}`;
                                  }
                                  if (intellectual < 0) {
                                    intellectualTxt = `امروز از نظر فکری خیلی کم تمرکز به نظر میای. سطح شما: ${intellectual}`;
                                  } else if (intellectual < 50) {
                                    intellectualTxt = `امروز از نظر آمادگی ذهنی در وضعیت تقریبا خوبی به سر میبری. سطح شما: ${intellectual}`;
                                  } else if (intellectual < 70) {
                                    intellectualTxt = `امروز از نظر فکری عالی هستی وقتشه کارایی که نیاز به تمرکز دارن رو بذاری تو اولویت. سطح شما: ${intellectual}`;
                                  } else if (intellectual > 70) {
                                    intellectualTxt = `امروز از نظر ذهنی بهترین خودت هستی٬ بهترین موقع برای انجام کارای سخته!. سطح شما: ${intellectual}`;
                                  }
                                  let biorythmText = `وضعیت بیوریتم:\n${emothionalTxt}\n${phisycalTxt}\n${intellectualTxt}`;
                                  return navigator.share({
                                    title: "لیوم",
                                    text:
                                      "لیوم \n" +
                                      biorythmText +
                                      "\n برای دانلود رایگان لیوم و بررسی بیوریتم خود به لینک زیر مراجعه کنید :\n",
                                    url: "https://liom.app/link/man"
                                  });
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button3", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  {
                    "\u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0631\u06cc"
                  }
                </ButtonLiom>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__cWlXb)}>
              {(() => {
                try {
                  return localStorage.getItem("bioritmhamyar") == null;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__i3PRx)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] =
                      $state.userInfo.user?.biorhythm?.emotional !== undefined
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return localStorage.setItem(
                                  "bioritmhamyar",
                                  "true"
                                );
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction"] =
                      $state.userInfo.user?.biorhythm?.emotional == undefined
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "warning",
                                (() => {
                                  try {
                                    return (
                                      "تاریخ تولد " +
                                      $state.userInfo.user.name +
                                      " ثبت نشده. "
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["refreshData"] =
                      $state.userInfo.user?.biorhythm?.emotional !== undefined
                        ? (() => {
                            const actionArgs = {
                              queryInvalidation: ["plasmic_refresh_all"]
                            };
                            return (async ({ queryInvalidation }) => {
                              if (!queryInvalidation) {
                                return;
                              }
                              await plasmicInvalidate(queryInvalidation);
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["refreshData"] != null &&
                      typeof $steps["refreshData"] === "object" &&
                      typeof $steps["refreshData"].then === "function"
                    ) {
                      $steps["refreshData"] = await $steps["refreshData"];
                    }
                  }}
                >
                  <Icon101Icon
                    className={classNames(projectcss.all, sty.svg___7UzQd)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tVtD
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            " میخوای بیوریتم " +
                            $state.userInfo.user.name +
                            " ببینی ؟"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              ) : null}
            </div>
          </div>
          {(() => {
            try {
              return localStorage.getItem("bioritmhamyar") == null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gQu3Y)}
            />
          ) : null}
          {(() => {
            try {
              return localStorage.getItem("bioritmhamyar") == "true";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__znnHl, {
                [sty.freeBoxferstTimepage__znnHlE3Nn4]: hasVariant(
                  $state,
                  "ferstTimepage",
                  "ferstTimepage"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3I4Q
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return " حال امروز " + $state.userInfo.user.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u062d\u0627\u0644 \u0627\u0645\u0631\u0648\u0632 ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8KwMw)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___5Qc7F,
                    "hamyarBioritm"
                  )}
                  dir={"ltr"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rey6H)}
                  >
                    <Icon25Icon
                      className={classNames(projectcss.all, sty.svg__k2Nfy)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oyjy8,
                      {
                        [sty.textferstTimepage__oyjy8E3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    {"\u0641\u06a9\u0631\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n64Xh,
                      "negative",
                      {
                        [sty.textferstTimepage__n64XhE3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.userInfo.user.biorhythm.intellectual + "%"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uLi9T)}
                  >
                    <AntdProgress
                      className={classNames(
                        "__wab_instance",
                        sty.progress__uqHqO
                      )}
                      percent={(() => {
                        try {
                          return Math.abs(
                            $state.userInfo.user.biorhythm.intellectual
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                      strokeColor={(() => {
                        try {
                          return (() => {
                            if (
                              $state.userInfo.user.biorhythm.intellectual > 0
                            ) {
                              return "#00C3712A";
                            } else {
                              return "#EB464A2a";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      type={"line"}
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ezad5,
                    "hamyarBioritm"
                  )}
                  dir={"ltr"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uhBvp)}
                  >
                    <Icon17Icon
                      className={classNames(projectcss.all, sty.svg__wZbA)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ek4Cn
                    )}
                  >
                    {"\u062c\u0633\u0645\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iLYfT,
                      "negative",
                      {
                        [sty.textferstTimepage__iLYfTe3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.userInfo.user.biorhythm.physical + "%";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__t8Lo4)}
                  >
                    <AntdProgress
                      className={classNames(
                        "__wab_instance",
                        sty.progress__havm0
                      )}
                      percent={(() => {
                        try {
                          return Math.abs(
                            $state.userInfo.user.biorhythm.physical
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                      strokeColor={(() => {
                        try {
                          return (() => {
                            if ($state.userInfo.user.biorhythm.physical > 0) {
                              return "#00C3712A";
                            } else {
                              return "#EB464A2A";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      type={"line"}
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__x5Ofd,
                    "hamyarBioritm"
                  )}
                  dir={"ltr"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gmafh)}
                  >
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__jgrqg)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ckgyM
                    )}
                  >
                    {"\u0627\u062d\u0633\u0627\u0633\u06cc"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eA8O0,
                      "negative",
                      {
                        [sty.textferstTimepage__eA8O0E3Nn4]: hasVariant(
                          $state,
                          "ferstTimepage",
                          "ferstTimepage"
                        )
                      }
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.userInfo.user.biorhythm.emotional + "%";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "--";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ugXzs)}
                  >
                    <AntdProgress
                      className={classNames(
                        "__wab_instance",
                        sty.progress__qv8Mr
                      )}
                      percent={(() => {
                        try {
                          return Math.abs(
                            $state.userInfo.user.biorhythm.emotional
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 20;
                          }
                          throw e;
                        }
                      })()}
                      strokeColor={(() => {
                        try {
                          return (() => {
                            if ($state.userInfo.user.biorhythm.emotional > 0) {
                              return "#00C3712A";
                            } else {
                              return "#EB464A2A";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      type={"line"}
                    />
                  </div>
                </Stack__>
              </Stack__>
            </Stack__>
          ) : null}
          <div
            className={classNames(projectcss.all, sty.freeBox__vJlss, {
              [sty.freeBoxferstTimepage__vJlssE3Nn4]: hasVariant(
                $state,
                "ferstTimepage",
                "ferstTimepage"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__vJip)}>
              <p
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.p__cCcup
                )}
              >
                {
                  "\u062a\u0648\u0635\u06cc\u0647 \u0647\u0627\u06cc \u0645\u0631\u062a\u0628\u0637 \u0628\u0627 \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0627\u0645\u0631\u0648\u0632:"
                }
              </p>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__id013)}>
              {(
                hasVariant($state, "ferstTimepage", "ferstTimepage")
                  ? true
                  : (() => {
                      try {
                        return !$state.biorhythm.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <Stack__
                  as={"ul"}
                  data-plasmic-name={"ul"}
                  data-plasmic-override={overrides.ul}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.ul, sty.ul, {
                    [sty.ulferstTimepage]: hasVariant(
                      $state,
                      "ferstTimepage",
                      "ferstTimepage"
                    )
                  })}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.biorhythm.data.result.advice
                          .split("\n")
                          .filter(item => item.trim() !== "")
                          .map(item => item.replace(/^- /, ""));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <li
                        data-plasmic-name={"li"}
                        data-plasmic-override={overrides.li}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li
                        )}
                        key={currentIndex}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "--";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </li>
                    );
                  })}
                </Stack__>
              ) : null}
              {(() => {
                try {
                  return $state.biorhythm.loading;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <LottieWrapper
                  data-plasmic-name={"lottie"}
                  data-plasmic-override={overrides.lottie}
                  animationData={{
                    v: "5.6.10",
                    fr: 30,
                    ip: 30,
                    op: 210,
                    w: 800,
                    h: 600,
                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                    ddd: 0,
                    assets: [
                      {
                        id: "comp_0",
                        layers: [
                          {
                            ddd: 0,
                            ind: 1,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 18",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 340, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 0,
                                          s: [0]
                                        },
                                        { t: 30, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 0,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 2,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 17",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 320, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 10,
                                          s: [0]
                                        },
                                        { t: 40, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 10,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 3,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 16",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 300, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 20,
                                          s: [0]
                                        },
                                        { t: 50, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 20,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 4,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 15",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 280, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 30,
                                          s: [0]
                                        },
                                        { t: 60, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 30,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 5,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 14",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 260, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 40,
                                          s: [0]
                                        },
                                        { t: 70, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 40,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 6,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 13",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 240, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 50,
                                          s: [0]
                                        },
                                        { t: 80, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 121,
                            st: 50,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 7,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 12",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 220, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 60,
                                          s: [0]
                                        },
                                        { t: 90, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 60,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 8,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 11",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 200, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 70,
                                          s: [0]
                                        },
                                        { t: 100, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 70,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 9,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 10",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 180, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 80,
                                          s: [0]
                                        },
                                        { t: 110, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 80,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 10,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 9",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 160, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 90,
                                          s: [0]
                                        },
                                        { t: 120, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 90,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 11,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 8",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 140, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 100,
                                          s: [0]
                                        },
                                        { t: 130, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 100,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 12,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 7",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 120, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 110,
                                          s: [0]
                                        },
                                        { t: 140, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 0,
                            op: 181,
                            st: 110,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 13,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 6",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 100, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 120,
                                          s: [0]
                                        },
                                        { t: 150, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 420,
                            st: 120,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 14,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 5",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 80, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 130,
                                          s: [0]
                                        },
                                        { t: 160, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 430,
                            st: 130,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 15,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 4",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 60, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 140,
                                          s: [0]
                                        },
                                        { t: 170, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 440,
                            st: 140,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 16,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 3",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 40, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 150,
                                          s: [0]
                                        },
                                        { t: 180, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 450,
                            st: 150,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 17,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 2",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 20, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 160,
                                          s: [0]
                                        },
                                        { t: 190, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 460,
                            st: 160,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 18,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 1",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 0, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 170,
                                          s: [0]
                                        },
                                        { t: 200, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 78,
                            op: 470,
                            st: 170,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 19,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 24",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 340, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 180,
                                          s: [0]
                                        },
                                        { t: 210, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 180,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 20,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 23",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 320, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 190,
                                          s: [0]
                                        },
                                        { t: 220, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 190,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 21,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 22",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 300, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 200,
                                          s: [0]
                                        },
                                        { t: 230, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 200,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 22,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 21",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 280, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 210,
                                          s: [0]
                                        },
                                        { t: 240, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 210,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 23,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 20",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 260, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 220,
                                          s: [0]
                                        },
                                        { t: 250, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 220,
                            bm: 0
                          },
                          {
                            ddd: 0,
                            ind: 24,
                            ty: 4,
                            nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b1\u00c3\u0082\u00c2\u0082 19",
                            sr: 1,
                            ks: {
                              o: { a: 0, k: 100, ix: 11 },
                              r: { a: 0, k: 240, ix: 10 },
                              p: { a: 0, k: [400, 300, 0], ix: 2 },
                              a: { a: 0, k: [1.258, 2.078, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 }
                            },
                            ao: 0,
                            shapes: [
                              {
                                ty: "gr",
                                it: [
                                  {
                                    d: 1,
                                    ty: "el",
                                    s: { a: 0, k: [200, 200], ix: 2 },
                                    p: { a: 0, k: [0, 0], ix: 3 },
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Shape - Ellipse",
                                    hd: false
                                  },
                                  {
                                    ty: "tm",
                                    s: { a: 0, k: 0, ix: 1 },
                                    e: { a: 0, k: 5, ix: 2 },
                                    o: {
                                      a: 1,
                                      k: [
                                        {
                                          i: { x: [0.667], y: [1] },
                                          o: { x: [0.333], y: [0] },
                                          t: 230,
                                          s: [0]
                                        },
                                        { t: 260, s: [120] }
                                      ],
                                      ix: 3
                                    },
                                    m: 1,
                                    ix: 2,
                                    nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00bf\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00aa\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u0084 1",
                                    mn: "ADBE Vector Filter - Trim",
                                    hd: false
                                  },
                                  {
                                    ty: "st",
                                    c: {
                                      a: 0,
                                      k: [0.5098, 0.3294, 0.7765, 1],
                                      ix: 3
                                    },
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 40, ix: 5 },
                                    lc: 2,
                                    lj: 1,
                                    ml: 4,
                                    bm: 0,
                                    nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9 1",
                                    mn: "ADBE Vector Graphic - Stroke",
                                    hd: false
                                  },
                                  {
                                    ty: "tr",
                                    p: { a: 0, k: [1.258, 2.078], ix: 2 },
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    o: { a: 0, k: 100, ix: 7 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    nm: "\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u00a2"
                                  }
                                ],
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u00ad\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009c\u00c3\u0082\u00c2\u0086 1",
                                np: 4,
                                cix: 2,
                                bm: 0,
                                ix: 1,
                                mn: "ADBE Vector Group",
                                hd: false
                              }
                            ],
                            ip: 180,
                            op: 301,
                            st: 230,
                            bm: 0
                          }
                        ]
                      }
                    ],
                    layers: [
                      {
                        ddd: 0,
                        ind: 1,
                        ty: 0,
                        nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u0084\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                        refId: "comp_0",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 100, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [400, 300, 0], ix: 2 },
                          a: { a: 0, k: [400, 300, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                        },
                        ao: 0,
                        ef: [
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00ae\u00c3\u0082\u00c2\u0080\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u0095\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00a5\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0085\u00c3\u0082\u00c2\u00b7",
                            np: 4,
                            mn: "ADBE Simple Choker",
                            ix: 1,
                            en: 1,
                            ef: [
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be",
                                mn: "ADBE Simple Choker-0001",
                                ix: 1,
                                v: { a: 0, k: 1, ix: 1 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0081\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a9",
                                mn: "ADBE Simple Choker-0002",
                                ix: 2,
                                v: { a: 0, k: 14, ix: 2 }
                              }
                            ]
                          },
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098",
                            np: 10,
                            mn: "ADBE Ramp",
                            ix: 2,
                            en: 1,
                            ef: [
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0001",
                                ix: 1,
                                v: { a: 0, k: [400, 0], ix: 1 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0002",
                                ix: 2,
                                v: { a: 0, k: [0.556, 0.26, 1, 1], ix: 2 }
                              },
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0003",
                                ix: 3,
                                v: { a: 0, k: [400, 600], ix: 3 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0093\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u009d\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0004",
                                ix: 4,
                                v: { a: 0, k: [0.616, 0.36, 1, 1], ix: 4 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6",
                                mn: "ADBE Ramp-0005",
                                ix: 5,
                                v: { a: 0, k: 1, ix: 5 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0095\u00c3\u0082\u00c2\u00a3\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b0\u00c3\u0082\u00c2\u0084",
                                mn: "ADBE Ramp-0006",
                                ix: 6,
                                v: { a: 0, k: 0, ix: 6 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u008e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008e\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088",
                                mn: "ADBE Ramp-0007",
                                ix: 7,
                                v: { a: 0, k: 0, ix: 7 }
                              },
                              {
                                ty: 6,
                                nm: "",
                                mn: "ADBE Ramp-0008",
                                ix: 8,
                                v: 0
                              }
                            ]
                          }
                        ],
                        w: 800,
                        h: 600,
                        ip: 0,
                        op: 300,
                        st: 0,
                        bm: 0
                      },
                      {
                        ddd: 0,
                        ind: 2,
                        ty: 0,
                        nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u0084\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0088\u00c3\u0082\u00c2\u0090 1",
                        refId: "comp_0",
                        sr: 1,
                        ks: {
                          o: { a: 0, k: 56, ix: 11 },
                          r: { a: 0, k: 0, ix: 10 },
                          p: { a: 0, k: [400, 320, 0], ix: 2 },
                          a: { a: 0, k: [400, 300, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 }
                        },
                        ao: 0,
                        ef: [
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00ae\u00c3\u0082\u00c2\u0080\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008d\u00c3\u0082\u00c2\u0095\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00a5\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0085\u00c3\u0082\u00c2\u00b7",
                            np: 4,
                            mn: "ADBE Simple Choker",
                            ix: 1,
                            en: 1,
                            ef: [
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u0086\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be",
                                mn: "ADBE Simple Choker-0001",
                                ix: 1,
                                v: { a: 0, k: 1, ix: 1 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0098\u00c3\u0082\u00c2\u00bb\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a1\u00c3\u0082\u00c2\u009e\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0081\u00c3\u0082\u00c2\u00ae\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a9",
                                mn: "ADBE Simple Choker-0002",
                                ix: 2,
                                v: { a: 0, k: 14, ix: 2 }
                              }
                            ]
                          },
                          {
                            ty: 5,
                            nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098",
                            np: 10,
                            mn: "ADBE Ramp",
                            ix: 2,
                            en: 1,
                            ef: [
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0001",
                                ix: 1,
                                v: { a: 0, k: [400, 0], ix: 1 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00b5\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0002",
                                ix: 2,
                                v: { a: 0, k: [0.556, 0.26, 1, 1], ix: 2 }
                              },
                              {
                                ty: 3,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0088\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u0082\u00c3\u0082\u00c2\u00b9",
                                mn: "ADBE Ramp-0003",
                                ix: 3,
                                v: { a: 0, k: [400, 600], ix: 3 }
                              },
                              {
                                ty: 2,
                                nm: "\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bb\u00c3\u0082\u00c2\u0093\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u009d\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00a2\u00c3\u0082\u00c2\u009c\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u0089\u00c3\u0082\u00c2\u00b2",
                                mn: "ADBE Ramp-0004",
                                ix: 4,
                                v: { a: 0, k: [0.616, 0.36, 1, 1], ix: 4 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00bd\u00c3\u0082\u00c2\u00a2\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u008a\u00c3\u0082\u00c2\u00b6",
                                mn: "ADBE Ramp-0005",
                                ix: 5,
                                v: { a: 0, k: 1, ix: 5 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u0090\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008f\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0095\u00c3\u0082\u00c2\u00a3\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00b0\u00c3\u0082\u00c2\u0084",
                                mn: "ADBE Ramp-0006",
                                ix: 6,
                                v: { a: 0, k: 0, ix: 6 }
                              },
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a4\u00c3\u0082\u00c2\u00b8\u00c3\u0082\u00c2\u008e\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u008e\u00c3\u0082\u00c2\u009f\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a7\u00c3\u0082\u00c2\u008b\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u009b\u00c3\u0082\u00c2\u00be\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00b7\u00c3\u0082\u00c2\u00b7\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0088",
                                mn: "ADBE Ramp-0007",
                                ix: 7,
                                v: { a: 0, k: 0, ix: 7 }
                              },
                              {
                                ty: 6,
                                nm: "",
                                mn: "ADBE Ramp-0008",
                                ix: 8,
                                v: 0
                              }
                            ]
                          },
                          {
                            ty: 29,
                            nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u00ab\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0096\u00c3\u0082\u00c2\u00af\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a",
                            np: 5,
                            mn: "ADBE Gaussian Blur 2",
                            ix: 3,
                            en: 1,
                            ef: [
                              {
                                ty: 0,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00ba\u00c3\u0082\u00c2\u00a6",
                                mn: "ADBE Gaussian Blur 2-0001",
                                ix: 1,
                                v: { a: 0, k: 41.3, ix: 1 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u00a8\u00c3\u0082\u00c2\u00a1\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b3\u00c3\u0082\u00c2\u008a\u00c3\u0083\u00c2\u00a6\u00c3\u0082\u00c2\u0096\u00c3\u0082\u00c2\u00b9\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0090\u00c3\u0082\u00c2\u0091",
                                mn: "ADBE Gaussian Blur 2-0002",
                                ix: 2,
                                v: { a: 0, k: 1, ix: 2 }
                              },
                              {
                                ty: 7,
                                nm: "\u00c3\u0083\u00c2\u00a9\u00c3\u0082\u00c2\u0087\u00c3\u0082\u00c2\u008d\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u00a4\u00c3\u0082\u00c2\u008d\u00c3\u0083\u00c2\u00a8\u00c3\u0082\u00c2\u00be\u00c3\u0082\u00c2\u00b9\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00bc\u00c3\u0082\u00c2\u0098\u00c3\u0083\u00c2\u00a5\u00c3\u0082\u00c2\u0083\u00c3\u0082\u00c2\u008f\u00c3\u0083\u00c2\u00a7\u00c3\u0082\u00c2\u00b4\u00c3\u0082\u00c2\u00a0",
                                mn: "ADBE Gaussian Blur 2-0003",
                                ix: 3,
                                v: { a: 0, k: 0, ix: 3 }
                              }
                            ]
                          }
                        ],
                        w: 800,
                        h: 600,
                        ip: 0,
                        op: 300,
                        st: 0,
                        bm: 0
                      }
                    ],
                    markers: []
                  }}
                  autoplay={true}
                  className={classNames("__wab_instance", sty.lottie)}
                  loop={true}
                  preview={false}
                />
              ) : null}
            </div>
          </div>
          <SlideinModal
            data-plasmic-name={"slideinModal"}
            data-plasmic-override={overrides.slideinModal}
            className={classNames("__wab_instance", sty.slideinModal, {
              [sty.slideinModalferstTimepage]: hasVariant(
                $state,
                "ferstTimepage",
                "ferstTimepage"
              )
            })}
            click={generateStateValueProp($state, ["slideinModal", "click"])}
            onClick={async event => {
              const $steps = {};

              $steps["updateSlideinModalClick"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["slideinModal", "click"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSlideinModalClick"] != null &&
                typeof $steps["updateSlideinModalClick"] === "object" &&
                typeof $steps["updateSlideinModalClick"].then === "function"
              ) {
                $steps["updateSlideinModalClick"] = await $steps[
                  "updateSlideinModalClick"
                ];
              }
            }}
            onClickChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "slideinModal",
                "click"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__oD4S)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7B0Jg
                )}
              >
                {"\u0628\u06cc\u0648\u0631\u06cc\u062a\u0645"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__og628
                )}
              >
                {
                  "\u0634\u062f\u0647 \u06af\u0627\u0647\u06cc \u0627\u0648\u0642\u0627\u062a \u0628\u0627 \u062e\u0648\u062f\u062a \u0628\u06af\u06cc \u0627\u0644\u0627\u0646 \u00bb \u062d\u0648\u0635\u0644\u0647 \u0647\u06cc\u0686 \u06a9\u0627\u0631\u06cc \u0631\u0648 \u0646\u062f\u0627\u0631\u0645 \u061b \u06cc\u0627 \u0627\u0645\u0631\u0648\u0632 \u0631\u0648\u06cc \u0645\u0646 \u0646\u06cc\u0633\u062a . \u00bb \u0627\u06cc\u0646\u0637\u0648\u0631 \u0628\u0647 \u0646\u0638\u0631 \u0645\u06cc\u0631\u0633\u0647 \u06a9\u0647 \u062f\u0631 \u0628\u0639\u0636\u06cc \u0634\u0631\u0627\u06cc\u0637 \u060c \u0642\u062f\u0631\u062a \u062c\u0633\u0645\u06cc \u0630\u0647\u0646\u06cc \u0648 \u0627\u062d\u0633\u0627\u0633\u06cc \u060c \u0645\u0627 \u0628\u0627 \u0647\u0645 . \u0647\u0645\u0627\u0647\u0646\u06af \u0646\u06cc\u0633\u062a\u0646 \u06a9\u0647 \u0647\u0645\u0647 \u0627\u06cc\u0646\u0647\u0627 \u0628\u0647 \u0633\u06cc\u06a9\u0644\u0647\u0627\u06cc \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0628\u0631\u0645\u06cc\u06af\u0631\u062f\u0647.\n\u062f\u0631 \u0648\u0627\u0642\u0639 \u0628\u064a\u0648\u0631\u064a\u062a\u0645 \u0646\u0628\u0636 \u062d\u064a\u0627\u062a \u06cc\u0627 \u0632\u06cc\u0633\u062a \u060c \u0622\u0647\u0646\u06af \u0639\u0644\u0645 \u0648 \u062f\u0627\u0646\u0634\u06cc \u0627\u0633\u062a \u06a9\u0647 \u0628\u0647 \u0648\u0627\u0633\u0637\u0647 \u0627\u0648\u0646 \u0631\u06cc\u062a\u0645\u0647\u0627\u06cc \u0628\u062f\u0646 \u0627\u0646\u0633\u0627\u0646 \u0634\u0646\u0627\u062e\u062a\u0647 \u0645\u06cc\u0634\u0647 \u0628\u0631\u0627\u0633\u0627\u0633 \u0646\u0638\u0631\u064a\u0647 \u0628\u064a\u0648\u0631\u064a\u062a\u0645 \u0633\u0637\u0648\u062d \u0645\u062e\u062a\u0644\u0641\u06cc \u0627\u0632 \u0627\u0646\u0631\u0698\u06cc \u0627\u0632 \u0647\u0645\u0627\u0646 \u0627\u0628\u062a\u062f\u0627\u06cc \u062a\u0648\u0644\u062f \u062f\u0631 \u0627\u0646\u0633\u0627\u0646 \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u0647 \u062f\u0631 \u0648\u0627\u0642\u0639 \u0634\u0631\u0648\u0639 \u0648 \u067e\u0627\u06cc\u0627\u0646 \u0647\u0631 \u0686\u0631\u062e\u0647 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f \u0641\u0631\u062f \u062a\u0639\u06cc\u06cc\u0646 \u0645\u06cc\u0634\u0647 \u0627\u06cc\u0646 \u0627\u0646\u0631\u0698\u06cc \u062f\u0631 \u06cc\u06a9 \u0628\u0627\u0632\u0647 \u0632\u0645\u0627\u0646\u06cc \u0645\u0634\u062e\u0635 \u06a9\u0645 \u0648 \u0632\u06cc\u0627\u062f \u0645\u06cc\u0634\u0647 \u0648 \u0631\u0648\u06cc \u0631\u0641\u062a\u0627\u0631 \u0648 \u062d\u0627\u0644\u0627\u062a \u0627\u0646\u0633\u0627\u0646 \u062a\u0623\u062b\u06cc\u0631 \u0645\u06cc\u0630\u0627\u0631\u0647. \n\n1- \u0686\u0631\u062e\u0647 \u0641\u06cc\u0632\u06cc\u06a9\u06cc ( Physical ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0647\u0631 \u06f2\u06f3 \u0631\u0648\u0632 \u06cc\u06a9\u0628\u0627\u0631 \u0627\u062a\u0641\u0627\u0642 \u0645\u06cc\u0627\u0641\u062a\u062f \u0632\u0645\u0627\u0646\u06cc \u06a9\u0647 \u062f\u0631 \u0627\u0648\u062c \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0642\u0631\u0627\u0631 \u062f\u0627\u0631\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 \u0647\u0631 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0631\u06cc \u0627\u0639\u062a\u0645\u0627\u062f \u0628\u0647 \u0646\u0641\u0633 \u060c \u0627\u0646\u0631\u0698\u06cc \u0648 ... \u062f\u0627\u0631\u06cc\u062f . \u0627\u06cc\u0646 \u062f\u0631 \u062d\u0627\u0644\u06cc \u0627\u0633\u062a \u06a9\u0647 \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u062d\u0631\u0627\u0646\u06cc \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0628\u06cc\u0634\u062a\u0631 \u062a\u062d\u062a \u062a\u0623\u062b\u06cc\u0631 \u0628\u06cc\u0645\u0627\u0631\u06cc \u0647\u0627 \u0642\u0631\u0627\u0631 \u0645\u06cc \u06af\u06cc\u0631\u06cc\u062f . \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0641\u06cc\u0632\u06cc\u06a9\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0627\u0633\u062a \u06a9\u0647 \u0647\u0631 \u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u062f .\n\n\u06f2- \u0686\u0631\u062e\u0647 \u0627\u062d\u0633\u0627\u0633\u06cc ( Emotional ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u06f2\u06f8 \u0631\u0648\u0632\u0647 \u0627\u0633\u062a \u0648\u0642\u062a\u06cc \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0648\u062c \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0642\u0631\u0627\u0631 \u062f\u0627\u0631\u06cc\u062f \u0627\u062d\u0633\u0627\u0633 \u0645\u06cc\u06a9\u0646\u06cc\u062f \u0628\u06cc\u0634 \u0627\u0632 \u0647\u0631 \u0632\u0645\u0627\u0646 \u062f\u06cc\u06af\u0631 \u0634\u0627\u062f \u0648 \u0628\u0627\u0637\u0631\u0627\u0648\u062a \u0647\u0633\u062a\u06cc\u062f . \u062f\u0631 \u0645\u0642\u0627\u0628\u0644 \u0622\u0646 \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0628\u062d\u0631\u0627\u0646\u06cc \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u062a\u062d\u0631\u06cc\u06a9 \u067e\u0630\u06cc\u0631\u06cc \u0628\u0627\u0644\u0627\u06cc\u06cc \u062f\u0627\u0631\u06cc\u062f \u061b \u0627\u062d\u062a\u0645\u0627\u0644\u0627 \u0647\u0645\u0627\u0646 \u0631\u0648\u0632\u0647\u0627\u06cc\u06cc \u0627\u0633\u062a \u06a9\u0647 \u0645\u062b\u0644\u0627 \u0645\u06cc\u06af\u0648\u06cc\u06cc\u062f \u062d\u0648\u0635\u0644\u0647 \u0646\u062f\u0627\u0631\u0645 \u0648\u0644\u0645 \u06a9\u0646\u06cc\u062f \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0627\u062d\u0633\u0627\u0633\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0647\u0633\u062a\u0634 \u06a9\u0647 \u0647\u0631\u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0631\u0648\u062d\u06cc \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc\u062f .\n \n\u06f3- \u0686\u0631\u062e\u0647 \u0630\u0647\u0646\u06cc ( Intellectual ) \n\u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u0631\u0627 \u0647\u0631 \u0663\u0663 \u0631\u0648\u0632 \u06cc\u06a9\u0628\u0627\u0631 \u062a\u062c\u0631\u0628\u0647 \u0645\u06cc.\u06a9\u0646\u06cc\u062f \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0648\u062c \u0627\u06cc\u0646 \u062f\u0648\u0631\u0647 \u0642\u062f\u0631\u062a \u062a\u0635\u0645\u06cc\u0645 \u06af\u06cc\u0631\u06cc \u062e\u0648\u0628\u06cc \u062f\u0627\u0631\u06cc\u062f \u0648 \u0628\u0647 \u0631\u0627\u062d\u062a\u06cc \u0645\u06cc \u062a\u0648\u0627\u0646\u06cc\u062f \u0645\u0633\u0627\u0626\u0644 \u0648 \u0645\u0634\u06a9\u0644\u0627\u062a \u0631\u0627 \u062d\u0644 \u0648 \u0645\u062f\u06cc\u0631\u06cc\u062a .\u06a9\u0646\u06cc\u062f \u062f\u0631 \u0631\u0648\u0632\u0647\u0627\u06cc \u0627\u0641\u0648\u0644 \u0627\u06cc\u0646 \u0686\u0631\u062e\u0647 \u062a\u0645\u0631\u06a9\u0632 \u0628\u0633\u06cc\u0627\u0631 \u06a9\u0645\u06cc \u062f\u0627\u0631\u06cc\u062f \u0648 \u062d\u062a\u06cc \u0634\u0627\u06cc\u062f \u062a\u0648\u0627\u0646 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0646 \u06a9\u0627\u0631\u0647\u0627\u06cc\u06cc \u06a9\u0647 \u0642\u0628\u0644\u0627 \u062f\u0627\u0634\u062a\u06cc\u062f \u0631\u0627 \u0646\u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f . \n\u0639\u062f\u062f \u0628\u06cc\u0648\u0631\u06cc\u062a\u0645 \u0686\u0631\u062e\u0647 \u0630\u0647\u0646\u06cc\u060c \u0627\u0632 \u0645\u0646\u0641\u06cc 100 \u062a\u0627 \u0645\u062b\u0628\u062a 100 \u0647\u0633\u062a\u0634 \u06a9\u0647 \u0647\u0631 \u0686\u0642\u062f\u0631 \u0627\u06cc\u0646 \u0639\u062f\u062f \u0628\u0647 \u0645\u062b\u0628\u062a 100 \u0646\u0632\u062f\u06cc\u06a9 \u062a\u0631 \u0628\u0627\u0634\u0647 \u0648\u0636\u0639\u06cc\u062a\u062a \u0630\u0647\u0646\u06cc \u0628\u0647\u062a\u0631\u06cc \u062f\u0627\u0631\u06cc. \n"
                }
              </div>
            </Stack__>
          </SlideinModal>
          <SlideinModal
            data-plasmic-name={"slideinModal2"}
            data-plasmic-override={overrides.slideinModal2}
            className={classNames("__wab_instance", sty.slideinModal2, {
              [sty.slideinModal2ferstTimepage]: hasVariant(
                $state,
                "ferstTimepage",
                "ferstTimepage"
              )
            })}
            click={generateStateValueProp($state, ["slideinModal2", "click"])}
            onClick={async event => {
              const $steps = {};
            }}
            onClickChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "slideinModal2",
                "click"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___7Dfdi, {
                [sty.freeBoxferstTimepage___7Dfdie3Nn4]: hasVariant(
                  $state,
                  "ferstTimepage",
                  "ferstTimepage"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y9Fph
                )}
              >
                {
                  "\u0627\u0646\u062a\u062e\u0627\u0628 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qx0Dp, {
                  [sty.freeBoxferstTimepage__qx0Dpe3Nn4]: hasVariant(
                    $state,
                    "ferstTimepage",
                    "ferstTimepage"
                  )
                })}
              >
                <ButtonLiom
                  data-plasmic-name={"button5"}
                  data-plasmic-override={overrides.button5}
                  className={classNames("__wab_instance", sty.button5, {
                    [sty.button5ferstTimepage]: hasVariant(
                      $state,
                      "ferstTimepage",
                      "ferstTimepage"
                    )
                  })}
                  color={generateStateValueProp($state, ["button5", "color"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateBirthday"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["birthday"]
                            },
                            operation: 0,
                            value: $state.datePickers2.value
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateBirthday"] != null &&
                      typeof $steps["updateBirthday"] === "object" &&
                      typeof $steps["updateBirthday"].then === "function"
                    ) {
                      $steps["updateBirthday"] = await $steps["updateBirthday"];
                    }

                    $steps["updateBday"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["bday"]
                            },
                            operation: 0,
                            value: (() => {
                              let jy = $state.birthday.year;
                              let jm = $state.birthday.month;
                              let jd = $state.birthday.day;
                              let gy = jy + 621;
                              let shamsiMonthDays = [
                                31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                              ];

                              let miladiDaysInMonth = [
                                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                              ];

                              let isLeapYear =
                                gy % 4 === 0 &&
                                (gy % 100 !== 0 || gy % 400 === 0);
                              if (isLeapYear) {
                                miladiDaysInMonth[1] = 29;
                              }
                              let daysPassedShamsi = jd;
                              for (let i = 0; i < jm - 1; i++) {
                                daysPassedShamsi += shamsiMonthDays[i];
                              }
                              let daysInMiladiYear = isLeapYear ? 366 : 365;
                              let miladiStartDay = new Date(gy, 2, 21);
                              miladiStartDay.setDate(
                                miladiStartDay.getDate() + daysPassedShamsi - 1
                              );
                              let finalMiladiDay = miladiStartDay.getDate();
                              let finalMiladiMonth =
                                miladiStartDay.getMonth() + 1;
                              let finalMiladiYear =
                                miladiStartDay.getFullYear();
                              return `${finalMiladiYear}-${finalMiladiMonth}-${finalMiladiDay}`;
                            })()
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateBday"] != null &&
                      typeof $steps["updateBday"] === "object" &&
                      typeof $steps["updateBday"].then === "function"
                    ) {
                      $steps["updateBday"] = await $steps["updateBday"];
                    }

                    $steps["updateSlideinModal2Click"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["slideinModal2", "click"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSlideinModal2Click"] != null &&
                      typeof $steps["updateSlideinModal2Click"] === "object" &&
                      typeof $steps["updateSlideinModal2Click"].then ===
                        "function"
                    ) {
                      $steps["updateSlideinModal2Click"] = await $steps[
                        "updateSlideinModal2Click"
                      ];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PUT",
                              "https://n8n.staas.ir/webhook/hamyar/biorhythm",
                              undefined,
                              (() => {
                                try {
                                  return { birthDate: $state.bday };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization: $state.token
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction.data.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                                "top-left"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return localStorage.setItem(
                                "birthDate",
                                JSON.stringify({
                                  year: parseInt($state.bday.split("-")[0]),
                                  month: parseInt($state.bday.split("-")[1]),
                                  day: parseInt($state.bday.split("-")[2])
                                })
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["updateFerstTimepage"] =
                      $steps.invokeGlobalAction.data.success == true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "ferstTimepage",
                              operation: 6,
                              value: "ferstTimepage"
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, false);
                              return false;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateFerstTimepage"] != null &&
                      typeof $steps["updateFerstTimepage"] === "object" &&
                      typeof $steps["updateFerstTimepage"].then === "function"
                    ) {
                      $steps["updateFerstTimepage"] = await $steps[
                        "updateFerstTimepage"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, ["button5", "color"])(
                        eventArgs[0]
                      );
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ncSpl
                    )}
                  >
                    {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                  </div>
                </ButtonLiom>
              </Stack__>
            </div>
          </SlideinModal>
        </div>
        <ApiRequest
          data-plasmic-name={"biorhythm"}
          data-plasmic-override={overrides.biorhythm}
          body={(() => {
            try {
              return {
                birthDate: $state.bday
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.biorhythm)}
          config={(() => {
            try {
              return {
                headers: {
                  "Content-Type": "application/json",
                  Authorization: $state.token
                }
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          errorDisplay={null}
          loadingDisplay={null}
          method={"POST"}
          onError={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["biorhythm", "error"]).apply(
              null,
              eventArgs
            );
          }}
          onLoading={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["biorhythm", "loading"]).apply(
              null,
              eventArgs
            );
          }}
          onSuccess={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["biorhythm", "data"]).apply(
              null,
              eventArgs
            );

            (async data => {
              const $steps = {};

              $steps["invokeGlobalAction"] =
                $state.userInfo != "undefined" || $state.userInfo != null
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://api.liom.app/service/log",
                          undefined,
                          (() => {
                            try {
                              return {
                                userId: $state.userInfo.man.id,
                                pageName: "biorhythm",
                                action: "loadePage",
                                extraData: {
                                  refCode: $ctx.query.r,
                                  mobile: $state.userInfo.man.mobile
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          {
                            headers: {
                              "Content-Type": "application/json",
                              Authorization:
                                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                            }
                          }
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }).apply(null, eventArgs);
          }}
          url={"https://n8n.staas.ir/webhook/hamyar/biorhythm"}
        />

        <SlideinModal
          data-plasmic-name={"slideinModal3"}
          data-plasmic-override={overrides.slideinModal3}
          className={classNames("__wab_instance", sty.slideinModal3, {
            [sty.slideinModal3ferstTimepage]: hasVariant(
              $state,
              "ferstTimepage",
              "ferstTimepage"
            )
          })}
          click={generateStateValueProp($state, ["slideinModal3", "click"])}
          onClick={async event => {
            const $steps = {};

            $steps["updateSlideinModalClick"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["slideinModal", "click"]
                    },
                    operation: 0,
                    value: false
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateSlideinModalClick"] != null &&
              typeof $steps["updateSlideinModalClick"] === "object" &&
              typeof $steps["updateSlideinModalClick"].then === "function"
            ) {
              $steps["updateSlideinModalClick"] = await $steps[
                "updateSlideinModalClick"
              ];
            }
          }}
          onClickChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["slideinModal3", "click"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___2KNk, {
              [sty.freeBoxferstTimepage___2KNkE3Nn4]: hasVariant(
                $state,
                "ferstTimepage",
                "ferstTimepage"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___0LbCj
              )}
            >
              {
                "\u0627\u0646\u062a\u062e\u0627\u0628 \u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
              }
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hzxHm, {
                [sty.freeBoxferstTimepage__hzxHme3Nn4]: hasVariant(
                  $state,
                  "ferstTimepage",
                  "ferstTimepage"
                )
              })}
            >
              <ButtonLiom
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button, {
                  [sty.buttonferstTimepage]: hasVariant(
                    $state,
                    "ferstTimepage",
                    "ferstTimepage"
                  )
                })}
                color={generateStateValueProp($state, ["button", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateBirthday"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["birthday"]
                          },
                          operation: 0,
                          value: $state.datePickers.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateBirthday"] != null &&
                    typeof $steps["updateBirthday"] === "object" &&
                    typeof $steps["updateBirthday"].then === "function"
                  ) {
                    $steps["updateBirthday"] = await $steps["updateBirthday"];
                  }

                  $steps["updateBday"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["bday"]
                          },
                          operation: 0,
                          value: (() => {
                            let jy = $state.birthday.year;
                            let jm = $state.birthday.month;
                            let jd = $state.birthday.day;
                            let gy = jy + 621;
                            let shamsiMonthDays = [
                              31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29
                            ];

                            let miladiDaysInMonth = [
                              31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
                            ];

                            let isLeapYear =
                              gy % 4 === 0 &&
                              (gy % 100 !== 0 || gy % 400 === 0);
                            if (isLeapYear) {
                              miladiDaysInMonth[1] = 29;
                            }
                            let daysPassedShamsi = jd;
                            for (let i = 0; i < jm - 1; i++) {
                              daysPassedShamsi += shamsiMonthDays[i];
                            }
                            let daysInMiladiYear = isLeapYear ? 366 : 365;
                            let miladiStartDay = new Date(gy, 2, 21);
                            miladiStartDay.setDate(
                              miladiStartDay.getDate() + daysPassedShamsi - 1
                            );
                            let finalMiladiDay = miladiStartDay.getDate();
                            let finalMiladiMonth =
                              miladiStartDay.getMonth() + 1;
                            let finalMiladiYear = miladiStartDay.getFullYear();
                            return `${finalMiladiYear}-${finalMiladiMonth}-${finalMiladiDay}`;
                          })()
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateBday"] != null &&
                    typeof $steps["updateBday"] === "object" &&
                    typeof $steps["updateBday"].then === "function"
                  ) {
                    $steps["updateBday"] = await $steps["updateBday"];
                  }

                  $steps["updateSlideinModal3Click"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["slideinModal3", "click"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModal3Click"] != null &&
                    typeof $steps["updateSlideinModal3Click"] === "object" &&
                    typeof $steps["updateSlideinModal3Click"].then ===
                      "function"
                  ) {
                    $steps["updateSlideinModal3Click"] = await $steps[
                      "updateSlideinModal3Click"
                    ];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PUT",
                            "https://n8n.staas.ir/webhook/hamyar/biorhythm",
                            undefined,
                            (() => {
                              try {
                                return { birthDate: $state.bday };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return {
                                  headers: {
                                    "Content-Type": "application/json",
                                    Authorization: $state.token
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] =
                    $steps.invokeGlobalAction.data.success == true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                              "top-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return localStorage.setItem(
                              "birthDate",
                              JSON.stringify({
                                year: parseInt($state.bday.split("-")[0]),
                                month: parseInt($state.bday.split("-")[1]),
                                day: parseInt($state.bday.split("-")[2])
                              })
                            );
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateFerstTimepage"] =
                    $steps.invokeGlobalAction.data.success == true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "ferstTimepage",
                            operation: 6,
                            value: "ferstTimepage"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateFerstTimepage"] != null &&
                    typeof $steps["updateFerstTimepage"] === "object" &&
                    typeof $steps["updateFerstTimepage"].then === "function"
                  ) {
                    $steps["updateFerstTimepage"] = await $steps[
                      "updateFerstTimepage"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__e6EcK
                  )}
                >
                  {"\u0627\u0646\u062a\u062e\u0627\u0628"}
                </div>
              </ButtonLiom>
              <ButtonLiom
                data-plasmic-name={"button4"}
                data-plasmic-override={overrides.button4}
                className={classNames("__wab_instance", sty.button4, {
                  [sty.button4ferstTimepage]: hasVariant(
                    $state,
                    "ferstTimepage",
                    "ferstTimepage"
                  )
                })}
                color={generateStateValueProp($state, ["button4", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSlideinModal3Click"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["slideinModal3", "click"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSlideinModal3Click"] != null &&
                    typeof $steps["updateSlideinModal3Click"] === "object" &&
                    typeof $steps["updateSlideinModal3Click"].then ===
                      "function"
                  ) {
                    $steps["updateSlideinModal3Click"] = await $steps[
                      "updateSlideinModal3Click"
                    ];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["button4", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hmwQ
                  )}
                >
                  {"\u0628\u0631\u06af\u0634\u062a"}
                </div>
              </ButtonLiom>
            </Stack__>
          </div>
        </SlideinModal>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__uNVy8)}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__x89Wq)}
            onClick={async event => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (window.location.href =
                          "https://apps.liom.app/hamyar/?r=" +
                          $state.userInfo.r +
                          "&m=" +
                          $state.userInfo.m);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          >
            <Icon6Icon
              className={classNames(projectcss.all, sty.svg___54MPm)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mJKpd
              )}
            >
              {"\u0647\u0645\u06cc\u0627\u0631"}
            </div>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__bc51Z)}
            onClick={async event => {
              const $steps = {};
            }}
          >
            <Icon24Icon
              className={classNames(projectcss.all, sty.svg__i1OvU)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7UoRd
              )}
            >
              {"\u062d\u0627\u0644 \u0627\u0645\u0631\u0648\u0632"}
            </div>
          </div>
          {(() => {
            try {
              return $state.userInfo.m == "71ef2e";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              aria-pressed={undefined}
              className={classNames(projectcss.all, sty.freeBox___0Dpxx)}
              onClick={async event => {
                const $steps = {};

                $steps["goToFood"] = true
                  ? (() => {
                      const actionArgs = { destination: `/food` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToFood"] != null &&
                  typeof $steps["goToFood"] === "object" &&
                  typeof $steps["goToFood"].then === "function"
                ) {
                  $steps["goToFood"] = await $steps["goToFood"];
                }
              }}
            >
              <Icon72Icon
                className={classNames(projectcss.all, sty.svg__lyhqs)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nuicH
                )}
              >
                {
                  "\u06a9\u0646\u062a\u0631\u0644 \u062a\u063a\u0630\u06cc\u0647"
                }
              </div>
            </div>
          ) : null}
        </Stack__>
        <Embed
          data-plasmic-name={"favicon"}
          data-plasmic-override={overrides.favicon}
          className={classNames("__wab_instance", sty.favicon)}
          code={
            "<script>\r\n(function() {\r\n    var link = document.querySelector(\"link[rel='icon']\");\r\n    if (!link) {\r\n        link = document.createElement('link');\r\n        link.rel = 'icon';\r\n        document.head.appendChild(link);\r\n    }\r\n    link.href = 'https://site-assets.plasmic.app/1efb20da13dc901df2ae2f3b7a43de6e.ico';\r\n})();\r\n</script>\r\n"
          }
        />
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "button2",
    "button3",
    "ul",
    "li",
    "lottie",
    "slideinModal",
    "slideinModal2",
    "button5",
    "biorhythm",
    "slideinModal3",
    "button",
    "button4",
    "favicon"
  ],
  button2: ["button2"],
  button3: ["button3"],
  ul: ["ul", "li"],
  li: ["li"],
  lottie: ["lottie"],
  slideinModal: ["slideinModal"],
  slideinModal2: ["slideinModal2", "button5"],
  button5: ["button5"],
  biorhythm: ["biorhythm"],
  slideinModal3: ["slideinModal3", "button", "button4"],
  button: ["button"],
  button4: ["button4"],
  favicon: ["favicon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button2: typeof ButtonLiom;
  button3: typeof ButtonLiom;
  ul: "ul";
  li: "li";
  lottie: typeof LottieWrapper;
  slideinModal: typeof SlideinModal;
  slideinModal2: typeof SlideinModal;
  button5: typeof ButtonLiom;
  biorhythm: typeof ApiRequest;
  slideinModal3: typeof SlideinModal;
  button: typeof ButtonLiom;
  button4: typeof ButtonLiom;
  favicon: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBioritm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBioritm__VariantsArgs;
    args?: PlasmicBioritm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBioritm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBioritm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBioritm__ArgProps,
          internalVariantPropNames: PlasmicBioritm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBioritm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBioritm";
  } else {
    func.displayName = `PlasmicBioritm.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicBioritm = Object.assign(
  // Top-level PlasmicBioritm renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    ul: makeNodeComponent("ul"),
    li: makeNodeComponent("li"),
    lottie: makeNodeComponent("lottie"),
    slideinModal: makeNodeComponent("slideinModal"),
    slideinModal2: makeNodeComponent("slideinModal2"),
    button5: makeNodeComponent("button5"),
    biorhythm: makeNodeComponent("biorhythm"),
    slideinModal3: makeNodeComponent("slideinModal3"),
    button: makeNodeComponent("button"),
    button4: makeNodeComponent("button4"),
    favicon: makeNodeComponent("favicon"),

    // Metadata about props expected for PlasmicBioritm
    internalVariantProps: PlasmicBioritm__VariantProps,
    internalArgProps: PlasmicBioritm__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "همیار لیوم",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicBioritm;
/* prettier-ignore-end */
