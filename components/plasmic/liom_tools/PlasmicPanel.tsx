/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: sJlAsjxfgFPQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Backgrond from "../../Backgrond"; // plasmic-import: nqaGqDTn_cay/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LoadingConclusion from "../../LoadingConclusion"; // plasmic-import: 4McqJ57YwWl3/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_paziresh_24_design_system } from "../paziresh_24_design_system/PlasmicStyleTokensProvider"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/styleTokensProvider
import { _useStyleTokens as useStyleTokens_hamdast_sdk } from "../hamdast_sdk/PlasmicStyleTokensProvider"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicPanel.module.css"; // plasmic-import: sJlAsjxfgFPQ/css

import XIcon from "../hamdast_sdk/icons/PlasmicIcon__X"; // plasmic-import: S0M2VMEAEs7X/icon
import Icon194Icon from "./icons/PlasmicIcon__Icon194"; // plasmic-import: -8lWeii-rNFY/icon
import Icon192Icon from "./icons/PlasmicIcon__Icon192"; // plasmic-import: YCpDegnM-nfZ/icon
import Icon191Icon from "./icons/PlasmicIcon__Icon191"; // plasmic-import: iv4jvwqYltaA/icon
import Icon195Icon from "./icons/PlasmicIcon__Icon195"; // plasmic-import: IeDHEEXqP0ah/icon
import Icon193Icon from "./icons/PlasmicIcon__Icon193"; // plasmic-import: l1oaz1wE4_L4/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import Icon118Icon from "./icons/PlasmicIcon__Icon118"; // plasmic-import: DnG_0B8ScC9o/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: 3GJi3NV2X6Zg/icon
import Icon117Icon from "./icons/PlasmicIcon__Icon117"; // plasmic-import: v74DW-fSFwuD/icon

createPlasmicElementProxy;

export type PlasmicPanel__VariantMembers = {};
export type PlasmicPanel__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanel__VariantsArgs;
export const PlasmicPanel__VariantProps = new Array<VariantPropType>();

export type PlasmicPanel__ArgsType = {};
type ArgPropType = keyof PlasmicPanel__ArgsType;
export const PlasmicPanel__ArgProps = new Array<ArgPropType>();

export type PlasmicPanel__OverridesType = {
  root?: Flex__<"div">;
  sideEffect?: Flex__<typeof SideEffect>;
  modal?: Flex__<typeof AntdModal>;
  backgrond?: Flex__<typeof Backgrond>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  img?: Flex__<typeof PlasmicImg__>;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
};

export interface DefaultPanelProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPanel__RenderFunc(props: {
  variants: PlasmicPanel__VariantsArgs;
  args: PlasmicPanel__ArgsType;
  overrides: PlasmicPanel__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loadingConclusion",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
        ]
      },
      {
        path: "level",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 3
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "action",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "rate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "resultlist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const details = $state.apiRequest.data.details;
                const maxScore = Math.max(
                  ...details.map(item => parseInt(item.score) || 0)
                );
                const filteredItems =
                  details.filter(item => item.score > 80).length > 0
                    ? details.filter(item => item.score > 80)
                    : details.filter(item => item.score > 70).length > 0
                    ? details.filter(item => item.score > 70)
                    : details.filter(item => item.score > 60).length > 0
                    ? details.filter(item => item.score > 60)
                    : details.filter(item => item.score > 50).length > 0
                    ? details.filter(item => item.score > 50)
                    : details.filter(item => parseInt(item.score) === maxScore);
                return filteredItems;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "todo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                var a = $state.apiRequest.data.details.filter(
                  item => item.advice_text != null && item.task !== ""
                );
                var newItem = [];
                a.forEach(item => {
                  let result = $state.apiRequest.data.extras.find(
                    a => a.type === item.option_metric
                  );
                  if (
                    result &&
                    result.isDone !== undefined &&
                    result.isDone !== 1
                  ) {
                    newItem.push({
                      ...item,
                      task: `برای اطمینان بیشتر، تست تکمیلی ${item.option_metric_fa} را انجام دهید`,
                      option_metric: item.option_metric + "1"
                    });
                  }
                });
                newItem.forEach(item => {
                  a.unshift(item);
                });
                return a;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "questionList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.answers.length > 1
                ? $state.apiRequest.data.answers.splice(0, 2)
                : JSON.parse($state.apiRequest.data.answers).splice(0, 2);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "info",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "paramsObject",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_paziresh_24_design_system =
    useStyleTokens_paziresh_24_design_system();
  const styleTokensClassNames_hamdast_sdk = useStyleTokens_hamdast_sdk();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPanel.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPanel.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPanel.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_paziresh_24_design_system,
            styleTokensClassNames_hamdast_sdk,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant_global_theme_dark]:
                hasVariant(globalVariants, "theme", "dark") &&
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const queryString = window.location.search;
                          const urlParams = new URLSearchParams(queryString);
                          return urlParams.forEach((value, key) => {
                            $state.paramsObject[key] = value;
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://n8n.staas.ir/webhook/selfTestOwnerWallet",
                        (() => {
                          try {
                            return { code: $state.paramsObject.code };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["updateInfo"] = $steps.invokeGlobalAction?.data
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["info"]
                      },
                      operation: 0,
                      value: $steps.invokeGlobalAction.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateInfo"] != null &&
                typeof $steps["updateInfo"] === "object" &&
                typeof $steps["updateInfo"].then === "function"
              ) {
                $steps["updateInfo"] = await $steps["updateInfo"];
              }

              $steps["updateLoading"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loading"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoading"] != null &&
                typeof $steps["updateLoading"] === "object" &&
                typeof $steps["updateLoading"].then === "function"
              ) {
                $steps["updateLoading"] = await $steps["updateLoading"];
              }
            }}
          />

          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            closeIcon={null}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              styleTokensClassNames,
              styleTokensClassNames_antd_5_hostless,
              styleTokensClassNames_plasmic_rich_components,
              styleTokensClassNames_paziresh_24_design_system,
              styleTokensClassNames_hamdast_sdk
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_mZSmt6vjlCiG"]]: true
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
            width={"100vw"}
          >
            <Backgrond
              data-plasmic-name={"backgrond"}
              data-plasmic-override={overrides.backgrond}
              className={classNames("__wab_instance", sty.backgrond)}
              liom={(() => {
                try {
                  return $ctx.query.app == "liom";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ussjy)}>
                <div className={classNames(projectcss.all, sty.freeBox__qfQit)}>
                  {(() => {
                    try {
                      return (
                        new URLSearchParams(
                          new URL(window.location.href).search
                        ).get("Share") != "true"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Reveal
                      big={false}
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__rsM5C
                      )}
                      direction={"up"}
                      effect={"fade"}
                      triggerOnce={false}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.loadingConclusion;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LoadingConclusion
                            className={classNames(
                              "__wab_instance",
                              sty.loadingConclusion__zjMnd
                            )}
                            fouse={(() => {
                              try {
                                return currentIndex == $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            selected={(() => {
                              try {
                                return currentIndex < $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qCt2F
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "..";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LoadingConclusion>
                        );
                      })}
                    </Reveal>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        new URLSearchParams(
                          new URL(window.location.href).search
                        ).get("Share") == "true"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Reveal
                      big={false}
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__lvD0G
                      )}
                      direction={"up"}
                      effect={"fade"}
                      triggerOnce={false}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return ["درحال بازیابی اطلاعات"];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LoadingConclusion
                            className={classNames(
                              "__wab_instance",
                              sty.loadingConclusion__lNhyd
                            )}
                            fouse={(() => {
                              try {
                                return currentIndex == $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            selected={(() => {
                              try {
                                return currentIndex < $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dkudc
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "..";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LoadingConclusion>
                        );
                      })}
                    </Reveal>
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__bnTbL)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wzr8N
                    )}
                  >
                    {
                      "\u0644\u0637\u0641\u0627 \u06a9\u0645\u06cc \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__chgcz,
                      "dots"
                    )}
                  >
                    {""}
                  </div>
                </div>
              </div>
            </Backgrond>
          </AntdModal>
          <div
            className={classNames(projectcss.all, sty.freeBox__plc52, "header")}
          >
            {(() => {
              try {
                return (
                  // new URLSearchParams(window.location.search).get("inApp")!="true"
                  true
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
                slot={
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          window.sessionStorage.getItem("home-page") != null
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <XIcon
                        className={classNames(projectcss.all, sty.svg___8ERLn)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return window.open(
                                      window.sessionStorage.getItem(
                                        "home-page"
                                      ),
                                      "_self"
                                    );
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        role={"img"}
                      />
                    ) : null}
                    <Paziresh24Avatar
                      data-plasmic-name={"paziresh24Avatar"}
                      data-plasmic-override={overrides.paziresh24Avatar}
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Avatar
                      )}
                      src={(() => {
                        try {
                          return "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </React.Fragment>
                }
                slot2={null}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qHeB
                  )}
                >
                  {
                    "\u06af\u0632\u0627\u0631\u0634 \u0639\u0645\u0644\u06a9\u0631\u062f"
                  }
                </div>
              </HeaderLiom>
            ) : null}
          </div>
          {(() => {
            try {
              return Object.keys($state.info).length > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__wh3EH)}>
              <div className={classNames(projectcss.all, sty.freeBox__u29J)}>
                <div className={classNames(projectcss.all, sty.freeBox__joCg2)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___86GKc)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "45px"
                          : "55px"
                      }
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "45px"
                          : "55px"
                      }
                      loading={"lazy"}
                      src={(() => {
                        try {
                          return $state.info.doctorInfo.image;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              src: "/plasmic/liom_tools/images/photo20250501134141Jpg.jpg",
                              fullWidth: 640,
                              fullHeight: 640,
                              aspectRatio: undefined
                            };
                          }
                          throw e;
                        }
                      })()}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__q783B)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rgTKk
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.info.doctorInfo.name;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062f\u06a9\u062a\u0631 \u0641\u0644\u0627\u0646\u06cc";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pgHkK
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.info.doctorInfo.expert;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u062a\u062e\u0635\u0635 \u0641\u0644\u0627\u0646";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dSRp)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__k36St
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.info.balance.toLocaleString() + " تومان "
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "105 \u062a\u0648\u0645\u0646";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__c5Vkv)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zAxYl)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "info",
                                  "\u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0642\u0627\u0628\u0644 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0646\u06cc\u0633\u062a."
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <Icon194Icon
                        className={classNames(projectcss.all, sty.svg__bPq83)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bck3W
                        )}
                      >
                        {"\u0628\u0631\u062f\u0627\u0634\u062a"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__q2HUr)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0642\u0627\u0628\u0644 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0646\u06cc\u0633\u062a."
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <Icon192Icon
                        className={classNames(projectcss.all, sty.svg__oRaSf)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nfY1E
                        )}
                      >
                        {"\u0648\u06cc\u0632\u06cc\u062a \u0647\u0627"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___90B61
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "\u062f\u0631 \u062d\u0627\u0644 \u062d\u0627\u0636\u0631 \u0627\u06cc\u0646 \u0628\u062e\u0634 \u0642\u0627\u0628\u0644 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0646\u06cc\u0633\u062a."
                                ]
                              };
                              return $globalActions[
                                "plasmic-antd5-config-provider.showNotification"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                    >
                      <Icon191Icon
                        className={classNames(projectcss.all, sty.svg___4KUfH)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3MLyn
                        )}
                      >
                        {
                          "\u06af\u0632\u0627\u0631\u0634 \u0645\u0627\u0644\u06cc"
                        }
                      </div>
                    </div>
                  </div>
                  <Icon195Icon
                    className={classNames(projectcss.all, sty.svg___8S4Dd)}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1FEgl)}
                  onScroll={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                var scrollTop = event.currentTarget.scrollTop;
                                var chatBox = event.currentTarget;
                                window.chatBox = chatBox;
                                if (scrollTop > 350) {
                                  chatBox.style.position = "fixed";
                                  chatBox.style.top = "100";
                                  chatBox.style.left = "0";
                                  chatBox.style.width = "100%";
                                  chatBox.style.height = "100vh";
                                  chatBox.style.zIndex = "10";
                                  chatBox.style.backgroundColor = "#fff";
                                  return (chatBox.style.overflow = "auto");
                                } else if (scrollTop == 0) {
                                  chatBox.style.position = "";
                                  chatBox.style.top = "";
                                  chatBox.style.left = "";
                                  chatBox.style.width = "";
                                  chatBox.style.height = "";
                                  chatBox.style.zIndex = "";
                                  chatBox.style.backgroundColor = "";
                                  return (chatBox.style.overflow = "auto");
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ld85U)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.info.transactions;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2Sx1N
                          )}
                          key={currentIndex}
                        >
                          <Icon193Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cZkDg
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uoYb9
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__heGKs
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__w4Wlj
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return `${currentItem.text} (${currentItem.type})`;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u062a\u0633\u062a adhd";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cxrzM
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.value.toLocaleString() +
                                        " تومان "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "2865so \u062a\u0648\u0645\u0646";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dqOox
                              )}
                              style={(() => {
                                try {
                                  return { direction: "ltr" };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const date = new Date(
                                        currentItem.timestamp
                                      );
                                      const options = {
                                        weekday: "long",
                                        year: "numeric",
                                        month: "long",
                                        day: "numeric",
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: false,
                                        timeZone: "Asia/Tehran",
                                        calendar: "persian"
                                      };
                                      const persianDate = date.toLocaleString(
                                        "fa-IR-u-ca-persian",
                                        options
                                      );
                                      return persianDate;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u067e\u0646\u062c \u0634\u0646\u0628\u0647 \u0641\u0644\u0627\u0646";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__rIxGr)}>
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__gyqrA)}
                role={"img"}
              />
            </div>
          ) : null}
          {(() => {
            try {
              return Object.keys($state.info).length == 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__rSxBg)}>
              <div className={classNames(projectcss.all, sty.freeBox___5Hycv)}>
                <Icon118Icon
                  className={classNames(projectcss.all, sty.svg__lc9Hb)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tqNxP
                  )}
                >
                  {
                    "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </div>
              <Paziresh24Button
                data-plasmic-name={"paziresh24Button"}
                data-plasmic-override={overrides.paziresh24Button}
                children2={
                  "\u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0645\u062c\u062f\u062f"
                }
                className={classNames("__wab_instance", sty.paziresh24Button)}
                color={"softGreen"}
                endIcon={
                  <Icon117Icon
                    className={classNames(projectcss.all, sty.svg__b6Y98)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.location.reload();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                shape={"rounded"}
                showEndIcon={true}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__gNeLo)}
                    role={"img"}
                  />
                }
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sideEffect",
    "modal",
    "backgrond",
    "headerLiom",
    "paziresh24Avatar",
    "img",
    "paziresh24Button"
  ],
  sideEffect: ["sideEffect"],
  modal: ["modal", "backgrond"],
  backgrond: ["backgrond"],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  img: ["img"],
  paziresh24Button: ["paziresh24Button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  sideEffect: typeof SideEffect;
  modal: typeof AntdModal;
  backgrond: typeof Backgrond;
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  img: typeof PlasmicImg__;
  paziresh24Button: typeof Paziresh24Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanel__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanel__VariantsArgs;
    args?: PlasmicPanel__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPanel__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanel__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPanel__ArgProps,
          internalVariantPropNames: PlasmicPanel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPanel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanel";
  } else {
    func.displayName = `PlasmicPanel.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicPanel = Object.assign(
  // Top-level PlasmicPanel renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    modal: makeNodeComponent("modal"),
    backgrond: makeNodeComponent("backgrond"),
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    img: makeNodeComponent("img"),
    paziresh24Button: makeNodeComponent("paziresh24Button"),

    // Metadata about props expected for PlasmicPanel
    internalVariantProps: PlasmicPanel__VariantProps,
    internalArgProps: PlasmicPanel__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | گزارش عملکرد",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPanel;
/* prettier-ignore-end */
