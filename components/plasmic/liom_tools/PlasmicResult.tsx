// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: AcKRuy7PeRlH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Backgrond from "../../Backgrond"; // plasmic-import: nqaGqDTn_cay/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LoadingConclusion from "../../LoadingConclusion"; // plasmic-import: 4McqJ57YwWl3/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import PercentageBox from "../../PercentageBox"; // plasmic-import: twduJO0v7B8-/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant
import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicResult.module.css"; // plasmic-import: AcKRuy7PeRlH/css

import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: CIGrIuwcL9LP/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon

createPlasmicElementProxy;

export type PlasmicResult__VariantMembers = {};
export type PlasmicResult__VariantsArgs = {};
type VariantPropType = keyof PlasmicResult__VariantsArgs;
export const PlasmicResult__VariantProps = new Array<VariantPropType>();

export type PlasmicResult__ArgsType = {};
type ArgPropType = keyof PlasmicResult__ArgsType;
export const PlasmicResult__ArgProps = new Array<ArgPropType>();

export type PlasmicResult__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  backgrond?: Flex__<typeof Backgrond>;
  reveal?: Flex__<typeof Reveal>;
  loadingConclusion?: Flex__<typeof LoadingConclusion>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  paziresh24Avatar?: Flex__<typeof Paziresh24Avatar>;
  ul?: Flex__<"ul">;
  li?: Flex__<"li">;
  timer?: Flex__<typeof Timer>;
  paziresh24Button?: Flex__<typeof Paziresh24Button>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  percentageBox?: Flex__<typeof PercentageBox>;
  testTakmily?: Flex__<typeof Paziresh24Button>;
  apiRequest?: Flex__<typeof ApiRequest>;
  svg?: Flex__<"svg">;
};

export interface DefaultResultProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResult__RenderFunc(props: {
  variants: PlasmicResult__VariantsArgs;
  args: PlasmicResult__ArgsType;
  overrides: PlasmicResult__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.level == 3 && !$state.apiRequest.loading
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadingConclusion",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0622\u0646\u0627\u0644\u06cc\u0632 \u067e\u0627\u0633\u062e \u0647\u0627\u06cc \u0634\u0645\u0627",
          "\u0628\u0631\u0631\u0633\u06cc \u0634\u0627\u062e\u0635 \u0647\u0627\u06cc \u0627\u0631\u0632\u06cc\u0627\u0628\u06cc",
          "\u0622\u0645\u0627\u062f\u0647 \u0633\u0627\u0632\u06cc \u0646\u062a\u06cc\u062c\u0647 \u062e\u0648\u062f\u062a\u0634\u062e\u06cc\u0635\u06cc"
        ]
      },
      {
        path: "level",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsqiBuxNlixBgQ()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant_global_theme_dark]:
                hasVariant(globalVariants, "theme", "dark") &&
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
        >
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            closeIcon={null}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_E8b_Q8Grg3ng"]]: true
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={generateStateOnChangeProp($state, ["modal", "open"])}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
            width={"100vw"}
          >
            <Backgrond
              data-plasmic-name={"backgrond"}
              data-plasmic-override={overrides.backgrond}
              className={classNames("__wab_instance", sty.backgrond)}
              liom={(() => {
                try {
                  return $ctx.query.app == "liom";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xSFO)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tAoo6)}
                >
                  <Reveal
                    data-plasmic-name={"reveal"}
                    data-plasmic-override={overrides.reveal}
                    big={false}
                    cascade={false}
                    className={classNames("__wab_instance", sty.reveal)}
                    direction={"up"}
                    effect={"fade"}
                    triggerOnce={false}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $state.loadingConclusion;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <LoadingConclusion
                          data-plasmic-name={"loadingConclusion"}
                          data-plasmic-override={overrides.loadingConclusion}
                          className={classNames(
                            "__wab_instance",
                            sty.loadingConclusion
                          )}
                          fouse={(() => {
                            try {
                              return currentIndex == $state.level;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          selected={(() => {
                            try {
                              return currentIndex < $state.level;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4OXwR
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "..";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </LoadingConclusion>
                      );
                    })}
                  </Reveal>
                </Stack__>
              </div>
            </Backgrond>
          </AntdModal>
          <HeaderLiom
            data-plasmic-name={"headerLiom"}
            data-plasmic-override={overrides.headerLiom}
            className={classNames("__wab_instance", sty.headerLiom)}
            slot={
              <Paziresh24Avatar
                data-plasmic-name={"paziresh24Avatar"}
                data-plasmic-override={overrides.paziresh24Avatar}
                className={classNames("__wab_instance", sty.paziresh24Avatar)}
                src={(() => {
                  try {
                    return $ctx.query.app == "liom"
                      ? "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png"
                      : "https://www.paziresh24.com/_next/static/media/logo.5e03fe79.svg";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            }
          >
            {
              "\u0646\u062a\u06cc\u062c\u0647 \u062e\u0648\u062f\u062a\u0634\u062e\u06cc\u0635\u06cc \u0634\u0645\u0627"
            }
          </HeaderLiom>
          {(() => {
            try {
              return $state.level == 3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__f1R9S)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__obt8K
                )}
              >
                {
                  "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0641\u0635\u06cc\u0644\u06cc \u062e\u0648\u062f\u062a\u0634\u062e\u06cc\u0635\u06cc"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hB9Nw)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.apiRequest.data.details;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"ul"}
                      data-plasmic-name={"ul"}
                      data-plasmic-override={overrides.ul}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul
                      )}
                      key={currentIndex}
                    >
                      <li
                        data-plasmic-name={"li"}
                        data-plasmic-override={overrides.li}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          sty.li
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xvODr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nKnkj
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.advice_text;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </li>
                    </Stack__>
                  );
                })}
              </Stack__>
            </Stack__>
          ) : null}
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={5}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["updateLevel"] =
                $state.level < 3
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["level"]
                        },
                        operation: 0,
                        value: $state.level + 1
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLevel"] != null &&
                typeof $steps["updateLevel"] === "object" &&
                typeof $steps["updateLevel"].then === "function"
              ) {
                $steps["updateLevel"] = await $steps["updateLevel"];
              }
            }}
            runWhileEditing={false}
          />

          <div className={classNames(projectcss.all, sty.freeBox__tktV)}>
            <Paziresh24Button
              data-plasmic-name={"paziresh24Button"}
              data-plasmic-override={overrides.paziresh24Button}
              className={classNames("__wab_instance", sty.paziresh24Button)}
            />

            <ButtonLiom
              data-plasmic-name={"buttonLiom"}
              data-plasmic-override={overrides.buttonLiom}
              className={classNames("__wab_instance", sty.buttonLiom)}
              color={generateStateValueProp($state, ["buttonLiom", "color"])}
              onColorChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["buttonLiom", "color"])(
                  eventArgs[0]
                );
              }}
            />
          </div>
          {(() => {
            try {
              return $state.level == 3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mzAy8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fo0X
                )}
              >
                {
                  "\u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u0627\u0633\u062e \u0647\u0627\u06cc \u0634\u0645\u0627\u060c \u0646\u0627\u0645\u0646\u0638\u0645\u06cc \u0642\u0627\u0639\u062f\u06af\u06cc \u0627\u06cc \u06a9\u0647 \u062a\u062c\u0631\u0628\u0647 \u0645\u06cc\u200c\u06a9\u0646\u06cc\u062f \u0628\u0647 \u062f\u0644\u0627\u06cc\u0644 \u0632\u06cc\u0631 \u0627\u0633\u062a:"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ke2Tb)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.apiRequest.data.details;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3GvY6
                      )}
                      key={currentIndex}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rZgJu
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b45Lz
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xXc2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.option_metric_fa;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <PercentageBox
                            data-plasmic-name={"percentageBox"}
                            data-plasmic-override={overrides.percentageBox}
                            className={classNames(
                              "__wab_instance",
                              sty.percentageBox
                            )}
                            unnamedGroupOfVariants={(() => {
                              try {
                                return (() => {
                                  let score = parseInt(currentItem.score);
                                  let color =
                                    score >= 80
                                      ? "red"
                                      : score >= 70
                                      ? "oreng"
                                      : score >= 60
                                      ? "yellow"
                                      : score >= 50
                                      ? "blue"
                                      : score >= 40
                                      ? ""
                                      : "";
                                  return color;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "red";
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vtkPr
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.badge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "99 % ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </PercentageBox>
                        </Stack__>
                        {(() => {
                          try {
                            return (() => {
                              let result = $state.apiRequest.data.extras.find(
                                a => a.type === currentItem.option_metric
                              );
                              return result
                                ? result.isDone !== undefined
                                  ? result.isDone !== 1
                                  : false
                                : false;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Paziresh24Button
                            data-plasmic-name={"testTakmily"}
                            data-plasmic-override={overrides.testTakmily}
                            children2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6W1Ft
                                )}
                              >
                                {
                                  "\u062a\u0633\u062a \u062a\u06a9\u0645\u06cc\u0644\u06cc"
                                }
                              </div>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.testTakmily
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateLoading"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loading"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading"] != null &&
                                typeof $steps["updateLoading"] === "object" &&
                                typeof $steps["updateLoading"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading"] = await $steps[
                                  "updateLoading"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return window.open(
                                          `https://tools.liom.app/self-test?UserId=${
                                            $ctx.query.user_id
                                          }&type=${
                                            currentItem.option_metric
                                          }&nextQuesion_id=${
                                            $state.apiRequest.data.extras.find(
                                              a =>
                                                a.type ==
                                                currentItem.option_metric
                                            ).next_question_id
                                          }&session_id=${
                                            $ctx.query.session_id
                                          }`,
                                          "_self"
                                        );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }

                              $steps["updateLoading2"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["loading"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateLoading2"] != null &&
                                typeof $steps["updateLoading2"] === "object" &&
                                typeof $steps["updateLoading2"].then ===
                                  "function"
                              ) {
                                $steps["updateLoading2"] = await $steps[
                                  "updateLoading2"
                                ];
                              }
                            }}
                            size={"minimal"}
                          />
                        ) : null}
                      </Stack__>
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? (() => {
                              try {
                                return (() => {
                                  return (
                                    $state.apiRequest.data.extras.find(
                                      a => a.type === currentItem.option_metric
                                    )?.isDone !== 1 || false
                                  );
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return (() => {
                                  let result =
                                    $state.apiRequest.data.extras.find(
                                      a => a.type === currentItem.option_metric
                                    );
                                  return result
                                    ? result.isDone !== undefined
                                      ? result.isDone !== 1
                                      : false
                                    : false;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q4Ey
                          )}
                        >
                          {
                            "\u26a0\ufe0f \u0628\u0631\u0627\u06cc \u062f\u0642\u06cc\u0642 \u062a\u0631 \u0634\u062f\u0646 \u0646\u062a\u06cc\u062c\u0647\u060c \u062a\u0633\u062a \u062a\u06a9\u0645\u06cc\u0644\u06cc \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u06cc\u062f"
                          }
                        </div>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cb6Qj
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.hint;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u26a0\ufe0f \u0628\u0631\u0627\u06cc \u062f\u0642\u06cc\u0642 \u062a\u0631 \u0634\u062f\u0646 \u0646\u062a\u06cc\u062c\u0647\u060c \u062a\u0633\u062a \u062a\u06a9\u0645\u06cc\u0644\u06cc \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u06cc\u062f";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </Stack__>
                  );
                })}
              </div>
            </Stack__>
          ) : null}
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={generateStateOnChangeProp($state, ["apiRequest", "error"])}
            onLoading={generateStateOnChangeProp($state, [
              "apiRequest",
              "loading"
            ])}
            onSuccess={generateStateOnChangeProp($state, [
              "apiRequest",
              "data"
            ])}
            params={(() => {
              try {
                return {
                  session_id: $ctx.query.session_id,
                  user_id: $ctx.query.user_id
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/selfTestLogs"}
          />

          {(() => {
            try {
              return $state.level == 3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rQkBj)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0YW7K
                )}
              >
                {
                  "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0641\u0635\u06cc\u0644\u06cc \u0628\u0647 \u06a9\u0645\u06a9 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vEyWx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u2Gx8
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.apiRequest.data.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "...";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__xqVc8)}>
              <Icon111Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "backgrond",
    "reveal",
    "loadingConclusion",
    "headerLiom",
    "paziresh24Avatar",
    "ul",
    "li",
    "timer",
    "paziresh24Button",
    "buttonLiom",
    "percentageBox",
    "testTakmily",
    "apiRequest",
    "svg"
  ],
  modal: ["modal", "backgrond", "reveal", "loadingConclusion"],
  backgrond: ["backgrond", "reveal", "loadingConclusion"],
  reveal: ["reveal", "loadingConclusion"],
  loadingConclusion: ["loadingConclusion"],
  headerLiom: ["headerLiom", "paziresh24Avatar"],
  paziresh24Avatar: ["paziresh24Avatar"],
  ul: ["ul", "li"],
  li: ["li"],
  timer: ["timer"],
  paziresh24Button: ["paziresh24Button"],
  buttonLiom: ["buttonLiom"],
  percentageBox: ["percentageBox"],
  testTakmily: ["testTakmily"],
  apiRequest: ["apiRequest"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  backgrond: typeof Backgrond;
  reveal: typeof Reveal;
  loadingConclusion: typeof LoadingConclusion;
  headerLiom: typeof HeaderLiom;
  paziresh24Avatar: typeof Paziresh24Avatar;
  ul: "ul";
  li: "li";
  timer: typeof Timer;
  paziresh24Button: typeof Paziresh24Button;
  buttonLiom: typeof ButtonLiom;
  percentageBox: typeof PercentageBox;
  testTakmily: typeof Paziresh24Button;
  apiRequest: typeof ApiRequest;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResult__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResult__VariantsArgs;
    args?: PlasmicResult__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResult__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicResult__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResult__ArgProps,
          internalVariantPropNames: PlasmicResult__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResult__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResult";
  } else {
    func.displayName = `PlasmicResult.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicResult = Object.assign(
  // Top-level PlasmicResult renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    backgrond: makeNodeComponent("backgrond"),
    reveal: makeNodeComponent("reveal"),
    loadingConclusion: makeNodeComponent("loadingConclusion"),
    headerLiom: makeNodeComponent("headerLiom"),
    paziresh24Avatar: makeNodeComponent("paziresh24Avatar"),
    ul: makeNodeComponent("ul"),
    li: makeNodeComponent("li"),
    timer: makeNodeComponent("timer"),
    paziresh24Button: makeNodeComponent("paziresh24Button"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    percentageBox: makeNodeComponent("percentageBox"),
    testTakmily: makeNodeComponent("testTakmily"),
    apiRequest: makeNodeComponent("apiRequest"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicResult
    internalVariantProps: PlasmicResult__VariantProps,
    internalArgProps: PlasmicResult__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResult;
/* prettier-ignore-end */
