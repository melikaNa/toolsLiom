/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: AcKRuy7PeRlH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Backgrond from "../../Backgrond"; // plasmic-import: nqaGqDTn_cay/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LoadingConclusion from "../../LoadingConclusion"; // plasmic-import: 4McqJ57YwWl3/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import PercentageBox from "../../PercentageBox"; // plasmic-import: twduJO0v7B8-/component
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Icons from "../../Icons"; // plasmic-import: 1fNx7Q7E4s-Q/component
import HamdastUtilsOpenLink from "../../HamdastUtilsOpenLink"; // plasmic-import: RRKFlqCHeJfP/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import Stars from "../../Stars"; // plasmic-import: wwNNSLKePNyr/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import Alert from "../../Alert"; // plasmic-import: K1JUp41_NKIi/component
import Paziresh24LineClamp from "../../Paziresh24LineClamp"; // plasmic-import: xFfrwlkCaWS8/component
import DirectDialog from "../../DirectDialog"; // plasmic-import: GJ5eKNtJs574/component
import TextInput from "../../TextInput"; // plasmic-import: aEno43N2WkPr/component
import { Select } from "@/fragment/components/select"; // plasmic-import: P0EOGSZ4bQLZ/codeComponent
import RadioGrop from "../../RadioGrop"; // plasmic-import: oaU2G97TOKr2/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant
import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant
import { useScreenVariants as useScreenVariantsyg4Uf6WCaaLe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YG4uf6WCaaLe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicResult.module.css"; // plasmic-import: AcKRuy7PeRlH/css

import XIcon from "../hamdast_sdk/icons/PlasmicIcon__X"; // plasmic-import: S0M2VMEAEs7X/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: 3GJi3NV2X6Zg/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: ZqTOLr82hcYp/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: Us1K_hl1D5h1/icon
import ChevronUpIcon from "./icons/PlasmicIcon__ChevronUp"; // plasmic-import: s9eeF5PzS4-y/icon
import Icon125Icon from "./icons/PlasmicIcon__Icon125"; // plasmic-import: b8AgXrwwp9nu/icon
import Icon145Icon from "./icons/PlasmicIcon__Icon145"; // plasmic-import: JVIIpggBdL39/icon
import Icon127Icon from "./icons/PlasmicIcon__Icon127"; // plasmic-import: HCowqgxIwEnQ/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import Icon113Icon from "./icons/PlasmicIcon__Icon113"; // plasmic-import: 2DtIAeAc823f/icon
import Icon116Icon from "./icons/PlasmicIcon__Icon116"; // plasmic-import: uviv-WPVJzuw/icon
import Icon118Icon from "./icons/PlasmicIcon__Icon118"; // plasmic-import: DnG_0B8ScC9o/icon
import Icon117Icon from "./icons/PlasmicIcon__Icon117"; // plasmic-import: v74DW-fSFwuD/icon
import Icon81Icon from "./icons/PlasmicIcon__Icon81"; // plasmic-import: T-0eOWny5WJq/icon
import Icon142Icon from "./icons/PlasmicIcon__Icon142"; // plasmic-import: K98tdqvc4laO/icon
import Icon124Icon from "./icons/PlasmicIcon__Icon124"; // plasmic-import: gcJesfCMo05Y/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: HUASOsr4ah0C/icon
import Icon136Icon from "./icons/PlasmicIcon__Icon136"; // plasmic-import: e82dJRWQjnC2/icon

import { random as __lib_lodash__random } from "lodash";
import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicResult__VariantMembers = {
  information: "information";
  dercentage: "dercentage";
  specialized: "specialized";
};
export type PlasmicResult__VariantsArgs = {
  information?: SingleBooleanChoiceArg<"information">;
  dercentage?: SingleBooleanChoiceArg<"dercentage">;
  specialized?: SingleBooleanChoiceArg<"specialized">;
};
type VariantPropType = keyof PlasmicResult__VariantsArgs;
export const PlasmicResult__VariantProps = new Array<VariantPropType>(
  "information",
  "dercentage",
  "specialized"
);

export type PlasmicResult__ArgsType = {};
type ArgPropType = keyof PlasmicResult__ArgsType;
export const PlasmicResult__ArgProps = new Array<ArgPropType>();

export type PlasmicResult__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  backgrond?: Flex__<typeof Backgrond>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  timer?: Flex__<typeof Timer>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  buttonLiom3?: Flex__<typeof ButtonLiom>;
  collapse3?: Flex__<typeof AntdSingleCollapse>;
  buttonLiom7?: Flex__<typeof ButtonLiom>;
  buttonLiom4?: Flex__<typeof ButtonLiom>;
  lottie?: Flex__<typeof LottieWrapper>;
  apiRequest?: Flex__<typeof ApiRequest>;
  textArea?: Flex__<typeof AntdTextArea>;
  dialog?: Flex__<typeof Paziresh24Dialog>;
  apiRequest2?: Flex__<typeof ApiRequest>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  h2?: Flex__<"h2">;
  paziresh24LineClamp?: Flex__<typeof Paziresh24LineClamp>;
  cardSubtitle?: Flex__<"span">;
  dialog2?: Flex__<typeof Paziresh24Dialog>;
  textArea2?: Flex__<typeof AntdTextArea>;
  directDialog?: Flex__<typeof DirectDialog>;
  profile?: Flex__<typeof Paziresh24Dialog>;
  name?: Flex__<typeof TextInput>;
  name2?: Flex__<typeof TextInput>;
  code?: Flex__<typeof TextInput>;
  select?: Flex__<typeof Select>;
  mobile?: Flex__<typeof TextInput>;
  email?: Flex__<typeof TextInput>;
  gender2?: Flex__<"div">;
  radioGrop?: Flex__<typeof RadioGrop>;
  textArea3?: Flex__<typeof AntdTextArea>;
  buttonLiom5?: Flex__<typeof ButtonLiom>;
  embedHtml?: Flex__<typeof Embed>;
  buttonLiom6?: Flex__<typeof ButtonLiom>;
};

export interface DefaultResultProps {}

const $$ = {
  lodash: {
    random: __lib_lodash__random
  },
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResult__RenderFunc(props: {
  variants: PlasmicResult__VariantsArgs;
  args: PlasmicResult__ArgsType;
  overrides: PlasmicResult__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.level == 3 && !$state.apiRequest.loading
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadingConclusion",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0622\u0646\u0627\u0644\u06cc\u0632 \u067e\u0627\u0633\u062e \u0647\u0627\u06cc \u0634\u0645\u0627",
          "\u0628\u0631\u0631\u0633\u06cc \u0634\u0627\u062e\u0635 \u0647\u0627\u06cc \u0627\u0631\u0632\u06cc\u0627\u0628\u06cc",
          "\u0622\u0645\u0627\u062f\u0647 \u0633\u0627\u0632\u06cc \u0646\u062a\u06cc\u062c\u0647"
        ]
      },
      {
        path: "level",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "action",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "collapse3[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "rate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "buttonLiom4[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "resultlist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const details = $state.apiRequest.data.details;
                const maxScore = Math.max(
                  ...details.map(item => parseInt(item.score) || 0)
                );
                const filteredItems =
                  details.filter(item => item.score > 80).length > 0
                    ? details.filter(item => item.score > 80)
                    : details.filter(item => item.score > 70).length > 0
                    ? details.filter(item => item.score > 70)
                    : details.filter(item => item.score > 60).length > 0
                    ? details.filter(item => item.score > 60)
                    : details.filter(item => item.score > 50).length > 0
                    ? details.filter(item => item.score > 50)
                    : details.filter(item => parseInt(item.score) === maxScore);
                return filteredItems;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "todo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                var a = $state.apiRequest.data.details.filter(
                  item => item.advice_text != null && item.task !== ""
                );
                var newItem = [];
                a.forEach(item => {
                  let result = $state.apiRequest.data.extras.find(
                    a => a.type === item.option_metric
                  );
                  if (
                    result &&
                    result.isDone !== undefined &&
                    result.isDone !== 1
                  ) {
                    newItem.push({
                      ...item,
                      task: `برای اطمینان بیشتر، تست تکمیلی ${item.option_metric_fa} را انجام دهید`,
                      option_metric: item.option_metric + "1"
                    });
                  }
                });
                newItem.forEach(item => {
                  a.unshift(item);
                });
                return a;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom3[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "directDialog.selectShop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "directDialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "profile.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "code.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mobile.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "buttonLiom5.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "name2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "gender",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "errors",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "testId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return window.sessionStorage.getItem("testID") || 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "information",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.result_type == "Information";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.information
      },
      {
        path: "buttonLiom.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom3[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "buttonLiom4[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "buttonLiom5.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dercentage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.result_type == "dercentage";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.dercentage
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "select.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textArea3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "specialized",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.apiRequest.data.result_type == "Specialized";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.specialized
      },
      {
        path: "specialized2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "buttonLiom6.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "sand"
      },
      {
        path: "buttonLiom6.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "buttonLiom7[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "buttonLiom7[].load",
        type: "private",
        variableType: "boolean"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsqiBuxNlixBgQ(),
    screen: useScreenVariantsyg4Uf6WCaaLe()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicResult.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicResult.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicResult.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootdercentage]: hasVariant(
                $state,
                "dercentage",
                "dercentage"
              ),
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant_global_theme_dark]:
                hasVariant(globalVariants, "theme", "dark") &&
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootinformation]: hasVariant(
                $state,
                "information",
                "information"
              ),
              [sty.rootspecialized]: hasVariant(
                $state,
                "specialized",
                "specialized"
              )
            }
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://api.liom.app/service/log",
                      undefined,
                      (() => {
                        try {
                          return {
                            userId: new URLSearchParams(
                              window.location.search
                            ).get("user-id"),
                            pageName: "result",
                            action: "onLoad",
                            extraData: {}
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      {
                        headers: {
                          "Content-Type": "application/json",
                          Authorization:
                            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                        }
                      }
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
        >
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal, {
              [sty.modalspecialized]: hasVariant(
                $state,
                "specialized",
                "specialized"
              )
            })}
            closeIcon={null}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              plasmic_hamdast_sdk_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_E8b_Q8Grg3ng"]]: true
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
            width={"100vw"}
          >
            <Backgrond
              data-plasmic-name={"backgrond"}
              data-plasmic-override={overrides.backgrond}
              className={classNames("__wab_instance", sty.backgrond)}
              liom={(() => {
                try {
                  return $ctx.query.app == "liom";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__xSFO, {
                  [sty.freeBoxspecialized__xSFOfomOb]: hasVariant(
                    $state,
                    "specialized",
                    "specialized"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tAoo6)}
                >
                  {(() => {
                    try {
                      return (
                        new URLSearchParams(
                          new URL(window.location.href).search
                        ).get("Share") != "true"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Reveal
                      big={false}
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__fi7Ih
                      )}
                      direction={"up"}
                      effect={"fade"}
                      triggerOnce={false}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.loadingConclusion;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LoadingConclusion
                            className={classNames(
                              "__wab_instance",
                              sty.loadingConclusion__c2ALm
                            )}
                            fouse={(() => {
                              try {
                                return currentIndex == $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            selected={(() => {
                              try {
                                return currentIndex < $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4OXwR
                              )}
                              data-i18n={`loading.${currentIndex + 1}`}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "..";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LoadingConclusion>
                        );
                      })}
                    </Reveal>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        new URLSearchParams(
                          new URL(window.location.href).search
                        ).get("Share") == "true"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Reveal
                      big={false}
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__n80Lm
                      )}
                      direction={"up"}
                      effect={"fade"}
                      triggerOnce={false}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return ["درحال بازیابی اطلاعات"];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LoadingConclusion
                            className={classNames(
                              "__wab_instance",
                              sty.loadingConclusion__qkst
                            )}
                            fouse={(() => {
                              try {
                                return currentIndex == $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            selected={(() => {
                              try {
                                return currentIndex < $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xzUxX
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "..";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LoadingConclusion>
                        );
                      })}
                    </Reveal>
                  ) : null}
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__tOJjM)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w8PzZ
                    )}
                    data-i18n={"loading.title"}
                  >
                    {
                      "\u0644\u0637\u0641\u0627 \u06a9\u0645\u06cc \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zuZtW,
                      "dots"
                    )}
                  >
                    {""}
                  </div>
                </div>
              </div>
            </Backgrond>
          </AntdModal>
          <section className={classNames(projectcss.all, sty.section__r0Aj)}>
            {(() => {
              try {
                return (
                  new URLSearchParams(window.location.search).get("inApp") !=
                  "true"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <HeaderLiom
                data-plasmic-name={"headerLiom"}
                data-plasmic-override={overrides.headerLiom}
                className={classNames("__wab_instance", sty.headerLiom)}
                slot={
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          window.sessionStorage.getItem("home-page") != null
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <XIcon
                        className={classNames(projectcss.all, sty.svg___30Ty)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return window.location.replace(
                                        window.sessionStorage.getItem(
                                          "home-page"
                                        )
                                      );
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }}
                        role={"img"}
                      />
                    ) : null}
                    <Paziresh24Avatar
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Avatar__etGjv,
                        {
                          [sty.paziresh24Avatarspecialized__etGjvFomOb]:
                            hasVariant($state, "specialized", "specialized")
                        }
                      )}
                      src={(() => {
                        try {
                          return "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </React.Fragment>
                }
                slot2={null}
              >
                <div className={classNames(projectcss.all, sty.freeBox__dgteT)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x8Lrb
                    )}
                    data-i18n={"result.main.title"}
                  >
                    {"\u0646\u062a\u06cc\u062c\u0647  \u0634\u0645\u0627"}
                  </div>
                </div>
              </HeaderLiom>
            ) : null}
          </section>
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={4}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["updateLevel"] =
                $state.level < 3
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["level"]
                        },
                        operation: 0,
                        value: $state.level + 1
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLevel"] != null &&
                typeof $steps["updateLevel"] === "object" &&
                typeof $steps["updateLevel"].then === "function"
              ) {
                $steps["updateLevel"] = await $steps["updateLevel"];
              }
            }}
            runWhileEditing={false}
          />

          <div className={classNames(projectcss.all, sty.freeBox__tktV)}>
            <Paziresh24Button
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button___2SVaX
              )}
              endIcon={
                <ChevronLeftIcon
                  className={classNames(projectcss.all, sty.svg__eRGxr)}
                  role={"img"}
                />
              }
              startIcon={
                <ChevronRightIcon
                  className={classNames(projectcss.all, sty.svg__pGoTa)}
                  role={"img"}
                />
              }
            />

            <ButtonLiom
              data-plasmic-name={"buttonLiom"}
              data-plasmic-override={overrides.buttonLiom}
              className={classNames("__wab_instance", sty.buttonLiom)}
              color={generateStateValueProp($state, ["buttonLiom", "color"])}
              load={generateStateValueProp($state, ["buttonLiom", "load"])}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </div>
          {(() => {
            try {
              return (
                $state.apiRequest.data && $state.apiRequest.data.our_message
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hvSte, {
                [sty.freeBoxinformation__hvSte8P0Rz]: hasVariant(
                  $state,
                  "information",
                  "information"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aSXm
                )}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return $state.apiRequest.data.our_message.split(
                          "همچنین"
                        )[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0641\u0635\u06cc\u0644\u06cc \u062e\u0648\u062f\u062a\u0634\u062e\u06cc\u0635\u06cc";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tz4Er
                )}
                data-i18n={"result.title1"}
              >
                {
                  "\u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u0627\u0633\u062e \u0647\u0627\u06cc \u0634\u0645\u0627\u060c \u062a\u0634\u062e\u06cc\u0635 \u0645\u0627 \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0627\u0633\u062a:"
                }
              </div>
              <div
                className={classNames(projectcss.all, sty.freeBox__iiNee, {
                  [sty.freeBoxdercentage__iiNee2Sg6V]: hasVariant(
                    $state,
                    "dercentage",
                    "dercentage"
                  ),
                  [sty.freeBoxinformation__iiNee8P0Rz]: hasVariant(
                    $state,
                    "information",
                    "information"
                  )
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.resultlist;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__sy1Ij,
                        {
                          [sty.freeBoxinformation__sy1Ij8P0Rz]: hasVariant(
                            $state,
                            "information",
                            "information"
                          )
                        }
                      )}
                      key={currentIndex}
                      style={(() => {
                        try {
                          return {
                            border: currentItem.more
                              ? "solid 2px #ffffff"
                              : currentItem.option_metric == "endometriosis" ||
                                currentItem.option_metric == "uterineFibroids"
                              ? "solid 1px #FAAD14"
                              : ""
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {(() => {
                        try {
                          return !currentItem.more && currentItem.badge != null;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lwrUx,
                            {
                              [sty.freeBoxdercentage__lwrUx2Sg6V]: hasVariant(
                                $state,
                                "dercentage",
                                "dercentage"
                              ),
                              [sty.freeBoxinformation__lwrUx8P0Rz]: hasVariant(
                                $state,
                                "information",
                                "information"
                              ),
                              [sty.freeBoxspecialized__lwrUxFomOb]: hasVariant(
                                $state,
                                "specialized",
                                "specialized"
                              )
                            }
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jSzzL,
                              {
                                [sty.freeBoxinformation__jSzzL8P0Rz]:
                                  hasVariant(
                                    $state,
                                    "information",
                                    "information"
                                  )
                              }
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yIfMq,
                                {
                                  [sty.freeBoxinformation__yIfMq8P0Rz]:
                                    hasVariant(
                                      $state,
                                      "information",
                                      "information"
                                    )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___99TDe,
                                  {
                                    [sty.textdercentage___99TDe2Sg6V]:
                                      hasVariant(
                                        $state,
                                        "dercentage",
                                        "dercentage"
                                      )
                                  }
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.option_metric_fa;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(
                                hasVariant($state, "information", "information")
                                  ? true
                                  : (() => {
                                      try {
                                        return currentItem.badge != null;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                              ) ? (
                                <PercentageBox
                                  className={classNames(
                                    "__wab_instance",
                                    sty.percentageBox__wTlKj,
                                    {
                                      [sty.percentageBoxinformation__wTlKj8P0Rz]:
                                        hasVariant(
                                          $state,
                                          "information",
                                          "information"
                                        )
                                    }
                                  )}
                                  unnamedGroupOfVariants={
                                    hasVariant(
                                      $state,
                                      "information",
                                      "information"
                                    )
                                      ? (() => {
                                          try {
                                            return currentItem.option_metric ==
                                              "girl"
                                              ? "pink"
                                              : "blue";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "red";
                                            }
                                            throw e;
                                          }
                                        })()
                                      : (() => {
                                          try {
                                            return (() => {
                                              let score = parseInt(
                                                currentItem.score
                                              );
                                              let color =
                                                score >= 80
                                                  ? "red"
                                                  : score >= 70
                                                  ? "oreng"
                                                  : score >= 60
                                                  ? "yellow"
                                                  : score >= 50
                                                  ? "blue"
                                                  : score >= 40
                                                  ? ""
                                                  : "";
                                              return color;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "red";
                                            }
                                            throw e;
                                          }
                                        })()
                                  }
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__j0SxV,
                                      {
                                        [sty.textdercentage__j0SxV2Sg6V]:
                                          hasVariant(
                                            $state,
                                            "dercentage",
                                            "dercentage"
                                          ),
                                        [sty.textinformation__j0SxV8P0Rz]:
                                          hasVariant(
                                            $state,
                                            "information",
                                            "information"
                                          )
                                      }
                                    )}
                                  >
                                    {hasVariant(
                                      $state,
                                      "dercentage",
                                      "dercentage"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return " % " + currentItem.score;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "99 % ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : hasVariant(
                                        $state,
                                        "information",
                                        "information"
                                      ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return `احتمال %${currentItem.score}`;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "99 % ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.badge;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "99 % ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    )}
                                  </div>
                                </PercentageBox>
                              ) : null}
                            </Stack__>
                            {(() => {
                              try {
                                return (() => {})();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.buttonLiom3
                                    ),
                                    color: generateStateValueProp($state, [
                                      "buttonLiom3",
                                      __plasmic_idx_0,
                                      "color"
                                    ]),
                                    load: generateStateValueProp($state, [
                                      "buttonLiom3",
                                      __plasmic_idx_0,
                                      "load"
                                    ]),
                                    onClick: async event => {
                                      const $steps = {};

                                      $steps["updateDirectDialogOpen"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "directDialog",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateDirectDialogOpen"] !=
                                          null &&
                                        typeof $steps[
                                          "updateDirectDialogOpen"
                                        ] === "object" &&
                                        typeof $steps["updateDirectDialogOpen"]
                                          .then === "function"
                                      ) {
                                        $steps["updateDirectDialogOpen"] =
                                          await $steps[
                                            "updateDirectDialogOpen"
                                          ];
                                      }
                                    },
                                    onColorChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "buttonLiom3",
                                          __plasmic_idx_0,
                                          "color"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    onLoadChange: async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "buttonLiom3",
                                          __plasmic_idx_0,
                                          "load"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    size: "compact"
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "buttonLiom3[].color",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => "perper"
                                      },
                                      {
                                        name: "buttonLiom3[].load",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => false
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <ButtonLiom
                                      data-plasmic-name={"buttonLiom3"}
                                      data-plasmic-override={
                                        overrides.buttonLiom3
                                      }
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__gRHw
                                        )}
                                      >
                                        {
                                          "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0633\u062e\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646"
                                        }
                                      </div>
                                    </ButtonLiom>
                                  );
                                })()
                              : null}
                          </Stack__>
                        </Stack__>
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.hint;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                        ? (() => {
                            const child$Props = {
                              bordered: false,
                              className: classNames(
                                "__wab_instance",
                                sty.collapse3,
                                {
                                  [sty.collapse3information]: hasVariant(
                                    $state,
                                    "information",
                                    "information"
                                  )
                                }
                              ),
                              disabled: (() => {
                                try {
                                  return !currentItem.advice_text;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              expandIcon: (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.collapse2[currentIndex].open !=
                                        true
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__pqmT2)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"15px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/liom_tools/images/image32.svg",
                                        fullWidth: 16,
                                        fullHeight: 16,
                                        aspectRatio: 1
                                      }}
                                    />
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        $state.collapse2[currentIndex].open ==
                                        true
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__hd3Nm)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"25px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/liom_tools/images/image31.svg",
                                        fullWidth: 16,
                                        fullHeight: 16,
                                        aspectRatio: 1
                                      }}
                                    />
                                  ) : null}
                                </React.Fragment>
                              ),
                              expandIconPosition: "end",
                              ghost: true,
                              label2: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___7BxPb
                                  )}
                                >
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return (() => {
                                            if (
                                              currentItem.option_metric ==
                                                "endometriosis" ||
                                              currentItem.option_metric ==
                                                "uterineFibroids"
                                            )
                                              return (
                                                currentItem.hint +
                                                " . " +
                                                `<br> <b  style="color: #D48806;"> نکته مهم : </b><b  style="color: #D48806;"> برای تشخیص قطعی این بیماری، نیاز به سونوگرافی است. </b>`
                                              );
                                            else return currentItem.hint;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062a\u0648\u0636\u06cc\u062d \u0631\u0627\u062c\u0628 \u0628\u0686\u0647";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                </div>
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "open",
                                  ["collapse3", __plasmic_idx_0, "open"],
                                  AntdSingleCollapse_Helpers
                                ).apply(null, eventArgs);

                                (async activeIds => {
                                  const $steps = {};

                                  $steps["invokeGlobalAction"] =
                                    $state.collapse2[currentIndex].open == true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "POST",
                                              "https://api.liom.app/service/log",
                                              undefined,
                                              (() => {
                                                try {
                                                  return {
                                                    userId: $ctx.query.user_id,
                                                    pageName: "result",
                                                    action: "Show-more",
                                                    extraData: {
                                                      sessionId:
                                                        $ctx.query.session_id
                                                    }
                                                  };
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              {
                                                headers: {
                                                  "Content-Type":
                                                    "application/json",
                                                  Authorization:
                                                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                                }
                                              }
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              },
                              open: generateStateValueProp($state, [
                                "collapse3",
                                __plasmic_idx_0,
                                "open"
                              ]),
                              showArrow: true,
                              size: "small"
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "open",
                                  plasmicStateName: "collapse3[].open"
                                }
                              ],
                              [__plasmic_idx_0],
                              AntdSingleCollapse_Helpers ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "collapse3[].open",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdSingleCollapse
                                data-plasmic-name={"collapse3"}
                                data-plasmic-override={overrides.collapse3}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nxiCy
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.advice_text;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u26a0\ufe0f \u0628\u0631\u0627\u06cc \u062f\u0642\u06cc\u0642 \u062a\u0631 \u0634\u062f\u0646 \u0646\u062a\u06cc\u062c\u0647\u060c \u062a\u0633\u062a \u062a\u06a9\u0645\u06cc\u0644\u06cc \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u06cc\u062f";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </AntdSingleCollapse>
                            );
                          })()
                        : null}
                      {(
                        hasVariant($state, "information", "information")
                          ? true
                          : (() => {
                              try {
                                return currentItem.more;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wynIw,
                            {
                              [sty.textinformation__wynIw8P0Rz]: hasVariant(
                                $state,
                                "information",
                                "information"
                              )
                            }
                          )}
                        >
                          {
                            "\u0645\u0648\u0627\u0631\u062f \u0632\u06cc\u0631 \u0627\u0632 \u062f\u06cc\u06af\u0631 \u0639\u0644\u0644 \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u0627\u06cc\u0646 \u0648\u0636\u0639\u06cc\u062a \u0645\u06cc\u200c\u0628\u0627\u0634\u0646\u062f. \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0645\u06cc\u200c\u0634\u0648\u062f \u0627\u0628\u062a\u062f\u0627 \u0645\u0648\u0631\u062f \u0627\u0635\u0644\u06cc \u0630\u06a9\u0631\u0634\u062f\u0647 \u0631\u0627 \u062f\u0631\u0645\u0627\u0646 \u06a9\u0631\u062f\u0647 \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a \u0627\u062f\u0627\u0645\u0647 \u0639\u0644\u0627\u0626\u0645\u060c \u0633\u0627\u06cc\u0631 \u0639\u0648\u0627\u0645\u0644 \u0632\u06cc\u0631 \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u0646\u0645\u0627\u06cc\u06cc\u062f."
                          }
                        </div>
                      ) : null}
                    </Stack__>
                  );
                })}
                {(() => {
                  try {
                    return (
                      $state.resultlist.length <
                      $state.apiRequest.data.details.length
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__q9Qjc, {
                      [sty.freeBoxinformation__q9Qjc8P0Rz]: hasVariant(
                        $state,
                        "information",
                        "information"
                      ),
                      [sty.freeBoxspecialized__q9QjcFomOb]: hasVariant(
                        $state,
                        "specialized",
                        "specialized"
                      )
                    })}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateResultlist"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["resultlist"]
                              },
                              operation: 0,
                              value: (() => {
                                const highScores = $state.resultlist;
                                const lowScores =
                                  $state.apiRequest.data.details.filter(
                                    item =>
                                      !highScores.some(
                                        highItem => highItem.id === item.id
                                      )
                                  );
                                return [
                                  ...highScores,
                                  { more: true },
                                  ...lowScores
                                ];
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateResultlist"] != null &&
                        typeof $steps["updateResultlist"] === "object" &&
                        typeof $steps["updateResultlist"].then === "function"
                      ) {
                        $steps["updateResultlist"] = await $steps[
                          "updateResultlist"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lxjOn
                      )}
                    >
                      {
                        "\u0645\u0634\u0627\u0647\u062f\u0647 \u0627\u062d\u062a\u0645\u0627\u0644\u0627\u062a \u062f\u06cc\u06af\u0631"
                      }
                    </div>
                    <ChevronDownIcon
                      className={classNames(projectcss.all, sty.svg__zgok)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return (
                      $state.resultlist.length - 1 ==
                        $state.apiRequest.data.details.length &&
                      $state.apiRequest.data.details.length !=
                        $state.apiRequest.data.details.filter(
                          item => item.score > 80 ?? item.score > 0
                        ).length
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__crz8R)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateResultlist"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["resultlist"]
                              },
                              operation: 0,
                              value: (() => {
                                const details = $state.apiRequest.data.details;
                                const maxScore = Math.max(
                                  ...details.map(
                                    item => parseInt(item.score) || 0
                                  )
                                );
                                const filteredItems =
                                  details.filter(item => item.score > 80)
                                    .length > 0
                                    ? details.filter(item => item.score > 80)
                                    : details.filter(item => item.score > 70)
                                        .length > 0
                                    ? details.filter(item => item.score > 70)
                                    : details.filter(item => item.score > 60)
                                        .length > 0
                                    ? details.filter(item => item.score > 60)
                                    : details.filter(item => item.score > 50)
                                        .length > 0
                                    ? details.filter(item => item.score > 50)
                                    : details.filter(
                                        item =>
                                          parseInt(item.score) === maxScore
                                      );
                                return filteredItems;
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateResultlist"] != null &&
                        typeof $steps["updateResultlist"] === "object" &&
                        typeof $steps["updateResultlist"].then === "function"
                      ) {
                        $steps["updateResultlist"] = await $steps[
                          "updateResultlist"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qKxO
                      )}
                    >
                      {
                        "\u0645\u0634\u0627\u0647\u062f\u0647  \u06a9\u0645\u062a\u0631"
                      }
                    </div>
                    <ChevronUpIcon
                      className={classNames(projectcss.all, sty.svg__sznxy)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
              </div>
            </Stack__>
          ) : null}
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bUoDo, {
              [sty.freeBoxspecialized__bUoDoFomOb]: hasVariant(
                $state,
                "specialized",
                "specialized"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1TuMq,
                {
                  [sty.textspecialized___1TuMqFomOb]: hasVariant(
                    $state,
                    "specialized",
                    "specialized"
                  )
                }
              )}
              data-i18n={"result.title5"}
            >
              {hasVariant($state, "specialized", "specialized")
                ? "\u0646\u0638\u0631 \u062a\u062e\u0635\u0635\u06cc \u067e\u0632\u0634\u06a9 \u062f\u0631\u0628\u0627\u0631\u0647 \u062a\u0633\u062a"
                : "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0641\u0635\u06cc\u0644\u06cc \u0628\u0647 \u06a9\u0645\u06a9 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__umGrc)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lupa7,
                  {
                    [sty.textspecialized__lupa7FomOb]: hasVariant(
                      $state,
                      "specialized",
                      "specialized"
                    )
                  }
                )}
              >
                {hasVariant($state, "specialized", "specialized") ? (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.specialized2.result;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "...";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                ) : (
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return $state.apiRequest.data.message;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "...";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                )}
              </div>
            </div>
          </Stack__>
          {(
            hasVariant($state, "information", "information")
              ? true
              : (() => {
                  try {
                    return (
                      $state.apiRequest.data &&
                      $state.apiRequest.data.our_message
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__f1R9S, {
                [sty.freeBoxinformation__f1R9S8P0Rz]: hasVariant(
                  $state,
                  "information",
                  "information"
                ),
                [sty.freeBoxspecialized__f1R9SFomOb]: hasVariant(
                  $state,
                  "specialized",
                  "specialized"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wQiNp,
                  {
                    [sty.textspecialized__wQiNpfomOb]: hasVariant(
                      $state,
                      "specialized",
                      "specialized"
                    )
                  }
                )}
                data-i18n={"result.title2"}
              >
                {
                  "\u0627\u0644\u0627\u0646 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645\u061f"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mGj9Z,
                  {
                    [sty.textspecialized__mGj9ZfomOb]: hasVariant(
                      $state,
                      "specialized",
                      "specialized"
                    )
                  }
                )}
                data-i18n={"result.description"}
              >
                {
                  "\u0628\u0627 \u062a\u0648\u062c\u0647 \u0628\u0647 \u062a\u0634\u062e\u06cc\u0635 \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u0647\u060c \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0627\u0631 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f:"
                }
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.specialized2.nextStepList;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qbs7C, {
                      [sty.freeBoxspecialized__qbs7CfomOb]: hasVariant(
                        $state,
                        "specialized",
                        "specialized"
                      )
                    })}
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__xarJz,
                        {
                          [sty.freeBoxspecialized__xarJzfomOb]: hasVariant(
                            $state,
                            "specialized",
                            "specialized"
                          )
                        }
                      )}
                      style={(() => {
                        try {
                          return {
                            "border-bottom":
                              currentIndex !==
                              $state.todo.filter(
                                item =>
                                  item.advice_text != null && item.task != ""
                              ).length -
                                1
                                ? "solid 1px #e5e5e5"
                                : "none"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r7HyV,
                          {
                            [sty.freeBoxspecialized__r7HyVfomOb]: hasVariant(
                              $state,
                              "specialized",
                              "specialized"
                            )
                          }
                        )}
                      >
                        <Icons
                          apiRequestData={$state.apiRequestData}
                          className={classNames(
                            "__wab_instance",
                            sty.icons__ckKdy,
                            {
                              [sty.iconsspecialized__ckKdyFomOb]: hasVariant(
                                $state,
                                "specialized",
                                "specialized"
                              )
                            }
                          )}
                          currentItem={currentItem}
                          unnamedGroupOfVariants={(() => {
                            try {
                              return (() => {
                                let result = $state.apiRequest.data.extras.find(
                                  a =>
                                    a.type ===
                                    currentItem.option_metric.slice(0, -1)
                                );
                                if (currentItem.action !== "") return "d";
                                else if (
                                  result
                                    ? result.isDone !== undefined
                                      ? result.isDone !== 1
                                      : false
                                    : false
                                )
                                  return "t";
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        />

                        <PercentageBox
                          className={classNames(
                            "__wab_instance",
                            sty.percentageBox__jaUXj,
                            {
                              [sty.percentageBoxspecialized__jaUXjFomOb]:
                                hasVariant($state, "specialized", "specialized")
                            }
                          )}
                          shape={"square"}
                          unnamedGroupOfVariants={"unnamedVariant"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vlgLk,
                              {
                                [sty.textspecialized__vlgLkFomOb]: hasVariant(
                                  $state,
                                  "specialized",
                                  "specialized"
                                )
                              }
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.badge;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "99 % ";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kEthI,
                              {
                                [sty.textspecialized__kEthIfomOb]: hasVariant(
                                  $state,
                                  "specialized",
                                  "specialized"
                                )
                              }
                            )}
                          >
                            {hasVariant(
                              $state,
                              "specialized",
                              "specialized"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.nextStep;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $state.specialized2.actionBtnText;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </PercentageBox>
                      </Stack__>
                      {(() => {
                        try {
                          return currentItem.actionBtn != "eNoskhe";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0KUzb,
                            {
                              [sty.freeBoxspecialized___0KUzbfomOb]: hasVariant(
                                $state,
                                "specialized",
                                "specialized"
                              )
                            }
                          )}
                        >
                          {(
                            hasVariant($state, "specialized", "specialized")
                              ? true
                              : (() => {
                                  try {
                                    return currentItem.action !== "";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                          ) ? (
                            <Paziresh24Button
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cDcD2
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ihK1,
                                      (() => {
                                        try {
                                          return undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "animashen";
                                          }
                                          throw e;
                                        }
                                      })(),
                                      {
                                        [sty.textspecialized__ihK1FomOb]:
                                          hasVariant(
                                            $state,
                                            "specialized",
                                            "specialized"
                                          )
                                      }
                                    )}
                                  >
                                    {hasVariant(
                                      $state,
                                      "specialized",
                                      "specialized"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.actionBtnTxt;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 ";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 "
                                    )}
                                  </div>
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.paziresh24Button__lAgGj,
                                {
                                  [sty.paziresh24Buttonspecialized__lAgGjFomOb]:
                                    hasVariant(
                                      $state,
                                      "specialized",
                                      "specialized"
                                    )
                                }
                              )}
                              endIcon={
                                <Icon125Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__eJhy0
                                  )}
                                  role={"img"}
                                />
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["action"]
                                        },
                                        operation: 0,
                                        value: currentItem.actionBtn
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateAction"] != null &&
                                  typeof $steps["updateAction"] === "object" &&
                                  typeof $steps["updateAction"].then ===
                                    "function"
                                ) {
                                  $steps["updateAction"] = await $steps[
                                    "updateAction"
                                  ];
                                }

                                $steps["updateDialogOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["dialog", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDialogOpen"] != null &&
                                  typeof $steps["updateDialogOpen"] ===
                                    "object" &&
                                  typeof $steps["updateDialogOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateDialogOpen"] = await $steps[
                                    "updateDialogOpen"
                                  ];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://api.liom.app/service/log",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                userId: $ctx.query.user_id,
                                                pageName: "result",
                                                action: "Doctor-visit",
                                                extraData: {
                                                  sessionId:
                                                    $ctx.query.session_id,
                                                  action: $state.action
                                                }
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          {
                                            headers: {
                                              "Content-Type":
                                                "application/json",
                                              Authorization:
                                                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                            }
                                          }
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                              outline={
                                hasVariant($state, "specialized", "specialized")
                                  ? true
                                  : undefined
                              }
                              showStartIcon={true}
                              size={"compact"}
                              startIcon={
                                <Icon125Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__aA9W
                                  )}
                                  role={"img"}
                                />
                              }
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(
                        hasVariant($state, "specialized", "specialized")
                          ? (() => {
                              try {
                                return currentItem.actionBtn == "eNoskhe";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                          : (() => {
                              try {
                                return (
                                  $state.specialized2.actionBtn == "eNoskhe"
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                      ) ? (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lcS8B,
                            {
                              [sty.freeBoxspecialized__lcS8BFomOb]: hasVariant(
                                $state,
                                "specialized",
                                "specialized"
                              )
                            }
                          )}
                        >
                          {(
                            hasVariant($state, "specialized", "specialized")
                              ? true
                              : (() => {
                                  try {
                                    return currentItem.action !== "";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                          ) ? (
                            <Paziresh24Button
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__aWpF
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___9WbwN,
                                      (() => {
                                        try {
                                          return $state.specialized2
                                            .actionBtnText;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "animashen";
                                          }
                                          throw e;
                                        }
                                      })(),
                                      {
                                        [sty.textspecialized___9WbwNfomOb]:
                                          hasVariant(
                                            $state,
                                            "specialized",
                                            "specialized"
                                          )
                                      }
                                    )}
                                  >
                                    {hasVariant(
                                      $state,
                                      "specialized",
                                      "specialized"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return currentItem.actionBtnTxt;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u062b\u0628\u062a \u0646\u0633\u062e\u0647";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.specialized2
                                              .actionBtnText;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u062b\u0628\u062a \u0646\u0633\u062e\u0647";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    )}
                                  </div>
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.paziresh24Button__pbdX,
                                {
                                  [sty.paziresh24Buttonspecialized__pbdXFomOb]:
                                    hasVariant(
                                      $state,
                                      "specialized",
                                      "specialized"
                                    )
                                }
                              )}
                              color={
                                hasVariant($state, "specialized", "specialized")
                                  ? "link"
                                  : undefined
                              }
                              endIcon={
                                <Icon125Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__icXRp
                                  )}
                                  role={"img"}
                                />
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateProfileOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["profile", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateProfileOpen"] != null &&
                                  typeof $steps["updateProfileOpen"] ===
                                    "object" &&
                                  typeof $steps["updateProfileOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateProfileOpen"] = await $steps[
                                    "updateProfileOpen"
                                  ];
                                }
                              }}
                              outline={
                                hasVariant($state, "specialized", "specialized")
                                  ? true
                                  : undefined
                              }
                              showStartIcon={true}
                              size={"compact"}
                              startIcon={
                                <Icon145Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__iBRyN,
                                    {
                                      [sty.svgspecialized__iBRyNfomOb]:
                                        hasVariant(
                                          $state,
                                          "specialized",
                                          "specialized"
                                        )
                                    }
                                  )}
                                  role={"img"}
                                />
                              }
                            />
                          ) : null}
                        </Stack__>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7K2F0,
                          {
                            [sty.freeBoxspecialized___7K2F0FomOb]: hasVariant(
                              $state,
                              "specialized",
                              "specialized"
                            )
                          }
                        )}
                      >
                        <HamdastUtilsOpenLink
                          className={classNames(
                            "__wab_instance",
                            sty.hamdastUtilsOpenLink__maEg8,
                            {
                              [sty.hamdastUtilsOpenLinkspecialized__maEg8FomOb]:
                                hasVariant($state, "specialized", "specialized")
                            }
                          )}
                          destination={(() => {
                            try {
                              return `https://tools.liom.app/self-test?user_id=${
                                $ctx.query.user_id
                              }&type=${currentItem.option_metric.slice(
                                0,
                                -1
                              )}&nextQuesion_id=${
                                $state.apiRequest.data.extras.find(
                                  a =>
                                    a.type ===
                                    currentItem.option_metric.slice(0, -1)
                                ).next_question_id
                              }&session_id=${$ctx.query.session_id}&app=${
                                $ctx.query.app
                              }`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          openInNewTab={true}
                        >
                          {(() => {
                            try {
                              return (() => {
                                let result = $state.apiRequest.data.extras.find(
                                  a =>
                                    a.type ===
                                    currentItem.option_metric.slice(0, -1)
                                );
                                return result
                                  ? result.isDone !== undefined
                                    ? result.isDone !== 1
                                    : false
                                  : false;
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.buttonLiom7,
                                    {
                                      [sty.buttonLiom7specialized]: hasVariant(
                                        $state,
                                        "specialized",
                                        "specialized"
                                      )
                                    }
                                  ),
                                  color: generateStateValueProp($state, [
                                    "buttonLiom7",
                                    __plasmic_idx_0,
                                    "color"
                                  ]),
                                  isDisabled: (() => {
                                    try {
                                      return undefined;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })(),
                                  load: generateStateValueProp($state, [
                                    "buttonLiom7",
                                    __plasmic_idx_0,
                                    "load"
                                  ]),
                                  onClick: async event => {
                                    const $steps = {};

                                    $steps["updateLoading"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["loading"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLoading"] != null &&
                                      typeof $steps["updateLoading"] ===
                                        "object" &&
                                      typeof $steps["updateLoading"].then ===
                                        "function"
                                    ) {
                                      $steps["updateLoading"] = await $steps[
                                        "updateLoading"
                                      ];
                                    }

                                    $steps["goToPage"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            destination: (() => {
                                              try {
                                                return `/self-test?user_id=${
                                                  $ctx.query.user_id
                                                }&type=${currentItem.option_metric.option_metric.slice(
                                                  0,
                                                  -1
                                                )}&nextQuesion_id=${
                                                  $state.apiRequest.data.extras.find(
                                                    a =>
                                                      a.type ==
                                                      currentItem.option_metric.option_metric.slice(
                                                        0,
                                                        -1
                                                      )
                                                  ).next_question_id
                                                }&session_id=${
                                                  $ctx.query.session_id
                                                }&app=${$ctx.query.app}&inApp=${
                                                  $ctx.query.inApp
                                                }`;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          };
                                          return (({ destination }) => {
                                            if (
                                              typeof destination === "string" &&
                                              destination.startsWith("#")
                                            ) {
                                              document
                                                .getElementById(
                                                  destination.substr(1)
                                                )
                                                .scrollIntoView({
                                                  behavior: "smooth"
                                                });
                                            } else {
                                              __nextRouter?.push(destination);
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["goToPage"] != null &&
                                      typeof $steps["goToPage"] === "object" &&
                                      typeof $steps["goToPage"].then ===
                                        "function"
                                    ) {
                                      $steps["goToPage"] = await $steps[
                                        "goToPage"
                                      ];
                                    }

                                    $steps["updateLoading2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["loading"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateLoading2"] != null &&
                                      typeof $steps["updateLoading2"] ===
                                        "object" &&
                                      typeof $steps["updateLoading2"].then ===
                                        "function"
                                    ) {
                                      $steps["updateLoading2"] = await $steps[
                                        "updateLoading2"
                                      ];
                                    }
                                  },
                                  onColorChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "buttonLiom7",
                                        __plasmic_idx_0,
                                        "color"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  onLoadChange: async (...eventArgs: any) => {
                                    ((...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "buttonLiom7",
                                        __plasmic_idx_0,
                                        "load"
                                      ])(eventArgs[0]);
                                    }).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  size: "compact"
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "buttonLiom7[].color",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    },
                                    {
                                      name: "buttonLiom7[].load",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => false
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <ButtonLiom
                                    data-plasmic-name={"buttonLiom7"}
                                    data-plasmic-override={
                                      overrides.buttonLiom7
                                    }
                                    {...child$Props}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__luhD
                                      )}
                                    >
                                      {
                                        " \u062a\u0633\u0640\u0640\u062a \u062a\u0640\u0640\u0640\u06a9\u0645\u06cc\u0644\u06cc"
                                      }
                                    </div>
                                  </ButtonLiom>
                                );
                              })()
                            : null}
                        </HamdastUtilsOpenLink>
                      </div>
                    </Stack__>
                  </Stack__>
                );
              })}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.todo;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ryI9S, {
                      [sty.freeBoxspecialized__ryI9SFomOb]: hasVariant(
                        $state,
                        "specialized",
                        "specialized"
                      )
                    })}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__m5OMm,
                        {
                          [sty.freeBoxspecialized__m5OMmFomOb]: hasVariant(
                            $state,
                            "specialized",
                            "specialized"
                          )
                        }
                      )}
                      style={(() => {
                        try {
                          return {
                            "border-bottom":
                              currentIndex !==
                              $state.todo.filter(
                                item =>
                                  item.advice_text != null && item.task != ""
                              ).length -
                                1
                                ? "solid 1px #e5e5e5"
                                : "none"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6HD7F,
                          {
                            [sty.freeBoxspecialized___6HD7FfomOb]: hasVariant(
                              $state,
                              "specialized",
                              "specialized"
                            )
                          }
                        )}
                      >
                        <Icons
                          apiRequestData={$state.apiRequestData}
                          className={classNames(
                            "__wab_instance",
                            sty.icons__utG3M
                          )}
                          currentItem={currentItem}
                          unnamedGroupOfVariants={(() => {
                            try {
                              return (() => {
                                let result = $state.apiRequest.data.extras.find(
                                  a =>
                                    a.type ===
                                    currentItem.option_metric.slice(0, -1)
                                );
                                if (currentItem.action !== "") return "d";
                                else if (
                                  result
                                    ? result.isDone !== undefined
                                      ? result.isDone !== 1
                                      : false
                                    : false
                                )
                                  return "t";
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        />

                        {(() => {
                          try {
                            return currentItem.badge != null;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PercentageBox
                            className={classNames(
                              "__wab_instance",
                              sty.percentageBox__t9USj,
                              {
                                [sty.percentageBoxspecialized__t9USjFomOb]:
                                  hasVariant(
                                    $state,
                                    "specialized",
                                    "specialized"
                                  )
                              }
                            )}
                            shape={"square"}
                            unnamedGroupOfVariants={"unnamedVariant"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Wh6M,
                                {
                                  [sty.textspecialized___2Wh6MfomOb]:
                                    hasVariant(
                                      $state,
                                      "specialized",
                                      "specialized"
                                    )
                                }
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.badge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "99 % ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rVwS,
                                {
                                  [sty.textspecialized__rVwSfomOb]: hasVariant(
                                    $state,
                                    "specialized",
                                    "specialized"
                                  )
                                }
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.task;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </PercentageBox>
                        ) : null}
                      </Stack__>
                      {(() => {
                        try {
                          return $ctx.query.Share != "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lc50W,
                            {
                              [sty.freeBoxspecialized__lc50WfomOb]: hasVariant(
                                $state,
                                "specialized",
                                "specialized"
                              )
                            }
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem.action !== "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Paziresh24Button
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__m6YcP
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__e4XVa,
                                      (() => {
                                        try {
                                          return undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "animashen";
                                          }
                                          throw e;
                                        }
                                      })()
                                    )}
                                  >
                                    {
                                      "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 "
                                    }
                                  </div>
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.paziresh24Button___7Fk4A,
                                {
                                  [sty.paziresh24Buttonspecialized___7Fk4AFomOb]:
                                    hasVariant(
                                      $state,
                                      "specialized",
                                      "specialized"
                                    )
                                }
                              )}
                              endIcon={
                                <Icon125Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___5Ph1M
                                  )}
                                  role={"img"}
                                />
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["action"]
                                        },
                                        operation: 0,
                                        value: currentItem.action
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateAction"] != null &&
                                  typeof $steps["updateAction"] === "object" &&
                                  typeof $steps["updateAction"].then ===
                                    "function"
                                ) {
                                  $steps["updateAction"] = await $steps[
                                    "updateAction"
                                  ];
                                }

                                $steps["updateDialogOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["dialog", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDialogOpen"] != null &&
                                  typeof $steps["updateDialogOpen"] ===
                                    "object" &&
                                  typeof $steps["updateDialogOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateDialogOpen"] = await $steps[
                                    "updateDialogOpen"
                                  ];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://api.liom.app/service/log",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                userId: $ctx.query.user_id,
                                                pageName: "result",
                                                action: "Doctor-visit",
                                                extraData: {
                                                  sessionId:
                                                    $ctx.query.session_id,
                                                  action: $state.action
                                                }
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          {
                                            headers: {
                                              "Content-Type":
                                                "application/json",
                                              Authorization:
                                                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                            }
                                          }
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                              size={"compact"}
                              startIcon={
                                <Icon125Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__kooxA
                                  )}
                                  role={"img"}
                                />
                              }
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $ctx.query.Share != "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ppv1R,
                            {
                              [sty.freeBoxspecialized__ppv1RfomOb]: hasVariant(
                                $state,
                                "specialized",
                                "specialized"
                              )
                            }
                          )}
                        >
                          <HamdastUtilsOpenLink
                            className={classNames(
                              "__wab_instance",
                              sty.hamdastUtilsOpenLink__myKf4,
                              {
                                [sty.hamdastUtilsOpenLinkspecialized__myKf4FomOb]:
                                  hasVariant(
                                    $state,
                                    "specialized",
                                    "specialized"
                                  )
                              }
                            )}
                            destination={(() => {
                              try {
                                return `https://tools.liom.app/self-test?user_id=${
                                  $ctx.query.user_id
                                }&type=${currentItem.option_metric.slice(
                                  0,
                                  -1
                                )}&nextQuesion_id=${
                                  $state.apiRequest.data.extras.find(
                                    a =>
                                      a.type ===
                                      currentItem.option_metric.slice(0, -1)
                                  ).next_question_id
                                }&session_id=${$ctx.query.session_id}&app=${
                                  $ctx.query.app
                                }`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            openInNewTab={true}
                          >
                            {(() => {
                              try {
                                return (() => {
                                  let result =
                                    $state.apiRequest.data.extras.find(
                                      a =>
                                        a.type ===
                                        currentItem.option_metric.slice(0, -1)
                                    );
                                  return result
                                    ? result.isDone !== undefined
                                      ? result.isDone !== 1
                                      : false
                                    : false;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.buttonLiom4,
                                      {
                                        [sty.buttonLiom4specialized]:
                                          hasVariant(
                                            $state,
                                            "specialized",
                                            "specialized"
                                          )
                                      }
                                    ),
                                    color: generateStateValueProp($state, [
                                      "buttonLiom4",
                                      __plasmic_idx_0,
                                      "color"
                                    ]),
                                    isDisabled: (() => {
                                      try {
                                        return undefined;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    load: generateStateValueProp($state, [
                                      "buttonLiom4",
                                      __plasmic_idx_0,
                                      "load"
                                    ]),
                                    onClick: async event => {
                                      const $steps = {};

                                      $steps["updateLoading"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["loading"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateLoading"] != null &&
                                        typeof $steps["updateLoading"] ===
                                          "object" &&
                                        typeof $steps["updateLoading"].then ===
                                          "function"
                                      ) {
                                        $steps["updateLoading"] = await $steps[
                                          "updateLoading"
                                        ];
                                      }

                                      $steps["goToPage"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: (() => {
                                                try {
                                                  return `/self-test?user_id=${
                                                    $ctx.query.user_id
                                                  }&type=${currentItem.option_metric.option_metric.slice(
                                                    0,
                                                    -1
                                                  )}&nextQuesion_id=${
                                                    $state.apiRequest.data.extras.find(
                                                      a =>
                                                        a.type ==
                                                        currentItem.option_metric.option_metric.slice(
                                                          0,
                                                          -1
                                                        )
                                                    ).next_question_id
                                                  }&session_id=${
                                                    $ctx.query.session_id
                                                  }&app=${
                                                    $ctx.query.app
                                                  }&inApp=${$ctx.query.inApp}`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                __nextRouter?.push(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToPage"] != null &&
                                        typeof $steps["goToPage"] ===
                                          "object" &&
                                        typeof $steps["goToPage"].then ===
                                          "function"
                                      ) {
                                        $steps["goToPage"] = await $steps[
                                          "goToPage"
                                        ];
                                      }

                                      $steps["updateLoading2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["loading"]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateLoading2"] != null &&
                                        typeof $steps["updateLoading2"] ===
                                          "object" &&
                                        typeof $steps["updateLoading2"].then ===
                                          "function"
                                      ) {
                                        $steps["updateLoading2"] = await $steps[
                                          "updateLoading2"
                                        ];
                                      }
                                    },
                                    onColorChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "buttonLiom4",
                                          __plasmic_idx_0,
                                          "color"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    onLoadChange: async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "buttonLiom4",
                                          __plasmic_idx_0,
                                          "load"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    size: "compact"
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "buttonLiom4[].color",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      },
                                      {
                                        name: "buttonLiom4[].load",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => false
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <ButtonLiom
                                      data-plasmic-name={"buttonLiom4"}
                                      data-plasmic-override={
                                        overrides.buttonLiom4
                                      }
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dlNf
                                        )}
                                      >
                                        {
                                          " \u062a\u0633\u0640\u0640\u062a \u062a\u0640\u0640\u0640\u06a9\u0645\u06cc\u0644\u06cc"
                                        }
                                      </div>
                                    </ButtonLiom>
                                  );
                                })()
                              : null}
                          </HamdastUtilsOpenLink>
                        </div>
                      ) : null}
                    </div>
                  </Stack__>
                );
              })}
            </Stack__>
          ) : null}
          {(
            hasVariant($state, "information", "information")
              ? true
              : (() => {
                  try {
                    return (
                      !$state.apiRequest.data.prescription &&
                      $state.apiRequest.data &&
                      $state.apiRequest.data.our_message
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mzAy8, {
                [sty.freeBoxinformation__mzAy88P0Rz]: hasVariant(
                  $state,
                  "information",
                  "information"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__v2LC)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fo0X
                  )}
                  data-i18n={"result.title3"}
                >
                  {
                    "\u0622\u06cc\u0627 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0645\u0631\u0627\u062c\u0639\u0647 \u0641\u0648\u0631\u06cc \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0627\u0633\u062a\u061f "
                  }
                </div>
              </div>
              {(() => {
                try {
                  return $state.apiRequest.data.details.filter(
                    item => parseInt(item.score) >= 80
                  ).length == 0
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__se2Ul,
                    {
                      [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__se2UlYcZU]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                  data-i18n={"result.description2"}
                >
                  {
                    '\u062e\u06cc\u0631\u060c \u0646\u06cc\u0627\u0632\u06cc \u0628\u0647 \u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0641\u0639\u0644\u0627 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f. \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u062f\u0631 \u0628\u062e\u0634 "\u0627\u0644\u0627\u0646 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645\u061f" \u0631\u0627 \u0644\u0637\u0641\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f.'
                  }
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.apiRequest.data.details.filter(
                    item => parseInt(item.score) >= 80
                  ).length == 0
                    ? false
                    : true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fCpeU
                  )}
                >
                  {
                    "\u062f\u0631 \u0645\u0648\u0627\u0631\u062f \u0632\u06cc\u0631 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0645\u0631\u0627\u062c\u0639\u0647 \u0641\u0648\u0631\u06cc \u0628\u0647 \u067e\u0632\u0634\u06a9 \u062f\u0627\u0631\u06cc\u062f \u0648 \u062f\u0631 \u0634\u0631\u0627\u06cc\u0637 \u0627\u0648\u0631\u0698\u0627\u0646\u0633\u06cc \u06cc\u0627 \u0645\u0634\u06a9\u0648\u06a9\u060c \u0628\u0647\u062a\u0631 \u0627\u0633\u062a \u0647\u0645\u06cc\u0634\u0647 \u0628\u0627 \u067e\u0632\u0634\u06a9 \u0645\u0634\u0648\u0631\u062a \u06a9\u0646\u06cc\u062f."
                  }
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.apiRequest.data.details.filter(
                    item => parseInt(item.score) >= 80
                  )
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__ke2Tb)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.apiRequest.data.details.filter(
                          item => parseInt(item.score) >= 80
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3GvY6,
                          {
                            [sty.freeBoxspecialized___3GvY6FomOb]: hasVariant(
                              $state,
                              "specialized",
                              "specialized"
                            )
                          }
                        )}
                        key={currentIndex}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rZgJu
                          )}
                          style={(() => {
                            try {
                              return {
                                "border-bottom":
                                  currentIndex !==
                                  $state.apiRequest.data.details.filter(
                                    item => parseInt(item.score) >= 80
                                  ).length -
                                    1
                                    ? "solid 1px #e5e5e5"
                                    : "none"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__b45Lz,
                              {
                                [sty.freeBoxspecialized__b45LzfomOb]:
                                  hasVariant(
                                    $state,
                                    "specialized",
                                    "specialized"
                                  )
                              }
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["action"]
                                      },
                                      operation: 0,
                                      value: currentItem.action
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateAction"] != null &&
                                typeof $steps["updateAction"] === "object" &&
                                typeof $steps["updateAction"].then ===
                                  "function"
                              ) {
                                $steps["updateAction"] = await $steps[
                                  "updateAction"
                                ];
                              }

                              $steps["updateDialogOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["dialog", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDialogOpen"] != null &&
                                typeof $steps["updateDialogOpen"] ===
                                  "object" &&
                                typeof $steps["updateDialogOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateDialogOpen"] = await $steps[
                                  "updateDialogOpen"
                                ];
                              }
                            }}
                          >
                            {(() => {
                              try {
                                return currentItem.badge != null;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PercentageBox
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentageBox__tFcgs,
                                  {
                                    [sty.percentageBoxspecialized__tFcgsfomOb]:
                                      hasVariant(
                                        $state,
                                        "specialized",
                                        "specialized"
                                      )
                                  }
                                )}
                                unnamedGroupOfVariants={(() => {
                                  try {
                                    return (() => {
                                      let score = parseInt(currentItem.score);
                                      let color =
                                        score >= 80
                                          ? "red"
                                          : score >= 70
                                          ? "oreng"
                                          : score >= 60
                                          ? "yellow"
                                          : score >= 50
                                          ? "blue"
                                          : score >= 40
                                          ? ""
                                          : "";
                                      return color;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "red";
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vtkPr,
                                    {
                                      [sty.textspecialized__vtkPrfomOb]:
                                        hasVariant(
                                          $state,
                                          "specialized",
                                          "specialized"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.badge;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "99 % ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <Icon127Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___0AgVt,
                                    "animashen",
                                    {
                                      [sty.svgspecialized___0AgVtfomOb]:
                                        hasVariant(
                                          $state,
                                          "specialized",
                                          "specialized"
                                        )
                                    }
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xXc2,
                                    {
                                      [sty.textspecialized__xXc2FomOb]:
                                        hasVariant(
                                          $state,
                                          "specialized",
                                          "specialized"
                                        )
                                    }
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.option_metric_fa;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </PercentageBox>
                            ) : null}
                          </Stack__>
                          {(() => {
                            try {
                              return $ctx.query.Share != "true";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zrbb2
                              )}
                            />
                          ) : null}
                        </Stack__>
                      </Stack__>
                    );
                  })}
                </div>
              ) : null}
            </Stack__>
          ) : null}
          {(
            hasVariant($state, "information", "information")
              ? true
              : hasVariant(globalVariants, "screen", "mobileOnly")
              ? (() => {
                  try {
                    return $state.apiRequest?.data?.prescription;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return (
                      $state.apiRequest.data.prescription &&
                      $state.apiRequest.data &&
                      $state.apiRequest.data.our_message
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bKpwS, {
                [sty.freeBoxinformation__bKpwS8P0Rz]: hasVariant(
                  $state,
                  "information",
                  "information"
                ),
                [sty.freeBoxspecialized__bKpwSfomOb]: hasVariant(
                  $state,
                  "specialized",
                  "specialized"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__kgya4)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z8Xba
                  )}
                  data-i18n={"result.title4"}
                >
                  {
                    "\u0622\u06cc\u0627 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u062f\u0627\u0631\u0648 \u06cc\u0627 \u0622\u0632\u0645\u0627\u06cc\u0634 \u062f\u0627\u0631\u0645\u061f"
                  }
                </div>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__djnjd)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hyDnv,
                    {
                      [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__hyDnvYcZU]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                  data-i18n={"result.description3"}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateProfileOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["profile", "open"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateProfileOpen"] != null &&
                      typeof $steps["updateProfileOpen"] === "object" &&
                      typeof $steps["updateProfileOpen"].then === "function"
                    ) {
                      $steps["updateProfileOpen"] = await $steps[
                        "updateProfileOpen"
                      ];
                    }
                  }}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0628\u0627 \u06a9\u0644\u06cc\u06a9 \u0631\u0648\u06cc "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          textDecorationLine: "underline",
                          fontWeight: 700,
                          color: "var(--token-fyoD0poQfxvl)"
                        }}
                      >
                        {
                          "\u00ab\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9\u00bb"
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "var(--token-fyoD0poQfxvl)"
                        }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>
                        {
                          "\u0648 \u067e\u0631 \u06a9\u0631\u062f\u0646 \u0641\u0631\u0645\u060c \u067e\u0632\u0634\u06a9 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u0645\u06cc\u200c\u06a9\u0646\u062f. \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632\u060c \u0646\u0633\u062e\u0647 \u06cc\u0627 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0622\u0632\u0645\u0627\u06cc\u0634 \u0635\u0627\u062f\u0631 \u0648 \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u0628\u0627 \u06a9\u0644\u06cc\u06a9 \u0631\u0648\u06cc "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          textDecorationLine: "underline",
                          fontWeight: 700,
                          color: "var(--token-fyoD0poQfxvl)"
                        }}
                      >
                        {
                          "\u00ab\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9\u00bb"
                        }
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{
                          fontWeight: 700,
                          color: "var(--token-fyoD0poQfxvl)"
                        }}
                      >
                        {" "}
                      </span>
                      <React.Fragment>
                        {
                          "\u0648 \u067e\u0631 \u06a9\u0631\u062f\u0646 \u0641\u0631\u0645\u060c \u067e\u0632\u0634\u06a9 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u0645\u06cc\u200c\u06a9\u0646\u062f. \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632\u060c \u0646\u0633\u062e\u0647 \u06cc\u0627 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0622\u0632\u0645\u0627\u06cc\u0634 \u0635\u0627\u062f\u0631 \u0648 \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  )}
                </div>
                <LottieWrapper
                  data-plasmic-name={"lottie"}
                  data-plasmic-override={overrides.lottie}
                  animationData={{
                    nm: "Comp 1",
                    ddd: 0,
                    h: 250,
                    w: 200,
                    meta: { g: "@lottiefiles/toolkit-js 0.33.2" },
                    layers: [
                      {
                        ty: 4,
                        nm: "lapicero/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [89, 89, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [59, 105.5, 0],
                                t: 0,
                                ti: [-8.303, 0, 0],
                                to: [3.521, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [81.002, 105.5, 0],
                                t: 10,
                                ti: [-4.186, -0.785, 0],
                                to: [12.076, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [117.078, 105.967, 0],
                                t: 24,
                                ti: [1.452, -0.467, 0],
                                to: [1.247, 0.234, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [114, 107, 0],
                                t: 25,
                                ti: [0, 0, 0],
                                to: [-49.72, 16, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [52, 117.5, 0],
                                t: 32,
                                ti: [0, 0, 0],
                                to: [0, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [117, 117.5, 0],
                                t: 52,
                                ti: [0, 0, 0],
                                to: [0, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [58.5, 127.5, 0],
                                t: 58,
                                ti: [0, 0, 0],
                                to: [0, 0, 0]
                              },
                              { s: [104, 127.5, 0], t: 78 }
                            ],
                            ix: 2
                          },
                          r: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-4],
                                t: 0
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 6
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-4],
                                t: 12
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 18
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-6.857],
                                t: 23
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-4],
                                t: 25
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 32
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-4],
                                t: 39
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 46
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-4],
                                t: 53
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 61
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-4],
                                t: 69
                              },
                              { s: [0], t: 78 }
                            ],
                            ix: 10
                          },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [-0.105, 0.106],
                                      [0, 0],
                                      [-0.109, -0.108],
                                      [0, 0],
                                      [0.102, -0.103],
                                      [0, 0],
                                      [0.104, 0.105]
                                    ],
                                    o: [
                                      [-0.109, -0.109],
                                      [0, 0],
                                      [0.103, -0.102],
                                      [0, 0],
                                      [0.104, 0.105],
                                      [0, 0],
                                      [-0.106, 0.106],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-6.207, -3.508],
                                      [-6.219, -3.893],
                                      [-3.889, -6.223],
                                      [-3.502, -6.214],
                                      [6.213, 3.502],
                                      [6.222, 3.889],
                                      [3.893, 6.219],
                                      [3.508, 6.207]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.898, 0.9137, 0.9412], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [169.536, 81.423], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 2",
                            ix: 2,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [-1.168, 1.819],
                                      [0.987, 0.958],
                                      [2.208, 2.113],
                                      [0.278, -0.279],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0.279, -0.279],
                                      [-2.119, -2.215],
                                      [-0.959, -0.989],
                                      [-1.823, 1.163],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-16.765, 16.524],
                                      [-15.595, 17.962],
                                      [-15.326, 17.691],
                                      [-11.787, 21.01],
                                      [20.773, -11.659],
                                      [16.128, -16.37],
                                      [11.422, -21.01],
                                      [-20.772, 11.476],
                                      [-17.934, 15.083],
                                      [-18.203, 15.354]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.1843, 0.0392, 0.4039], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [186.526, 64.388], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 3",
                            ix: 3,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [4.925, 5.098],
                                      [0.008, 0.006],
                                      [0.011, 0.012],
                                      [0.399, -0.399],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0.4, -0.399],
                                      [-0.013, -0.014],
                                      [-0.008, -0.01],
                                      [-5.099, -4.925],
                                      [0, 0],
                                      [-0.005, 0.006],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-3.46, 3.456],
                                      [-3.431, 3.487],
                                      [-3.421, 3.487],
                                      [1.551, 7.831],
                                      [2.904, -2.848],
                                      [2.874, -2.878],
                                      [2.847, -2.906],
                                      [-7.829, -1.548],
                                      [-3.485, 3.422],
                                      [-3.488, 3.43]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.898, 0.9137, 0.9412], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [204.85, 45.867], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 4",
                            ix: 4,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [-0.583, -0.555],
                                      [0, 0],
                                      [0, 0],
                                      [2.284, -3.445]
                                    ],
                                    o: [
                                      [3.435, -2.277],
                                      [0, 0],
                                      [0, 0],
                                      [3.242, 3.368]
                                    ],
                                    v: [
                                      [-20.064, 25.779],
                                      [25.589, -16.461],
                                      [16.298, -25.779],
                                      [-25.589, 20.319]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.1843, 0.0392, 0.4039], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [147.532, 103.321], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 5",
                            ix: 5,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [-0.178, -0.155],
                                      [-1.275, 1.092],
                                      [0, 0],
                                      [0.806, -1.743]
                                    ],
                                    o: [
                                      [2.85, -1.093],
                                      [0, 0],
                                      [-1.814, 1.935],
                                      [1.297, 1.275]
                                    ],
                                    v: [
                                      [-4.37, 6.561],
                                      [6.601, -1.008],
                                      [0.994, -6.562],
                                      [-6.601, 4.376]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.8118, 0.8431], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [121.096, 129.944], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 6",
                            ix: 6,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0.367, 0.367],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [-0.359, -0.359],
                                      [0, 0]
                                    ],
                                    v: [
                                      [1.595, 0.633],
                                      [-1.236, 1.288],
                                      [-0.574, -1.654]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.1843, 0.0392, 0.4039], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [115.179, 135.823], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 7",
                            ix: 7,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0.904, -0.045],
                                      [2.702, -2.72],
                                      [4.872, -11.119],
                                      [-0.791, 0.162],
                                      [0.095, 0.789],
                                      [-0.338, 1.153],
                                      [-0.899, 0.425],
                                      [-0.477, -0.659]
                                    ],
                                    o: [
                                      [-2.915, -1.327],
                                      [-0.733, 0.031],
                                      [-1.919, 1.933],
                                      [-0.31, 0.933],
                                      [1.014, -0.199],
                                      [-0.1, -0.782],
                                      [0.333, -1.162],
                                      [0.911, -0.429],
                                      [2.602, -3.503]
                                    ],
                                    v: [
                                      [15.374, -13.142],
                                      [10.119, -14.769],
                                      [4.559, -11.672],
                                      [-15.065, 13.503],
                                      [-13.771, 14.652],
                                      [-7.912, 10.036],
                                      [-8.221, 6.812],
                                      [6.666, -7.396],
                                      [8.733, -6.256]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.1843, 0.0392, 0.4039], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [182.386, 58.095], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 1
                      },
                      {
                        ty: 4,
                        nm: "linea 3/@1xilustraci\u00c3\u00b3n 1 contornos 3",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: true,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [89, 89, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: { a: 0, k: [100, 147.5, 0], ix: 2 },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        masksProperties: [
                          {
                            nm: "M\u00c3\u00a1scara 1",
                            inv: false,
                            mode: "a",
                            x: { a: 0, k: 0, ix: 4 },
                            o: { a: 0, k: 100, ix: 3 },
                            pt: {
                              a: 0,
                              k: {
                                c: true,
                                i: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                o: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                v: [
                                  [68.639, 108.079],
                                  [68.382, 118.893],
                                  [122.128, 118.893],
                                  [121.963, 110.537]
                                ]
                              },
                              ix: 1
                            }
                          }
                        ],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Forma 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: false,
                                    i: [[0, 0]],
                                    o: [[0, 0]],
                                    v: [[234.815, 94.315]]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [0, 0], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 2,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-34.935, 1.417],
                                      [34.934, 1.417],
                                      [34.934, -1.418],
                                      [-34.935, -1.418]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: {
                                  a: 1,
                                  k: [
                                    {
                                      o: { x: 0.167, y: 0.167 },
                                      i: { x: 0.833, y: 0.833 },
                                      s: [26.758, 113.855],
                                      t: 58,
                                      ti: [-12.833, 0],
                                      to: [12.833, 0]
                                    },
                                    { s: [103.758, 113.855], t: 81 }
                                  ],
                                  ix: 2
                                },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 2
                      },
                      {
                        ty: 4,
                        nm: "linea 3/@1xilustraci\u00c3\u00b3n 1 contornos 2",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: true,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [89, 89, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: { a: 0, k: [100, 136.5, 0], ix: 2 },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        masksProperties: [
                          {
                            nm: "M\u00c3\u00a1scara 1",
                            inv: false,
                            mode: "a",
                            x: { a: 0, k: 0, ix: 4 },
                            o: { a: 0, k: 100, ix: 3 },
                            pt: {
                              a: 0,
                              k: {
                                c: true,
                                i: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                o: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                v: [
                                  [68.639, 108.079],
                                  [68.382, 118.893],
                                  [141.299, 119.174],
                                  [141.556, 108.36]
                                ]
                              },
                              ix: 1
                            }
                          }
                        ],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Forma 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: false,
                                    i: [[0, 0]],
                                    o: [[0, 0]],
                                    v: [[234.815, 94.315]]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [0, 0], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 2,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-34.935, 1.417],
                                      [34.934, 1.417],
                                      [34.934, -1.418],
                                      [-34.935, -1.418]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: {
                                  a: 1,
                                  k: [
                                    {
                                      o: { x: 0.167, y: 0.167 },
                                      i: { x: 0.833, y: 0.833 },
                                      s: [26.758, 113.855],
                                      t: 28,
                                      ti: [-12.833, 0],
                                      to: [12.833, 0]
                                    },
                                    { s: [103.758, 113.855], t: 53 }
                                  ],
                                  ix: 2
                                },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 3
                      },
                      {
                        ty: 4,
                        nm: "linea 3/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: true,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [89, 89, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: { a: 0, k: [100, 125, 0], ix: 2 },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        masksProperties: [
                          {
                            nm: "M\u00c3\u00a1scara 1",
                            inv: false,
                            mode: "a",
                            x: { a: 0, k: 0, ix: 4 },
                            o: { a: 0, k: 100, ix: 3 },
                            pt: {
                              a: 0,
                              k: {
                                c: true,
                                i: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                o: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                v: [
                                  [68.639, 108.079],
                                  [68.382, 118.893],
                                  [141.299, 119.174],
                                  [141.556, 108.36]
                                ]
                              },
                              ix: 1
                            }
                          }
                        ],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Forma 1",
                            ix: 1,
                            cix: 2,
                            np: 3,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: false,
                                    i: [[0, 0]],
                                    o: [[0, 0]],
                                    v: [[234.815, 94.315]]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [0, 0], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 2,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-34.935, 1.417],
                                      [34.934, 1.417],
                                      [34.934, -1.418],
                                      [-34.935, -1.418]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: {
                                  a: 1,
                                  k: [
                                    {
                                      o: { x: 0.167, y: 0.167 },
                                      i: { x: 0.833, y: 0.833 },
                                      s: [26.758, 113.855],
                                      t: 0,
                                      ti: [-12.833, 0],
                                      to: [12.833, 0]
                                    },
                                    { s: [103.758, 113.855], t: 23 }
                                  ],
                                  ix: 2
                                },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 4
                      },
                      {
                        ty: 4,
                        nm: "cuadrado/@1xilustraci\u00c3\u00b3n 1 contornos 2",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: true,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112, 125, 0],
                                t: 0,
                                ti: [5.5, 0, 0],
                                to: [-5.5, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [79, 125, 0],
                                t: 24,
                                ti: [0, 0, 0],
                                to: [0, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [79, 125, 0],
                                t: 32,
                                ti: [0, 0, 0],
                                to: [5.333, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [111, 125, 0],
                                t: 48,
                                ti: [5.333, 0, 0],
                                to: [0, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [79, 125, 0],
                                t: 71,
                                ti: [0, 0, 0],
                                to: [0, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [79, 125, 0],
                                t: 77,
                                ti: [-5.333, 0, 0],
                                to: [5.333, 0, 0]
                              },
                              { s: [111, 125, 0], t: 91 }
                            ],
                            ix: 2
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        masksProperties: [
                          {
                            nm: "M\u00c3\u00a1scara 1",
                            inv: false,
                            mode: "a",
                            x: { a: 0, k: 0, ix: 4 },
                            o: { a: 0, k: 100, ix: 3 },
                            pt: {
                              a: 0,
                              k: {
                                c: true,
                                i: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                o: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                v: [
                                  [0.211, 75.274],
                                  [0.211, 107.673],
                                  [32.612, 107.673],
                                  [32.612, 75.274]
                                ]
                              },
                              ix: 1
                            }
                          }
                        ],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 3.887],
                                      [0, 0],
                                      [-3.889, 0],
                                      [0, 0],
                                      [0, -3.888],
                                      [0, 0],
                                      [3.888, 0]
                                    ],
                                    o: [
                                      [-3.889, 0],
                                      [0, 0],
                                      [0, -3.888],
                                      [0, 0],
                                      [3.888, 0],
                                      [0, 0],
                                      [0, 3.887],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-9.13, 16.2],
                                      [-16.201, 9.132],
                                      [-16.201, -9.132],
                                      [-9.13, -16.199],
                                      [9.131, -16.199],
                                      [16.201, -9.132],
                                      [16.201, 9.132],
                                      [9.131, 16.2]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.5647, 0.3804, 0.8471], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [16.411, 91.473], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 5
                      },
                      {
                        ty: 4,
                        nm: "lupa/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [89, 89, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: { a: 0, k: [101.5, 124, 0], ix: 2 },
                          r: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 27
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-5],
                                t: 31
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 35
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [0],
                                t: 74
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-5],
                                t: 78
                              },
                              { s: [0], t: 82 }
                            ],
                            ix: 10
                          },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 4,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [1.32, 0.005],
                                      [0.012, 2.762],
                                      [-0.934, 0.935],
                                      [-1.321, -0.005],
                                      [-0.013, -2.76],
                                      [0.934, -0.934]
                                    ],
                                    o: [
                                      [-2.761, -0.015],
                                      [-0.007, -1.32],
                                      [0.933, -0.935],
                                      [2.761, 0.017],
                                      [0.007, 1.321],
                                      [-0.933, 0.935]
                                    ],
                                    v: [
                                      [-1.733, 3.25],
                                      [-6.739, -1.763],
                                      [-5.292, -5.287],
                                      [-1.77, -6.74],
                                      [3.237, -1.727],
                                      [1.789, 1.798]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 2",
                                ix: 2,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0.247, 0.234],
                                      [0, 0],
                                      [0.006, 1.322],
                                      [3.451, 0.019],
                                      [1.167, -1.168],
                                      [-0.01, -1.651],
                                      [-3.451, -0.021],
                                      [-1.067, 0.79],
                                      [0, 0],
                                      [0, 0],
                                      [-0.331, 0.086],
                                      [-0.086, 0.331]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0.782, -1.066],
                                      [-0.015, -3.451],
                                      [-1.651, -0.008],
                                      [-1.168, 1.169],
                                      [0.015, 3.451],
                                      [1.327, 0.005],
                                      [0, 0],
                                      [0, 0],
                                      [0.236, 0.246],
                                      [0.33, -0.086],
                                      [0.084, -0.331]
                                    ],
                                    v: [
                                      [7.649, 6.318],
                                      [3.288, 1.955],
                                      [4.483, -1.722],
                                      [-1.774, -7.987],
                                      [-6.177, -6.174],
                                      [-7.986, -1.767],
                                      [-1.729, 4.5],
                                      [1.959, 3.292],
                                      [1.963, 3.289],
                                      [6.32, 7.648],
                                      [7.238, 7.909],
                                      [7.912, 7.234]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "mm",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Filter - Merge",
                                nm: "Combinar trazados 1",
                                mm: 1
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [1, 1, 1], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [16.649, 91.508], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 6
                      },
                      {
                        ty: 4,
                        nm: "cuadrado/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: true,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: { a: 0, k: [112, 125, 0], ix: 2 },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        masksProperties: [
                          {
                            nm: "M\u00c3\u00a1scara 1",
                            inv: false,
                            mode: "a",
                            x: { a: 0, k: 0, ix: 4 },
                            o: { a: 0, k: 100, ix: 3 },
                            pt: {
                              a: 0,
                              k: {
                                c: true,
                                i: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                o: [
                                  [0, 0],
                                  [0, 0],
                                  [0, 0],
                                  [0, 0]
                                ],
                                v: [
                                  [0.211, 75.274],
                                  [0.211, 107.673],
                                  [32.612, 107.673],
                                  [32.612, 75.274]
                                ]
                              },
                              ix: 1
                            }
                          }
                        ],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 3.887],
                                      [0, 0],
                                      [-3.889, 0],
                                      [0, 0],
                                      [0, -3.888],
                                      [0, 0],
                                      [3.888, 0]
                                    ],
                                    o: [
                                      [-3.889, 0],
                                      [0, 0],
                                      [0, -3.888],
                                      [0, 0],
                                      [3.888, 0],
                                      [0, 0],
                                      [0, 3.887],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-9.13, 16.2],
                                      [-16.201, 9.132],
                                      [-16.201, -9.132],
                                      [-9.13, -16.199],
                                      [9.131, -16.199],
                                      [16.201, -9.132],
                                      [16.201, 9.132],
                                      [9.131, 16.2]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.4549, 0.2667, 0.7373], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [16.411, 91.473], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 7
                      },
                      {
                        ty: 4,
                        nm: "cruz/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [100.516, 100.516, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 124.781, 0],
                                t: 0,
                                ti: [0, -0.703, 0],
                                to: [0, -0.63, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 121, 0],
                                t: 15,
                                ti: [0, 0, 0],
                                to: [0, 0.703, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 129, 0],
                                t: 32,
                                ti: [0, 0.167, 0],
                                to: [0, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 121, 0],
                                t: 49,
                                ti: [0, 0, 0],
                                to: [0, -0.167, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 128, 0],
                                t: 67,
                                ti: [0, 1.167, 0],
                                to: [0, 0, 0]
                              },
                              { s: [112.5, 121, 0], t: 85 }
                            ],
                            ix: 2
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [1.302, 0],
                                      [0, 0],
                                      [0, -1.302],
                                      [0, 0],
                                      [0, 0],
                                      [0, -1.304],
                                      [0, 0],
                                      [-1.303, 0],
                                      [0, 0],
                                      [0, 0],
                                      [-1.303, 0],
                                      [0, 0],
                                      [0, 1.302],
                                      [0, 0],
                                      [0, 0],
                                      [0, 1.303],
                                      [0, 0],
                                      [1.303, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, -1.302],
                                      [0, 0],
                                      [-1.303, 0],
                                      [0, 0],
                                      [0, 0],
                                      [-1.303, 0],
                                      [0, 0],
                                      [0, 1.303],
                                      [0, 0],
                                      [0, 0],
                                      [0, 1.302],
                                      [0, 0],
                                      [1.302, 0],
                                      [0, 0],
                                      [0, 0],
                                      [1.303, 0],
                                      [0, 0],
                                      [0, -1.304],
                                      [0, 0]
                                    ],
                                    v: [
                                      [5.638, -5.638],
                                      [5.638, -18.152],
                                      [3.27, -20.52],
                                      [-3.268, -20.52],
                                      [-5.637, -18.152],
                                      [-5.637, -5.638],
                                      [-18.151, -5.638],
                                      [-20.52, -3.269],
                                      [-20.52, 3.268],
                                      [-18.151, 5.637],
                                      [-5.637, 5.637],
                                      [-5.637, 18.152],
                                      [-3.268, 20.52],
                                      [3.27, 20.52],
                                      [5.638, 18.152],
                                      [5.638, 5.637],
                                      [18.152, 5.637],
                                      [20.52, 3.268],
                                      [20.52, -3.269],
                                      [18.152, -5.638]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.4549, 0.2667, 0.7373], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [37.92, 34.92], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 8
                      },
                      {
                        ty: 4,
                        nm: "circulo/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [100.516, 100.516, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 124.5, 0],
                                t: 0,
                                ti: [0, -0.75, 0],
                                to: [0, -0.583, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 121, 0],
                                t: 15,
                                ti: [0, 0, 0],
                                to: [0, 0.75, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 129, 0],
                                t: 32,
                                ti: [0, 0.167, 0],
                                to: [0, 0, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 121, 0],
                                t: 49,
                                ti: [0, 0, 0],
                                to: [0, -0.167, 0]
                              },
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [112.5, 128, 0],
                                t: 67,
                                ti: [0, 1.167, 0],
                                to: [0, 0, 0]
                              },
                              { s: [112.5, 121, 0], t: 85 }
                            ],
                            ix: 2
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, -19.286],
                                      [19.286, 0],
                                      [0, 19.286],
                                      [-19.286, 0]
                                    ],
                                    o: [
                                      [0, 19.286],
                                      [-19.286, 0],
                                      [0, -19.286],
                                      [19.286, 0]
                                    ],
                                    v: [
                                      [34.92, 0],
                                      [0, 34.92],
                                      [-34.92, 0],
                                      [0, -34.92]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.898, 0.9137, 0.9412], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [37.92, 34.92], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 9
                      },
                      {
                        ty: 4,
                        nm: "pastilla g/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [123.5, 68, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 0,
                            k: [86.5, 125, 0],
                            ix: 2,
                            x: "var $bm_rt;\nvar maxDev, spd, decay, t, x, y;\nmaxDev = 4;\nspd = 8;\ndecay = 1;\nt = $bm_sub(time, inPoint);\nx = $bm_sum($bm_transform.scale[0], $bm_div($bm_mul(maxDev, Math.sin($bm_mul(spd, t))), Math.exp($bm_mul(decay, t))));\ny = $bm_div($bm_mul($bm_transform.scale[0], $bm_transform.scale[1]), x);\n$bm_rt = [\n    x,\n    y\n];"
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [-2.445, -1.245],
                                      [0, 0],
                                      [6.372, 3.188],
                                      [1.037, -0.118],
                                      [0, -0.661]
                                    ],
                                    o: [
                                      [0.638, 0],
                                      [6.709, 3.418],
                                      [-3.97, -2.646],
                                      [-1.037, -0.519],
                                      [0, 0],
                                      [0, 0.662]
                                    ],
                                    v: [
                                      [-10.917, -5.565],
                                      [-4.963, -3.581],
                                      [12.24, 7.005],
                                      [-6.947, -5.565],
                                      [-10.917, -6.888],
                                      [-12.24, -6.227]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [1, 1, 1], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [197.786, 112.113], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 2",
                            ix: 2,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: false,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [-2.238, 3.714],
                                      [3.823, 2.305],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [3.823, 2.304],
                                      [2.239, -3.715],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-11.688, 2.637],
                                      [-1.527, 8.76],
                                      [9.449, 6.208],
                                      [6.58, -4.691],
                                      [-4, -11.064]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.898, 0.9137, 0.9412], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [204.942, 123.32], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 3",
                            ix: 3,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [-2.238, 3.714],
                                      [3.825, 2.305],
                                      [0, 0],
                                      [0.278, 0.168],
                                      [2.247, -3.729],
                                      [-3.441, -2.424]
                                    ],
                                    o: [
                                      [0, 0],
                                      [3.823, 2.305],
                                      [2.24, -3.715],
                                      [0, 0],
                                      [-0.351, -0.208],
                                      [-3.838, -2.312],
                                      [-2.144, 3.559],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-14.452, 0.56],
                                      [6.263, 13.042],
                                      [17.238, 10.49],
                                      [14.368, -0.409],
                                      [-5.446, -12.387],
                                      [-6.523, -13.035],
                                      [-17.333, -10.378],
                                      [-14.953, 0.223]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.3961, 0.2, 0.6941], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [197.014, 118.957], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 10
                      },
                      {
                        ty: 4,
                        nm: "pastilla p1/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [119.5, 63, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 0,
                            k: [89, 127.5, 0],
                            ix: 2,
                            x: "var $bm_rt;\nvar maxDev, spd, decay, t, x, y;\nmaxDev = 4;\nspd = 5;\ndecay = 1;\nt = $bm_sub(time, inPoint);\nx = $bm_sum($bm_transform.scale[0], $bm_div($bm_mul(maxDev, Math.sin($bm_mul(spd, t))), Math.exp($bm_mul(decay, t))));\ny = $bm_div($bm_mul($bm_transform.scale[0], $bm_transform.scale[1]), x);\n$bm_rt = [\n    x,\n    y\n];"
                          },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [1.589, -1.255],
                                      [0, 0],
                                      [-4.152, 3.227],
                                      [-0.767, 0.064],
                                      [-0.095, -0.478]
                                    ],
                                    o: [
                                      [-0.461, 0.093],
                                      [-4.362, 3.443],
                                      [2.489, -2.488],
                                      [0.674, -0.525],
                                      [0, 0],
                                      [0.096, 0.479]
                                    ],
                                    v: [
                                      [6.991, -5.648],
                                      [2.969, -3.35],
                                      [-7.948, 6.796],
                                      [4.119, -5.074],
                                      [6.799, -6.604],
                                      [7.852, -6.317]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [1, 1, 1], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [183.949, 145.642], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 2",
                            ix: 2,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: false,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [2.156, 2.364],
                                      [-2.434, 2.22],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [-2.433, 2.221],
                                      [-2.157, -2.364],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [8.468, 0.343],
                                      [2, 6.241],
                                      [-6.311, 5.981],
                                      [-5.809, -2.319],
                                      [0.924, -8.462]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.898, 0.9137, 0.9412], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [180.657, 154.62], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 3",
                            ix: 3,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [2.156, 2.364],
                                      [-2.434, 2.221],
                                      [0, 0],
                                      [-0.176, 0.161],
                                      [-2.164, -2.374],
                                      [2.14, -2.252]
                                    ],
                                    o: [
                                      [0, 0],
                                      [-2.433, 2.22],
                                      [-2.156, -2.365],
                                      [0, 0],
                                      [0.225, -0.202],
                                      [2.443, -2.229],
                                      [2.066, 2.265],
                                      [0, 0]
                                    ],
                                    v: [
                                      [10.542, -1.664],
                                      [-2.644, 10.364],
                                      [-10.955, 10.103],
                                      [-10.453, 1.802],
                                      [2.153, -9.731],
                                      [2.839, -10.354],
                                      [11.045, -9.995],
                                      [10.855, -1.979]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.5647, 0.3804, 0.8471], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [185.39, 150.421], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 11
                      },
                      {
                        ty: 4,
                        nm: "pastilla p2/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [139.5, 58, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: {
                            a: 1,
                            k: [
                              {
                                o: { x: 0.167, y: 0.167 },
                                i: { x: 0.833, y: 0.833 },
                                s: [-15.5, 255.158, 0],
                                t: 0,
                                ti: [-0.583, -1.833, 0],
                                to: [0.583, 1.833, 0]
                              },
                              { s: [-12, 266.158, 0], t: 44 }
                            ],
                            ix: 2,
                            x: "var $bm_rt;\nvar maxDev, spd, decay, t, x, y;\nmaxDev = 4;\nspd = 2;\ndecay = 1;\nt = $bm_sub(time, inPoint);\nx = $bm_sum($bm_transform.scale[0], $bm_div($bm_mul(maxDev, Math.sin($bm_mul(spd, t))), Math.exp($bm_mul(decay, t))));\ny = $bm_div($bm_mul($bm_transform.scale[0], $bm_transform.scale[1]), x);\n$bm_rt = [\n    x,\n    y\n];"
                          },
                          r: { a: 0, k: -10, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [1.589, -1.255],
                                      [0, 0],
                                      [-4.151, 3.227],
                                      [-0.767, 0.065],
                                      [-0.095, -0.479]
                                    ],
                                    o: [
                                      [-0.461, 0.092],
                                      [-4.362, 3.443],
                                      [2.49, -2.488],
                                      [0.675, -0.526],
                                      [0, 0],
                                      [0.096, 0.479]
                                    ],
                                    v: [
                                      [6.991, -5.647],
                                      [2.969, -3.35],
                                      [-7.949, 6.796],
                                      [4.118, -5.073],
                                      [6.799, -6.605],
                                      [7.853, -6.317]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [1, 1, 1], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [208.429, 80.842], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 2",
                            ix: 2,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: false,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [2.156, 2.364],
                                      [-2.434, 2.22],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [-2.433, 2.221],
                                      [-2.158, -2.364],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [8.469, 0.342],
                                      [2.001, 6.242],
                                      [-6.311, 5.98],
                                      [-5.809, -2.32],
                                      [0.924, -8.463]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.898, 0.9137, 0.9412], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [205.137, 89.82], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 3",
                            ix: 3,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [2.157, 2.364],
                                      [-2.434, 2.221],
                                      [0, 0],
                                      [-0.177, 0.161],
                                      [-2.165, -2.374],
                                      [2.139, -2.252]
                                    ],
                                    o: [
                                      [0, 0],
                                      [-2.433, 2.219],
                                      [-2.156, -2.364],
                                      [0, 0],
                                      [0.225, -0.202],
                                      [2.443, -2.228],
                                      [2.066, 2.265],
                                      [0, 0]
                                    ],
                                    v: [
                                      [10.542, -1.664],
                                      [-2.644, 10.364],
                                      [-10.956, 10.103],
                                      [-10.454, 1.801],
                                      [2.152, -9.731],
                                      [2.839, -10.355],
                                      [11.046, -9.995],
                                      [10.855, -1.979]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.5647, 0.3804, 0.8471], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [209.87, 85.62], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 12
                      },
                      {
                        ty: 4,
                        nm: "Capa 1/@1xilustraci\u00c3\u00b3n 1 contornos",
                        sr: 1,
                        st: 0,
                        op: 750,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [111.5, 96, 0], ix: 1 },
                          s: { a: 0, k: [89, 89, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: { a: 0, k: [100, 125, 0], ix: 2 },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        shapes: [
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 1",
                            ix: 1,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [-0.921, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, -0.919],
                                      [0, 0]
                                    ],
                                    v: [
                                      [7.173, -7.721],
                                      [-7.173, 7.722],
                                      [-7.173, -6.056],
                                      [-5.505, -7.721]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.5647, 0.3804, 0.8471], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [145.939, 162.838], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 2",
                            ix: 2,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-34.935, 1.417],
                                      [34.934, 1.417],
                                      [34.934, -1.417],
                                      [-34.935, -1.417]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [103.758, 100.825], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 3",
                            ix: 3,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-34.935, 1.417],
                                      [34.934, 1.417],
                                      [34.934, -1.418],
                                      [-34.935, -1.418]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [103.758, 88.643], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 4",
                            ix: 4,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-34.935, 1.418],
                                      [34.934, 1.418],
                                      [34.934, -1.418],
                                      [-34.935, -1.418]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [103.758, 75.612], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 5",
                            ix: 5,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [0, 0],
                                      [0, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [-34.935, 1.419],
                                      [34.934, 1.419],
                                      [34.934, -1.419],
                                      [-34.935, -1.419]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.7922, 0.698, 0.9294], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [103.758, 63.434], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 6",
                            ix: 6,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [1.133, 0],
                                      [0, 0],
                                      [0, -1.133],
                                      [-1.133, 0],
                                      [0, 0],
                                      [0, -0.964],
                                      [-2.684, 0],
                                      [0, 0],
                                      [0, 2.682],
                                      [0.486, 0.753],
                                      [0, 0],
                                      [0, 1.133]
                                    ],
                                    o: [
                                      [0, 0],
                                      [-1.133, 0],
                                      [0, 1.133],
                                      [0, 0],
                                      [-0.486, 0.753],
                                      [0, 2.682],
                                      [0, 0],
                                      [2.678, 0],
                                      [0, -0.964],
                                      [0, 0],
                                      [1.133, 0],
                                      [0, -1.133]
                                    ],
                                    v: [
                                      [23.166, -5.791],
                                      [-23.165, -5.791],
                                      [-25.217, -3.736],
                                      [-23.165, -1.68],
                                      [-19.587, -1.68],
                                      [-20.365, 0.932],
                                      [-15.505, 5.791],
                                      [15.508, 5.791],
                                      [20.368, 0.932],
                                      [19.586, -1.68],
                                      [23.166, -1.68],
                                      [25.217, -3.736]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.898, 0.9137, 0.9412], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [102.216, 23.338], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 7",
                            ix: 7,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [0, 0],
                                      [-0.143, 0],
                                      [0, 0],
                                      [0, 0.923],
                                      [0, 0],
                                      [-0.921, 0],
                                      [0, 0],
                                      [0, -0.92]
                                    ],
                                    o: [
                                      [-0.035, 0.036],
                                      [0, 0],
                                      [-0.921, 0],
                                      [0, 0],
                                      [0, -0.92],
                                      [0, 0],
                                      [0.917, 0],
                                      [0, 0]
                                    ],
                                    v: [
                                      [49.317, 48.095],
                                      [35.064, 63.445],
                                      [-47.656, 63.445],
                                      [-49.317, 61.785],
                                      [-49.317, -61.785],
                                      [-47.656, -63.445],
                                      [47.66, -63.445],
                                      [49.317, -61.785]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [1, 1, 1], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [103.758, 107.07], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          },
                          {
                            ty: "gr",
                            bm: 0,
                            hd: false,
                            mn: "ADBE Vector Group",
                            nm: "Grupo 8",
                            ix: 8,
                            cix: 2,
                            np: 2,
                            it: [
                              {
                                ty: "sh",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Shape - Group",
                                nm: "Trazado 1",
                                ix: 1,
                                d: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    c: true,
                                    i: [
                                      [-3.866, 0],
                                      [0, 0],
                                      [0, -3.866],
                                      [0, 0],
                                      [3.866, 0],
                                      [0, 0],
                                      [0, 3.866],
                                      [0, 0]
                                    ],
                                    o: [
                                      [0, 0],
                                      [3.866, 0],
                                      [0, 0],
                                      [0, 3.866],
                                      [0, 0],
                                      [-3.866, 0],
                                      [0, 0],
                                      [0, -3.866]
                                    ],
                                    v: [
                                      [-53.5, -85],
                                      [53.5, -85],
                                      [60.5, -78],
                                      [60.5, 78],
                                      [53.5, 85],
                                      [-53.5, 85],
                                      [-60.5, 78],
                                      [-60.5, -78]
                                    ]
                                  },
                                  ix: 2
                                }
                              },
                              {
                                ty: "fl",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Graphic - Fill",
                                nm: "Relleno 1",
                                c: { a: 0, k: [0.4549, 0.2667, 0.7373], ix: 4 },
                                r: 1,
                                o: { a: 0, k: 100, ix: 5 }
                              },
                              {
                                ty: "tr",
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                sk: { a: 0, k: 0, ix: 4 },
                                p: { a: 0, k: [102.5, 106.547], ix: 2 },
                                r: { a: 0, k: 0, ix: 6 },
                                sa: { a: 0, k: 0, ix: 5 },
                                o: { a: 0, k: 100, ix: 7 }
                              }
                            ]
                          }
                        ],
                        ind: 13
                      }
                    ],
                    v: "5.5.8",
                    fr: 25,
                    op: 91,
                    ip: 0,
                    assets: []
                  }}
                  className={classNames("__wab_instance", sty.lottie)}
                />
              </Stack__>
            </Stack__>
          ) : null}
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest, {
              [sty.apiRequestinformation]: hasVariant(
                $state,
                "information",
                "information"
              ),
              [sty.apiRequestspecialized]: hasVariant(
                $state,
                "specialized",
                "specialized"
              )
            })}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );

              (async data => {
                const $steps = {};

                $steps["invokeGlobalAction"] =
                  $state.apiRequest.data.result_type == "Specialized"
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://n8n.staas.ir/webhook/makeResult",
                            undefined,
                            (() => {
                              try {
                                return {
                                  session_id:
                                    $ctx.query.session_id ||
                                    new URLSearchParams(
                                      window.location.search
                                    ).get("session_id")
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updateSpecialized2"] = $steps.invokeGlobalAction?.data
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["specialized2"]
                        },
                        operation: 0,
                        value: $steps.invokeGlobalAction?.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSpecialized2"] != null &&
                  typeof $steps["updateSpecialized2"] === "object" &&
                  typeof $steps["updateSpecialized2"].then === "function"
                ) {
                  $steps["updateSpecialized2"] = await $steps[
                    "updateSpecialized2"
                  ];
                }
              }).apply(null, eventArgs);
            }}
            params={(() => {
              try {
                return {
                  session_id:
                    $ctx.query.session_id ||
                    new URLSearchParams(window.location.search).get(
                      "session_id"
                    ),
                  user_id:
                    $ctx.query.user_id ||
                    new URLSearchParams(window.location.search).get("user_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/selfTestLogs"}
          />

          {(
            hasVariant($state, "specialized", "specialized")
              ? true
              : (() => {
                  try {
                    return (
                      $state.apiRequest.data?.our_message &&
                      $state.apiRequest.data?.our_message?.trim() !== ""
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rQkBj, {
                [sty.freeBoxspecialized__rQkBjFomOb]: hasVariant(
                  $state,
                  "specialized",
                  "specialized"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0YW7K,
                  {
                    [sty.textspecialized___0YW7KfomOb]: hasVariant(
                      $state,
                      "specialized",
                      "specialized"
                    )
                  }
                )}
                data-i18n={"result.title5"}
              >
                {
                  "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0641\u0635\u06cc\u0644\u06cc \u0628\u0647 \u06a9\u0645\u06a9 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vEyWx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u2Gx8
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return $state.apiRequest.data.message;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "...";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </div>
              </div>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return (
                $state.apiRequest.data && $state.apiRequest.data.our_message
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__h7NwZ)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zspZ6
                )}
                data-i18n={"result.title6"}
              >
                {
                  "\u0622\u06cc\u0627 \u0627\u0632 \u0646\u062a\u06cc\u062c\u0647 \u062a\u0633\u062a \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc \u061f"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cwThE)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [5, 4, 3, 2, 1];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stars
                      activ={(() => {
                        try {
                          return currentItem <= $state.rate;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      className={classNames("__wab_instance", sty.stars__vI9Lj)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateRate"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["rate"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRate"] != null &&
                          typeof $steps["updateRate"] === "object" &&
                          typeof $steps["updateRate"].then === "function"
                        ) {
                          $steps["updateRate"] = await $steps["updateRate"];
                        }

                        $steps["updateDialog2Open"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialog2Open"] != null &&
                          typeof $steps["updateDialog2Open"] === "object" &&
                          typeof $steps["updateDialog2Open"].then === "function"
                        ) {
                          $steps["updateDialog2Open"] = await $steps[
                            "updateDialog2Open"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sgOCx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gfMTq
                          )}
                          data-i18n={(() => {
                            try {
                              return currentItem == 5
                                ? "star.yes"
                                : currentItem == 1
                                ? "star.no"
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  if (currentItem == 5) return "خیلی زیاد";
                                  else if (currentItem == 1) return "نه اصلا";
                                  else return "";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    </Stars>
                  );
                })}
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__xlHjm)}>
                {false
                  ? (() => {
                      const child$Props = {
                        autoSize: true,
                        className: classNames("__wab_instance", sty.textArea),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u062e\u0648\u0634\u062d\u0627\u0644 \u0645\u06cc\u200c\u0634\u0645 \u0646\u0638\u0631\u062a\u0648 \u0628\u062f\u0648\u0646\u0645 ...",
                        value: generateStateValueProp($state, [
                          "textArea",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea"}
                          data-plasmic-override={overrides.textArea}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
              </div>
              <Paziresh24Button
                children2={"\u062b\u0628\u062a"}
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__kDEph
                )}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__guVn)}
                    role={"img"}
                  />
                }
                isDisabled={(() => {
                  try {
                    return $state.loadbtn;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                loading={(() => {
                  try {
                    return $state.loadbtn;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoadbtn"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadbtn"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadbtn"] != null &&
                    typeof $steps["updateLoadbtn"] === "object" &&
                    typeof $steps["updateLoadbtn"].then === "function"
                  ) {
                    $steps["updateLoadbtn"] = await $steps["updateLoadbtn"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PUT",
                            "https://n8n.staas.ir/webhook/selfTest_comments",
                            undefined,
                            (() => {
                              try {
                                return {
                                  user_id: $ctx.query.user_id,
                                  session_id: $ctx.query.session_id,
                                  comment: $state.textArea.value || "",
                                  rate: $state.rate
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] = $steps.invokeGlobalAction
                    ?.data?.success
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "success",
                            "\u062e\u06cc\u0644\u06cc \u062e\u0648\u0634\u062d\u0627\u0644 \u0634\u062f\u06cc\u0645 \u06a9\u0647 \u0646\u0638\u0631\u062a\u0648 \u0628\u0627\u0647\u0627\u0645\u0648\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0634\u062a\u06cc!"
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["updateLoading2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadbtn"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoading2"] != null &&
                    typeof $steps["updateLoading2"] === "object" &&
                    typeof $steps["updateLoading2"].then === "function"
                  ) {
                    $steps["updateLoading2"] = await $steps["updateLoading2"];
                  }
                }}
                outline={true}
                size={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "compact"
                    : "compact"
                }
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg___1LpBj)}
                    role={"img"}
                  />
                }
              />

              <Paziresh24Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n4XQf
                    )}
                    data-i18n={"result.comment.btn"}
                  >
                    {"\u062b\u0628\u062a \u0646\u0638\u0631"}
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__wwEhB
                )}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__hs7Et)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialog2Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog2Open"] != null &&
                    typeof $steps["updateDialog2Open"] === "object" &&
                    typeof $steps["updateDialog2Open"].then === "function"
                  ) {
                    $steps["updateDialog2Open"] = await $steps[
                      "updateDialog2Open"
                    ];
                  }
                }}
                outline={true}
                size={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "compact"
                    : undefined
                }
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__lcy4S)}
                    role={"img"}
                  />
                }
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__xqVc8)}>
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__vXrcx)}
                role={"img"}
              />
            </div>
          ) : null}
          <Paziresh24Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            body={
              <ApiRequest
                data-plasmic-name={"apiRequest2"}
                data-plasmic-override={overrides.apiRequest2}
                className={classNames("__wab_instance", sty.apiRequest2)}
                errorDisplay={null}
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4MJGg)}
                  >
                    <Icon113Icon
                      className={classNames(projectcss.all, sty.svg__boGu)}
                      role={"img"}
                    />
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest2",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest2",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest2",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                url={(() => {
                  try {
                    return `https://apigw.paziresh24.com/seapi/v1/search/ir/${
                      !!$state.action ? $state.action : "general-practitioner"
                    }?turn_type=consult`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div className={classNames(projectcss.all, sty.freeBox__m21QZ)}>
                  <Alert
                    className={classNames("__wab_instance", sty.alert__ojW2B)}
                    success={true}
                    text={
                      "\u0628\u062f\u0648\u0646 \u062e\u0631\u0648\u062c \u0627\u0632 \u0645\u0646\u0632\u0644\u060c \u0622\u0646\u0644\u0627\u06cc\u0646 \u0648\u06cc\u0632\u06cc\u062a \u0634\u0648\u06cc\u062f."
                    }
                  />

                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return (() => {
                          const random = $$.lodash.random(0, 2);
                          return [
                            $state.apiRequest2.data.search.result.slice(0, 3)?.[
                              random
                            ]
                          ];
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cIuuh
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z6AUi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___55QU
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xvU
                              )}
                            >
                              <Paziresh24Avatar
                                alt={(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                badge={"check"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.paziresh24Avatar__ppn9L
                                )}
                                ring={"green"}
                                src={(() => {
                                  try {
                                    return `https://cdn.paziresh24.com${currentItem.image}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ncdy0
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___8Mbe
                                )}
                              >
                                <PlasmicLink__
                                  data-plasmic-name={"link"}
                                  data-plasmic-override={overrides.link}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    sty.link
                                  )}
                                  component={Link}
                                  platform={"nextjs"}
                                >
                                  <h2
                                    data-plasmic-name={"h2"}
                                    data-plasmic-override={overrides.h2}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.title;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h2>
                                </PlasmicLink__>
                                <Paziresh24LineClamp
                                  data-plasmic-name={"paziresh24LineClamp"}
                                  data-plasmic-override={
                                    overrides.paziresh24LineClamp
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.paziresh24LineClamp
                                  )}
                                >
                                  <span
                                    data-plasmic-name={"cardSubtitle"}
                                    data-plasmic-override={
                                      overrides.cardSubtitle
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.span,
                                      projectcss.__wab_text,
                                      sty.cardSubtitle
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            if (
                                              currentItem?.expertises?.[1]?.degree?.name?.includes(
                                                "ساب"
                                              )
                                            ) {
                                              return (
                                                currentItem.expertises[0]
                                                  ?.degree?.name +
                                                "-" +
                                                currentItem.expertises[0]
                                                  ?.expertise?.name
                                              );
                                            } else if (
                                              currentItem?.expertises?.[1]
                                            ) {
                                              return (
                                                currentItem.expertises[1].degree
                                                  .name +
                                                " " +
                                                currentItem.expertises[1]
                                                  ?.expertise?.name
                                              );
                                            } else if (
                                              currentItem?.expertises?.[0]
                                            ) {
                                              return (
                                                currentItem.expertises[0].degree
                                                  .name +
                                                " " +
                                                currentItem.expertises[0]
                                                  ?.expertise?.name
                                              );
                                            }
                                            return "کارشناسی ";
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0645\u0634\u0627\u0648\u0631";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </span>
                                </Paziresh24LineClamp>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vhDZa
                                  )}
                                >
                                  <Icon116Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___4UogS
                                    )}
                                    role={"img"}
                                  />

                                  <span
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.span,
                                      projectcss.__wab_text,
                                      sty.span__w7U14
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.satisfaction %
                                            20 ===
                                            0
                                            ? currentItem.satisfaction / 20
                                            : (currentItem.satisfaction / 20)
                                                .toFixed(1)
                                                .replace(".0", "");
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return " fggfgf";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </span>
                                  <span
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.span,
                                      projectcss.__wab_text,
                                      sty.span__lTyi
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return `(${currentItem.rates_count} نظر)`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "(376 \u0646\u0638\u0631)";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </span>
                                </Stack__>
                              </Stack__>
                            </div>
                          </div>
                          <Alert
                            className={classNames(
                              "__wab_instance",
                              sty.alert__bdt9J
                            )}
                            error={true}
                            hasIcon={true}
                            text={
                              "\u062a\u0636\u0645\u06cc\u0646 \u0628\u0627\u0632\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc"
                            }
                          />
                        </div>
                        <HamdastUtilsOpenLink
                          className={classNames(
                            "__wab_instance",
                            sty.hamdastUtilsOpenLink__nMdwz
                          )}
                          destination={(() => {
                            try {
                              return `https://www.paziresh24.com/booking/${currentItem.slug}/?centerId=5532&skipTimeSelectStep=true`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          openInNewTab={true}
                        >
                          <Paziresh24Button
                            children2={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return `گفتگو با ${currentItem.display_name}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button__hZeLs
                            )}
                            endIcon={
                              <ChevronLeftIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__s56Rl
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <ChevronRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__v05S
                                )}
                                role={"img"}
                              />
                            }
                          />
                        </HamdastUtilsOpenLink>
                        <HamdastUtilsOpenLink
                          className={classNames(
                            "__wab_instance",
                            sty.hamdastUtilsOpenLink__bfpXh
                          )}
                          destination={
                            "https://www.paziresh24.com/consult?from_recommend_section=1"
                          }
                          openInNewTab={true}
                        >
                          <Paziresh24Button
                            children2={
                              "\u0645\u0634\u0627\u0647\u062f\u0647 \u0633\u0627\u06cc\u0631 \u067e\u0632\u0634\u06a9\u0627\u0646 \u0622\u0646\u0644\u0627\u06cc\u0646"
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button___3Plz2
                            )}
                            color={"text"}
                            endIcon={
                              <ChevronLeftIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__n6DEw
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <ChevronRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xDfIk
                                )}
                                role={"img"}
                              />
                            }
                          />
                        </HamdastUtilsOpenLink>
                      </Stack__>
                    );
                  })}
                </div>
              </ApiRequest>
            }
            className={classNames("__wab_instance", sty.dialog)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog", "open"])}
            title={null}
            trigger={null}
          />

          {(() => {
            try {
              return (
                $state.level == 3 &&
                !($state.apiRequest.data && $state.apiRequest.data.our_message)
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iL8Gu, {
                [sty.freeBoxspecialized__iL8GuFomOb]: hasVariant(
                  $state,
                  "specialized",
                  "specialized"
                )
              })}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__k4ZuN, {
                  [sty.freeBoxspecialized__k4ZuNfomOb]: hasVariant(
                    $state,
                    "specialized",
                    "specialized"
                  )
                })}
              >
                <Icon118Icon
                  className={classNames(projectcss.all, sty.svg__e4MpW)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c0Uj
                  )}
                >
                  {
                    "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </div>
              <Paziresh24Button
                children2={
                  "\u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0645\u062c\u062f\u062f"
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__q7Gs
                )}
                color={"softGreen"}
                endIcon={
                  <Icon117Icon
                    className={classNames(projectcss.all, sty.svg__q7RiQ)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.location.reload();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                shape={"rounded"}
                showEndIcon={true}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__nziFq)}
                    role={"img"}
                  />
                }
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $state.level == 3 && $state.apiRequest?.data?.our_message;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section___72Rh)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cgHuj, {
                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__cgHujYcZU]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants",
                      "unnamedVariant"
                    )
                })}
              >
                {(
                  hasVariant($state, "specialized", "specialized")
                    ? (() => {
                        try {
                          return $state.specialized2.actionBtn != "eNoskhe";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                )
                  ? (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [{ action: $state.specialized2.actionBtn }];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Paziresh24Button
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__sizyW,
                                {
                                  [sty.freeBoxspecialized__sizyWfomOb]:
                                    hasVariant(
                                      $state,
                                      "specialized",
                                      "specialized"
                                    )
                                }
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fcfJr,
                                  {
                                    [sty.textspecialized__fcfJrFomOb]:
                                      hasVariant(
                                        $state,
                                        "specialized",
                                        "specialized"
                                      )
                                  }
                                )}
                              >
                                {hasVariant(
                                  $state,
                                  "specialized",
                                  "specialized"
                                ) ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.specialized2
                                          .actionBtnText;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0622\u0646\u0644\u0627\u06cc\u0646";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : (
                                  "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0622\u0646\u0644\u0627\u06cc\u0646"
                                )}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xiqgZ,
                                  {
                                    [sty.textspecialized__xiqgZfomOb]:
                                      hasVariant(
                                        $state,
                                        "specialized",
                                        "specialized"
                                      )
                                  }
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "  (جهت موضوع " +
                                        currentItem.option_metric_fa +
                                        ")  "
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0622\u0646\u0644\u0627\u06cc\u0646";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24Button__bQwg,
                            {
                              [sty.paziresh24Buttonspecialized__bQwgfomOb]:
                                hasVariant($state, "specialized", "specialized")
                            }
                          )}
                          endIcon={
                            <Icon125Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ycWz4
                              )}
                              role={"img"}
                            />
                          }
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["action"]
                                    },
                                    operation: 0,
                                    value: currentItem.action
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateAction"] != null &&
                              typeof $steps["updateAction"] === "object" &&
                              typeof $steps["updateAction"].then === "function"
                            ) {
                              $steps["updateAction"] = await $steps[
                                "updateAction"
                              ];
                            }

                            $steps["updateDialogOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dialog", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialogOpen"] != null &&
                              typeof $steps["updateDialogOpen"] === "object" &&
                              typeof $steps["updateDialogOpen"].then ===
                                "function"
                            ) {
                              $steps["updateDialogOpen"] = await $steps[
                                "updateDialogOpen"
                              ];
                            }

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://api.liom.app/service/log",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            userId: $ctx.query.user_id,
                                            pageName: "result",
                                            action: "Doctor-visit",
                                            extraData: {
                                              sessionId: $ctx.query.session_id,
                                              action: $state.action
                                            }
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      {
                                        headers: {
                                          "Content-Type": "application/json",
                                          Authorization:
                                            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                        }
                                      }
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          showStartIcon={true}
                          startIcon={
                            <Icon125Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__oiRsc
                              )}
                              role={"img"}
                            />
                          }
                        />
                      );
                    })
                  : null}
                {(() => {
                  try {
                    return !$state.apiRequest.data.prescription;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
                  ? (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Paziresh24Button
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__uIu4M
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dySaV
                                )}
                              >
                                {
                                  "\u0622\u06cc\u0627 \u0627\u0632 \u0646\u062a\u06cc\u062c\u0647 \u062a\u0633\u062a \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc \u061f"
                                }
                              </div>
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24Button___63KbV,
                            {
                              [sty.paziresh24Buttonspecialized___63KbVfomOb]:
                                hasVariant($state, "specialized", "specialized")
                            }
                          )}
                          endIcon={
                            <Icon125Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qPkO
                              )}
                              role={"img"}
                            />
                          }
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateDialog2Open"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["dialog2", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateDialog2Open"] != null &&
                              typeof $steps["updateDialog2Open"] === "object" &&
                              typeof $steps["updateDialog2Open"].then ===
                                "function"
                            ) {
                              $steps["updateDialog2Open"] = await $steps[
                                "updateDialog2Open"
                              ];
                            }
                          }}
                          showStartIcon={true}
                          startIcon={
                            <Icon81Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ichS
                              )}
                              role={"img"}
                            />
                          }
                        />
                      );
                    })
                  : null}
                {(
                  hasVariant($state, "specialized", "specialized")
                    ? (() => {
                        try {
                          return $state.specialized2.actionBtn == "eNoskhe";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : (() => {
                        try {
                          return $state.apiRequest.data.prescription;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                )
                  ? (_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return [0];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <Paziresh24Button
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wNquR
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ep2WH,
                                  {
                                    [sty.textspecialized__ep2WHfomOb]:
                                      hasVariant(
                                        $state,
                                        "specialized",
                                        "specialized"
                                      )
                                  }
                                )}
                                data-i18n={"prescription.btn"}
                              >
                                {hasVariant(
                                  $state,
                                  "specialized",
                                  "specialized"
                                ) ? (
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.specialized2
                                          .actionBtnText;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                ) : (
                                  "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9"
                                )}
                              </div>
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.paziresh24Button__jgQvr,
                            {
                              [sty.paziresh24Buttonspecialized__jgQvrFomOb]:
                                hasVariant($state, "specialized", "specialized")
                            }
                          )}
                          endIcon={
                            <Icon125Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hmVgk
                              )}
                              role={"img"}
                            />
                          }
                          key={currentIndex}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateProfileOpen"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["profile", "open"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateProfileOpen"] != null &&
                              typeof $steps["updateProfileOpen"] === "object" &&
                              typeof $steps["updateProfileOpen"].then ===
                                "function"
                            ) {
                              $steps["updateProfileOpen"] = await $steps[
                                "updateProfileOpen"
                              ];
                            }
                          }}
                          showStartIcon={true}
                          startIcon={
                            <Icon142Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__stFpr
                              )}
                              role={"img"}
                            />
                          }
                        />
                      );
                    })
                  : null}
                <Paziresh24Button
                  children2={
                    <Icon124Icon
                      className={classNames(projectcss.all, sty.svg__auBOx)}
                      role={"img"}
                    />
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button__wlNh
                  )}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__aC61O)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.copyToClipboard(
                                window.location.href + "&Share=true"
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0644\u06cc\u0646\u06a9 \u0646\u062a\u06cc\u062c\u0647 \u06a9\u067e\u06cc \u0634\u062f.",
                              "bottom-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["runCode2"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (navigator.share) {
                                  return navigator.share({
                                    title: "لیوم | تقویم قاعدگی",
                                    text:
                                      "نتیجه تست نامنظمی قاعدگی من:\n" +
                                      "\n برای مشاهده نتیجه تست قاعدگی خود\u060C به لینک زیر مراجعه کنید:\n",
                                    url: `${window.location.href}&Share=true`
                                  });
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "compact"
                      : undefined
                  }
                  startIcon={null}
                />
              </Stack__>
            </section>
          ) : null}
          <Paziresh24Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            body={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4Me8O)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gVnJr)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [5, 4, 3, 2, 1];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stars
                        activ={(() => {
                          try {
                            return currentItem <= $state.rate;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.stars__yNjou
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateRate"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["rate"]
                                  },
                                  operation: 0,
                                  value: currentItem
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateRate"] != null &&
                            typeof $steps["updateRate"] === "object" &&
                            typeof $steps["updateRate"].then === "function"
                          ) {
                            $steps["updateRate"] = await $steps["updateRate"];
                          }
                        }}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cfpjx
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__l9Uc0
                            )}
                            data-i18n={(() => {
                              try {
                                return currentItem == 5
                                  ? "star.yes"
                                  : currentItem == 1
                                  ? "star.no"
                                  : "";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    if (currentItem == 5) return "خیلی زیاد";
                                    else if (currentItem == 1) return "نه اصلا";
                                    else return "";
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </Stars>
                    );
                  })}
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__mApC)}>
                  {(() => {
                    const child$Props = {
                      autoSize: true,
                      className: classNames("__wab_instance", sty.textArea2),
                      disabled: (() => {
                        try {
                          return $state.disable;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["textArea2", "value"],
                          AntdTextArea_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder: (() => {
                        try {
                          return (() => {
                            const lang =
                              localStorage.getItem("selectedLang") || "fa";
                            switch (lang) {
                              case "fa":
                                return "خوشحال می‌شم نظرتو بدونم ...";
                                break;
                              case "en":
                                return "I'd love to hear your thoughts...";
                                break;
                              case "ar":
                                return "سأكون سعيدًا بمعرفة رأيك...";
                                break;
                              default:
                                return "Your feedback...";
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      value: generateStateValueProp($state, [
                        "textArea2",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "textArea2.value"
                        }
                      ],
                      [],
                      AntdTextArea_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdTextArea
                        data-plasmic-name={"textArea2"}
                        data-plasmic-override={overrides.textArea2}
                        {...child$Props}
                      />
                    );
                  })()}
                  {(() => {
                    try {
                      return $state.disable;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__c8Uan)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDisable"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["disable"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDisable"] != null &&
                          typeof $steps["updateDisable"] === "object" &&
                          typeof $steps["updateDisable"].then === "function"
                        ) {
                          $steps["updateDisable"] = await $steps[
                            "updateDisable"
                          ];
                        }
                      }}
                    />
                  ) : null}
                </div>
                <Paziresh24Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m9Tgg
                      )}
                      data-i18n={"result.comment.btn2"}
                    >
                      {"\u062b\u0628\u062a"}
                    </div>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button__aiJcb
                  )}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__sayga)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return $state.loadbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadbtn"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadbtn"] != null &&
                      typeof $steps["updateLoadbtn"] === "object" &&
                      typeof $steps["updateLoadbtn"].then === "function"
                    ) {
                      $steps["updateLoadbtn"] = await $steps["updateLoadbtn"];
                    }

                    $steps["invokeGlobalAction"] =
                      $state.rate != 0 &&
                      ($state.rate == 5 || $state.textArea2.value != "")
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PUT",
                                "https://n8n.staas.ir/webhook/selfTest_comments",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      user_id: $ctx.query.user_id,
                                      session_id: $ctx.query.session_id,
                                      comment: $state.textArea2.value || "",
                                      rate: $state.rate,
                                      selfTest_id: parseInt($state.testId)
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = $steps.invokeGlobalAction
                      ?.data?.success
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "success",
                              "\u062e\u06cc\u0644\u06cc \u062e\u0648\u0634\u062d\u0627\u0644 \u0634\u062f\u06cc\u0645 \u06a9\u0647 \u0646\u0638\u0631\u062a\u0648 \u0628\u0627\u0647\u0627\u0645\u0648\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0634\u062a\u06cc!"
                            ]
                          };
                          return $globalActions[
                            "plasmic-antd5-config-provider.showNotification"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadbtn"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading2"] != null &&
                      typeof $steps["updateLoading2"] === "object" &&
                      typeof $steps["updateLoading2"].then === "function"
                    ) {
                      $steps["updateLoading2"] = await $steps["updateLoading2"];
                    }

                    $steps["updateDialog2Open"] =
                      $state.rate != 0 &&
                      ($state.rate == 5 || $state.textArea2.value != "")
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["dialog2", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateDialog2Open"] != null &&
                      typeof $steps["updateDialog2Open"] === "object" &&
                      typeof $steps["updateDialog2Open"].then === "function"
                    ) {
                      $steps["updateDialog2Open"] = await $steps[
                        "updateDialog2Open"
                      ];
                    }

                    $steps["invokeGlobalAction3"] =
                      $state.rate == 0
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "info",
                                "\u0644\u0637\u0641\u0627\u064b \u0628\u0631\u0627\u06cc \u062b\u0628\u062a \u0646\u0638\u0631\u060c \u0627\u0645\u062a\u06cc\u0627\u0632 \u0631\u0627 \u0646\u06cc\u0632 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f.",
                                undefined,
                                undefined,
                                "bottom"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction3"] != null &&
                      typeof $steps["invokeGlobalAction3"] === "object" &&
                      typeof $steps["invokeGlobalAction3"].then === "function"
                    ) {
                      $steps["invokeGlobalAction3"] = await $steps[
                        "invokeGlobalAction3"
                      ];
                    }

                    $steps["invokeGlobalAction4"] =
                      $state.rate < 5 && $state.textArea2.value == ""
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "info",
                                (() => {
                                  try {
                                    return `با توجه به اینکه نظر و امتیاز شما برای سایر کاربران بسیار مهم است، لطفاً دلیل اینکه امتیاز ${$state.rate} ستاره داده‌اید را بنویسید.`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                undefined,
                                undefined,
                                "bottom"
                              ]
                            };
                            return $globalActions[
                              "plasmic-antd5-config-provider.showNotification"
                            ]?.apply(null, [...actionArgs.args]);
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction4"] != null &&
                      typeof $steps["invokeGlobalAction4"] === "object" &&
                      typeof $steps["invokeGlobalAction4"].then === "function"
                    ) {
                      $steps["invokeGlobalAction4"] = await $steps[
                        "invokeGlobalAction4"
                      ];
                    }
                  }}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg___7J47C)}
                      role={"img"}
                    />
                  }
                />
              </Stack__>
            }
            className={classNames("__wab_instance", sty.dialog2)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xrMfl
                )}
                data-i18n={"result.comment.title"}
              >
                {
                  "\u0622\u06cc\u0627 \u0627\u0632 \u0646\u062a\u06cc\u062c\u0647 \u062a\u0633\u062a \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc \u061f"
                }
              </div>
            }
            trigger={null}
          />

          <DirectDialog
            data-plasmic-name={"directDialog"}
            data-plasmic-override={overrides.directDialog}
            className={classNames("__wab_instance", sty.directDialog)}
            desc={
              "\u0628\u0631\u0627\u06cc \u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u0627\u06cc\u0646 \u062e\u062f\u0645\u0627\u062a\u060c \u0644\u0637\u0641\u0627\u064b \u0647\u0632\u06cc\u0646\u0647 \u0645\u0631\u0628\u0648\u0637\u0647 \u0631\u0627 \u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0646\u06cc\u062f."
            }
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["directDialog", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onSelectShopChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "directDialog",
                "selectShop"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["directDialog", "open"])}
          />

          <Paziresh24Dialog
            data-plasmic-name={"profile"}
            data-plasmic-override={overrides.profile}
            body={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___1LcnB)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lvyS5)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uFEwt)}
                  >
                    <TextInput
                      data-plasmic-name={"name"}
                      data-plasmic-override={overrides.name}
                      autoFocus={false}
                      className={classNames("__wab_instance", sty.name)}
                      error={(() => {
                        try {
                          return $state.errors.find(
                            item => item.type == "firstName"
                          )
                            ? true
                            : false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      errorText={(() => {
                        try {
                          return $state.errors.find(
                            item => item.type == "firstName"
                          ).message;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, ["name", "value"])(
                            (e => e.target?.value).apply(null, eventArgs)
                          );
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={``}
                      size={"short"}
                      value={
                        generateStateValueProp($state, ["name", "value"]) ?? ""
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5O5T
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mL9LQ
                          )}
                          data-i18n={"prescription.t1"}
                        >
                          {"\u0646\u0627\u0645"}
                        </div>
                      </div>
                    </TextInput>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ks4Vm)}
                  >
                    <TextInput
                      data-plasmic-name={"name2"}
                      data-plasmic-override={overrides.name2}
                      autoFocus={false}
                      className={classNames("__wab_instance", sty.name2)}
                      error={(() => {
                        try {
                          return $state.errors.find(
                            item => item.type == "lastName"
                          )
                            ? true
                            : false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      errorText={(() => {
                        try {
                          return $state.errors.find(
                            item => item.type == "lastName"
                          ).message;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, ["name2", "value"])(
                            (e => e.target?.value).apply(null, eventArgs)
                          );
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={``}
                      size={"short"}
                      value={
                        generateStateValueProp($state, ["name2", "value"]) ?? ""
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hJaC
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vTvqO
                          )}
                          data-i18n={"prescription.t2"}
                        >
                          {
                            "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"
                          }
                        </div>
                      </div>
                    </TextInput>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__m9AMe)}
                >
                  <TextInput
                    data-plasmic-name={"code"}
                    data-plasmic-override={overrides.code}
                    className={classNames("__wab_instance", sty.code)}
                    error={(() => {
                      try {
                        return $state.errors.find(
                          item => item.type == "nationalCode"
                        )
                          ? true
                          : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    errorText={(() => {
                      try {
                        return $state.errors.find(
                          item => item.type == "nationalCode"
                        ).message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["code", "value"])(
                          (e => e.target?.value).apply(null, eventArgs)
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={``}
                    size={"short"}
                    type={"tel"}
                    value={
                      generateStateValueProp($state, ["code", "value"]) ?? ""
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yEk69
                      )}
                      data-i18n={"prescription.t3"}
                    >
                      {"\u06a9\u062f \u0645\u0644\u06cc"}
                    </div>
                  </TextInput>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ke6Or)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mnIjq
                      )}
                      data-i18n={"prescription.t4"}
                    >
                      {"\u0646\u0648\u0639 \u0628\u06cc\u0645\u0647"}
                    </div>
                    <Select
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "value"
                        ]).apply(null, eventArgs);
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "select",
                          "open"
                        ]).apply(null, eventArgs);
                      }}
                      open={generateStateValueProp($state, ["select", "open"])}
                      options={(() => {
                        try {
                          return [
                            { label: "تامین اجتماعی", value: "تامین اجتماعی" },
                            { label: "بیمه سلامت", value: "بیمه سلامت" },
                            { label: "نیرو های مسلح", value: "نیرو های مسلح" },
                            { label: "بیمه ندارم", value: "بیمه ندارم" }
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        "\u0644\u0637\u0641\u0627 \u0646\u0648\u0639 \u0628\u06cc\u0645\u0647 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646\u06cc\u062f."
                      }
                      triggerClassName={classNames(
                        "__wab_instance",
                        sty.select
                      )}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__liB2T
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.errors.find(
                              item => item.type == "insurance"
                            ).message;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__okDm5)}
                >
                  <TextInput
                    data-plasmic-name={"mobile"}
                    data-plasmic-override={overrides.mobile}
                    className={classNames("__wab_instance", sty.mobile)}
                    error={(() => {
                      try {
                        return $state.errors.find(
                          item => item.type == "phoneNumber"
                        )
                          ? true
                          : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    errorText={(() => {
                      try {
                        return $state.errors.find(
                          item => item.type == "phoneNumber"
                        ).message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["mobile", "value"])(
                          (e => e.target?.value).apply(null, eventArgs)
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={``}
                    size={"short"}
                    type={"tel"}
                    value={
                      generateStateValueProp($state, ["mobile", "value"]) ?? ""
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yz7C
                      )}
                      data-i18n={"prescription.t5"}
                    >
                      {
                        "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                      }
                    </div>
                  </TextInput>
                  <TextInput
                    data-plasmic-name={"email"}
                    data-plasmic-override={overrides.email}
                    className={classNames("__wab_instance", sty.email)}
                    error={(() => {
                      try {
                        return $state.errors.find(item => item.type == "email")
                          ? true
                          : false;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    errorText={(() => {
                      try {
                        return $state.errors.find(item => item.type == "email")
                          .message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, ["email", "value"])(
                          (e => e.target?.value).apply(null, eventArgs)
                        );
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"gmail.com@******"}
                    size={"short"}
                    type={"tel"}
                    value={
                      generateStateValueProp($state, ["email", "value"]) ?? ""
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kprY2
                      )}
                    >
                      {"\u0627\u06cc\u0645\u06cc\u0644"}
                    </div>
                  </TextInput>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___91NgY)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"gender2"}
                    data-plasmic-override={overrides.gender2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.gender2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Ky5K
                      )}
                      data-i18n={"prescription.t6"}
                    >
                      {"\u062c\u0646\u0633\u06cc\u062a "}
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2KXc2,
                        "negative"
                      )}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return [
                              { value: "female", label: "زن" },
                              { value: "male", label: "مرد" }
                            ];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <RadioGrop
                            data-plasmic-name={"radioGrop"}
                            data-plasmic-override={overrides.radioGrop}
                            className={classNames(
                              "__wab_instance",
                              sty.radioGrop
                            )}
                            key={currentIndex}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateGender"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["gender"]
                                      },
                                      operation: 0,
                                      value: currentItem.value
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateGender"] != null &&
                                typeof $steps["updateGender"] === "object" &&
                                typeof $steps["updateGender"].then ===
                                  "function"
                              ) {
                                $steps["updateGender"] = await $steps[
                                  "updateGender"
                                ];
                              }
                            }}
                            selected={(() => {
                              try {
                                return $state.gender == currentItem.value;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jS32
                              )}
                              data-i18n={(() => {
                                try {
                                  return currentItem.value;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.label;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </RadioGrop>
                        );
                      })}
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aqei
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.errors.find(
                              item => item.type == "gender"
                            ).message;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rBzfs)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ioNQl
                    )}
                    data-i18n={"prescription.t7"}
                  >
                    {
                      "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062a\u06a9\u0645\u06cc\u0644\u06cc"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tbLxu)}
                  >
                    {(() => {
                      const child$Props = {
                        autoSize: false,
                        className: classNames("__wab_instance", sty.textArea3),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea3", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: (() => {
                          try {
                            return (() => {
                              const lang =
                                localStorage.getItem("selectedLang") || "fa";
                              switch (lang) {
                                case "fa":
                                  return "در صورتی که توضیح یا نکته‌ای وجود دارد که مایل هستید پزشک از آن مطلع باشد\u060C لطفاً در این قسمت وارد نمایید.";
                                case "en":
                                  return "If there's anything you'd like the doctor to know, please enter it here.";
                                case "ar":
                                  return "إذا كانت هناك ملاحظات أو معلومات ترغب في أن يعرفها الطبيب\u060C يرجى إدخالها هنا.";
                                default:
                                  return "Additional notes for the doctor...";
                              }
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        value: generateStateValueProp($state, [
                          "textArea3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea3.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea3"}
                          data-plasmic-override={overrides.textArea3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </Stack__>
                <ButtonLiom
                  data-plasmic-name={"buttonLiom5"}
                  data-plasmic-override={overrides.buttonLiom5}
                  className={classNames("__wab_instance", sty.buttonLiom5)}
                  color={generateStateValueProp($state, [
                    "buttonLiom5",
                    "color"
                  ])}
                  load={generateStateValueProp($state, ["buttonLiom5", "load"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateModalOpen2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["buttonLiom5", "load"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen2"] != null &&
                      typeof $steps["updateModalOpen2"] === "object" &&
                      typeof $steps["updateModalOpen2"].then === "function"
                    ) {
                      $steps["updateModalOpen2"] = await $steps[
                        "updateModalOpen2"
                      ];
                    }

                    $steps["updateErrors"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["errors"]
                            },
                            operation: 0,
                            value: []
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateErrors"] != null &&
                      typeof $steps["updateErrors"] === "object" &&
                      typeof $steps["updateErrors"].then === "function"
                    ) {
                      $steps["updateErrors"] = await $steps["updateErrors"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                var errors = [];
                                if (!$state.name?.value) {
                                  errors.push({
                                    type: "firstName",
                                    message: "لطفاً نام را وارد کنید."
                                  });
                                }
                                if (!$state.name2?.value) {
                                  errors.push({
                                    type: "lastName",
                                    message: "لطفاً نام خانوادگی را وارد کنید."
                                  });
                                }
                                if (!$state.code?.value) {
                                  errors.push({
                                    type: "nationalCode",
                                    message: "لطفاً کد ملی را وارد کنید."
                                  });
                                } else if (
                                  !/^\d{10}$/.test($state.code?.value)
                                ) {
                                  errors.push({
                                    type: "nationalCode",
                                    message: "کد ملی معتبر نیست."
                                  });
                                }
                                if ($state.gender == "") {
                                  errors.push({
                                    type: "gender",
                                    message: "لطفاً جنسیت را انتخاب کنید."
                                  });
                                }
                                if (!$state.mobile.value) {
                                  errors.push({
                                    type: "phoneNumber",
                                    message: "لطفاً شماره همراه را وارد کنید."
                                  });
                                } else if (
                                  !/^09\d{9}$/.test($state.mobile.value)
                                ) {
                                  errors.push({
                                    type: "phoneNumber",
                                    message: "شماره همراه معتبر نیست."
                                  });
                                }
                                if (!$state.email.value) {
                                } else if (
                                  !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(
                                    $state.email.value
                                  )
                                ) {
                                  errors.push({
                                    type: "email",
                                    message: "ایمیل معتبر نیست."
                                  });
                                }
                                if (!$state.select.value) {
                                  errors.push({
                                    type: "insurance",
                                    message: "لطفاً نوع بیمه را انتخاب کنید."
                                  });
                                }
                                return ($state.errors = errors);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction"] =
                      $state.errors.length == 0
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "PUT",
                                "https://n8n.staas.ir/webhook/selfTestUser",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      user_id: $ctx.query.user_id,
                                      session_id: $ctx.query.session_id,
                                      name:
                                        $state.name.value +
                                        " " +
                                        $state.name2.value,
                                      email: $state.email.value,
                                      mobile: $state.mobile.value,
                                      nationalCode: $state.code.value,
                                      gender: $state.gender,
                                      type: $state.apiRequest.data.type,
                                      insurance: $state.select.value,
                                      description: $state.textArea3.value || ""
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                "\u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0628\u0627\u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f.",
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateProfileOpen"] =
                      $steps.invokeGlobalAction?.data?.success == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["profile", "open"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateProfileOpen"] != null &&
                      typeof $steps["updateProfileOpen"] === "object" &&
                      typeof $steps["updateProfileOpen"].then === "function"
                    ) {
                      $steps["updateProfileOpen"] = await $steps[
                        "updateProfileOpen"
                      ];
                    }

                    $steps["updateButtonLiom5Load"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["buttonLiom5", "load"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateButtonLiom5Load"] != null &&
                      typeof $steps["updateButtonLiom5Load"] === "object" &&
                      typeof $steps["updateButtonLiom5Load"].then === "function"
                    ) {
                      $steps["updateButtonLiom5Load"] = await $steps[
                        "updateButtonLiom5Load"
                      ];
                    }
                  }}
                  onColorChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom5",
                        "color"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "buttonLiom5",
                        "load"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zxQqe
                    )}
                    data-i18n={"prescription.btn2"}
                  >
                    {
                      "\u062b\u0628\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                    }
                  </div>
                </ButtonLiom>
              </Stack__>
            }
            className={classNames("__wab_instance", sty.profile)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["profile", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["profile", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a7Gue,
                  {
                    [sty.textdercentage__a7Gue2Sg6V]: hasVariant(
                      $state,
                      "dercentage",
                      "dercentage"
                    )
                  }
                )}
                data-i18n={"prescription.title"}
              >
                {
                  "\u062a\u06a9\u0645\u06cc\u0644 \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                }
              </div>
            }
            trigger={null}
          />

          {(() => {
            try {
              return (
                new window.URLSearchParams(window.location.search).get(
                  "inApp"
                ) == "test"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uh1Cb, {
                [sty.freeBoxspecialized__uh1CbFomOb]: hasVariant(
                  $state,
                  "specialized",
                  "specialized"
                )
              })}
            >
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml, {
                  [sty.embedHtmlspecialized]: hasVariant(
                    $state,
                    "specialized",
                    "specialized"
                  )
                })}
                code={
                  '\r\n<div class="dropdown" id="langDropdown">\r\n  <div class="toggle" tabindex="0">\r\n    <span class="flag" id="selectedFlag">fa</span>\r\n      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: 15px; height: 15px;">\r\n    <path d="M20.58 19.37L17.59 11.01C17.38 10.46 16.91 10.12 16.37 10.12C15.83 10.12 15.37 10.46 15.14 11.03L12.16 19.37C12.02 19.76 12.22 20.19 12.61 20.33C13 20.47 13.43 20.27 13.57 19.88L14.19 18.15H18.54L19.16 19.88C19.27 20.19 19.56 20.38 19.87 20.38C19.95 20.38 20.04 20.37 20.12 20.34C20.51 20.2 20.71 19.77 20.57 19.38L20.58 19.37ZM14.74 16.64L16.38 12.05L18.02 16.64H14.74ZM12.19 7.85C9.92999 11.42 7.89 13.58 5.41 15.02C5.29 15.09 5.16 15.12 5.04 15.12C4.78 15.12 4.53 14.99 4.39 14.75C4.18 14.39 4.3 13.93 4.66 13.73C6.75999 12.51 8.48 10.76 10.41 7.86H4.12C3.71 7.86 3.37 7.52 3.37 7.11C3.37 6.7 3.71 6.36 4.12 6.36H7.87V4.38C7.87 3.97 8.21 3.63 8.62 3.63C9.02999 3.63 9.37 3.97 9.37 4.38V6.36H13.12C13.53 6.36 13.87 6.7 13.87 7.11C13.87 7.52 13.53 7.86 13.12 7.86H12.18L12.19 7.85ZM12.23 15.12C12.1 15.12 11.97 15.09 11.85 15.02C11.2 14.64 10.57 14.22 9.97999 13.78C9.64999 13.53 9.58 13.06 9.83 12.73C10.08 12.4 10.55 12.33 10.88 12.58C11.42 12.99 12.01 13.37 12.61 13.72C12.97 13.93 13.09 14.39 12.88 14.75C12.74 14.99 12.49 15.12 12.23 15.12Z" fill="#000000"></path>\r\n  </svg>\r\n  </div>\r\n  <ul class="menu" role="listbox" aria-label="Select Language">\r\n    <li data-lang="en" role="option" aria-selected="false"><span class="flag"> en </span> English</li>\r\n    <li data-lang="fa" role="option" aria-selected="true"><span class="flag"> fa </span> \u0641\u0627\u0631\u0633\u06cc</li>\r\n    <li data-lang="ar" role="option" aria-selected="false"><span class="flag"> ar </span> \u0627\u0644\u0639\u0631\u0628\u064a\u0629</li>\r\n  </ul>\r\n</div>\r\n\r\n\r\n<script src="https://tools.liom.app/plasmic/i18next.min.js"></script>\r\n<script>\r\n  const resources = {\r\n     fa: {\r\n    translation: {\r\n      "result.main.title": "\u0646\u062a\u06cc\u062c\u0647  \u0634\u0645\u0627",\r\n      "result.title1": "\u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u0627\u0633\u062e \u0647\u0627\u06cc \u0634\u0645\u0627\u060c \u062a\u0634\u062e\u06cc\u0635 \u0645\u0627 \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0627\u0633\u062a:",\r\n      "result.again": "\u0627\u0646\u062c\u0627\u0645 \u0645\u062c\u062f\u062f \u062a\u0633\u062a",\r\n      "result.title2": "\u0627\u0644\u0627\u0646 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645\u061f",\r\n      "result.description": "\u0628\u0627 \u062a\u0648\u062c\u0647 \u0628\u0647 \u062a\u0634\u062e\u06cc\u0635 \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u0647\u060c \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0627\u0631 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f:",\r\n      "result.title3": "\u0622\u06cc\u0627 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0645\u0631\u0627\u062c\u0639\u0647 \u0641\u0648\u0631\u06cc \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0627\u0633\u062a\u061f",\r\n      "result.description2": "\u062e\u06cc\u0631\u060c \u0646\u06cc\u0627\u0632\u06cc \u0628\u0647 \u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0641\u0639\u0644\u0627 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f. \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u062f\u0631 \u0628\u062e\u0634 \\"\u0627\u0644\u0627\u0646 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645\u061f\\" \u0631\u0627 \u0644\u0637\u0641\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f.",\r\n      "result.title4": "\u0622\u06cc\u0627 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u062f\u0627\u0631\u0648 \u06cc\u0627 \u0622\u0632\u0645\u0627\u06cc\u0634 \u062f\u0627\u0631\u0645\u061f",\r\n      "result.description3": "\u0628\u0627 \u06a9\u0644\u06cc\u06a9 \u0631\u0648\u06cc \u00ab\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9\u00bb \u0648 \u067e\u0631 \u06a9\u0631\u062f\u0646 \u0641\u0631\u0645\u060c \u067e\u0632\u0634\u06a9 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0634\u0645\u0627 \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u0645\u06cc\u200c\u06a9\u0646\u062f. \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632\u060c \u0646\u0633\u062e\u0647 \u06cc\u0627 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0622\u0632\u0645\u0627\u06cc\u0634 \u0635\u0627\u062f\u0631 \u0648 \u0627\u0632 \u0637\u0631\u06cc\u0642 \u067e\u06cc\u0627\u0645\u06a9 \u0627\u0637\u0644\u0627\u0639 \u062f\u0627\u062f\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f.",\r\n      "result.title5": "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0641\u0635\u06cc\u0644\u06cc \u0628\u0647 \u06a9\u0645\u06a9 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc",\r\n      "result.title6": "\u0622\u06cc\u0627 \u0627\u0632 \u0646\u062a\u06cc\u062c\u0647 \u062a\u0633\u062a \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc \u061f",\r\n      "result.comment.btn": "\u062b\u0628\u062a \u0646\u0638\u0631",\r\n      "prescription.btn": "\u062f\u0631\u06cc\u0627\u0641\u062a \u0646\u0633\u062e\u0647 \u0627\u0644\u06a9\u062a\u0631\u0648\u0646\u06cc\u06a9",\r\n      "result.comment.title": "\u0622\u06cc\u0627 \u0627\u0632 \u0646\u062a\u06cc\u062c\u0647 \u062a\u0633\u062a \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc \u061f",\r\n      "result.comment.btn2": "\u062b\u0628\u062a",\r\n      "prescription.title": "\u062a\u06a9\u0645\u06cc\u0644 \u0627\u0637\u0644\u0627\u0639\u0627\u062a",\r\n      "prescription.t1": "\u0646\u0627\u0645",\r\n      "prescription.t2": "\u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc",\r\n      "prescription.t3": "\u06a9\u062f \u0645\u0644\u06cc",\r\n      "prescription.t4": "\u0646\u0648\u0639 \u0628\u06cc\u0645\u0647",\r\n      "prescription.t5": "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644",\r\n      "prescription.t6": "\u062c\u0646\u0633\u06cc\u062a",\r\n      "female": "\u0632\u0646",\r\n      "male": "\u0645\u0631\u062f",\r\n      "prescription.t7": "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u062a\u06a9\u0645\u06cc\u0644\u06cc",\r\n      "prescription.btn2": "\u062b\u0628\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a",\r\n      "loading.title": "\u0644\u0637\u0641\u0627 \u06a9\u0645\u06cc \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f",\r\n"loading.1": "\u0622\u0646\u0627\u0644\u06cc\u0632 \u067e\u0627\u0633\u062e \u0647\u0627\u06cc \u0634\u0645\u0627",\r\n"loading.2": "\u0628\u0631\u0631\u0633\u06cc \u0634\u0627\u062e\u0635 \u0647\u0627\u06cc \u0627\u0631\u0632\u06cc\u0627\u0628\u06cc",\r\n"loading.3": "\u0622\u0645\u0627\u062f\u0647 \u0633\u0627\u0632\u06cc \u0646\u062a\u06cc\u062c\u0647",\r\n"star.no": "\u0646\u0647 \u0627\u0635\u0644\u0627\u064b",\r\n"star.yes": "\u062e\u06cc\u0644\u06cc \u0632\u06cc\u0627\u062f",\r\n"feedback.invite": "\u062e\u0648\u0634\u062d\u0627\u0644 \u0645\u06cc\u200c\u0634\u0645 \u0646\u0638\u0631\u062a\u0648 \u0628\u062f\u0648\u0646\u0645 ..."\r\n\r\n\r\n\r\n    }\r\n  },\r\n  en: {\r\n    translation: {\r\n      "result.main.title": "Your Result",\r\n      "result.title1": "Based on your answers, our diagnosis is as follows:",\r\n      "result.again": "Retake the Test",\r\n      "result.title2": "What should I do now?",\r\n      "result.description": "Based on the diagnosis, we recommend the following steps:",\r\n      "result.title3": "Do I need to see a doctor immediately?",\r\n      "result.description2": "No, there\'s no need to see a doctor right now. Please follow the steps mentioned in the \'What should I do now?\' section.",\r\n      "result.title4": "Do I need medication or lab tests?",\r\n      "result.description3": "Click on \'Get Electronic Prescription\' and fill out the form. A doctor will review your information and issue a prescription or lab request if needed. You\'ll be notified via SMS.",\r\n      "result.title5": "Detailed Result with AI Assistance",\r\n      "result.title6": "Are you satisfied with the test result?",\r\n      "result.comment.btn": "Submit Feedback",\r\n      "prescription.btn": "Get Electronic Prescription",\r\n      "result.comment.title": "Are you satisfied with the test result?",\r\n      "result.comment.btn2": "Submit",\r\n      "prescription.title": "Complete Your Information",\r\n      "prescription.t1": "First Name",\r\n      "prescription.t2": "Last Name",\r\n      "prescription.t3": "National ID",\r\n      "prescription.t4": "Insurance Type",\r\n      "prescription.t5": "Mobile Number",\r\n      "prescription.t6": "Gender",\r\n      "female": "Female",\r\n      "male": "Male",\r\n      "prescription.t7": "Additional Notes",\r\n      "prescription.btn2": "Submit Information",\r\n      "loading.title": "Please wait a moment",\r\n"loading.1": "Analyzing your answers",\r\n"loading.2": "Reviewing evaluation indicators",\r\n"loading.3": "Preparing your result",\r\n"star.no": "Not at all",\r\n"star.yes": "Very much",\r\n"feedback.invite": "I\'d love to hear your thoughts..."\r\n\r\n\r\n    }\r\n  },\r\n  ar: {\r\n    translation: {\r\n      "result.main.title": "\u0646\u062a\u064a\u062c\u062a\u0643",\r\n      "result.title1": "\u0627\u0633\u062a\u0646\u0627\u062f\u064b\u0627 \u0625\u0644\u0649 \u0625\u062c\u0627\u0628\u0627\u062a\u0643\u060c \u0641\u0625\u0646 \u062a\u0634\u062e\u064a\u0635\u0646\u0627 \u0643\u0627\u0644\u062a\u0627\u0644\u064a:",\r\n      "result.again": "\u0625\u0639\u0627\u062f\u0629 \u0625\u062c\u0631\u0627\u0621 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631",\r\n      "result.title2": "\u0645\u0627\u0630\u0627 \u064a\u062c\u0628 \u0623\u0646 \u0623\u0641\u0639\u0644 \u0627\u0644\u0622\u0646\u061f",\r\n      "result.description": "\u0628\u0646\u0627\u0621\u064b \u0639\u0644\u0649 \u0627\u0644\u062a\u0634\u062e\u064a\u0635\u060c \u0646\u0648\u0635\u064a \u0628\u0627\u062a\u0628\u0627\u0639 \u0627\u0644\u062e\u0637\u0648\u0627\u062a \u0627\u0644\u062a\u0627\u0644\u064a\u0629:",\r\n      "result.title3": "\u0647\u0644 \u0623\u062d\u062a\u0627\u062c \u0625\u0644\u0649 \u0632\u064a\u0627\u0631\u0629 \u0627\u0644\u0637\u0628\u064a\u0628 \u0641\u0648\u0631\u0627\u064b\u061f",\r\n      "result.description2": "\u0644\u0627\u060c \u0644\u0627 \u062d\u0627\u062c\u0629 \u0644\u0632\u064a\u0627\u0631\u0629 \u0627\u0644\u0637\u0628\u064a\u0628 \u062d\u0627\u0644\u064a\u0627\u064b. \u064a\u0631\u062c\u0649 \u0627\u062a\u0628\u0627\u0639 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u0627\u062a \u0627\u0644\u0645\u0630\u0643\u0648\u0631\u0629 \u0641\u064a \u0642\u0633\u0645 \\"\u0645\u0627\u0630\u0627 \u064a\u062c\u0628 \u0623\u0646 \u0623\u0641\u0639\u0644 \u0627\u0644\u0622\u0646\u061f\\".",\r\n      "result.title4": "\u0647\u0644 \u0623\u062d\u062a\u0627\u062c \u0625\u0644\u0649 \u062f\u0648\u0627\u0621 \u0623\u0648 \u062a\u062d\u0627\u0644\u064a\u0644\u061f",\r\n      "result.description3": "\u0627\u0646\u0642\u0631 \u0639\u0644\u0649 \\"\u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0648\u0635\u0641\u0629 \u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a\u0629\\" \u0648\u0627\u0645\u0644\u0623 \u0627\u0644\u0646\u0645\u0648\u0630\u062c. \u0633\u064a\u0642\u0648\u0645 \u0627\u0644\u0637\u0628\u064a\u0628 \u0628\u0645\u0631\u0627\u062c\u0639\u0629 \u0645\u0639\u0644\u0648\u0645\u0627\u062a\u0643\u060c \u0648\u0625\u0630\u0627 \u0644\u0632\u0645 \u0627\u0644\u0623\u0645\u0631\u060c \u0633\u064a\u0635\u062f\u0631 \u0648\u0635\u0641\u0629 \u0623\u0648 \u0637\u0644\u0628 \u062a\u062d\u0644\u064a\u0644 \u0648\u0633\u064a\u062a\u0645 \u0625\u0639\u0644\u0627\u0645\u0643 \u0639\u0628\u0631 \u0631\u0633\u0627\u0644\u0629 \u0646\u0635\u064a\u0629.",\r\n      "result.title5": "\u0627\u0644\u0646\u062a\u064a\u062c\u0629 \u0627\u0644\u062a\u0641\u0635\u064a\u0644\u064a\u0629 \u0628\u0645\u0633\u0627\u0639\u062f\u0629 \u0627\u0644\u0630\u0643\u0627\u0621 \u0627\u0644\u0627\u0635\u0637\u0646\u0627\u0639\u064a",\r\n      "result.title6": "\u0647\u0644 \u0623\u0646\u062a \u0631\u0627\u0636\u064d \u0639\u0646 \u0646\u062a\u064a\u062c\u0629 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u061f",\r\n      "result.comment.btn": "\u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0631\u0623\u064a",\r\n      "prescription.btn": "\u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0648\u0635\u0641\u0629 \u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a\u0629",\r\n      "result.comment.title": "\u0647\u0644 \u0623\u0646\u062a \u0631\u0627\u0636\u064d \u0639\u0646 \u0646\u062a\u064a\u062c\u0629 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\u061f",\r\n      "result.comment.btn2": "\u0625\u0631\u0633\u0627\u0644",\r\n      "prescription.title": "\u0625\u0643\u0645\u0627\u0644 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a",\r\n      "prescription.t1": "\u0627\u0644\u0627\u0633\u0645",\r\n      "prescription.t2": "\u0627\u0633\u0645 \u0627\u0644\u0639\u0627\u0626\u0644\u0629",\r\n      "prescription.t3": "\u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u0648\u0637\u0646\u064a",\r\n      "prescription.t4": "\u0646\u0648\u0639 \u0627\u0644\u062a\u0623\u0645\u064a\u0646",\r\n      "prescription.t5": "\u0631\u0642\u0645 \u0627\u0644\u062c\u0648\u0627\u0644",\r\n      "prescription.t6": "\u0627\u0644\u062c\u0646\u0633",\r\n      "female": "\u0623\u0646\u062b\u0649",\r\n      "male": "\u0630\u0643\u0631",\r\n      "prescription.t7": "\u0645\u0644\u0627\u062d\u0638\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629",\r\n      "prescription.btn2": "\u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a",\r\n      "loading.title": "\u064a\u0631\u062c\u0649 \u0627\u0644\u0627\u0646\u062a\u0638\u0627\u0631 \u0642\u0644\u064a\u0644\u0627\u064b",\r\n"loading.1": "\u062a\u062d\u0644\u064a\u0644 \u0625\u062c\u0627\u0628\u0627\u062a\u0643",\r\n"loading.2": "\u0645\u0631\u0627\u062c\u0639\u0629 \u0645\u0624\u0634\u0631\u0627\u062a \u0627\u0644\u062a\u0642\u064a\u064a\u0645",\r\n"loading.3": "\u062a\u062d\u0636\u064a\u0631 \u0627\u0644\u0646\u062a\u064a\u062c\u0629",\r\n"star.no": "\u0644\u0627 \u0639\u0644\u0649 \u0627\u0644\u0625\u0637\u0644\u0627\u0642",\r\n"star.yes": "\u062c\u062f\u0627\u064b",\r\n"feedback.invite": "\u0633\u0623\u0643\u0648\u0646 \u0633\u0639\u064a\u062f\u064b\u0627 \u0628\u0645\u0639\u0631\u0641\u0629 \u0631\u0623\u064a\u0643..."\r\n\r\n\r\n    }\r\n  }\r\n  };\r\nconst dropdown = document.getElementById(\'langDropdown\');\r\nconst toggle = dropdown.querySelector(\'.toggle\');\r\nconst menu = dropdown.querySelector(\'.menu\');\r\nconst selectedFlag = document.getElementById(\'selectedFlag\');\r\nconst options = menu.querySelectorAll(\'li\');\r\n\r\n  function createI18nManager({ i18nextInstance, root = document.body }) {\r\n    const translatedElements = new WeakMap();\r\n\r\n    const translateElement = el => {\r\n      const key = el.getAttribute(\'data-i18n\');\r\n      if (!key || !i18nextInstance.t) return;\r\n      const translated = i18nextInstance.t(key);\r\n      if (el.textContent.trim() !== translated.trim()) {\r\n        el.textContent = translated;\r\n        translatedElements.set(el, key);\r\n      }\r\n    };\r\n\r\n    const translateAll = () => {\r\n      root.querySelectorAll(\'[data-i18n]\').forEach(translateElement);\r\n              if (i18nextInstance.language === \'en\') {\r\n            document.body.classList.add(\'english-font\');\r\n          } else {\r\n            document.body.classList.remove(\'english-font\');\r\n        }\r\n      document.body.dir = [\'fa\', \'ar\'].includes(i18nextInstance.language) ? \'rtl\' : \'ltr\';\r\n    };\r\n\r\n    const observer = new MutationObserver(mutations => {\r\n      mutations.forEach(m => {\r\n        m.addedNodes.forEach(node => {\r\n          if (node.nodeType !== 1) return;\r\n          if (node.matches?.(\'[data-i18n]\')) translateElement(node);\r\n          node.querySelectorAll?.(\'[data-i18n]\').forEach(translateElement);\r\n        });\r\n      });\r\n    });\r\n\r\n    observer.observe(root, { childList: true, subtree: true });\r\n\r\n    i18nextInstance.on(\'languageChanged\', () => {\r\n      translateAll();\r\n    });\r\n\r\n    return { translateAll, disconnect: () => observer.disconnect() };\r\n  }\r\n\r\n  i18next.init({\r\n    lng: \'fa\',\r\n    debug: false,\r\n    resources\r\n  }).then(() => {\r\n    const i18nManager = createI18nManager({ i18nextInstance: i18next });\r\n\r\n    // \u0627\u0646\u062a\u062e\u0627\u0628 \u0632\u0628\u0627\u0646\r\n    // const options = document.querySelectorAll(\'#langDropdown [data-lang]\');\r\n    // const selectedFlag = document.getElementById(\'selectedFlag\');\r\n\r\n    options.forEach(li => {\r\n      li.addEventListener(\'click\', () => {\r\n        const lang = li.getAttribute(\'data-lang\');\r\n        localStorage.setItem(\'selectedLang\', lang);\r\n        selectedFlag.textContent = lang;\r\n        dropdown.classList.toggle(\'open\');\r\n        window.location.reload(); \r\n      });\r\n    });\r\n    toggle.onclick = () => dropdown.classList.toggle(\'open\');\r\n\r\n  document.addEventListener(\'click\', e => {\r\n    if (!dropdown.contains(e.target)) dropdown.classList.remove(\'open\');\r\n  });\r\n\r\n  toggle.onkeydown = e => {\r\n    if (e.key === \'Enter\' || e.key === \' \') {\r\n      e.preventDefault();\r\n      dropdown.classList.toggle(\'open\');\r\n    }\r\n  };\r\n\r\n    // \u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0648\u0644\u06cc\u0647 \u0632\u0628\u0627\u0646\r\n    const urlLang = new URLSearchParams(window.location.search).get(\'lang\');\r\n    const savedLang = localStorage.getItem(\'selectedLang\');\r\n    const initialLang = urlLang || savedLang || \'fa\';\r\n    i18next.changeLanguage(initialLang);\r\n    selectedFlag.textContent = initialLang;\r\n  });\r\n</script> \r\n\r\n'
                }
              />
            </Stack__>
          ) : null}
          <section
            className={classNames(projectcss.all, sty.section__r0Pb1, {
              [sty.sectionspecialized__r0Pb1FomOb]: hasVariant(
                $state,
                "specialized",
                "specialized"
              )
            })}
          >
            <ButtonLiom
              data-plasmic-name={"buttonLiom6"}
              data-plasmic-override={overrides.buttonLiom6}
              className={classNames("__wab_instance", sty.buttonLiom6, {
                [sty.buttonLiom6global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.buttonLiom6specialized]: hasVariant(
                  $state,
                  "specialized",
                  "specialized"
                )
              })}
              color={generateStateValueProp($state, ["buttonLiom6", "color"])}
              load={generateStateValueProp($state, ["buttonLiom6", "load"])}
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const currentUrl = new URL(window.location.href);
                            const params = new URLSearchParams(
                              currentUrl.search
                            );
                            params.set("type", $state.apiRequest.data.type);
                            const newUrl = `${
                              currentUrl.origin
                            }/self-test?${params.toString()}`;
                            return window.open(newUrl);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom6", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onLoadChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom6", "load"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              size={"compact"}
              startIcon={
                <Icon136Icon
                  className={classNames(projectcss.all, sty.svg___4M7Gn)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__blWVv
                )}
                data-i18n={"result.again"}
              >
                {
                  " \u0627\u0646\u062c\u0627\u0645 \u0645\u062c\u062f\u062f \u062a\u0633\u062a\r"
                }
              </div>
            </ButtonLiom>
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "backgrond",
    "headerLiom",
    "timer",
    "buttonLiom",
    "buttonLiom3",
    "collapse3",
    "buttonLiom7",
    "buttonLiom4",
    "lottie",
    "apiRequest",
    "textArea",
    "dialog",
    "apiRequest2",
    "link",
    "h2",
    "paziresh24LineClamp",
    "cardSubtitle",
    "dialog2",
    "textArea2",
    "directDialog",
    "profile",
    "name",
    "name2",
    "code",
    "select",
    "mobile",
    "email",
    "gender2",
    "radioGrop",
    "textArea3",
    "buttonLiom5",
    "embedHtml",
    "buttonLiom6"
  ],
  modal: ["modal", "backgrond"],
  backgrond: ["backgrond"],
  headerLiom: ["headerLiom"],
  timer: ["timer"],
  buttonLiom: ["buttonLiom"],
  buttonLiom3: ["buttonLiom3"],
  collapse3: ["collapse3"],
  buttonLiom7: ["buttonLiom7"],
  buttonLiom4: ["buttonLiom4"],
  lottie: ["lottie"],
  apiRequest: ["apiRequest"],
  textArea: ["textArea"],
  dialog: [
    "dialog",
    "apiRequest2",
    "link",
    "h2",
    "paziresh24LineClamp",
    "cardSubtitle"
  ],
  apiRequest2: [
    "apiRequest2",
    "link",
    "h2",
    "paziresh24LineClamp",
    "cardSubtitle"
  ],
  link: ["link", "h2"],
  h2: ["h2"],
  paziresh24LineClamp: ["paziresh24LineClamp", "cardSubtitle"],
  cardSubtitle: ["cardSubtitle"],
  dialog2: ["dialog2", "textArea2"],
  textArea2: ["textArea2"],
  directDialog: ["directDialog"],
  profile: [
    "profile",
    "name",
    "name2",
    "code",
    "select",
    "mobile",
    "email",
    "gender2",
    "radioGrop",
    "textArea3",
    "buttonLiom5"
  ],
  name: ["name"],
  name2: ["name2"],
  code: ["code"],
  select: ["select"],
  mobile: ["mobile"],
  email: ["email"],
  gender2: ["gender2", "radioGrop"],
  radioGrop: ["radioGrop"],
  textArea3: ["textArea3"],
  buttonLiom5: ["buttonLiom5"],
  embedHtml: ["embedHtml"],
  buttonLiom6: ["buttonLiom6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  backgrond: typeof Backgrond;
  headerLiom: typeof HeaderLiom;
  timer: typeof Timer;
  buttonLiom: typeof ButtonLiom;
  buttonLiom3: typeof ButtonLiom;
  collapse3: typeof AntdSingleCollapse;
  buttonLiom7: typeof ButtonLiom;
  buttonLiom4: typeof ButtonLiom;
  lottie: typeof LottieWrapper;
  apiRequest: typeof ApiRequest;
  textArea: typeof AntdTextArea;
  dialog: typeof Paziresh24Dialog;
  apiRequest2: typeof ApiRequest;
  link: "a";
  h2: "h2";
  paziresh24LineClamp: typeof Paziresh24LineClamp;
  cardSubtitle: "span";
  dialog2: typeof Paziresh24Dialog;
  textArea2: typeof AntdTextArea;
  directDialog: typeof DirectDialog;
  profile: typeof Paziresh24Dialog;
  name: typeof TextInput;
  name2: typeof TextInput;
  code: typeof TextInput;
  select: typeof Select;
  mobile: typeof TextInput;
  email: typeof TextInput;
  gender2: "div";
  radioGrop: typeof RadioGrop;
  textArea3: typeof AntdTextArea;
  buttonLiom5: typeof ButtonLiom;
  embedHtml: typeof Embed;
  buttonLiom6: typeof ButtonLiom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResult__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResult__VariantsArgs;
    args?: PlasmicResult__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResult__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicResult__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResult__ArgProps,
          internalVariantPropNames: PlasmicResult__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResult__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResult";
  } else {
    func.displayName = `PlasmicResult.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicResult = Object.assign(
  // Top-level PlasmicResult renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    backgrond: makeNodeComponent("backgrond"),
    headerLiom: makeNodeComponent("headerLiom"),
    timer: makeNodeComponent("timer"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    buttonLiom3: makeNodeComponent("buttonLiom3"),
    collapse3: makeNodeComponent("collapse3"),
    buttonLiom7: makeNodeComponent("buttonLiom7"),
    buttonLiom4: makeNodeComponent("buttonLiom4"),
    lottie: makeNodeComponent("lottie"),
    apiRequest: makeNodeComponent("apiRequest"),
    textArea: makeNodeComponent("textArea"),
    dialog: makeNodeComponent("dialog"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    link: makeNodeComponent("link"),
    h2: makeNodeComponent("h2"),
    paziresh24LineClamp: makeNodeComponent("paziresh24LineClamp"),
    cardSubtitle: makeNodeComponent("cardSubtitle"),
    dialog2: makeNodeComponent("dialog2"),
    textArea2: makeNodeComponent("textArea2"),
    directDialog: makeNodeComponent("directDialog"),
    profile: makeNodeComponent("profile"),
    _name: makeNodeComponent("name"),
    name2: makeNodeComponent("name2"),
    code: makeNodeComponent("code"),
    select: makeNodeComponent("select"),
    mobile: makeNodeComponent("mobile"),
    email: makeNodeComponent("email"),
    gender2: makeNodeComponent("gender2"),
    radioGrop: makeNodeComponent("radioGrop"),
    textArea3: makeNodeComponent("textArea3"),
    buttonLiom5: makeNodeComponent("buttonLiom5"),
    embedHtml: makeNodeComponent("embedHtml"),
    buttonLiom6: makeNodeComponent("buttonLiom6"),

    // Metadata about props expected for PlasmicResult
    internalVariantProps: PlasmicResult__VariantProps,
    internalArgProps: PlasmicResult__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | نتیجه تست",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResult;
/* prettier-ignore-end */
