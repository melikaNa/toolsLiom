// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3zKPdhWckw1SJpPYhK46Bs
// Component: AcKRuy7PeRlH

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import Backgrond from "../../Backgrond"; // plasmic-import: nqaGqDTn_cay/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import LoadingConclusion from "../../LoadingConclusion"; // plasmic-import: 4McqJ57YwWl3/component
import HeaderLiom from "../../HeaderLiom"; // plasmic-import: 2aT3CU7PBGyt/component
import Paziresh24Avatar from "../../Paziresh24Avatar"; // plasmic-import: zljt-TXjec48/component
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import Paziresh24Button from "../../Paziresh24Button"; // plasmic-import: YOhw5fIQJQgB/component
import ButtonLiom from "../../ButtonLiom"; // plasmic-import: HjsnDydNfnF-/component
import PercentageBox from "../../PercentageBox"; // plasmic-import: twduJO0v7B8-/component
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Icons from "../../Icons"; // plasmic-import: 1fNx7Q7E4s-Q/component
import HamdastUtilsOpenLink from "../../HamdastUtilsOpenLink"; // plasmic-import: RRKFlqCHeJfP/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: g07aZqGDQhtB/codeComponent
import Stars from "../../Stars"; // plasmic-import: wwNNSLKePNyr/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import Paziresh24Dialog from "../../Paziresh24Dialog"; // plasmic-import: ZGdhyEBPJSmH/component
import Alert from "../../Alert"; // plasmic-import: K1JUp41_NKIi/component
import Paziresh24LineClamp from "../../Paziresh24LineClamp"; // plasmic-import: xFfrwlkCaWS8/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: Qg_AcB6aGxxK/globalVariant
import {
  UnnamedGlobalGroupOfVariantsValue,
  useUnnamedGlobalGroupOfVariants
} from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: gDFLJp69n7ET/globalVariant
import { useScreenVariants as useScreenVariantsqiBuxNlixBgQ } from "../paziresh_24_design_system/PlasmicGlobalVariant__Screen"; // plasmic-import: QiBUXNlixBgQ/globalVariant
import { useScreenVariants as useScreenVariantsyg4Uf6WCaaLe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: YG4uf6WCaaLe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic.module.css"; // plasmic-import: 6HBcNwr8dz9LuS1Qe36xa5/projectcss
import plasmic_hamdast_sdk_css from "../hamdast_sdk/plasmic.module.css"; // plasmic-import: 9yPKYrtYPnCNEj6BTTfHnY/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3zKPdhWckw1SJpPYhK46Bs/projectcss
import sty from "./PlasmicResult.module.css"; // plasmic-import: AcKRuy7PeRlH/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: 3GJi3NV2X6Zg/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: ZqTOLr82hcYp/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: C9T5fGoOgKRV/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: K1zqSSDSpUrs/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: Us1K_hl1D5h1/icon
import ChevronUpIcon from "./icons/PlasmicIcon__ChevronUp"; // plasmic-import: s9eeF5PzS4-y/icon
import Icon136Icon from "./icons/PlasmicIcon__Icon136"; // plasmic-import: e82dJRWQjnC2/icon
import Icon125Icon from "./icons/PlasmicIcon__Icon125"; // plasmic-import: b8AgXrwwp9nu/icon
import Icon127Icon from "./icons/PlasmicIcon__Icon127"; // plasmic-import: HCowqgxIwEnQ/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: E5qGXuJrSxC-/icon
import Icon113Icon from "./icons/PlasmicIcon__Icon113"; // plasmic-import: 2DtIAeAc823f/icon
import Icon116Icon from "./icons/PlasmicIcon__Icon116"; // plasmic-import: uviv-WPVJzuw/icon
import Icon118Icon from "./icons/PlasmicIcon__Icon118"; // plasmic-import: DnG_0B8ScC9o/icon
import Icon117Icon from "./icons/PlasmicIcon__Icon117"; // plasmic-import: v74DW-fSFwuD/icon
import Icon81Icon from "./icons/PlasmicIcon__Icon81"; // plasmic-import: T-0eOWny5WJq/icon
import Icon124Icon from "./icons/PlasmicIcon__Icon124"; // plasmic-import: gcJesfCMo05Y/icon

import { random as __lib_lodash__random } from "lodash";
import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicResult__VariantMembers = {};
export type PlasmicResult__VariantsArgs = {};
type VariantPropType = keyof PlasmicResult__VariantsArgs;
export const PlasmicResult__VariantProps = new Array<VariantPropType>();

export type PlasmicResult__ArgsType = {};
type ArgPropType = keyof PlasmicResult__ArgsType;
export const PlasmicResult__ArgProps = new Array<ArgPropType>();

export type PlasmicResult__OverridesType = {
  root?: Flex__<"div">;
  modal?: Flex__<typeof AntdModal>;
  backgrond?: Flex__<typeof Backgrond>;
  headerLiom?: Flex__<typeof HeaderLiom>;
  timer?: Flex__<typeof Timer>;
  buttonLiom?: Flex__<typeof ButtonLiom>;
  collapse3?: Flex__<typeof AntdSingleCollapse>;
  buttonLiom2?: Flex__<typeof ButtonLiom>;
  icons?: Flex__<typeof Icons>;
  buttonLiom4?: Flex__<typeof ButtonLiom>;
  apiRequest?: Flex__<typeof ApiRequest>;
  textArea?: Flex__<typeof AntdTextArea>;
  dialog?: Flex__<typeof Paziresh24Dialog>;
  apiRequest2?: Flex__<typeof ApiRequest>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  h2?: Flex__<"h2">;
  paziresh24LineClamp?: Flex__<typeof Paziresh24LineClamp>;
  cardSubtitle?: Flex__<"span">;
  section?: Flex__<"section">;
  dialog2?: Flex__<typeof Paziresh24Dialog>;
  textArea2?: Flex__<typeof AntdTextArea>;
};

export interface DefaultResultProps {}

const $$ = {
  lodash: {
    random: __lib_lodash__random
  },
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicResult__RenderFunc(props: {
  variants: PlasmicResult__VariantsArgs;
  args: PlasmicResult__ArgsType;
  overrides: PlasmicResult__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.level == 3 && !$state.apiRequest.loading
                ? false
                : true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadingConclusion",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0622\u0646\u0627\u0644\u06cc\u0632 \u067e\u0627\u0633\u062e \u0647\u0627\u06cc \u0634\u0645\u0627",
          "\u0628\u0631\u0631\u0633\u06cc \u0634\u0627\u062e\u0635 \u0647\u0627\u06cc \u0627\u0631\u0632\u06cc\u0627\u0628\u06cc",
          "\u0622\u0645\u0627\u062f\u0647 \u0633\u0627\u0632\u06cc \u0646\u062a\u06cc\u062c\u0647"
        ]
      },
      {
        path: "level",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "buttonLiom.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "apiRequest2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest2.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "action",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "collapse3[].open",
        type: "private",
        variableType: "boolean",

        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "rate",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "loadbtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "disable",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "buttonLiom4[].color",
        type: "private",
        variableType: "text"
      },
      {
        path: "resultlist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const details = $state.apiRequest.data.details;
                const maxScore = Math.max(
                  ...details.map(item => parseInt(item.score) || 0)
                );
                const filteredItems =
                  details.filter(item => item.score > 80).length > 0
                    ? details.filter(item => item.score > 80)
                    : details.filter(item => item.score > 70).length > 0
                    ? details.filter(item => item.score > 70)
                    : details.filter(item => item.score > 60).length > 0
                    ? details.filter(item => item.score > 60)
                    : details.filter(item => item.score > 50).length > 0
                    ? details.filter(item => item.score > 50)
                    : details.filter(item => parseInt(item.score) === maxScore);
                return filteredItems;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "todo",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                var a = $state.apiRequest.data.details.filter(
                  item => item.advice_text != null && item.task !== ""
                );
                var newItem = [];
                a.forEach(item => {
                  let result = $state.apiRequest.data.extras.find(
                    a => a.type === item.option_metric
                  );
                  if (
                    result &&
                    result.isDone !== undefined &&
                    result.isDone !== 1
                  ) {
                    newItem.push({
                      ...item,
                      task: `برای اطمینان بیشتر، تست تکمیلی ${item.option_metric_fa} را انجام دهید`,
                      option_metric: item.option_metric + "1"
                    });
                  }
                });
                newItem.forEach(item => {
                  a.unshift(item);
                });
                return a;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "buttonLiom2.color",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "yellow"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants(),
    screen: useScreenVariantsqiBuxNlixBgQ(),
    screen: useScreenVariantsyg4Uf6WCaaLe()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicResult.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicResult.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicResult.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_paziresh_24_design_system_css.plasmic_tokens,
            plasmic_hamdast_sdk_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                ),
              [sty.rootglobal_unnamedGlobalGroupOfVariants_unnamedVariant_global_theme_dark]:
                hasVariant(globalVariants, "theme", "dark") &&
                hasVariant(
                  globalVariants,
                  "unnamedGlobalGroupOfVariants",
                  "unnamedVariant"
                )
            }
          )}
          onLoad={async event => {
            const $steps = {};

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://api.liom.app/service/log",
                      undefined,
                      (() => {
                        try {
                          return {
                            userId: new URLSearchParams(
                              window.location.search
                            ).get("user-id"),
                            pageName: "result",
                            action: "onLoad",
                            extraData: {}
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      {
                        headers: {
                          "Content-Type": "application/json",
                          Authorization:
                            "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                        }
                      }
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
        >
          <AntdModal
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            className={classNames("__wab_instance", sty.modal)}
            closeIcon={null}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_paziresh_24_design_system_css.plasmic_tokens,
              plasmic_hamdast_sdk_css.plasmic_tokens
            )}
            hideFooter={true}
            maskClosable={false}
            modalContentClassName={classNames({
              [sty["pcls_E8b_Q8Grg3ng"]]: true
            })}
            modalScopeClassName={sty["modal__modal"]}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
            trigger={null}
            width={"100vw"}
          >
            <Backgrond
              data-plasmic-name={"backgrond"}
              data-plasmic-override={overrides.backgrond}
              className={classNames("__wab_instance", sty.backgrond)}
              liom={(() => {
                try {
                  return $ctx.query.app == "liom";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div className={classNames(projectcss.all, sty.freeBox__xSFO)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tAoo6)}
                >
                  {(() => {
                    try {
                      return (
                        new URLSearchParams(
                          new URL(window.location.href).search
                        ).get("Share") != "true"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Reveal
                      big={false}
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__fi7Ih
                      )}
                      direction={"up"}
                      effect={"fade"}
                      triggerOnce={false}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.loadingConclusion;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LoadingConclusion
                            className={classNames(
                              "__wab_instance",
                              sty.loadingConclusion__c2ALm
                            )}
                            fouse={(() => {
                              try {
                                return currentIndex == $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            selected={(() => {
                              try {
                                return currentIndex < $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4OXwR
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "..";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LoadingConclusion>
                        );
                      })}
                    </Reveal>
                  ) : null}
                  {(() => {
                    try {
                      return (
                        new URLSearchParams(
                          new URL(window.location.href).search
                        ).get("Share") == "true"
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Reveal
                      big={false}
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__n80Lm
                      )}
                      direction={"up"}
                      effect={"fade"}
                      triggerOnce={false}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return ["درحال بازیابی اطلاعات"];
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LoadingConclusion
                            className={classNames(
                              "__wab_instance",
                              sty.loadingConclusion__qkst
                            )}
                            fouse={(() => {
                              try {
                                return currentIndex == $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                            key={currentIndex}
                            selected={(() => {
                              try {
                                return currentIndex < $state.level;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xzUxX
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "..";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </LoadingConclusion>
                        );
                      })}
                    </Reveal>
                  ) : null}
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__tOJjM)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w8PzZ
                    )}
                  >
                    {
                      "\u0644\u0637\u0641\u0627 \u06a9\u0645\u06cc \u0645\u0646\u062a\u0638\u0631 \u0628\u0645\u0627\u0646\u06cc\u062f"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zuZtW,
                      "dots"
                    )}
                  >
                    {""}
                  </div>
                </div>
              </div>
            </Backgrond>
          </AntdModal>
          {(() => {
            try {
              return (
                new URLSearchParams(window.location.search).get("inApp") !=
                "true"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <HeaderLiom
              data-plasmic-name={"headerLiom"}
              data-plasmic-override={overrides.headerLiom}
              className={classNames("__wab_instance", sty.headerLiom)}
              slot={
                <Paziresh24Avatar
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Avatar__etGjv
                  )}
                  src={(() => {
                    try {
                      return "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              }
              slot2={null}
            >
              {"\u0646\u062a\u06cc\u062c\u0647  \u0634\u0645\u0627"}
            </HeaderLiom>
          ) : null}
          <Timer
            data-plasmic-name={"timer"}
            data-plasmic-override={overrides.timer}
            className={classNames("__wab_instance", sty.timer)}
            intervalSeconds={5}
            isRunning={true}
            onTick={async () => {
              const $steps = {};

              $steps["updateLevel"] =
                $state.level < 3
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["level"]
                        },
                        operation: 0,
                        value: $state.level + 1
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateLevel"] != null &&
                typeof $steps["updateLevel"] === "object" &&
                typeof $steps["updateLevel"].then === "function"
              ) {
                $steps["updateLevel"] = await $steps["updateLevel"];
              }
            }}
            runWhileEditing={false}
          />

          <div className={classNames(projectcss.all, sty.freeBox__tktV)}>
            <Paziresh24Button
              className={classNames(
                "__wab_instance",
                sty.paziresh24Button___2SVaX
              )}
              endIcon={
                <ChevronLeftIcon
                  className={classNames(projectcss.all, sty.svg__eRGxr)}
                  role={"img"}
                />
              }
              startIcon={
                <ChevronRightIcon
                  className={classNames(projectcss.all, sty.svg__pGoTa)}
                  role={"img"}
                />
              }
            />

            <ButtonLiom
              data-plasmic-name={"buttonLiom"}
              data-plasmic-override={overrides.buttonLiom}
              className={classNames("__wab_instance", sty.buttonLiom)}
              color={generateStateValueProp($state, ["buttonLiom", "color"])}
              onColorChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["buttonLiom", "color"])(
                    eventArgs[0]
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
            />
          </div>
          {(() => {
            try {
              return (
                $state.apiRequest.data && $state.apiRequest.data.our_message
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hvSte)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tz4Er
                )}
              >
                {
                  "\u0628\u0631 \u0627\u0633\u0627\u0633 \u067e\u0627\u0633\u062e \u0647\u0627\u06cc \u0634\u0645\u0627\u060c \u062a\u0634\u062e\u06cc\u0635 \u0645\u0627 \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0627\u0633\u062a:"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aSXm
                )}
              >
                <div
                  className={projectcss.__wab_expr_html_text}
                  dangerouslySetInnerHTML={{
                    __html: (() => {
                      try {
                        return $state.apiRequest.data.our_message.split(
                          "همچنین"
                        )[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0641\u0635\u06cc\u0644\u06cc \u062e\u0648\u062f\u062a\u0634\u062e\u06cc\u0635\u06cc";
                        }
                        throw e;
                      }
                    })()
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__iiNee)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.resultlist;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sy1Ij)}
                      key={currentIndex}
                      style={(() => {
                        try {
                          return {
                            border: currentItem.more
                              ? "solid 2px #ffffff"
                              : currentItem.option_metric == "endometriosis" ||
                                currentItem.option_metric == "uterineFibroids"
                              ? "solid 1px #FAAD14"
                              : ""
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      {(() => {
                        try {
                          return !currentItem.more;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lwrUx
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jSzzL
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___99TDe
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.option_metric_fa;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(() => {
                              try {
                                return currentItem.badge != null;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PercentageBox
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentageBox__wTlKj
                                )}
                                unnamedGroupOfVariants={(() => {
                                  try {
                                    return (() => {
                                      let score = parseInt(currentItem.score);
                                      let color =
                                        score >= 80
                                          ? "red"
                                          : score >= 70
                                          ? "oreng"
                                          : score >= 60
                                          ? "yellow"
                                          : score >= 50
                                          ? "blue"
                                          : score >= 40
                                          ? ""
                                          : "";
                                      return color;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "red";
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__j0SxV
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.badge;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "99 % ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </PercentageBox>
                            ) : null}
                          </Stack__>
                        </Stack__>
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.hint;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                        ? (() => {
                            const child$Props = {
                              bordered: false,
                              className: classNames(
                                "__wab_instance",
                                sty.collapse3
                              ),
                              disabled: (() => {
                                try {
                                  return !currentItem.advice_text;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              expandIcon: (
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        $state.collapse2[currentIndex].open !=
                                        true
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__pqmT2)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"15px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/liom_tools/images/image32.svg",
                                        fullWidth: 16,
                                        fullHeight: 16,
                                        aspectRatio: 1
                                      }}
                                    />
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        $state.collapse2[currentIndex].open ==
                                        true
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__hd3Nm)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"25px"}
                                      loading={"lazy"}
                                      src={{
                                        src: "/plasmic/liom_tools/images/image31.svg",
                                        fullWidth: 16,
                                        fullHeight: 16,
                                        aspectRatio: 1
                                      }}
                                    />
                                  ) : null}
                                </React.Fragment>
                              ),
                              expandIconPosition: "end",
                              ghost: true,
                              label2: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___7BxPb
                                  )}
                                >
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return (() => {
                                            if (
                                              currentItem.option_metric ==
                                                "endometriosis" ||
                                              currentItem.option_metric ==
                                                "uterineFibroids"
                                            )
                                              return (
                                                currentItem.hint +
                                                " . " +
                                                `<br> <b  style="color: #D48806;"> نکته مهم : </b><b  style="color: #D48806;"> برای تشخیص قطعی این بیماری، نیاز به سونوگرافی است. </b>`
                                              );
                                            else return currentItem.hint;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u062a\u0648\u0636\u06cc\u062d \u0631\u0627\u062c\u0628 \u0628\u0686\u0647";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                </div>
                              ),
                              onChange: async (...eventArgs: any) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "open",
                                  ["collapse3", __plasmic_idx_0, "open"],
                                  AntdSingleCollapse_Helpers
                                ).apply(null, eventArgs);

                                (async activeIds => {
                                  const $steps = {};

                                  $steps["invokeGlobalAction"] =
                                    $state.collapse2[currentIndex].open == true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "POST",
                                              "https://api.liom.app/service/log",
                                              undefined,
                                              (() => {
                                                try {
                                                  return {
                                                    userId: $ctx.query.user_id,
                                                    pageName: "result",
                                                    action: "Show-more",
                                                    extraData: {
                                                      sessionId:
                                                        $ctx.query.session_id
                                                    }
                                                  };
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              {
                                                headers: {
                                                  "Content-Type":
                                                    "application/json",
                                                  Authorization:
                                                    "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                                }
                                              }
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["invokeGlobalAction"] != null &&
                                    typeof $steps["invokeGlobalAction"] ===
                                      "object" &&
                                    typeof $steps["invokeGlobalAction"].then ===
                                      "function"
                                  ) {
                                    $steps["invokeGlobalAction"] = await $steps[
                                      "invokeGlobalAction"
                                    ];
                                  }
                                }).apply(null, eventArgs);
                              },
                              open: generateStateValueProp($state, [
                                "collapse3",
                                __plasmic_idx_0,
                                "open"
                              ]),
                              showArrow: true,
                              size: "small"
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "open",
                                  plasmicStateName: "collapse3[].open"
                                }
                              ],
                              [__plasmic_idx_0],
                              AntdSingleCollapse_Helpers ?? {},
                              child$Props
                            );
                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "collapse3[].open",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    undefined
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <AntdSingleCollapse
                                data-plasmic-name={"collapse3"}
                                data-plasmic-override={overrides.collapse3}
                                {...child$Props}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nxiCy
                                  )}
                                >
                                  <div
                                    className={projectcss.__wab_expr_html_text}
                                    dangerouslySetInnerHTML={{
                                      __html: (() => {
                                        try {
                                          return currentItem.advice_text;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u26a0\ufe0f \u0628\u0631\u0627\u06cc \u062f\u0642\u06cc\u0642 \u062a\u0631 \u0634\u062f\u0646 \u0646\u062a\u06cc\u062c\u0647\u060c \u062a\u0633\u062a \u062a\u06a9\u0645\u06cc\u0644\u06cc \u0631\u0648 \u0627\u0646\u062c\u0627\u0645 \u0628\u062f\u06cc\u062f";
                                          }
                                          throw e;
                                        }
                                      })()
                                    }}
                                  />
                                </div>
                              </AntdSingleCollapse>
                            );
                          })()
                        : null}
                      {(() => {
                        try {
                          return currentItem.more;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wynIw
                          )}
                        >
                          {
                            "\u0645\u0648\u0627\u0631\u062f \u0632\u06cc\u0631 \u0627\u0632 \u062f\u06cc\u06af\u0631 \u0639\u0644\u0644 \u0627\u062d\u062a\u0645\u0627\u0644\u06cc \u0646\u0627\u0645\u0646\u0638\u0645 \u0634\u062f\u0646 \u067e\u0631\u06cc\u0648\u062f \u0634\u0645\u0627 \u0645\u06cc \u0628\u0627\u0634\u0646\u062f\u060c \u0628\u0647\u062a\u0631 \u0627\u0633\u062a \u0627\u0628\u062a\u062f\u0627 \u0627\u0646\u0686\u0647 \u062f\u0631 \u0628\u0627\u0644\u0627 \u06af\u0641\u062a\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a \u0631\u0627 \u062f\u0631\u0645\u0627\u0646 \u06a9\u0646\u06cc\u062f \u0648 \u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0627\u0632 \u0622\u0646 \u0645\u0637\u0645\u0626\u0646 \u0634\u062f\u06cc\u062f \u0648 \u0628\u0627\u0632\u0647\u0645 \u067e\u0631\u06cc\u0648\u062f\u062a\u0627\u0646 \u0646\u0627\u0645\u0646\u0638\u0645 \u0634\u062f\u060c \u0628\u0647  \u0645\u0648\u0627\u0631\u062f \u0632\u06cc\u0631 \u062a\u0648\u062c\u0647 \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                      ) : null}
                    </Stack__>
                  );
                })}
                {(() => {
                  try {
                    return (
                      $state.resultlist.length <
                      $state.apiRequest.data.details.length
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__q9Qjc)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateResultlist"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["resultlist"]
                              },
                              operation: 0,
                              value: (() => {
                                const highScores = $state.resultlist;
                                const lowScores =
                                  $state.apiRequest.data.details.filter(
                                    item =>
                                      !highScores.some(
                                        highItem => highItem.id === item.id
                                      )
                                  );
                                return [
                                  ...highScores,
                                  { more: true },
                                  ...lowScores
                                ];
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateResultlist"] != null &&
                        typeof $steps["updateResultlist"] === "object" &&
                        typeof $steps["updateResultlist"].then === "function"
                      ) {
                        $steps["updateResultlist"] = await $steps[
                          "updateResultlist"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lxjOn
                      )}
                    >
                      {
                        "\u0645\u0634\u0627\u0647\u062f\u0647 \u0627\u062d\u062a\u0645\u0627\u0644\u0627\u062a \u062f\u06cc\u06af\u0631"
                      }
                    </div>
                    <ChevronDownIcon
                      className={classNames(projectcss.all, sty.svg__zgok)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                {(() => {
                  try {
                    return (
                      $state.resultlist.length - 1 ==
                        $state.apiRequest.data.details.length &&
                      $state.apiRequest.data.details.length !=
                        $state.apiRequest.data.details.filter(
                          item => item.score > 80 ?? item.score > 0
                        ).length
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__crz8R)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateResultlist"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["resultlist"]
                              },
                              operation: 0,
                              value: (() => {
                                const details = $state.apiRequest.data.details;
                                const maxScore = Math.max(
                                  ...details.map(
                                    item => parseInt(item.score) || 0
                                  )
                                );
                                const filteredItems =
                                  details.filter(item => item.score > 80)
                                    .length > 0
                                    ? details.filter(item => item.score > 80)
                                    : details.filter(item => item.score > 70)
                                        .length > 0
                                    ? details.filter(item => item.score > 70)
                                    : details.filter(item => item.score > 60)
                                        .length > 0
                                    ? details.filter(item => item.score > 60)
                                    : details.filter(item => item.score > 50)
                                        .length > 0
                                    ? details.filter(item => item.score > 50)
                                    : details.filter(
                                        item =>
                                          parseInt(item.score) === maxScore
                                      );
                                return filteredItems;
                              })()
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateResultlist"] != null &&
                        typeof $steps["updateResultlist"] === "object" &&
                        typeof $steps["updateResultlist"].then === "function"
                      ) {
                        $steps["updateResultlist"] = await $steps[
                          "updateResultlist"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qKxO
                      )}
                    >
                      {
                        "\u0645\u0634\u0627\u0647\u062f\u0647  \u06a9\u0645\u062a\u0631"
                      }
                    </div>
                    <ChevronUpIcon
                      className={classNames(projectcss.all, sty.svg__sznxy)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
              </div>
              <ButtonLiom
                data-plasmic-name={"buttonLiom2"}
                data-plasmic-override={overrides.buttonLiom2}
                className={classNames("__wab_instance", sty.buttonLiom2, {
                  [sty.buttonLiom2global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
                color={generateStateValueProp($state, ["buttonLiom2", "color"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["goToPage"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: (() => {
                            try {
                              return `/self-test?user_id=${$ctx.query.user_id}&type=${$ctx.query.type}&app=${$ctx.query.app}&inApp=${$ctx.query.inApp}`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToPage"] != null &&
                    typeof $steps["goToPage"] === "object" &&
                    typeof $steps["goToPage"].then === "function"
                  ) {
                    $steps["goToPage"] = await $steps["goToPage"];
                  }
                }}
                onColorChange={async (...eventArgs: any) => {
                  ((...eventArgs) => {
                    generateStateOnChangeProp($state, ["buttonLiom2", "color"])(
                      eventArgs[0]
                    );
                  }).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                showStartIcon={true}
                size={"compact"}
                startIcon={
                  <Icon136Icon
                    className={classNames(projectcss.all, sty.svg__zPal3)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__z8C5
                  )}
                >
                  {
                    "\u0627\u06af\u0631 \u067e\u0627\u0633\u062e\u200c\u0647\u0627\u06cc \u0642\u0628\u0644\u06cc \u062f\u0642\u06cc\u0642 \u0646\u0628\u0648\u062f\u0646\u062f \u062a\u0633\u062a \u0631\u0627 \u062f\u0648\u0628\u0627\u0631\u0647 \u062a\u06a9\u0631\u0627\u0631 \u06a9\u0646\u06cc\u062f."
                  }
                </div>
              </ButtonLiom>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return (
                $state.apiRequest.data && $state.apiRequest.data.our_message
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__f1R9S)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wQiNp
                )}
              >
                {
                  "\u0627\u0644\u0627\u0646 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645\u061f"
                }
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mGj9Z
                )}
              >
                {
                  "\u0628\u0627 \u062a\u0648\u062c\u0647 \u0628\u0647 \u062a\u0634\u062e\u06cc\u0635 \u0627\u0646\u062c\u0627\u0645 \u0634\u062f\u0647\u060c \u067e\u06cc\u0634\u0646\u0647\u0627\u062f \u0645\u06cc\u06a9\u0646\u0645 \u06a9\u0627\u0631 \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f:"
                }
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.todo;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ryI9S)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m5OMm)}
                      style={(() => {
                        try {
                          return {
                            "border-bottom":
                              currentIndex !==
                              $state.todo.filter(
                                item =>
                                  item.advice_text != null && item.task != ""
                              ).length -
                                1
                                ? "solid 1px #e5e5e5"
                                : "none"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6HD7F
                        )}
                      >
                        <Icons
                          data-plasmic-name={"icons"}
                          data-plasmic-override={overrides.icons}
                          apiRequestData={$state.apiRequestData}
                          className={classNames("__wab_instance", sty.icons)}
                          currentItem={currentItem}
                          unnamedGroupOfVariants={(() => {
                            try {
                              return (() => {
                                let result = $state.apiRequest.data.extras.find(
                                  a =>
                                    a.type ===
                                    currentItem.option_metric.slice(0, -1)
                                );
                                if (currentItem.action !== "") return "d";
                                else if (
                                  result
                                    ? result.isDone !== undefined
                                      ? result.isDone !== 1
                                      : false
                                    : false
                                )
                                  return "t";
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                        />

                        {(() => {
                          try {
                            return currentItem.badge != null;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <PercentageBox
                            className={classNames(
                              "__wab_instance",
                              sty.percentageBox__t9USj
                            )}
                            shape={"square"}
                            unnamedGroupOfVariants={"unnamedVariant"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Wh6M
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.badge;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "99 % ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rVwS
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return currentItem.task;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </PercentageBox>
                        ) : null}
                      </Stack__>
                      {(() => {
                        try {
                          return $ctx.query.Share != "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lc50W
                          )}
                        >
                          {(() => {
                            try {
                              return currentItem.action !== "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Paziresh24Button
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__m6YcP
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__e4XVa,
                                      (() => {
                                        try {
                                          return undefined;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "animashen";
                                          }
                                          throw e;
                                        }
                                      })()
                                    )}
                                  >
                                    {
                                      "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 "
                                    }
                                  </div>
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.paziresh24Button___7Fk4A
                              )}
                              endIcon={
                                <Icon125Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___5Ph1M
                                  )}
                                  role={"img"}
                                />
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["action"]
                                        },
                                        operation: 0,
                                        value: currentItem.action
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateAction"] != null &&
                                  typeof $steps["updateAction"] === "object" &&
                                  typeof $steps["updateAction"].then ===
                                    "function"
                                ) {
                                  $steps["updateAction"] = await $steps[
                                    "updateAction"
                                  ];
                                }

                                $steps["updateDialogOpen"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["dialog", "open"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateDialogOpen"] != null &&
                                  typeof $steps["updateDialogOpen"] ===
                                    "object" &&
                                  typeof $steps["updateDialogOpen"].then ===
                                    "function"
                                ) {
                                  $steps["updateDialogOpen"] = await $steps[
                                    "updateDialogOpen"
                                  ];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://api.liom.app/service/log",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                userId: $ctx.query.user_id,
                                                pageName: "result",
                                                action: "Doctor-visit",
                                                extraData: {
                                                  sessionId:
                                                    $ctx.query.session_id,
                                                  action: $state.action
                                                }
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })(),
                                          {
                                            headers: {
                                              "Content-Type":
                                                "application/json",
                                              Authorization:
                                                "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                            }
                                          }
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                              size={"compact"}
                              startIcon={
                                <Icon125Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__kooxA
                                  )}
                                  role={"img"}
                                />
                              }
                            />
                          ) : null}
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $ctx.query.Share != "true";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ppv1R
                          )}
                        >
                          <HamdastUtilsOpenLink
                            className={classNames(
                              "__wab_instance",
                              sty.hamdastUtilsOpenLink__myKf4
                            )}
                            destination={(() => {
                              try {
                                return `https://tools.liom.app/self-test?user_id=${
                                  $ctx.query.user_id
                                }&type=${currentItem.option_metric.slice(
                                  0,
                                  -1
                                )}&nextQuesion_id=${
                                  $state.apiRequest.data.extras.find(
                                    a =>
                                      a.type ===
                                      currentItem.option_metric.slice(0, -1)
                                  ).next_question_id
                                }&session_id=${$ctx.query.session_id}&app=${
                                  $ctx.query.app
                                }`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            openInNewTab={true}
                          >
                            {(() => {
                              try {
                                return (() => {
                                  let result =
                                    $state.apiRequest.data.extras.find(
                                      a =>
                                        a.type ===
                                        currentItem.option_metric.slice(0, -1)
                                    );
                                  return result
                                    ? result.isDone !== undefined
                                      ? result.isDone !== 1
                                      : false
                                    : false;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.buttonLiom4
                                    ),
                                    color: generateStateValueProp($state, [
                                      "buttonLiom4",
                                      __plasmic_idx_0,
                                      "color"
                                    ]),
                                    isDisabled: (() => {
                                      try {
                                        return undefined;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })(),
                                    onClick: async event => {
                                      const $steps = {};

                                      $steps["updateLoading"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["loading"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateLoading"] != null &&
                                        typeof $steps["updateLoading"] ===
                                          "object" &&
                                        typeof $steps["updateLoading"].then ===
                                          "function"
                                      ) {
                                        $steps["updateLoading"] = await $steps[
                                          "updateLoading"
                                        ];
                                      }

                                      $steps["goToPage"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              destination: (() => {
                                                try {
                                                  return `/self-test?user_id=${
                                                    $ctx.query.user_id
                                                  }&type=${currentItem.option_metric.option_metric.slice(
                                                    0,
                                                    -1
                                                  )}&nextQuesion_id=${
                                                    $state.apiRequest.data.extras.find(
                                                      a =>
                                                        a.type ==
                                                        currentItem.option_metric.option_metric.slice(
                                                          0,
                                                          -1
                                                        )
                                                    ).next_question_id
                                                  }&session_id=${
                                                    $ctx.query.session_id
                                                  }&app=${
                                                    $ctx.query.app
                                                  }&inApp=${$ctx.query.inApp}`;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            };
                                            return (({ destination }) => {
                                              if (
                                                typeof destination ===
                                                  "string" &&
                                                destination.startsWith("#")
                                              ) {
                                                document
                                                  .getElementById(
                                                    destination.substr(1)
                                                  )
                                                  .scrollIntoView({
                                                    behavior: "smooth"
                                                  });
                                              } else {
                                                __nextRouter?.push(destination);
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["goToPage"] != null &&
                                        typeof $steps["goToPage"] ===
                                          "object" &&
                                        typeof $steps["goToPage"].then ===
                                          "function"
                                      ) {
                                        $steps["goToPage"] = await $steps[
                                          "goToPage"
                                        ];
                                      }

                                      $steps["updateLoading2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["loading"]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateLoading2"] != null &&
                                        typeof $steps["updateLoading2"] ===
                                          "object" &&
                                        typeof $steps["updateLoading2"].then ===
                                          "function"
                                      ) {
                                        $steps["updateLoading2"] = await $steps[
                                          "updateLoading2"
                                        ];
                                      }
                                    },
                                    onColorChange: async (
                                      ...eventArgs: any
                                    ) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "buttonLiom4",
                                          __plasmic_idx_0,
                                          "color"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    },
                                    size: "compact"
                                  };

                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "buttonLiom4[].color",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) => undefined
                                      }
                                    ],
                                    [__plasmic_idx_0]
                                  );
                                  return (
                                    <ButtonLiom
                                      data-plasmic-name={"buttonLiom4"}
                                      data-plasmic-override={
                                        overrides.buttonLiom4
                                      }
                                      {...child$Props}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__dlNf
                                        )}
                                      >
                                        {
                                          " \u062a\u0633\u0640\u0640\u062a \u062a\u0640\u0640\u0640\u06a9\u0645\u06cc\u0644\u06cc"
                                        }
                                      </div>
                                    </ButtonLiom>
                                  );
                                })()
                              : null}
                          </HamdastUtilsOpenLink>
                        </div>
                      ) : null}
                    </div>
                  </Stack__>
                );
              })}
            </Stack__>
          ) : null}
          {(() => {
            try {
              return (
                $state.apiRequest.data && $state.apiRequest.data.our_message
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mzAy8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fo0X
                )}
              >
                {
                  "\u0622\u06cc\u0627 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0645\u0631\u0627\u062c\u0639\u0647 \u0641\u0648\u0631\u06cc \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0627\u0633\u062a\u061f "
                }
              </div>
              {(() => {
                try {
                  return $state.apiRequest.data.details.filter(
                    item => parseInt(item.score) >= 80
                  ).length == 0
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__se2Ul,
                    {
                      [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__se2UlYcZU]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                >
                  {
                    '\u062e\u06cc\u0631\u060c \u0646\u06cc\u0627\u0632\u06cc \u0628\u0647 \u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0641\u0639\u0644\u0627 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f. \u0645\u0648\u0627\u0631\u062f\u06cc \u06a9\u0647 \u062f\u0631 \u0628\u062e\u0634 "\u0627\u0644\u0627\u0646 \u0628\u0627\u06cc\u062f \u0686\u06cc\u06a9\u0627\u0631 \u06a9\u0646\u0645\u061f" \u0631\u0627 \u0644\u0637\u0641\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0647\u06cc\u062f.'
                  }
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.apiRequest.data.details.filter(
                    item => parseInt(item.score) >= 80
                  ).length == 0
                    ? false
                    : true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fCpeU
                  )}
                >
                  {
                    "\u062f\u0631 \u0645\u0648\u0627\u0631\u062f \u0632\u06cc\u0631 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0645\u0631\u0627\u062c\u0639\u0647 \u0641\u0648\u0631\u06cc \u0628\u0647 \u067e\u0632\u0634\u06a9 \u062f\u0627\u0631\u06cc\u062f \u0648 \u062f\u0631 \u0634\u0631\u0627\u06cc\u0637 \u0627\u0648\u0631\u0698\u0627\u0646\u0633\u06cc \u06cc\u0627 \u0645\u0634\u06a9\u0648\u06a9\u060c \u0628\u0647\u062a\u0631 \u0627\u0633\u062a \u0647\u0645\u06cc\u0634\u0647 \u0628\u0627 \u067e\u0632\u0634\u06a9 \u0645\u0634\u0648\u0631\u062a \u06a9\u0646\u06cc\u062f."
                  }
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.apiRequest.data.details.filter(
                    item => parseInt(item.score) >= 80
                  )
                    ? true
                    : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__ke2Tb)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.apiRequest.data.details.filter(
                          item => parseInt(item.score) >= 80
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3GvY6
                        )}
                        key={currentIndex}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rZgJu
                          )}
                          style={(() => {
                            try {
                              return {
                                "border-bottom":
                                  currentIndex !==
                                  $state.apiRequest.data.details.filter(
                                    item => parseInt(item.score) >= 80
                                  ).length -
                                    1
                                    ? "solid 1px #e5e5e5"
                                    : "none"
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__b45Lz
                            )}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["action"]
                                      },
                                      operation: 0,
                                      value: currentItem.action
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateAction"] != null &&
                                typeof $steps["updateAction"] === "object" &&
                                typeof $steps["updateAction"].then ===
                                  "function"
                              ) {
                                $steps["updateAction"] = await $steps[
                                  "updateAction"
                                ];
                              }

                              $steps["updateDialogOpen"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["dialog", "open"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateDialogOpen"] != null &&
                                typeof $steps["updateDialogOpen"] ===
                                  "object" &&
                                typeof $steps["updateDialogOpen"].then ===
                                  "function"
                              ) {
                                $steps["updateDialogOpen"] = await $steps[
                                  "updateDialogOpen"
                                ];
                              }
                            }}
                          >
                            {(() => {
                              try {
                                return currentItem.badge != null;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <PercentageBox
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentageBox__tFcgs
                                )}
                                unnamedGroupOfVariants={(() => {
                                  try {
                                    return (() => {
                                      let score = parseInt(currentItem.score);
                                      let color =
                                        score >= 80
                                          ? "red"
                                          : score >= 70
                                          ? "oreng"
                                          : score >= 60
                                          ? "yellow"
                                          : score >= 50
                                          ? "blue"
                                          : score >= 40
                                          ? ""
                                          : "";
                                      return color;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "red";
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vtkPr
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.badge;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "99 % ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <Icon127Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___0AgVt,
                                    "animashen"
                                  )}
                                  role={"img"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xXc2
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.option_metric_fa;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u06a9\u0645 \u062e\u0648\u0646\u06cc";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </PercentageBox>
                            ) : null}
                          </Stack__>
                          {(() => {
                            try {
                              return $ctx.query.Share != "true";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zrbb2
                              )}
                            />
                          ) : null}
                        </Stack__>
                      </Stack__>
                    );
                  })}
                </div>
              ) : null}
            </Stack__>
          ) : null}
          <ApiRequest
            data-plasmic-name={"apiRequest"}
            data-plasmic-override={overrides.apiRequest}
            className={classNames("__wab_instance", sty.apiRequest)}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "apiRequest",
                "loading"
              ]).apply(null, eventArgs);
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
                null,
                eventArgs
              );
            }}
            params={(() => {
              try {
                return {
                  session_id:
                    $ctx.query.session_id ||
                    new URLSearchParams(window.location.search).get(
                      "session_id"
                    ),
                  user_id:
                    $ctx.query.user_id ||
                    new URLSearchParams(window.location.search).get("user_id")
                };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            url={"https://n8n.staas.ir/webhook/selfTestLogs"}
          />

          {(() => {
            try {
              return (
                $state.apiRequest.data?.our_message &&
                $state.apiRequest.data?.our_message?.trim() !== ""
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rQkBj)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0YW7K
                )}
              >
                {
                  "\u0646\u062a\u06cc\u062c\u0647 \u062a\u0641\u0635\u06cc\u0644\u06cc \u0628\u0647 \u06a9\u0645\u06a9 \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc"
                }
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vEyWx)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u2Gx8
                  )}
                >
                  <div
                    className={projectcss.__wab_expr_html_text}
                    dangerouslySetInnerHTML={{
                      __html: (() => {
                        try {
                          return $state.apiRequest.data.message;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "...";
                          }
                          throw e;
                        }
                      })()
                    }}
                  />
                </div>
              </div>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return (
                $state.apiRequest.data && $state.apiRequest.data.our_message
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__h7NwZ)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zspZ6
                )}
              >
                {
                  "\u0622\u06cc\u0627 \u0627\u0632 \u0646\u062a\u06cc\u062c\u0647 \u062a\u0633\u062a \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc \u061f"
                }
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cwThE)}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [5, 4, 3, 2, 1];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Stars
                      activ={(() => {
                        try {
                          return currentItem <= $state.rate;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      className={classNames("__wab_instance", sty.stars__vI9Lj)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateRate"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["rate"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateRate"] != null &&
                          typeof $steps["updateRate"] === "object" &&
                          typeof $steps["updateRate"].then === "function"
                        ) {
                          $steps["updateRate"] = await $steps["updateRate"];
                        }

                        $steps["updateDialog2Open"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialog2Open"] != null &&
                          typeof $steps["updateDialog2Open"] === "object" &&
                          typeof $steps["updateDialog2Open"].then === "function"
                        ) {
                          $steps["updateDialog2Open"] = await $steps[
                            "updateDialog2Open"
                          ];
                        }
                      }}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              if (currentItem == 5) return "خیلی زیاد";
                              else if (currentItem == 1) return "نه اصلا";
                              else return "";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </Stars>
                  );
                })}
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__xlHjm)}>
                {false
                  ? (() => {
                      const child$Props = {
                        autoSize: true,
                        className: classNames("__wab_instance", sty.textArea),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["textArea", "value"],
                            AntdTextArea_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder:
                          "\u062e\u0648\u0634\u062d\u0627\u0644 \u0645\u06cc\u200c\u0634\u0645 \u0646\u0638\u0631\u062a\u0648 \u0628\u062f\u0648\u0646\u0645 ...",
                        value: generateStateValueProp($state, [
                          "textArea",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "textArea.value"
                          }
                        ],
                        [],
                        AntdTextArea_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdTextArea
                          data-plasmic-name={"textArea"}
                          data-plasmic-override={overrides.textArea}
                          {...child$Props}
                        />
                      );
                    })()
                  : null}
              </div>
              <Paziresh24Button
                children2={"\u062b\u0628\u062a"}
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__kDEph
                )}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__guVn)}
                    role={"img"}
                  />
                }
                isDisabled={(() => {
                  try {
                    return $state.loadbtn;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                loading={(() => {
                  try {
                    return $state.loadbtn;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateLoadbtn"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadbtn"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoadbtn"] != null &&
                    typeof $steps["updateLoadbtn"] === "object" &&
                    typeof $steps["updateLoadbtn"].then === "function"
                  ) {
                    $steps["updateLoadbtn"] = await $steps["updateLoadbtn"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "PUT",
                            "https://n8n.staas.ir/webhook/selfTest_comments",
                            undefined,
                            (() => {
                              try {
                                return {
                                  user_id: $ctx.query.user_id,
                                  session_id: $ctx.query.session_id,
                                  comment: $state.textArea.value || "",
                                  rate: $state.rate
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["invokeGlobalAction2"] = $steps.invokeGlobalAction
                    ?.data?.success
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "success",
                            "\u062e\u06cc\u0644\u06cc \u062e\u0648\u0634\u062d\u0627\u0644 \u0634\u062f\u06cc\u0645 \u06a9\u0647 \u0646\u0638\u0631\u062a\u0648 \u0628\u0627\u0647\u0627\u0645\u0648\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0634\u062a\u06cc!"
                          ]
                        };
                        return $globalActions[
                          "plasmic-antd5-config-provider.showNotification"
                        ]?.apply(null, [...actionArgs.args]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction2"] != null &&
                    typeof $steps["invokeGlobalAction2"] === "object" &&
                    typeof $steps["invokeGlobalAction2"].then === "function"
                  ) {
                    $steps["invokeGlobalAction2"] = await $steps[
                      "invokeGlobalAction2"
                    ];
                  }

                  $steps["updateLoading2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["loadbtn"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateLoading2"] != null &&
                    typeof $steps["updateLoading2"] === "object" &&
                    typeof $steps["updateLoading2"].then === "function"
                  ) {
                    $steps["updateLoading2"] = await $steps["updateLoading2"];
                  }
                }}
                outline={true}
                size={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "compact"
                    : "compact"
                }
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg___1LpBj)}
                    role={"img"}
                  />
                }
              />

              <Paziresh24Button
                children2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n4XQf
                    )}
                  >
                    {"\u062b\u0628\u062a \u0646\u0638\u0631"}
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__wwEhB
                )}
                endIcon={
                  <ChevronLeftIcon
                    className={classNames(projectcss.all, sty.svg__hs7Et)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateDialog2Open"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["dialog2", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateDialog2Open"] != null &&
                    typeof $steps["updateDialog2Open"] === "object" &&
                    typeof $steps["updateDialog2Open"].then === "function"
                  ) {
                    $steps["updateDialog2Open"] = await $steps[
                      "updateDialog2Open"
                    ];
                  }
                }}
                outline={true}
                size={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "compact"
                    : undefined
                }
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__lcy4S)}
                    role={"img"}
                  />
                }
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $state.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__xqVc8)}>
              <Icon111Icon
                className={classNames(projectcss.all, sty.svg__vXrcx)}
                role={"img"}
              />
            </div>
          ) : null}
          <Paziresh24Dialog
            data-plasmic-name={"dialog"}
            data-plasmic-override={overrides.dialog}
            body={
              <ApiRequest
                data-plasmic-name={"apiRequest2"}
                data-plasmic-override={overrides.apiRequest2}
                className={classNames("__wab_instance", sty.apiRequest2)}
                errorDisplay={null}
                loadingDisplay={
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4MJGg)}
                  >
                    <Icon113Icon
                      className={classNames(projectcss.all, sty.svg__boGu)}
                      role={"img"}
                    />
                  </div>
                }
                method={"GET"}
                onError={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest2",
                    "error"
                  ]).apply(null, eventArgs);
                }}
                onLoading={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest2",
                    "loading"
                  ]).apply(null, eventArgs);
                }}
                onSuccess={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "apiRequest2",
                    "data"
                  ]).apply(null, eventArgs);
                }}
                url={(() => {
                  try {
                    return `https://apigw.paziresh24.com/seapi/v1/search/ir/${
                      !!$state.action ? $state.action : "general-practitioner"
                    }?turn_type=consult`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div className={classNames(projectcss.all, sty.freeBox__m21QZ)}>
                  <Alert
                    className={classNames("__wab_instance", sty.alert__ojW2B)}
                    success={true}
                    text={
                      "\u0628\u062f\u0648\u0646 \u062e\u0631\u0648\u062c \u0627\u0632 \u0645\u0646\u0632\u0644\u060c \u0622\u0646\u0644\u0627\u06cc\u0646 \u0648\u06cc\u0632\u06cc\u062a \u0634\u0648\u06cc\u062f."
                    }
                  />

                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return (() => {
                          const random = $$.lodash.random(0, 2);
                          return [
                            $state.apiRequest2.data.search.result.slice(0, 3)?.[
                              random
                            ]
                          ];
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cIuuh
                        )}
                        key={currentIndex}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__z6AUi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___55QU
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xvU
                              )}
                            >
                              <Paziresh24Avatar
                                alt={(() => {
                                  try {
                                    return currentItem.title;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                                badge={"check"}
                                className={classNames(
                                  "__wab_instance",
                                  sty.paziresh24Avatar__ppn9L
                                )}
                                ring={"green"}
                                src={(() => {
                                  try {
                                    return `https://cdn.paziresh24.com${currentItem.image}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              />
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ncdy0
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___8Mbe
                                )}
                              >
                                <PlasmicLink__
                                  data-plasmic-name={"link"}
                                  data-plasmic-override={overrides.link}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    sty.link
                                  )}
                                  component={Link}
                                  platform={"nextjs"}
                                >
                                  <h2
                                    data-plasmic-name={"h2"}
                                    data-plasmic-override={overrides.h2}
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.h2,
                                      projectcss.__wab_text,
                                      sty.h2
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.title;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "You won't believe what happens next.";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </h2>
                                </PlasmicLink__>
                                <Paziresh24LineClamp
                                  data-plasmic-name={"paziresh24LineClamp"}
                                  data-plasmic-override={
                                    overrides.paziresh24LineClamp
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.paziresh24LineClamp
                                  )}
                                >
                                  <span
                                    data-plasmic-name={"cardSubtitle"}
                                    data-plasmic-override={
                                      overrides.cardSubtitle
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.span,
                                      projectcss.__wab_text,
                                      sty.cardSubtitle
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            if (
                                              currentItem?.expertises?.[1]?.degree?.name?.includes(
                                                "ساب"
                                              )
                                            ) {
                                              return (
                                                currentItem.expertises[0]
                                                  ?.degree?.name +
                                                "-" +
                                                currentItem.expertises[0]
                                                  ?.expertise?.name
                                              );
                                            } else if (
                                              currentItem?.expertises?.[1]
                                            ) {
                                              return (
                                                currentItem.expertises[1].degree
                                                  .name +
                                                " " +
                                                currentItem.expertises[1]
                                                  ?.expertise?.name
                                              );
                                            } else if (
                                              currentItem?.expertises?.[0]
                                            ) {
                                              return (
                                                currentItem.expertises[0].degree
                                                  .name +
                                                " " +
                                                currentItem.expertises[0]
                                                  ?.expertise?.name
                                              );
                                            }
                                            return "کارشناسی ";
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0645\u0634\u0627\u0648\u0631";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </span>
                                </Paziresh24LineClamp>
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vhDZa
                                  )}
                                >
                                  <Icon116Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg___4UogS
                                    )}
                                    role={"img"}
                                  />

                                  <span
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.span,
                                      projectcss.__wab_text,
                                      sty.span__w7U14
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.satisfaction %
                                            20 ===
                                            0
                                            ? currentItem.satisfaction / 20
                                            : (currentItem.satisfaction / 20)
                                                .toFixed(1)
                                                .replace(".0", "");
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return " fggfgf";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </span>
                                  <span
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.span,
                                      projectcss.__wab_text,
                                      sty.span__lTyi
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return `(${currentItem.rates_count} نظر)`;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "(376 \u0646\u0638\u0631)";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </span>
                                </Stack__>
                              </Stack__>
                            </div>
                          </div>
                          <Alert
                            className={classNames(
                              "__wab_instance",
                              sty.alert__bdt9J
                            )}
                            error={true}
                            hasIcon={true}
                            text={
                              "\u062a\u0636\u0645\u06cc\u0646 \u0628\u0627\u0632\u067e\u0631\u062f\u0627\u062e\u062a \u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a \u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u0627\u0631\u0636\u0627\u06cc\u062a\u06cc"
                            }
                          />
                        </div>
                        <HamdastUtilsOpenLink
                          className={classNames(
                            "__wab_instance",
                            sty.hamdastUtilsOpenLink__nMdwz
                          )}
                          destination={(() => {
                            try {
                              return `https://www.paziresh24.com/booking/${currentItem.slug}/?centerId=5532&skipTimeSelectStep=true`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                          openInNewTab={true}
                        >
                          <Paziresh24Button
                            children2={
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return `گفتگو با ${currentItem.display_name}`;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Button";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button__hZeLs
                            )}
                            endIcon={
                              <ChevronLeftIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__s56Rl
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <ChevronRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__v05S
                                )}
                                role={"img"}
                              />
                            }
                          />
                        </HamdastUtilsOpenLink>
                        <HamdastUtilsOpenLink
                          className={classNames(
                            "__wab_instance",
                            sty.hamdastUtilsOpenLink__bfpXh
                          )}
                          destination={
                            "https://www.paziresh24.com/consult?from_recommend_section=1"
                          }
                          openInNewTab={true}
                        >
                          <Paziresh24Button
                            children2={
                              "\u0645\u0634\u0627\u0647\u062f\u0647 \u0633\u0627\u06cc\u0631 \u067e\u0632\u0634\u06a9\u0627\u0646 \u0622\u0646\u0644\u0627\u06cc\u0646"
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.paziresh24Button___3Plz2
                            )}
                            color={"text"}
                            endIcon={
                              <ChevronLeftIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__n6DEw
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <ChevronRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xDfIk
                                )}
                                role={"img"}
                              />
                            }
                          />
                        </HamdastUtilsOpenLink>
                      </Stack__>
                    );
                  })}
                </div>
              </ApiRequest>
            }
            className={classNames("__wab_instance", sty.dialog)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog", "open"])}
            title={null}
            trigger={null}
          />

          {(() => {
            try {
              return (
                $state.level == 3 &&
                !($state.apiRequest.data && $state.apiRequest.data.our_message)
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iL8Gu)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__k4ZuN)}>
                <Icon118Icon
                  className={classNames(projectcss.all, sty.svg__e4MpW)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c0Uj
                  )}
                >
                  {
                    "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a"
                  }
                </div>
              </div>
              <Paziresh24Button
                children2={
                  "\u0628\u0627\u0631\u06af\u0632\u0627\u0631\u06cc \u0645\u062c\u062f\u062f"
                }
                className={classNames(
                  "__wab_instance",
                  sty.paziresh24Button__q7Gs
                )}
                color={"softGreen"}
                endIcon={
                  <Icon117Icon
                    className={classNames(projectcss.all, sty.svg__q7RiQ)}
                    role={"img"}
                  />
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.location.reload();
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                shape={"rounded"}
                showEndIcon={true}
                startIcon={
                  <ChevronRightIcon
                    className={classNames(projectcss.all, sty.svg__nziFq)}
                    role={"img"}
                  />
                }
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $state.level == 3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cgHuj, {
                  [sty.freeBoxglobal_unnamedGlobalGroupOfVariants_unnamedVariant__cgHujYcZU]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants",
                      "unnamedVariant"
                    )
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return (() => {
                        const filteredItems =
                          $state.apiRequest.data.details.filter(
                            item =>
                              item.advice_text != null && item.action != ""
                          );
                        if (filteredItems.length > 0) {
                          const randomIndex = Math.floor(
                            Math.random() * filteredItems.length
                          );
                          return filteredItems[randomIndex];
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Paziresh24Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sizyW
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fcfJr
                            )}
                          >
                            {
                              "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0622\u0646\u0644\u0627\u06cc\u0646"
                            }
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xiqgZ
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "  (جهت موضوع " +
                                    currentItem.option_metric_fa +
                                    ")  "
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0631\u0627\u062c\u0639\u0647 \u0628\u0647 \u067e\u0632\u0634\u06a9 \u0622\u0646\u0644\u0627\u06cc\u0646";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button__bQwg
                      )}
                      endIcon={
                        <Icon125Icon
                          className={classNames(projectcss.all, sty.svg__ycWz4)}
                          role={"img"}
                        />
                      }
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateAction"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["action"]
                                },
                                operation: 0,
                                value: currentItem.action
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateAction"] != null &&
                          typeof $steps["updateAction"] === "object" &&
                          typeof $steps["updateAction"].then === "function"
                        ) {
                          $steps["updateAction"] = await $steps["updateAction"];
                        }

                        $steps["updateDialogOpen"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialogOpen"] != null &&
                          typeof $steps["updateDialogOpen"] === "object" &&
                          typeof $steps["updateDialogOpen"].then === "function"
                        ) {
                          $steps["updateDialogOpen"] = await $steps[
                            "updateDialogOpen"
                          ];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.liom.app/service/log",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userId: $ctx.query.user_id,
                                        pageName: "result",
                                        action: "Doctor-visit",
                                        extraData: {
                                          sessionId: $ctx.query.session_id,
                                          action: $state.action
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  {
                                    headers: {
                                      "Content-Type": "application/json",
                                      Authorization:
                                        "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiaGFteWFyIiwiaWQiOjF9.lnqUqAP4PBM0ygfBoBEcDPQz6owyyNXCreKqjjsYcAM"
                                    }
                                  }
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      showStartIcon={true}
                      startIcon={
                        <Icon125Icon
                          className={classNames(projectcss.all, sty.svg__oiRsc)}
                          role={"img"}
                        />
                      }
                    />
                  );
                })}
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return [0];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <Paziresh24Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uIu4M
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dySaV
                            )}
                          >
                            {
                              "\u0622\u06cc\u0627 \u0627\u0632 \u0646\u062a\u06cc\u062c\u0647 \u062a\u0633\u062a \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc \u061f"
                            }
                          </div>
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.paziresh24Button___63KbV
                      )}
                      endIcon={
                        <Icon125Icon
                          className={classNames(projectcss.all, sty.svg__qPkO)}
                          role={"img"}
                        />
                      }
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDialog2Open"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dialog2", "open"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDialog2Open"] != null &&
                          typeof $steps["updateDialog2Open"] === "object" &&
                          typeof $steps["updateDialog2Open"].then === "function"
                        ) {
                          $steps["updateDialog2Open"] = await $steps[
                            "updateDialog2Open"
                          ];
                        }
                      }}
                      showStartIcon={true}
                      startIcon={
                        <Icon81Icon
                          className={classNames(projectcss.all, sty.svg__ichS)}
                          role={"img"}
                        />
                      }
                    />
                  );
                })}
                <Paziresh24Button
                  children2={
                    <Icon124Icon
                      className={classNames(projectcss.all, sty.svg__auBOx)}
                      role={"img"}
                    />
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button__wlNh
                  )}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__aC61O)}
                      role={"img"}
                    />
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $$.copyToClipboard(
                                window.location.href + "&Share=true"
                              );
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "\u0644\u06cc\u0646\u06a9 \u0646\u062a\u06cc\u062c\u0647 \u06a9\u067e\u06cc \u0634\u062f.",
                              "bottom-left"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["runCode2"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if (navigator.share) {
                                  return navigator.share({
                                    title: "لیوم | تقویم قاعدگی",
                                    text:
                                      "نتیجه تست نامنظمی قاعدگی من:\n" +
                                      "\n برای مشاهده نتیجه تست قاعدگی خود\u060C به لینک زیر مراجعه کنید:\n",
                                    url: `${window.location.href}&Share=true`
                                  });
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode2"] != null &&
                      typeof $steps["runCode2"] === "object" &&
                      typeof $steps["runCode2"].then === "function"
                    ) {
                      $steps["runCode2"] = await $steps["runCode2"];
                    }
                  }}
                  size={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "compact"
                      : undefined
                  }
                  startIcon={null}
                />
              </Stack__>
            </section>
          ) : null}
          <Paziresh24Dialog
            data-plasmic-name={"dialog2"}
            data-plasmic-override={overrides.dialog2}
            body={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4Me8O)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gVnJr)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return [5, 4, 3, 2, 1];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <Stars
                        activ={(() => {
                          try {
                            return currentItem <= $state.rate;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        className={classNames(
                          "__wab_instance",
                          sty.stars__yNjou
                        )}
                        key={currentIndex}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateRate"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["rate"]
                                  },
                                  operation: 0,
                                  value: currentItem
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateRate"] != null &&
                            typeof $steps["updateRate"] === "object" &&
                            typeof $steps["updateRate"].then === "function"
                          ) {
                            $steps["updateRate"] = await $steps["updateRate"];
                          }
                        }}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                if (currentItem == 5) return "خیلی زیاد";
                                else if (currentItem == 1) return "نه اصلا";
                                else return "";
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </Stars>
                    );
                  })}
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__mApC)}>
                  {(() => {
                    const child$Props = {
                      autoSize: true,
                      className: classNames("__wab_instance", sty.textArea2),
                      disabled: (() => {
                        try {
                          return $state.disable;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["textArea2", "value"],
                          AntdTextArea_Helpers
                        ).apply(null, eventArgs);
                      },
                      placeholder:
                        "\u062e\u0648\u0634\u062d\u0627\u0644 \u0645\u06cc\u200c\u0634\u0645 \u0646\u0638\u0631\u062a\u0648 \u0628\u062f\u0648\u0646\u0645 ...",
                      value: generateStateValueProp($state, [
                        "textArea2",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "textArea2.value"
                        }
                      ],
                      [],
                      AntdTextArea_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdTextArea
                        data-plasmic-name={"textArea2"}
                        data-plasmic-override={overrides.textArea2}
                        {...child$Props}
                      />
                    );
                  })()}
                  {(() => {
                    try {
                      return $state.disable;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__c8Uan)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateDisable"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["disable"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateDisable"] != null &&
                          typeof $steps["updateDisable"] === "object" &&
                          typeof $steps["updateDisable"].then === "function"
                        ) {
                          $steps["updateDisable"] = await $steps[
                            "updateDisable"
                          ];
                        }
                      }}
                    />
                  ) : null}
                </div>
                <Paziresh24Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m9Tgg
                      )}
                    >
                      {"\u062b\u0628\u062a"}
                    </div>
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.paziresh24Button__aiJcb
                  )}
                  endIcon={
                    <ChevronLeftIcon
                      className={classNames(projectcss.all, sty.svg__sayga)}
                      role={"img"}
                    />
                  }
                  isDisabled={(() => {
                    try {
                      return $state.loadbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return $state.loadbtn;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateLoadbtn"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadbtn"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoadbtn"] != null &&
                      typeof $steps["updateLoadbtn"] === "object" &&
                      typeof $steps["updateLoadbtn"].then === "function"
                    ) {
                      $steps["updateLoadbtn"] = await $steps["updateLoadbtn"];
                    }

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "PUT",
                              "https://n8n.staas.ir/webhook/selfTest_comments",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    user_id: $ctx.query.user_id,
                                    session_id: $ctx.query.session_id,
                                    comment: $state.textArea2.value || "",
                                    rate: $state.rate
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["invokeGlobalAction2"] = $steps.invokeGlobalAction
                      ?.data?.success
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "success",
                              "\u062e\u06cc\u0644\u06cc \u062e\u0648\u0634\u062d\u0627\u0644 \u0634\u062f\u06cc\u0645 \u06a9\u0647 \u0646\u0638\u0631\u062a\u0648 \u0628\u0627\u0647\u0627\u0645\u0648\u0646 \u0628\u0647 \u0627\u0634\u062a\u0631\u0627\u06a9 \u06af\u0630\u0627\u0634\u062a\u06cc!"
                            ]
                          };
                          return $globalActions[
                            "plasmic-antd5-config-provider.showNotification"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateLoading2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loadbtn"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateLoading2"] != null &&
                      typeof $steps["updateLoading2"] === "object" &&
                      typeof $steps["updateLoading2"].then === "function"
                    ) {
                      $steps["updateLoading2"] = await $steps["updateLoading2"];
                    }

                    $steps["updateDialog2Open"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["dialog2", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDialog2Open"] != null &&
                      typeof $steps["updateDialog2Open"] === "object" &&
                      typeof $steps["updateDialog2Open"].then === "function"
                    ) {
                      $steps["updateDialog2Open"] = await $steps[
                        "updateDialog2Open"
                      ];
                    }
                  }}
                  startIcon={
                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg___7J47C)}
                      role={"img"}
                    />
                  }
                />
              </Stack__>
            }
            className={classNames("__wab_instance", sty.dialog2)}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["dialog2", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["dialog2", "open"])}
            title={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xrMfl
                )}
              >
                {
                  "\u0622\u06cc\u0627 \u0627\u0632 \u0646\u062a\u06cc\u062c\u0647 \u062a\u0633\u062a \u0631\u0627\u0636\u06cc \u0628\u0648\u062f\u06cc \u061f"
                }
              </div>
            }
            trigger={null}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "modal",
    "backgrond",
    "headerLiom",
    "timer",
    "buttonLiom",
    "collapse3",
    "buttonLiom2",
    "icons",
    "buttonLiom4",
    "apiRequest",
    "textArea",
    "dialog",
    "apiRequest2",
    "link",
    "h2",
    "paziresh24LineClamp",
    "cardSubtitle",
    "section",
    "dialog2",
    "textArea2"
  ],
  modal: ["modal", "backgrond"],
  backgrond: ["backgrond"],
  headerLiom: ["headerLiom"],
  timer: ["timer"],
  buttonLiom: ["buttonLiom"],
  collapse3: ["collapse3"],
  buttonLiom2: ["buttonLiom2"],
  icons: ["icons"],
  buttonLiom4: ["buttonLiom4"],
  apiRequest: ["apiRequest"],
  textArea: ["textArea"],
  dialog: [
    "dialog",
    "apiRequest2",
    "link",
    "h2",
    "paziresh24LineClamp",
    "cardSubtitle"
  ],
  apiRequest2: [
    "apiRequest2",
    "link",
    "h2",
    "paziresh24LineClamp",
    "cardSubtitle"
  ],
  link: ["link", "h2"],
  h2: ["h2"],
  paziresh24LineClamp: ["paziresh24LineClamp", "cardSubtitle"],
  cardSubtitle: ["cardSubtitle"],
  section: ["section"],
  dialog2: ["dialog2", "textArea2"],
  textArea2: ["textArea2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  modal: typeof AntdModal;
  backgrond: typeof Backgrond;
  headerLiom: typeof HeaderLiom;
  timer: typeof Timer;
  buttonLiom: typeof ButtonLiom;
  collapse3: typeof AntdSingleCollapse;
  buttonLiom2: typeof ButtonLiom;
  icons: typeof Icons;
  buttonLiom4: typeof ButtonLiom;
  apiRequest: typeof ApiRequest;
  textArea: typeof AntdTextArea;
  dialog: typeof Paziresh24Dialog;
  apiRequest2: typeof ApiRequest;
  link: "a";
  h2: "h2";
  paziresh24LineClamp: typeof Paziresh24LineClamp;
  cardSubtitle: "span";
  section: "section";
  dialog2: typeof Paziresh24Dialog;
  textArea2: typeof AntdTextArea;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicResult__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicResult__VariantsArgs;
    args?: PlasmicResult__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicResult__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicResult__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicResult__ArgProps,
          internalVariantPropNames: PlasmicResult__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicResult__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResult";
  } else {
    func.displayName = `PlasmicResult.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "3zKPdhWckw1SJpPYhK46Bs"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicResult = Object.assign(
  // Top-level PlasmicResult renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    backgrond: makeNodeComponent("backgrond"),
    headerLiom: makeNodeComponent("headerLiom"),
    timer: makeNodeComponent("timer"),
    buttonLiom: makeNodeComponent("buttonLiom"),
    collapse3: makeNodeComponent("collapse3"),
    buttonLiom2: makeNodeComponent("buttonLiom2"),
    icons: makeNodeComponent("icons"),
    buttonLiom4: makeNodeComponent("buttonLiom4"),
    apiRequest: makeNodeComponent("apiRequest"),
    textArea: makeNodeComponent("textArea"),
    dialog: makeNodeComponent("dialog"),
    apiRequest2: makeNodeComponent("apiRequest2"),
    link: makeNodeComponent("link"),
    h2: makeNodeComponent("h2"),
    paziresh24LineClamp: makeNodeComponent("paziresh24LineClamp"),
    cardSubtitle: makeNodeComponent("cardSubtitle"),
    section: makeNodeComponent("section"),
    dialog2: makeNodeComponent("dialog2"),
    textArea2: makeNodeComponent("textArea2"),

    // Metadata about props expected for PlasmicResult
    internalVariantProps: PlasmicResult__VariantProps,
    internalArgProps: PlasmicResult__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "لیوم | نتیجه تست",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicResult;
/* prettier-ignore-end */
